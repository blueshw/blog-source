{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/sublime-after.png","path":"img/sublime-after.png","modified":0,"renderable":0},{"_id":"source/img/sublime-before.png","path":"img/sublime-before.png","modified":0,"renderable":0},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491441251000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1491441251000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1491441251000},{"_id":"themes/huxblog/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1491441251000},{"_id":"source/_posts/2011-03-12-where-is-the-your-youth.html","hash":"ed4e612bb9123802a9716c5b0448523abf05f96e","modified":1491441251000},{"_id":"source/_posts/2011-04-13-learning-from-mountain.html","hash":"d998eaa49bfe1111a1fc69d0c31c2908b60add42","modified":1491441251000},{"_id":"source/_posts/2012-04-19-think-about-walking.html","hash":"4ae411125fa5a2ae987703ed0bc3be405dd135a9","modified":1491441251000},{"_id":"source/_posts/2012-05-09-need-conversation.html","hash":"074515050af87174b082ddf491372e7488d6063d","modified":1491441251000},{"_id":"source/_posts/2014-01-03-think-about-my-writing.html","hash":"432c38f5eabcc1b1538d2a414e96c06b54d6bf02","modified":1491441251000},{"_id":"source/_posts/2012-05-22-shaping-memories.html","hash":"d4efe55a662fcb917448cf368bc60cfac9d9a3c9","modified":1491441251000},{"_id":"source/_posts/2014-03-20-role-of-social-venture.html","hash":"fcea8243b4f645e067f348d015eb05c35b772a03","modified":1491441251000},{"_id":"source/_posts/2014-04-16-why-did-i-quit-a-job-in-architecture.html","hash":"318537055a0b726a975f016ec5715c1b41c8d1cd","modified":1491441251000},{"_id":"source/_posts/2014-10-06-from-architect-to-progammer-1.html","hash":"0d10503fffaa004ce556630fa70d8483f1f69a11","modified":1491441251000},{"_id":"source/_posts/2014-10-25-from-architect-to-progammer-3.html","hash":"01a3f12f76bb860fd48e56677ca800c17c207787","modified":1491441251000},{"_id":"source/_posts/2014-10-15-from-architect-to-progammer-2.html","hash":"649594caf505d6ac3d0c3ce5312ba803da1780c2","modified":1491441251000},{"_id":"source/_posts/2014-11-02-from-architect-to-progammer-4.html","hash":"5593040ebac782d87bedcf4c4f04e3a3899d6270","modified":1491441251000},{"_id":"source/_posts/2015-02-10-from-architect-to-progammer-5.html","hash":"65d9d5cf66dbdd3dad699be91ca5c9f24047082c","modified":1491441251000},{"_id":"source/_posts/2015-02-17-from-architect-to-progammer-6.html","hash":"b912deadbcf68d73864f42f296bbf79a2e434173","modified":1491441251000},{"_id":"source/_posts/2015-03-28-from-architect-to-programmer-7.markdown","hash":"bc0f6011ae6802aa7f1808a90830a19e053e45f1","modified":1491441251000},{"_id":"source/_posts/2015-06-29-remind-of-knou.markdown","hash":"b86517d996858f63554afd59530fad5601e3655d","modified":1491441251000},{"_id":"source/_posts/2016-01-16-django-migration.md","hash":"959ce4913e6a715091b4d3b7ecb5a09591055cc4","modified":1491441251000},{"_id":"source/_posts/2016-01-20-shallow-copy-deep-copy.md","hash":"63a8517986c4029721c381276688f537f97fc3d3","modified":1491441251000},{"_id":"source/_posts/2016-01-22-python-conditional-ternary-operator.md","hash":"6df297d22f553da817d7afc8f8228e73747c677d","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week1.markdown","hash":"fc82739500cd34149e541efce6edb0a49041ec98","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week2.markdown","hash":"fefddebd170c726aecf7d09cf4eadca6074b9be7","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week3.markdown","hash":"7bc4ecd5de2373708c12ac1a65056c9087336915","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week4.markdown","hash":"0e17e159ef8e790d6317ac053a16727cc9098cca","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week5.markdown","hash":"98648a10048498f1e5f9bc7224e341594fee335d","modified":1491441251000},{"_id":"source/_posts/2016-07-26-functional-programming-in-scala-week6.markdown","hash":"994fa012857ae4e11033ae171545d63c4d690098","modified":1491441251000},{"_id":"source/_posts/2016-08-18-frontend-javascript-framework-angularjs-week1.markdown","hash":"197708940fdb89e3fc8fc9525397689367b0a7c2","modified":1491441251000},{"_id":"source/_posts/2016-08-25-frontend-javascript-framework-angularjs-week2-1.markdown","hash":"21d874fb1141083357315301cf480f001fd50cea","modified":1491441251000},{"_id":"source/_posts/2016-08-28-frontend-javascript-framework-angularjs-week2-2.markdown","hash":"47e2242387954d707b335210762932bbb355d347","modified":1491441251000},{"_id":"source/_posts/2016-09-05-frontend-javascript-framework-angularjs-week3-2.markdown","hash":"f2280d760c1bcc3479ee3c54c333a7f6a5405f4c","modified":1491441251000},{"_id":"source/_posts/2016-09-02-frontend-javascript-framework-angularjs-week3-1.markdown","hash":"2143e48365f056aa4df5bd91ee99b95a4d4299e0","modified":1491441251000},{"_id":"source/_posts/2016-10-02-frontend-javascript-framework-angularjs-week4.markdown","hash":"66234c6dd38c95025237f6667ddecbb7358c08f1","modified":1491441251000},{"_id":"source/_posts/2016-11-16-ionic-install.markdown","hash":"d16a4a95e4973cdb8816463b50ff86e6968e5571","modified":1491441251000},{"_id":"source/_posts/ES-var-VS-const-VS-let.md","hash":"cd01eaa727106b693deadf224d533e91a3e42bf5","modified":1491441251000},{"_id":"source/_posts/2017-03-23-migration-packages-sublime-text-3.md","hash":"2fb07a70c0da85d0b41731599fd01cff3cf1eca7","modified":1491441251000},{"_id":"source/_posts/django-extend-view-using-mixin.md","hash":"1cb06aee1ce98293dcaaf632034c261219894d7b","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community.md","hash":"95fb8a5c4f734567c01f2e67b1d07dc738352467","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb.md","hash":"0360723c645937f6ec1cb87858443d79f010470a","modified":1491441251000},{"_id":"source/_posts/django-using-custom-templatetags.md","hash":"528b131b8cdea1bfa8a90985e458a02fa78b9d73","modified":1491441251000},{"_id":"source/_posts/django-virtual-env-setting-for-mac.md","hash":"7b875c371b69c4fd96c4b499f2b04c998f1392b7","modified":1491441251000},{"_id":"source/_posts/javascript-closure.md","hash":"78c967a4079947c30f40eb8b04fc4e14e3215ec8","modified":1491961663000},{"_id":"source/_posts/python-about-set.md","hash":"dd380f1f6d8667e2942cc28024463222f62decf2","modified":1491441251000},{"_id":"source/_posts/python-co-routine-vs-sub-routine.md","hash":"7d8d1758e52c5e675c411dc62308f06091c5b2bd","modified":1491441251000},{"_id":"source/_posts/python-import-by-class-name.md","hash":"ec6991bfa3eb102135598e44e78b4a9c1f3942b9","modified":1491441251000},{"_id":"source/archives/index.md","hash":"1eeb537c354633c09286d41a1d7212e92e7b8dfa","modified":1491441251000},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1491441251000},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1491441251000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1491441251000},{"_id":"source/about/index.md","hash":"0c46e5b11f54fd030221802e5112b6c51809b2ac","modified":1491441251000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1491441251000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1491441251000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1491441251000},{"_id":"themes/huxblog/layout/about.ejs","hash":"fd6cec3043700fb3a6d852868e628f8189f0d32f","modified":1491441251000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1491441251000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"1816a51d7408796834c0da6dd5ccd42496b386fc","modified":1491441251000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1491441251000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"ce3dbef31825b799e927ffc5c36a949e49e13846","modified":1491441251000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1491441251000},{"_id":"themes/huxblog/layout/page.ejs","hash":"193c710b211a6037665c8c36adf4be622152765f","modified":1491441251000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1491441251000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1491441251000},{"_id":"source/img/contact-bg.jpg","hash":"b2f1c02066a0f9df48c81b9a4a0987e6a7a2ce85","modified":1491441251000},{"_id":"source/img/sublime-after.png","hash":"258debf0629dac538207fbaf61230932f16456f9","modified":1491441251000},{"_id":"source/img/sublime-before.png","hash":"e5e136c8d664f6d80cdaf21cb7a961aa69807096","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-01.jpg","hash":"4f9ed0d2e7f788f0404f3d6acd0ba9fb87bf6964","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-02.jpg","hash":"9e23833692e0e7b02fea714411598e25fae95111","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-04.jpg","hash":"b2cc045e3fefa02878ff119b31fa89941d1deeb9","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-05.jpg","hash":"00bf97104d07ecabf203a39190de292f29dab3df","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-06.jpg","hash":"1f5c7956c719086c641fe3f55b6f126f6aa30261","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-07.jpg","hash":"1e6a91d50bb199e608410fc1aa5bed8cb2d10887","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-08.jpg","hash":"cbe7f8eda425e3537e4a99491accf19603f00357","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-09.jpg","hash":"0c3afd35245446dc24a8448d641eebde7f2c08e5","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-10.jpg","hash":"24783dc10e658eb68750198177a06920de98e6a1","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/3.jpg","hash":"1b7b6f8088a3d8257698797c8409429207f5e7a3","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/4.jpg","hash":"67cd2d80f11deb6fd4902f16ad473c9c11e7b8c7","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/1.jpg","hash":"c390e0e0151914d85979de9b463433fcb7100ebb","modified":1491441251000},{"_id":"source/img/about-bg.jpg","hash":"c1337d7307e476e12558dfaa7da4c386cf68c3ce","modified":1491441251000},{"_id":"source/img/404-bg.jpg","hash":"c1337d7307e476e12558dfaa7da4c386cf68c3ce","modified":1491441251000},{"_id":"source/img/home-bg-o.jpg","hash":"0aa9687f995e17f10048f8fccd2c43cfc9792a98","modified":1491441251000},{"_id":"source/img/home-bg.jpg","hash":"0aa9687f995e17f10048f8fccd2c43cfc9792a98","modified":1491441251000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"62ee7ab7c8ae24f59769120b5d721d50a920c27d","modified":1491441251000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"f2efa757c38403242e1daf18275506c87de498e0","modified":1491966481000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"6e0be6759395fb7adf12ae3963b8dc86cbb07f84","modified":1491441251000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1491441251000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1491441251000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1491441251000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1491441251000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1491441251000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1491441251000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1491441251000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1491441251000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1491441251000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1491441251000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"1144e8e6ff60debe418e0b10d7d5f65ba10e2c54","modified":1491441251000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1491441251000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1491441251000},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-03.jpg","hash":"7aaef55790e8d761ca34da8f341244f034be0257","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/5.jpg","hash":"71aeea1f5fa9eef5272d0a54192e124b7b15b4b3","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/2.jpg","hash":"496261ce322b74267cdefc2a3c804bc0400fcb0b","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/6.jpg","hash":"8c6e61f74766c267ae81917dcdfce80d2bf65fe4","modified":1491441251000},{"_id":"source/_posts/django-unit-test-without-testdb/7.jpg","hash":"903ed09034d8ee22d2211e671fa475e4c94fc485","modified":1491441251000},{"_id":"source/img/tag-bg.jpg","hash":"f67a455b31e897fe0de157d9edd1f018b5485be7","modified":1491441251000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1491441251000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1491441251000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1491441251000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491441251000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1491441251000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1491441251000},{"_id":"public/img/avatar.jpg","hash":"0287ff15f8677c12014adc0cf433212f02e30418","modified":1491966504647},{"_id":"public/img/icon_wechat.png","hash":"5f98eee661aceeb27f6c3192b55303d0521085e2","modified":1491966504648},{"_id":"public/img/contact-bg.jpg","hash":"a586db57a28ddfa0d52e471d0bddabc404d33e14","modified":1491966514434},{"_id":"public/img/sublime-after.png","hash":"729b5d761d040148b28ede0d6c98456a73c3f903","modified":1491966514435},{"_id":"public/img/sublime-before.png","hash":"e5fd2fa14bb462df551221bb027128cb5a70aee3","modified":1491966514884},{"_id":"public/img/about-bg.jpg","hash":"c4efaad5a2fda9903d1d23cffe99b6898bd75e0d","modified":1491966514884},{"_id":"public/img/404-bg.jpg","hash":"c4efaad5a2fda9903d1d23cffe99b6898bd75e0d","modified":1491966514886},{"_id":"public/img/home-bg-o.jpg","hash":"f2943223d1e7d534fdcf1f1d2b468c655663a2ea","modified":1491966514886},{"_id":"public/img/home-bg.jpg","hash":"f2943223d1e7d534fdcf1f1d2b468c655663a2ea","modified":1491966514886},{"_id":"public/img/tag-bg.jpg","hash":"c98ba07a1f0643fce30a835bd3776554f3e6d896","modified":1491966514886},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"f70e244175be4f96a237a748577f28f39dd3c7cb","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/1.jpg","hash":"f7055b1708d4718f5cd11dbddd1c0a3882e3f654","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/2.jpg","hash":"198dc630946a5d2ebe591a885a927d0f90136e27","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/3.jpg","hash":"1fe34cd64bf76ecef248a6ab638af7b7a000d90d","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/4.jpg","hash":"99a1f9116fcfad8464ad9045fe02f2753fb93b37","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/5.jpg","hash":"8753cbac32057cda5e6cf4ba5cc8fdfd67f0ba8e","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/6.jpg","hash":"10225d54ca02536d902d2f01aa1da9fd3a03277b","modified":1491966514886},{"_id":"public/2016/03/06/django-unit-test-without-testdb/7.jpg","hash":"d7bb4217cabd4927520857f44d596a63365b7ef0","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-01.jpg","hash":"33a86108b965553c93be1e1c6d7e10773bed16e7","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-02.jpg","hash":"584bb5c0cad552f1bd8740284e9bbf164b48f278","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-03.jpg","hash":"0ae95c23fe92f381f2d575555643f962ad662ad9","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-04.jpg","hash":"3f673e3ba1fcfadb0aaef84b215af17409654567","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-05.jpg","hash":"7af5348b73c54cf1b49dbccdac280e0f040a222a","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-06.jpg","hash":"d2a6ed7d56dd4a2b937966c4bee2dda291dd064e","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-07.jpg","hash":"aacbcaad5a8ad4828caa338b73fa49aa9e8bee2d","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-08.jpg","hash":"0d9258d4856d1fd24a5825bb7af1939090c36a2c","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-09.jpg","hash":"9b403fa05064d9ec5ba8413bb520c28b5fd3036d","modified":1491966514887},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/django-setting-10.jpg","hash":"ad71349de9efa43d420bb7745ad09d7c22ffc267","modified":1491966514887},{"_id":"public/404.html","hash":"743a044a07786b945d695a6d835facf569c8280f","modified":1491966514903},{"_id":"public/archives/index.html","hash":"f1a2706a16180e6725eee01ef7372ec21415c7ce","modified":1491966514903},{"_id":"public/2017/04/12/javascript-closure/index.html","hash":"8005e26bacbbe886e00fe152b8aa02851e47d4cf","modified":1491966514903},{"_id":"public/2017/03/23/2017-03-23-migration-packages-sublime-text-3/index.html","hash":"7abd386606cdd1be2fb61727735c135bd7bd2eff","modified":1491966514903},{"_id":"public/2016/11/16/2016-11-16-ionic-install/index.html","hash":"48356427316a5c5b14d8c0efa719a011f470cdec","modified":1491966514903},{"_id":"public/2016/03/06/django-unit-test-without-testdb/index.html","hash":"1bc2effd834665a8d8356c5c3fe6d5b7dad331bc","modified":1491966514903},{"_id":"public/2016/03/01/django-virtual-env-setting-for-mac/index.html","hash":"764823f257a87689e3a8f8aab9f0adf42b5de37d","modified":1491966514903},{"_id":"public/2016/02/28/python-about-set/index.html","hash":"68955bd1748a7fd64fbfb2547014b38e887f71d5","modified":1491966514903},{"_id":"public/2016/02/24/python-import-by-class-name/index.html","hash":"b4dfae74daaf25284533b0c4d538432d01d1727a","modified":1491966514903},{"_id":"public/2016/02/02/django-setting-for-pycharm-community/index.html","hash":"9d260d2d201eebd12186750487961f68d3318ec6","modified":1491966514903},{"_id":"public/2016/01/25/python-co-routine-vs-sub-routine/index.html","hash":"8830fafa659ca116efd7a91008acc267cf30052c","modified":1491966514903},{"_id":"public/2016/01/22/2016-01-22-python-conditional-ternary-operator/index.html","hash":"4c6e17ab26aa8b08b949b538cfd43d56d771ce5e","modified":1491966514903},{"_id":"public/2014/11/01/2014-11-02-from-architect-to-progammer-4/index.html","hash":"f178ef45dd53dd960ac04efb50e299b7eb821471","modified":1491966514903},{"_id":"public/2014/10/25/2014-10-25-from-architect-to-progammer-3/index.html","hash":"be270c1842fc2d310e7da52253e766571a0210cb","modified":1491966514903},{"_id":"public/2014/04/16/2014-04-16-why-did-i-quit-a-job-in-architecture/index.html","hash":"7fdcc40afde3b5d3f1f12a028887b40b712bbbdc","modified":1491966514903},{"_id":"public/2014/03/20/2014-03-20-role-of-social-venture/index.html","hash":"dc05c0c54467a36977945c026354cf8c86788a8d","modified":1491966514903},{"_id":"public/2014/01/02/2014-01-03-think-about-my-writing/index.html","hash":"ac4151059fe8d88f0de2170ace53cda4ccd6cfe7","modified":1491966514903},{"_id":"public/2012/05/22/2012-05-22-shaping-memories/index.html","hash":"0d88b038488be198e7ca0fae59771e90d7dec0cd","modified":1491966514904},{"_id":"public/2012/05/09/2012-05-09-need-conversation/index.html","hash":"2cccd165ae51610951172c5d1ae796986cae911a","modified":1491966514904},{"_id":"public/2011/04/13/2011-04-13-learning-from-mountain/index.html","hash":"bdd32ef35745c677224fc7de09330a293609bc1e","modified":1491966514904},{"_id":"public/2011/03/11/2011-03-12-where-is-the-your-youth/index.html","hash":"d078bcc93daa491685188910cafcf333b8c1cf52","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"167a6dc89c54c8fea1defed18524b01d9751d739","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/page/2/index.html","hash":"520bd515e497cfbfcfc19683c5184f663c9ee2c1","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/page/3/index.html","hash":"dff799133b41902e77de1bc893327adc3268393e","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/page/4/index.html","hash":"10e7f154b0c5b307a8df8fbd305e67b14cdb3fc1","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/page/5/index.html","hash":"e9f0e0ebf3656a1095400bdbfb2f6f1662ba73be","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2011/index.html","hash":"f93b33d5bab4953b4395c53d1a8e8b0965aaf4cf","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2011/03/index.html","hash":"e67dad6bdf7afb2f4eadab66d9dc555ca225b941","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2011/04/index.html","hash":"8b80e03edec2be11806314b4af2f4e803c057ae2","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2012/index.html","hash":"47541feae677931cbb365a35e66062898b9bf3d8","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2012/04/index.html","hash":"a89734f0ad386e14b922ec8c115d67f1bc4d676f","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2012/05/index.html","hash":"eb5761606f7331f808d2db01b078480602d81cdd","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2014/index.html","hash":"3af43c79c320eb69d8f1d2736a61e2c3144c6774","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2014/01/index.html","hash":"18e6b8168188c803a2e9dc15d5c49f5be8d3e531","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2014/03/index.html","hash":"81564545e7d2162e12990efa7339c2891442a14e","modified":1491966514904},{"_id":"public/i_dont_wanna_use_default_archives/2014/04/index.html","hash":"6d1234247dbecea777d1dffb5177630998d70dd4","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2014/10/index.html","hash":"f90f58a74e7e7e7ca6c1564cf1e258c6fe9404c4","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2014/11/index.html","hash":"e3818d66539fdf50a6bba9b539270ffe55c1e852","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2015/index.html","hash":"c4d38fa1d836711492b14afc0e8781d6d8aa7e36","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2015/02/index.html","hash":"090f3c545706523668b2bda0710e8034d7d900d4","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2015/03/index.html","hash":"e60fc9c770ca98afd6bdb02b991d7790f74cd0df","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2015/06/index.html","hash":"150eec51539b435462e300ade03a7c09d70731ba","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"f761d823266ad516a1caf0f0e4f9d1ab31ef5158","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/page/2/index.html","hash":"b52403e5970dcdcd129897d690c6197be5c15c1b","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/page/3/index.html","hash":"bb1533c8bfdde697715814dee0076cc7ca81bb96","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/01/index.html","hash":"4a4932289c3eb9daced1434b9bf59f1792c3df2f","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/02/index.html","hash":"a064713f32315f29c3f79d3c6e198d5a81a1edb1","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/03/index.html","hash":"95ab5139e67a658c324dff986cd744d02b4c2e8a","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/07/index.html","hash":"7e382934ec7a615e0f98568f46a55003abb38c10","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/08/index.html","hash":"1e7452f65a05b22e2671e1a95a158bd53f9c6169","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/09/index.html","hash":"0ac945d1f093ae32ce474e3e8485a3c8d23143d7","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/10/index.html","hash":"1d3ea890964d4e487b774abaafb92d0679014379","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2016/11/index.html","hash":"6cc1fb2559d76d49498a70a271693447172e21db","modified":1491966514905},{"_id":"public/i_dont_wanna_use_default_archives/2017/index.html","hash":"81eab5dfdbf466cbebe1130922bef0e68c532f46","modified":1491966514906},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/index.html","hash":"c07b9a67cc233118d19dde38f79e885b37823771","modified":1491966514906},{"_id":"public/i_dont_wanna_use_default_archives/2017/04/index.html","hash":"df4aa8b7c46eeb31db8369b2675195b985797627","modified":1491966514906},{"_id":"public/categories/essay/index.html","hash":"d683d9a1ee42c4c1eb29cd5b0851df413532a24c","modified":1491966514906},{"_id":"public/categories/essay/page/2/index.html","hash":"2b36e9fbf2d48c455b5df34eb06b87806616fa6c","modified":1491966514906},{"_id":"public/categories/THOUGHT/index.html","hash":"83fc84c3f50ca10ea874cb2af81d2031f3e98bd5","modified":1491966514906},{"_id":"public/categories/programming/index.html","hash":"6e75f5ddd5f5bfeff4560c87e81a4bce69b8cfee","modified":1491966514906},{"_id":"public/categories/programming/page/2/index.html","hash":"2495bde4c077b9c543c29a3396783375a4f962fd","modified":1491966514906},{"_id":"public/categories/tool/index.html","hash":"9998ff11cf9954f792160a31575e7320a86c2c6d","modified":1491966514906},{"_id":"public/tags/이어령/index.html","hash":"546b51c9b6e146b9ecd796793974d8fb1d32a678","modified":1491966514906},{"_id":"public/tags/젊음/index.html","hash":"7a3e8bcb7583fb0358051f57fcd9522683a36e10","modified":1491966514906},{"_id":"public/tags/젊음의-탄생/index.html","hash":"a9f228694c0a7bafb8b5d772f4095b7d4d9b8af5","modified":1491966514906},{"_id":"public/tags/등산/index.html","hash":"c7263d823d773bb4813a883e5ccc6a04a5648b50","modified":1491966514906},{"_id":"public/tags/비로봉/index.html","hash":"9d9d649df8b327f47226bc545b83ac64d881068f","modified":1491966514906},{"_id":"public/tags/산/index.html","hash":"3109a6700a3d2f8767b1400524acd10b05cfd08c","modified":1491966514906},{"_id":"public/tags/원주/index.html","hash":"83d9aa3de1969b2d26ee9e354160923b237e9668","modified":1491966514906},{"_id":"public/tags/치악산/index.html","hash":"1c316ece089a4f0539b3c818677a21c942b3a1c2","modified":1491966514907},{"_id":"public/tags/걸음/index.html","hash":"e41382fd2eff4a788d65f23a2048812a7ed9278f","modified":1491966514907},{"_id":"public/tags/관계/index.html","hash":"658169251aabf5eaeaae81a4c0caced5ef247864","modified":1491966514907},{"_id":"public/tags/도보/index.html","hash":"2deb3e6165788049b10080d5a3dfad522282fe1e","modified":1491966514907},{"_id":"public/tags/대화/index.html","hash":"9ea6128738d64cc8d151bc905ff54cd5b52f9f13","modified":1491966514907},{"_id":"public/tags/문자/index.html","hash":"8214a4322359f2a72f403ff0221f68bbe0ff6def","modified":1491966514907},{"_id":"public/tags/의사소통/index.html","hash":"4cbdf1c8168714220cef667e78012d392393f156","modified":1491966514907},{"_id":"public/tags/기억/index.html","hash":"de72b263949f2de693b9d518ef83e9867ef2e1a7","modified":1491966514907},{"_id":"public/tags/도보여행/index.html","hash":"c41ee91e288811e521bf61cf626b21c6d85a976a","modified":1491966514907},{"_id":"public/tags/여행/index.html","hash":"a107470134e35265dfcbf24c338df70577f4010a","modified":1491966514907},{"_id":"public/tags/추억/index.html","hash":"bf587d5117d17800fa59152718f008597a9ac105","modified":1491966514907},{"_id":"public/tags/형상화/index.html","hash":"c831c87f637e81c3757f4bfcf4463f684dcffb57","modified":1491966514907},{"_id":"public/tags/architecture/index.html","hash":"334fec2a328dfd333cad37f2c935e87784ec603f","modified":1491966514907},{"_id":"public/tags/건축/index.html","hash":"7046df13adbdbab85af4cf804b1239b0d532ac86","modified":1491966514908},{"_id":"public/tags/설계/index.html","hash":"ce4d307f71ffdbf2b3c807cf676462f6931b8f11","modified":1491966514908},{"_id":"public/tags/박원순/index.html","hash":"af8d69ea75b20aabacca86dcc7217656175ac455","modified":1491966514908},{"_id":"public/tags/사회적-기업/index.html","hash":"d58e8dbcd6db7d2f7ae1a0e48f01a0a2cbfd5090","modified":1491966514908},{"_id":"public/tags/올리버/index.html","hash":"c682c5d987326572cfd2bda123b1621173412eb0","modified":1491966514908},{"_id":"public/tags/arcitecture/index.html","hash":"453903a98dc5b7108fa37085659fb1d64f8b7e26","modified":1491966514908},{"_id":"public/tags/programmer/index.html","hash":"91678399c3156ef62eb1f581e097e5412c95d22c","modified":1491966514908},{"_id":"public/tags/개발/index.html","hash":"c61bca68a6e16c6d6e1e35aae3a3bf91ec37b71c","modified":1491966514908},{"_id":"public/tags/건설/index.html","hash":"1af9947ba5b22ac123ae69dfa2963b08301a6072","modified":1491966514909},{"_id":"public/tags/대학/index.html","hash":"8ca078c3dd5c9a5ea36b6f9bd97c81aa4d7294eb","modified":1491966514909},{"_id":"public/tags/미래/index.html","hash":"dd5961bca87ffa811907c392eed20d7ea8ef66be","modified":1491966514909},{"_id":"public/tags/직업/index.html","hash":"fa55aac0ddfd7fbd4596dd210b4d5c87e661f8b1","modified":1491966514909},{"_id":"public/tags/프로그래머/index.html","hash":"aa9a092db078cfb00e4b74e3495748c279c0ff97","modified":1491966514909},{"_id":"public/tags/HTML/index.html","hash":"bfe2b250dc24ebb1a0e0c58e72ee3247997d0aac","modified":1491966514909},{"_id":"public/tags/IT/index.html","hash":"90a83f0203a352fa555324bd1ce96c2b32b91c7a","modified":1491966514909},{"_id":"public/tags/블로그/index.html","hash":"d39f2f0cb3f3cd81deb7cc0a490d27515000a9bc","modified":1491966514909},{"_id":"public/tags/워드프레스/index.html","hash":"888cd300ac40d68f4b11ec05ca13b88855ebc5ae","modified":1491966514909},{"_id":"public/tags/티스토리/index.html","hash":"5fe51da77744961ece0a7bcad58927f73e6f62a3","modified":1491966514909},{"_id":"public/tags/프로그래밍/index.html","hash":"1f3143fd28c3b05d2b4866894e78efef8423b4ce","modified":1491966514909},{"_id":"public/tags/학원/index.html","hash":"7f64a04913b7ff59472cb3065c4723e87ecf4dbf","modified":1491966514909},{"_id":"public/tags/개발자/index.html","hash":"f8d425d6434e84500783597465057640291c7430","modified":1491966514909},{"_id":"public/tags/사업/index.html","hash":"eba0802727048392bff1b15bc348f1c2876e9ac8","modified":1491966514909},{"_id":"public/tags/사회적기업/index.html","hash":"ae6cd019d9141713c9b6e6d6c7dbff8bc35581d8","modified":1491966514909},{"_id":"public/tags/계좌제/index.html","hash":"91c30332ec7ec2fb3a5a457b5c087c7386f6d90f","modified":1491966514910},{"_id":"public/tags/내일배움카드제/index.html","hash":"b3f27ffcd7e3ad53c9860063dc172c528c21307e","modified":1491966514910},{"_id":"public/tags/모바일/index.html","hash":"8a0dd4ca278145f3fda2fdade22f4b770d29dfdb","modified":1491966514910},{"_id":"public/tags/아이폰/index.html","hash":"3abdb35f82bbe9cb0d8aa31d70d86560cd5571a7","modified":1491966514911},{"_id":"public/tags/안드로이드/index.html","hash":"6fe2f2eff968c7b89f9f23c9f38f77a07d8a9da3","modified":1491966514911},{"_id":"public/tags/자바/index.html","hash":"ce20f18e04a74e5b68943f4b86e40c529e86dd27","modified":1491966514911},{"_id":"public/tags/강의/index.html","hash":"a5531b7fb8a6fbf8b824a91e51731ae56a17b605","modified":1491966514911},{"_id":"public/tags/T아카데미/index.html","hash":"6f24eee842ab5341ed2579ffc95eedc3f201904f","modified":1491966514911},{"_id":"public/tags/면접/index.html","hash":"5796a88ec9343672792b1b0916ad7848fd6997b7","modified":1491966514911},{"_id":"public/tags/에코노베이션/index.html","hash":"1fa2c6b9f9b87961a02ede826fe7ae0fe59efc19","modified":1491966514911},{"_id":"public/tags/python/index.html","hash":"6bb228d75fc328162aa989a493b153f9e1230b3a","modified":1491966514911},{"_id":"public/tags/python/page/2/index.html","hash":"3af7c9b22d30c81a3fbc1561a5341dc70c14055a","modified":1491966514911},{"_id":"public/tags/django/index.html","hash":"f97c9067ae250308f4c07b401d4da561047dcfab","modified":1491966514911},{"_id":"public/tags/transaction/index.html","hash":"7b9284e1b3b78203ef39457a9c73eb8415e64058","modified":1491966514911},{"_id":"public/tags/deep-copy/index.html","hash":"f061429396eda93313da12adfbc1c9115ff238c6","modified":1491966514911},{"_id":"public/tags/conditional-ternary-operator/index.html","hash":"81fa2b0707d66ae4e258c9cacfb23ef7b3c9eb36","modified":1491966514911},{"_id":"public/tags/3항-연산자/index.html","hash":"eb00d431a62fdf4c20daec183a0b38a2e9b5da57","modified":1491966514911},{"_id":"public/tags/scala/index.html","hash":"591216347e1ff82e8dfe497864b22deb7a050131","modified":1491966514911},{"_id":"public/tags/coursera/index.html","hash":"396881c3dc69a3c09554e7b94e9234964eae6486","modified":1491966514911},{"_id":"public/tags/coursera/page/2/index.html","hash":"2bd044cc9f9d3e526d180c93feaa3bb7d2951868","modified":1491966514911},{"_id":"public/tags/angularjs/index.html","hash":"cb1f014d613f475e7818920b033ebf3182b3995e","modified":1491966514912},{"_id":"public/tags/javascript/index.html","hash":"15863d6d95da40528bc097238e4e0178bbf50c1d","modified":1491966514912},{"_id":"public/tags/ionic/index.html","hash":"070e69de2b442fa01f4e1c2fa4c3bd2a62700d38","modified":1491966514912},{"_id":"public/tags/모바일앱/index.html","hash":"e3605de3e09e5f29dd4ea92bc76a5275cbac2a2a","modified":1491966514912},{"_id":"public/tags/SublimeText/index.html","hash":"e49398489e4fbf98ce396847daa0340dbcb32405","modified":1491966514912},{"_id":"public/tags/tool/index.html","hash":"f518d31de49296a49ae54863d9d19a26fa46bc38","modified":1491966514912},{"_id":"public/tags/ES6/index.html","hash":"871d417323c4fa4b7c1a05bb878c94c8d6f08cb3","modified":1491966514912},{"_id":"public/tags/var/index.html","hash":"3b9648a3e2d515df769f2e9317d6ce5027f1d91d","modified":1491966514912},{"_id":"public/tags/const/index.html","hash":"b59f95417118782c91bfaaa28345bd10606adf49","modified":1491966514912},{"_id":"public/tags/let/index.html","hash":"8b88980929a32e61db55c54f9524c24a5349a834","modified":1491966514912},{"_id":"public/tags/mixin/index.html","hash":"efedc22bfa72735ad164ddac9dba0784ea9cdae9","modified":1491966514912},{"_id":"public/tags/pycharm/index.html","hash":"d4de1b8aabddd4dda41c4aaea9db90bbf900985d","modified":1491966514912},{"_id":"public/tags/unit-test/index.html","hash":"84b6e22e5b67531d4ce6cd69282c2e256ac28f17","modified":1491966514912},{"_id":"public/tags/templatetags/index.html","hash":"156f8b366b86e52906de09c7bafc9c43276af992","modified":1491966514912},{"_id":"public/tags/pyenv/index.html","hash":"f428040a2115fe30e3be5df32093ab933752de09","modified":1491966514912},{"_id":"public/tags/virtualenv/index.html","hash":"66e2846c224167caeb9f23e17ffd57415ce58a55","modified":1491966514912},{"_id":"public/tags/closure/index.html","hash":"e611af65933d09ecf5d54df70990cbe765a89c36","modified":1491966514912},{"_id":"public/tags/set/index.html","hash":"a49f8851db448e4a203a25601bd4bf256b903144","modified":1491966514913},{"_id":"public/tags/co-routine/index.html","hash":"e84307036869a68afa39f0af16f42d2ebd449267","modified":1491966514913},{"_id":"public/tags/module/index.html","hash":"bb201a056bcfee87d4ef4182b80e74cc32d27c36","modified":1491966514913},{"_id":"public/about/index.html","hash":"445b51955244b93bc7a4cad48994a1004d47bc67","modified":1491966514913},{"_id":"public/index.html","hash":"6088daf01659bb64adb5127ef80fab58c5b03489","modified":1491966514913},{"_id":"public/page/2/index.html","hash":"71c94a7561c46178d5046acd0386c656ce7ee78f","modified":1491966514913},{"_id":"public/page/3/index.html","hash":"3e3ceb386f62f4b04b90423fd79a810dfd4810ff","modified":1491966514913},{"_id":"public/page/4/index.html","hash":"d4f8f2d3bcb2a0c577d9fd06fbd134bf85f129c2","modified":1491966514913},{"_id":"public/page/5/index.html","hash":"30dc634e5586acfd728272f5c759c03500252bf4","modified":1491966514913},{"_id":"public/tags/index.html","hash":"6b2dd413f5107a41c04e98dea5a188e4e2a3dd41","modified":1491966514913},{"_id":"public/2017/03/28/ES-var-VS-const-VS-let/index.html","hash":"92582a7383cba52d2ff55c32f3aa46a2c79ce707","modified":1491966514913},{"_id":"public/2016/10/02/2016-10-02-frontend-javascript-framework-angularjs-week4/index.html","hash":"84ec1b381682aa631ca8c41eb85543dfde359c91","modified":1491966514913},{"_id":"public/2016/09/05/2016-09-05-frontend-javascript-framework-angularjs-week3-2/index.html","hash":"429a8733d697f1e6949b2cc18ca12328a88887b2","modified":1491966514914},{"_id":"public/2016/09/02/2016-09-02-frontend-javascript-framework-angularjs-week3-1/index.html","hash":"490fef785a5d916a7e0e50ad46cd8ad4d3d7f334","modified":1491966514914},{"_id":"public/2016/08/28/2016-08-28-frontend-javascript-framework-angularjs-week2-2/index.html","hash":"732943b65d230b79ab33f7b54e7b2b7eb8ace77a","modified":1491966514914},{"_id":"public/2016/08/25/2016-08-25-frontend-javascript-framework-angularjs-week2-1/index.html","hash":"ce25551a05a9c9bbe555c484f62c0b7cd94225ac","modified":1491966514914},{"_id":"public/2016/08/18/2016-08-18-frontend-javascript-framework-angularjs-week1/index.html","hash":"fe9e0b0a8c99a91d494a580f25ba4a2c2a718f0d","modified":1491966514914},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week6/index.html","hash":"989c3890ba039ea63edd3e6675570f8478378971","modified":1491966514914},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week5/index.html","hash":"4bc886c7bbb1b8fab89dc4ca1cb7a168c54e93e8","modified":1491966514914},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week4/index.html","hash":"1aab6b6b50c14101cfa8e64c17cfdcba87dca04c","modified":1491966514914},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week3/index.html","hash":"ef969af1b40b535d0f9f98c315922548e67592d9","modified":1491966514915},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week2/index.html","hash":"d29e4a1dcb949ef2605936b3f685fcae92851869","modified":1491966514915},{"_id":"public/2016/07/26/2016-07-26-functional-programming-in-scala-week1/index.html","hash":"584d4ab579ea787467ed00f81a11f255e675f9fc","modified":1491966514915},{"_id":"public/2016/03/08/django-extend-view-using-mixin/index.html","hash":"c106897d163e520c0310991bbaaac90bf2116443","modified":1491966514915},{"_id":"public/2016/03/03/django-using-custom-templatetags/index.html","hash":"486584e7e9f89d2f501488cae9eeb1340f976551","modified":1491966514915},{"_id":"public/2016/01/20/2016-01-20-shallow-copy-deep-copy/index.html","hash":"c6530d4223953448c532d678af036ad8185b305d","modified":1491966514915},{"_id":"public/2016/01/16/2016-01-16-django-migration/index.html","hash":"bdc6a64f9eeba6a1e6bf0b3abf2e1a13550320ff","modified":1491966514915},{"_id":"public/2015/06/29/2015-06-29-remind-of-knou/index.html","hash":"335c0ca692f62987d8e76da9b3c496164e7135c9","modified":1491966514915},{"_id":"public/2015/03/28/2015-03-28-from-architect-to-programmer-7/index.html","hash":"861bb48b09f1132927c2f4de0e47c2644c836c26","modified":1491966514915},{"_id":"public/2015/02/17/2015-02-17-from-architect-to-progammer-6/index.html","hash":"cb8f6ba72bc10ba41f7e1737ff8874b58a012ca6","modified":1491966514916},{"_id":"public/2015/02/09/2015-02-10-from-architect-to-progammer-5/index.html","hash":"9649d9b8f1c5ee0f862a22b0404dbe364439d1e1","modified":1491966514916},{"_id":"public/2014/10/15/2014-10-15-from-architect-to-progammer-2/index.html","hash":"1e7be5ec1fcae3198f852d19a578873abe1f9ec2","modified":1491966514916},{"_id":"public/2014/10/06/2014-10-06-from-architect-to-progammer-1/index.html","hash":"f43653d747d1aa2cb786874605765997c9526ef6","modified":1491966514916},{"_id":"public/2012/04/19/2012-04-19-think-about-walking/index.html","hash":"1555e4724346bf3e7e0c5728fc44111341137451","modified":1491966514916},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1491966514930},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1491966514930},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1491966514930},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1491966514930},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1491966514930},{"_id":"public/js/hux-blog.js","hash":"99d6b17851a85d525b46ccaa6fb95631222ae79c","modified":1491966520289},{"_id":"public/js/hux-blog.min.js","hash":"99d6b17851a85d525b46ccaa6fb95631222ae79c","modified":1491966520289},{"_id":"public/js/jquery.nav.js","hash":"a9b87c224e69baeb048809e1ee607fcaf0e4f256","modified":1491966520292},{"_id":"public/js/jquery.tagcloud.js","hash":"38c0a58c7ceca9b6fec7f9bd03a542b826211110","modified":1491966520292},{"_id":"public/js/bootstrap.min.js","hash":"dde069481e383661dede8d6c88db93365be70979","modified":1491966520292},{"_id":"public/js/bootstrap.js","hash":"f947f4adde7884ecae8b4023fccd72f2b8239c55","modified":1491966520292},{"_id":"public/js/jquery.min.js","hash":"0be18331f0e3a64de3a94632c039fa00400c2592","modified":1491966520292},{"_id":"public/js/jquery.js","hash":"11d6480524635375aa1b56a3680681692d761e19","modified":1491966520292},{"_id":"public/css/highlight.css","hash":"2f6313fca4048820751e37d254ded522e6a69bcd","modified":1491966520297},{"_id":"public/css/hux-blog.css","hash":"da4bb725f6fca36ad9e70eb287fa55ef5d2b8116","modified":1491966520297},{"_id":"public/css/hux-blog.min.css","hash":"82c8bca96fc34dd90daf921d50b504cfbfb950e3","modified":1491966520297},{"_id":"public/css/bootstrap.min.css","hash":"690a1a24946878060010d58b1582b2c521260841","modified":1491966520297},{"_id":"public/css/bootstrap.css","hash":"2ee28948a5c55b27331b198ff18151d6f22e605e","modified":1491966520297}],"Category":[{"name":"essay","_id":"cj1eebv5t0003wxt4r8jkccr4"},{"name":"THOUGHT","_id":"cj1eebv6g000jwxt40uo8ah8y"},{"name":"programming","_id":"cj1eebv76001kwxt4joe3cjrb"},{"name":"tool","_id":"cj1eebv7x002mwxt49091agmz"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-04-12T02:54:01.000Z","updated":"2017-04-06T01:14:11.000Z","path":"404.html","title":"","comments":1,"_id":"cj1eebv4b0000wxt4jyvo9hij","content":"","excerpt":"","more":""},{"layout":"archives","title":"Archives","description":"this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-04-12T02:54:01.000Z","updated":"2017-04-06T01:14:11.000Z","path":"archives/index.html","comments":1,"_id":"cj1eebvcv00akwxt4rrqj8rgk","content":"","excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-03-02T16:30:33.000Z","description":"about me","header-img":"img/about-bg.jpg","comments":1,"_content":"\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-03-03 01:30:33\ndescription: \"about me\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n","updated":"2017-04-06T01:14:11.000Z","path":"about/index.html","_id":"cj1eebvd300alwxt4ejtf09ng","content":"","excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-04-12T02:54:01.000Z","updated":"2017-04-06T01:14:11.000Z","path":"tags/index.html","comments":1,"_id":"cj1eebvd500anwxt45s7lun33","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","comments":1,"title":"당신의 젊음은 어디에 있습니까?","date":"2011-03-11T07:16:12.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_wpas_done_all":"1","_thumbnail_id":"317","_aioseop_keywords":"젊음, 젊음의 탄생, 이어령","_aioseop_title":"당신의 젊음은 어디에 있습니까?","dsq_thread_id":"2837686131"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"text-align: justify;\">일반적으로 20대에 접어든 사람들을 두고 젊은 사람이라고 말합니다. 그리고 10대의 청소년들을 두고는 어리다고 말하지요. 30대가 지난 40에 접어들면 혹하지 아니한다는 '불혹'에 접어듭니다. 그 이후로는 말할 것도 없이 젊음과는 거리가 멀지요. 10대 동안 자라 20대가 되어 완성된 우리의 몸을 두고 바로 젊다고 말합니다. 물론 지금 제가 말하고 있는 '젊음'은 신체에 관한 것입니다.</p>\n<p style=\"text-align: justify;\">젊음은 인생에서 꼭 한번씩 찾아옵니다. 그 어떤 사람이라도(희귀한 질병을 가진 사람은 제외하고) 평등하게 딱 시절만 젊음을 누릴 수 있습니다. 누가 돈이 많고 누가 가난하더라도 젊음에 있어서 만큼은 평등하지요. 아무리 많은 돈을 주어도 살 수가 없는 것입니다. 그렇다면 우리는 인생에 딱 한번만 누릴 수 있는 이 젊음의 시기를 과연 어떻게 보내고 있을까요?</p>\n<p style=\"text-align: justify;\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/사진_004.jpg\"></p>\n<p><img class=\"aligncenter size-full wp-image-317\" alt=\"사진_004\" src=\"{{ site.baseurl }}/assets/&#49324;&#51652;_004.jpg\" /></p>\n<p></a></p>\n<p style=\"text-align: justify;\">올해 78을 맞으신 이어령 전 문화부장관의 2010년작 '젊음의 탄생'입니다. 거의 삶의 끝자락에 다가가고 있는 이어령 선생님께서는 어째서 젊음의 '탄생'이라는 책을 쓰게 됐을까요? 자신이 살아온 날을 돌아보며 자신이 젊었을 당시의 사고방식과 젊음을 대하는 태도를 지금 막 태어나는 수많은 젊음들을 위해 선배로서 한마디 해주고 싶었겠지요. 혹은 현 시대 대한민국의 젊지않은 젊음들을 바라보며 따끔한 한마디의 충고일지도 모릅니다. 하지만 이 책은 젊은 신체를 가진 젊은 사람들에게 전하는 메세지 이상의 것이 있습니다. 바로 어떤 신체를 가졌느냐가 아니라 어떠한 마음가짐과 정신을 가졌느냐에 따라 젊음이 탄생한다는 것입니다.</p>\n<p style=\"text-align: justify;\">이 시대의 청소년과 청년들은 모두 하나의 목표를 가지고 살아갑니다. 초중고 시절에는 어떤 대학을 갈것인가가 인생 최대의 목표입니다. 하지만 그렇게 힘들게 대학을 들어가도 그들의 앞에는 취업이라는 더 큰 관문이 기다리고 있습니다. 그래서 요즘의 대학생들은 입학과 동시에 학문에 뜻을 두기 보다는 더 나은 곳으로의 취업을 위한 공부를 시작합니다. 어학, 한자, 토론, 공모전, 봉사활동, 어학연수 등 소위 말하는 '스펙 쌓기'죠. 학생들은 대학을 다니는 4년동안 남들보다 얼마나 더 많은 이력을 갖췄느냐에 따라 더 좋은 직장에 들어갈 수 있다고 생각합니다. 실제로도 대부분의 기업체에서는 이러한 스펙으로 인재를 판별하는 경우가 대부분입니다. 이러한 사회구조는 스펙형 인간을 만들고 남들보다 늦거나 스펙이 떨어지는 사람은 더 못난 사람이다라는 의식을 가지게 만듭니다. 젊음의 열정으로 불태워야 할 시기에 취업에 열정을 쏟고 있으니 젊음은 이제 더이상 젊은 사람들의 것이 아닌 것 같습니다.</p>\n<p style=\"text-align: justify;\">이 시대의 젊음이 죽어가고 있습니다. 젊음이 충만해야할 젊은이들은 사회에서 정해준 길만 따라가려고 하고 더이상 스스로의 길에대해 고민하고 방황하지 않습니다. 이런 고민과 방황은 그저 쓸데없는 것이라 여기고 오로지 정해진 한길만을 묵묵히 가는 것이 바른 삶 혹은 젊음의 삶이라 생각합니다. 이어령 선생님은 이 시대의 젊은이들에게 진정한 젊음이 무엇이고 어떻게 태어나는지를 9가지로 설명합니다. 뜨는 것과 나는 것의 차이, 묻는데 그치지 않고 물음과 동시에 느끼는 것, 진리를 찾아가는 방황과 자신의 길에대한 확고한 믿음, 편협한 시각에서 벗어난 공존의 자세, 어울림과 통합을 통한 창조의 길, 편견과 오만을 버린 유연한 사고, 결핍을 통한 창조, 자신이 하고싶은 일을 즐기는 것, 동양과 서양의 공존, 이 9가지를 통해서 진정한 젊음의 정신이 태어난다고 말입니다.</p>\n<p style=\"text-align: justify;\">남들이 저만치 가고 있다고 초조해하거나 불안해 하지 마십시요. 당신이 다른 사람보다 늦다고 저 사람을 쫓아가야겠다는 마음도 버리세요. 중요한 것은 당신이 어떤 사람이냐는 것이고 어떤 일을 하고 싶냐는 것입니다. 당신이 정말 하고싶은 일이 있다면 당신이 그것만으로도 세상에서 가장 행복한 사람입니다. 더이상 남들처럼 살려고 하지 말고 자신의 삶을 찾으세요. 찾았다면 바로 실천하세요. 젊음은 신체에서 오는 것이 아니라 바로 자신의 삶에 대한 열정과 행동에서 탄생하는 것임을 잊지마세요.</p>\n","source":"_posts/2011-03-12-where-is-the-your-youth.html","raw":"---\nlayout: post\ncomments: true\ntitle: 당신의 젊음은 어디에 있습니까? \ndate: 2011-03-12 01:16:12.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- 이어령\n- 젊음\n- 젊음의 탄생\nmeta:\n  _edit_last: '1'\n  _wpas_done_all: '1'\n  _thumbnail_id: '317'\n  _aioseop_keywords: 젊음, 젊음의 탄생, 이어령\n  _aioseop_title: 당신의 젊음은 어디에 있습니까?\n  dsq_thread_id: '2837686131'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"text-align: justify;\">일반적으로 20대에 접어든 사람들을 두고 젊은 사람이라고 말합니다. 그리고 10대의 청소년들을 두고는 어리다고 말하지요. 30대가 지난 40에 접어들면 혹하지 아니한다는 '불혹'에 접어듭니다. 그 이후로는 말할 것도 없이 젊음과는 거리가 멀지요. 10대 동안 자라 20대가 되어 완성된 우리의 몸을 두고 바로 젊다고 말합니다. 물론 지금 제가 말하고 있는 '젊음'은 신체에 관한 것입니다.</p>\n<p style=\"text-align: justify;\">젊음은 인생에서 꼭 한번씩 찾아옵니다. 그 어떤 사람이라도(희귀한 질병을 가진 사람은 제외하고) 평등하게 딱 시절만 젊음을 누릴 수 있습니다. 누가 돈이 많고 누가 가난하더라도 젊음에 있어서 만큼은 평등하지요. 아무리 많은 돈을 주어도 살 수가 없는 것입니다. 그렇다면 우리는 인생에 딱 한번만 누릴 수 있는 이 젊음의 시기를 과연 어떻게 보내고 있을까요?</p>\n<p style=\"text-align: justify;\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/사진_004.jpg\"></p>\n<p><img class=\"aligncenter size-full wp-image-317\" alt=\"사진_004\" src=\"{{ site.baseurl }}/assets/&#49324;&#51652;_004.jpg\" /></p>\n<p></a></p>\n<p style=\"text-align: justify;\">올해 78을 맞으신 이어령 전 문화부장관의 2010년작 '젊음의 탄생'입니다. 거의 삶의 끝자락에 다가가고 있는 이어령 선생님께서는 어째서 젊음의 '탄생'이라는 책을 쓰게 됐을까요? 자신이 살아온 날을 돌아보며 자신이 젊었을 당시의 사고방식과 젊음을 대하는 태도를 지금 막 태어나는 수많은 젊음들을 위해 선배로서 한마디 해주고 싶었겠지요. 혹은 현 시대 대한민국의 젊지않은 젊음들을 바라보며 따끔한 한마디의 충고일지도 모릅니다. 하지만 이 책은 젊은 신체를 가진 젊은 사람들에게 전하는 메세지 이상의 것이 있습니다. 바로 어떤 신체를 가졌느냐가 아니라 어떠한 마음가짐과 정신을 가졌느냐에 따라 젊음이 탄생한다는 것입니다.</p>\n<p style=\"text-align: justify;\">이 시대의 청소년과 청년들은 모두 하나의 목표를 가지고 살아갑니다. 초중고 시절에는 어떤 대학을 갈것인가가 인생 최대의 목표입니다. 하지만 그렇게 힘들게 대학을 들어가도 그들의 앞에는 취업이라는 더 큰 관문이 기다리고 있습니다. 그래서 요즘의 대학생들은 입학과 동시에 학문에 뜻을 두기 보다는 더 나은 곳으로의 취업을 위한 공부를 시작합니다. 어학, 한자, 토론, 공모전, 봉사활동, 어학연수 등 소위 말하는 '스펙 쌓기'죠. 학생들은 대학을 다니는 4년동안 남들보다 얼마나 더 많은 이력을 갖췄느냐에 따라 더 좋은 직장에 들어갈 수 있다고 생각합니다. 실제로도 대부분의 기업체에서는 이러한 스펙으로 인재를 판별하는 경우가 대부분입니다. 이러한 사회구조는 스펙형 인간을 만들고 남들보다 늦거나 스펙이 떨어지는 사람은 더 못난 사람이다라는 의식을 가지게 만듭니다. 젊음의 열정으로 불태워야 할 시기에 취업에 열정을 쏟고 있으니 젊음은 이제 더이상 젊은 사람들의 것이 아닌 것 같습니다.</p>\n<p style=\"text-align: justify;\">이 시대의 젊음이 죽어가고 있습니다. 젊음이 충만해야할 젊은이들은 사회에서 정해준 길만 따라가려고 하고 더이상 스스로의 길에대해 고민하고 방황하지 않습니다. 이런 고민과 방황은 그저 쓸데없는 것이라 여기고 오로지 정해진 한길만을 묵묵히 가는 것이 바른 삶 혹은 젊음의 삶이라 생각합니다. 이어령 선생님은 이 시대의 젊은이들에게 진정한 젊음이 무엇이고 어떻게 태어나는지를 9가지로 설명합니다. 뜨는 것과 나는 것의 차이, 묻는데 그치지 않고 물음과 동시에 느끼는 것, 진리를 찾아가는 방황과 자신의 길에대한 확고한 믿음, 편협한 시각에서 벗어난 공존의 자세, 어울림과 통합을 통한 창조의 길, 편견과 오만을 버린 유연한 사고, 결핍을 통한 창조, 자신이 하고싶은 일을 즐기는 것, 동양과 서양의 공존, 이 9가지를 통해서 진정한 젊음의 정신이 태어난다고 말입니다.</p>\n<p style=\"text-align: justify;\">남들이 저만치 가고 있다고 초조해하거나 불안해 하지 마십시요. 당신이 다른 사람보다 늦다고 저 사람을 쫓아가야겠다는 마음도 버리세요. 중요한 것은 당신이 어떤 사람이냐는 것이고 어떤 일을 하고 싶냐는 것입니다. 당신이 정말 하고싶은 일이 있다면 당신이 그것만으로도 세상에서 가장 행복한 사람입니다. 더이상 남들처럼 살려고 하지 말고 자신의 삶을 찾으세요. 찾았다면 바로 실천하세요. 젊음은 신체에서 오는 것이 아니라 바로 자신의 삶에 대한 열정과 행동에서 탄생하는 것임을 잊지마세요.</p>\n","slug":"2011-03-12-where-is-the-your-youth","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv5j0001wxt4ziprhoof","content":"<p style=\"text-align:justify\">일반적으로 20대에 접어든 사람들을 두고 젊은 사람이라고 말합니다. 그리고 10대의 청소년들을 두고는 어리다고 말하지요. 30대가 지난 40에 접어들면 혹하지 아니한다는 '불혹'에 접어듭니다. 그 이후로는 말할 것도 없이 젊음과는 거리가 멀지요. 10대 동안 자라 20대가 되어 완성된 우리의 몸을 두고 바로 젊다고 말합니다. 물론 지금 제가 말하고 있는 '젊음'은 신체에 관한 것입니다.</p><p style=\"text-align:justify\">젊음은 인생에서 꼭 한번씩 찾아옵니다. 그 어떤 사람이라도(희귀한 질병을 가진 사람은 제외하고) 평등하게 딱 시절만 젊음을 누릴 수 있습니다. 누가 돈이 많고 누가 가난하더라도 젊음에 있어서 만큼은 평등하지요. 아무리 많은 돈을 주어도 살 수가 없는 것입니다. 그렇다면 우리는 인생에 딱 한번만 누릴 수 있는 이 젊음의 시기를 과연 어떻게 보내고 있을까요?</p><p style=\"text-align:justify\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/사진_004.jpg\" target=\"_blank\" rel=\"external\"></a></p><p><img class=\"aligncenter size-full wp-image-317\" alt=\"사진_004\" src=\"/assets/&#49324;&#51652;_004.jpg\"></p><p></p><p style=\"text-align:justify\">올해 78을 맞으신 이어령 전 문화부장관의 2010년작 '젊음의 탄생'입니다. 거의 삶의 끝자락에 다가가고 있는 이어령 선생님께서는 어째서 젊음의 '탄생'이라는 책을 쓰게 됐을까요? 자신이 살아온 날을 돌아보며 자신이 젊었을 당시의 사고방식과 젊음을 대하는 태도를 지금 막 태어나는 수많은 젊음들을 위해 선배로서 한마디 해주고 싶었겠지요. 혹은 현 시대 대한민국의 젊지않은 젊음들을 바라보며 따끔한 한마디의 충고일지도 모릅니다. 하지만 이 책은 젊은 신체를 가진 젊은 사람들에게 전하는 메세지 이상의 것이 있습니다. 바로 어떤 신체를 가졌느냐가 아니라 어떠한 마음가짐과 정신을 가졌느냐에 따라 젊음이 탄생한다는 것입니다.</p><p style=\"text-align:justify\">이 시대의 청소년과 청년들은 모두 하나의 목표를 가지고 살아갑니다. 초중고 시절에는 어떤 대학을 갈것인가가 인생 최대의 목표입니다. 하지만 그렇게 힘들게 대학을 들어가도 그들의 앞에는 취업이라는 더 큰 관문이 기다리고 있습니다. 그래서 요즘의 대학생들은 입학과 동시에 학문에 뜻을 두기 보다는 더 나은 곳으로의 취업을 위한 공부를 시작합니다. 어학, 한자, 토론, 공모전, 봉사활동, 어학연수 등 소위 말하는 '스펙 쌓기'죠. 학생들은 대학을 다니는 4년동안 남들보다 얼마나 더 많은 이력을 갖췄느냐에 따라 더 좋은 직장에 들어갈 수 있다고 생각합니다. 실제로도 대부분의 기업체에서는 이러한 스펙으로 인재를 판별하는 경우가 대부분입니다. 이러한 사회구조는 스펙형 인간을 만들고 남들보다 늦거나 스펙이 떨어지는 사람은 더 못난 사람이다라는 의식을 가지게 만듭니다. 젊음의 열정으로 불태워야 할 시기에 취업에 열정을 쏟고 있으니 젊음은 이제 더이상 젊은 사람들의 것이 아닌 것 같습니다.</p><p style=\"text-align:justify\">이 시대의 젊음이 죽어가고 있습니다. 젊음이 충만해야할 젊은이들은 사회에서 정해준 길만 따라가려고 하고 더이상 스스로의 길에대해 고민하고 방황하지 않습니다. 이런 고민과 방황은 그저 쓸데없는 것이라 여기고 오로지 정해진 한길만을 묵묵히 가는 것이 바른 삶 혹은 젊음의 삶이라 생각합니다. 이어령 선생님은 이 시대의 젊은이들에게 진정한 젊음이 무엇이고 어떻게 태어나는지를 9가지로 설명합니다. 뜨는 것과 나는 것의 차이, 묻는데 그치지 않고 물음과 동시에 느끼는 것, 진리를 찾아가는 방황과 자신의 길에대한 확고한 믿음, 편협한 시각에서 벗어난 공존의 자세, 어울림과 통합을 통한 창조의 길, 편견과 오만을 버린 유연한 사고, 결핍을 통한 창조, 자신이 하고싶은 일을 즐기는 것, 동양과 서양의 공존, 이 9가지를 통해서 진정한 젊음의 정신이 태어난다고 말입니다.</p><p style=\"text-align:justify\">남들이 저만치 가고 있다고 초조해하거나 불안해 하지 마십시요. 당신이 다른 사람보다 늦다고 저 사람을 쫓아가야겠다는 마음도 버리세요. 중요한 것은 당신이 어떤 사람이냐는 것이고 어떤 일을 하고 싶냐는 것입니다. 당신이 정말 하고싶은 일이 있다면 당신이 그것만으로도 세상에서 가장 행복한 사람입니다. 더이상 남들처럼 살려고 하지 말고 자신의 삶을 찾으세요. 찾았다면 바로 실천하세요. 젊음은 신체에서 오는 것이 아니라 바로 자신의 삶에 대한 열정과 행동에서 탄생하는 것임을 잊지마세요.</p>","excerpt":"","more":"<p style=\"text-align:justify\">일반적으로 20대에 접어든 사람들을 두고 젊은 사람이라고 말합니다. 그리고 10대의 청소년들을 두고는 어리다고 말하지요. 30대가 지난 40에 접어들면 혹하지 아니한다는 '불혹'에 접어듭니다. 그 이후로는 말할 것도 없이 젊음과는 거리가 멀지요. 10대 동안 자라 20대가 되어 완성된 우리의 몸을 두고 바로 젊다고 말합니다. 물론 지금 제가 말하고 있는 '젊음'은 신체에 관한 것입니다.</p><p style=\"text-align:justify\">젊음은 인생에서 꼭 한번씩 찾아옵니다. 그 어떤 사람이라도(희귀한 질병을 가진 사람은 제외하고) 평등하게 딱 시절만 젊음을 누릴 수 있습니다. 누가 돈이 많고 누가 가난하더라도 젊음에 있어서 만큼은 평등하지요. 아무리 많은 돈을 주어도 살 수가 없는 것입니다. 그렇다면 우리는 인생에 딱 한번만 누릴 수 있는 이 젊음의 시기를 과연 어떻게 보내고 있을까요?</p><p style=\"text-align:justify\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/사진_004.jpg\"></a></p><p><img class=\"aligncenter size-full wp-image-317\" alt=\"사진_004\" src=\"/assets/&#49324;&#51652;_004.jpg\"></p><p></p><p style=\"text-align:justify\">올해 78을 맞으신 이어령 전 문화부장관의 2010년작 '젊음의 탄생'입니다. 거의 삶의 끝자락에 다가가고 있는 이어령 선생님께서는 어째서 젊음의 '탄생'이라는 책을 쓰게 됐을까요? 자신이 살아온 날을 돌아보며 자신이 젊었을 당시의 사고방식과 젊음을 대하는 태도를 지금 막 태어나는 수많은 젊음들을 위해 선배로서 한마디 해주고 싶었겠지요. 혹은 현 시대 대한민국의 젊지않은 젊음들을 바라보며 따끔한 한마디의 충고일지도 모릅니다. 하지만 이 책은 젊은 신체를 가진 젊은 사람들에게 전하는 메세지 이상의 것이 있습니다. 바로 어떤 신체를 가졌느냐가 아니라 어떠한 마음가짐과 정신을 가졌느냐에 따라 젊음이 탄생한다는 것입니다.</p><p style=\"text-align:justify\">이 시대의 청소년과 청년들은 모두 하나의 목표를 가지고 살아갑니다. 초중고 시절에는 어떤 대학을 갈것인가가 인생 최대의 목표입니다. 하지만 그렇게 힘들게 대학을 들어가도 그들의 앞에는 취업이라는 더 큰 관문이 기다리고 있습니다. 그래서 요즘의 대학생들은 입학과 동시에 학문에 뜻을 두기 보다는 더 나은 곳으로의 취업을 위한 공부를 시작합니다. 어학, 한자, 토론, 공모전, 봉사활동, 어학연수 등 소위 말하는 '스펙 쌓기'죠. 학생들은 대학을 다니는 4년동안 남들보다 얼마나 더 많은 이력을 갖췄느냐에 따라 더 좋은 직장에 들어갈 수 있다고 생각합니다. 실제로도 대부분의 기업체에서는 이러한 스펙으로 인재를 판별하는 경우가 대부분입니다. 이러한 사회구조는 스펙형 인간을 만들고 남들보다 늦거나 스펙이 떨어지는 사람은 더 못난 사람이다라는 의식을 가지게 만듭니다. 젊음의 열정으로 불태워야 할 시기에 취업에 열정을 쏟고 있으니 젊음은 이제 더이상 젊은 사람들의 것이 아닌 것 같습니다.</p><p style=\"text-align:justify\">이 시대의 젊음이 죽어가고 있습니다. 젊음이 충만해야할 젊은이들은 사회에서 정해준 길만 따라가려고 하고 더이상 스스로의 길에대해 고민하고 방황하지 않습니다. 이런 고민과 방황은 그저 쓸데없는 것이라 여기고 오로지 정해진 한길만을 묵묵히 가는 것이 바른 삶 혹은 젊음의 삶이라 생각합니다. 이어령 선생님은 이 시대의 젊은이들에게 진정한 젊음이 무엇이고 어떻게 태어나는지를 9가지로 설명합니다. 뜨는 것과 나는 것의 차이, 묻는데 그치지 않고 물음과 동시에 느끼는 것, 진리를 찾아가는 방황과 자신의 길에대한 확고한 믿음, 편협한 시각에서 벗어난 공존의 자세, 어울림과 통합을 통한 창조의 길, 편견과 오만을 버린 유연한 사고, 결핍을 통한 창조, 자신이 하고싶은 일을 즐기는 것, 동양과 서양의 공존, 이 9가지를 통해서 진정한 젊음의 정신이 태어난다고 말입니다.</p><p style=\"text-align:justify\">남들이 저만치 가고 있다고 초조해하거나 불안해 하지 마십시요. 당신이 다른 사람보다 늦다고 저 사람을 쫓아가야겠다는 마음도 버리세요. 중요한 것은 당신이 어떤 사람이냐는 것이고 어떤 일을 하고 싶냐는 것입니다. 당신이 정말 하고싶은 일이 있다면 당신이 그것만으로도 세상에서 가장 행복한 사람입니다. 더이상 남들처럼 살려고 하지 말고 자신의 삶을 찾으세요. 찾았다면 바로 실천하세요. 젊음은 신체에서 오는 것이 아니라 바로 자신의 삶에 대한 열정과 행동에서 탄생하는 것임을 잊지마세요.</p>"},{"layout":"post","comments":1,"title":"산에게서 배웁니다.","date":"2011-04-13T03:58:28.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_wpas_done_all":"1","_thumbnail_id":"315","_aioseop_keywords":"등산, 비로봉, 산, 원주, 치악산","_aioseop_title":"산에게서 배웁니다. ","dsq_thread_id":"3046095126"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"text-align: justify;\">최근 많은 일이 있었습니다. 신변의 변화가 있었고, 그 변화로 인한 심정의 변화가 있었습니다. 그러다보니 자연스럽게 블로그에 거의(?) 무신경해져 버린것 같습니다. 인생의 터닝지점이 되는 순간이라 생각했기 때문에 나름의 휴식도 가질겸, 짧게 여행을 다녀왔습니다. 처음에 계획했던대로 못한것은 아쉽지만 짧은 기간동안 새로운 경험을 통해 생각할 시간을 가질 수 있었던 것은 참으로 다행이었던것 같습니다.</p>\n<p style=\"text-align: justify;\">저는 산을 다녀왔습니다. 처음에는 하루에 한봉우리씩 총 네 곳의 정상에 도전하는 거창하고도 무모한(?) 계획을 세웠습니다. 제가 왜 그랬는지 잘 모르겠습니다만 아마도 산을 너무 우습게 봤던 것 같습니다. 그리고 등산 경험도 전무한 제가 저 스스로를 너무 과대평과 했던것도 있구요. 경기도 양평의 용문산을 시작으로 원주 치악산, 단양 소백산 그리고 마지막으로 지리산 정상에 올라 대피소에서 하룻밤 묵는 것이 저의 계획이었습니다. 등산 고수님들이 이 계획을 보시면 너무 무모하다 생각하실지 아니면 겨우 이정도 가지고 뭘 그리 유난 떠냐고 하실지는 모르겠습니다만 어쨌든 등산 초보인 저에게는 굉장히 무모한 계획이었다라는 느낌을 받았습니다. 그래서 결국에는 용마산과 치악산 비로봉까지만 오르는 것으로 마무리 짓게 되었습니다.</p>\n<p style=\"text-align: justify;\">산에 올라가신분들은 아시겠지만 산은 굉장히 위험합니다. 모든산이 그렇진 않습니다만 제가 올랐던 두 곳은 바위로 이루어진 산이라 보통의 토산보다는 위험했습니다. '여기서 미끄러지면 바로 죽을꺼야'라는 생각은 다리를 후들거리게 만들고 머리를 어지럽게하지만, 그만큼 위험이 눈앞에 있기에 더욱 조심하게 됩니다. 이렇게 위험을 감수하며 스릴을 추구하는 것이 바로 등산의 묘미이기도 하지요. 그리고 끝없이 오르기만 하다가 정상에 올랐을때 느껴지는 희열 또한 산을 사랑할수밖에 없게 만드는 이유인것 같습니다.</p>\n<p style=\"text-align: justify;\">\n<p style=\"text-align: justify;\">\n<p style=\"text-align: justify;\">\n<p>&nbsp;</p>\n<p><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110410_10000001222.jpg\"><img class=\"size-full wp-image-315\" alt=\"P20110410_1000000122\" src=\"{{ site.baseurl }}/assets/P20110410_10000001222.jpg\" /></a></p>\n<p>&nbsp;</p>\n<p style=\"text-align: justify;\">산을 오르는 일은 인생과 비슷합니다. 사람들이 정상을 향해 끝없이 오르는것 처럼 인생에서 성공이라는 정상에 오르기 위해서는 끊임없이 노력해야 하고 그 노력의 결실을 맺기 전까지는 오로지 노력하는 일밖에 없습니다. 그리고 어느덧 정상에 오르면 그동안의 노력의 고통은 아무것도 아닌것이 되고 눈앞의 광경에 넋을 놓게 되지요. 정말 꿀맛같은 기분입니다. 마찬가지로 인생에서도 엄청난 노력끝에 얻게되는 성공의 맛은 정상에 올랐을 때의 그 기분과 크게 다르지 않을 것입니다.</p>\n<p style=\"text-align: justify;\">이처럼 정상에 오르는것도 중요하지만 사실 그것이 전부는 아닙니다. 정상에 오른 그 기분이 좋은 것은 사실이나 정상에 오르는 것만이 산을 찾는 이유는 아닐 것입니다. 새벽 일찍부터 오르기 시작하여 정상에 올라 정오가 지나자마자 빠르게 내려오는 사람들이 있는 반면 시간을 두고 천천히 오르면서 산의 기운과 자연의 정취를 즐기려는 사람들도 많이 있습니다. 또한 정상에 오르는 것만이 목적이 아니라 여러 사람들과 함께 오르면서 자연을 즐기며 즐거움을 찾는 사람들도 있지요.</p>\n<p style=\"text-align: justify;\">저 또한 산을 오르는 동안 지금 저의 상황과 산을 오르는 모습을 대비시켜보았습니다. 불안하고 불명확하고 이룬것 없이 혼란스럽고 남들에게 뒤쳐지는 것만 같은 현재의 상황에서 정상만을 바라보며 산을 오르는 모습은 내가 추구하는 가치와는 다른 모습이었습니다. 물론 정상을 오르는 것을 목표로 삼고 산을 찾았지만 정작 산을 오를때에 중요한 것은 경쟁이나 속도가 아니라 스스로의 방향과 페이스를 가지고 천천히 한발한발 올라가는 것이었습니다. '왜 내가 남들보다 먼저 정상에 오르지 못한 것일까?' 혹은 '저 앞에 가는 사람보다 내가 먼저 가야지'라는 생각은 자칫 잘못하면 대형사고로 이어질수 있습니다. 모든 사람들은 그들 스스로가 정한 목적과 목표가 있는 것이고 그들 스스로의 페이스가 있는 것이기 때문에 내가 저 사람보다 뒤쳐지는 것은 아무 의미 없는 것입니다. 인생에서도 마찬가지입니다. 내가 친구보다 좀 더 늦게 취직을 했다거나 연봉이 적다거나 하는 것은 지금 순간의 문제일뿐이지 내가 친구보다 뒤쳐지는 것이 아닙니다. 중요한 것은 나의 목표가 무엇이고 내가 지금 가고 있는 길이 나의 목표를 향하고 있느냐는 것이지요.</p>\n<p style=\"text-align: justify;\">얼마전, 기로에 서있던 저는 한가지 길을 선택했습니다. 제가 선택한 그 길이 더 나은 길인지는 두고봐야겠지만 적어도 제가 선택한 길이 제 인생의 목표의 방향으로 향하고 있다고 믿습니다. 그리고 그 길을 걸어가는 그 과정을 제대로 즐겨볼 생각입니다.</p>\n","source":"_posts/2011-04-13-learning-from-mountain.html","raw":"---\nlayout: post\ncomments: true\ntitle: 산에게서 배웁니다. \ndate: 2011-04-13 21:58:28.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- 등산\n- 비로봉\n- 산\n- 원주\n- 치악산\nmeta:\n  _edit_last: '1'\n  _wpas_done_all: '1'\n  _thumbnail_id: '315'\n  _aioseop_keywords: 등산, 비로봉, 산, 원주, 치악산\n  _aioseop_title: '산에게서 배웁니다. '\n  dsq_thread_id: '3046095126'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"text-align: justify;\">최근 많은 일이 있었습니다. 신변의 변화가 있었고, 그 변화로 인한 심정의 변화가 있었습니다. 그러다보니 자연스럽게 블로그에 거의(?) 무신경해져 버린것 같습니다. 인생의 터닝지점이 되는 순간이라 생각했기 때문에 나름의 휴식도 가질겸, 짧게 여행을 다녀왔습니다. 처음에 계획했던대로 못한것은 아쉽지만 짧은 기간동안 새로운 경험을 통해 생각할 시간을 가질 수 있었던 것은 참으로 다행이었던것 같습니다.</p>\n<p style=\"text-align: justify;\">저는 산을 다녀왔습니다. 처음에는 하루에 한봉우리씩 총 네 곳의 정상에 도전하는 거창하고도 무모한(?) 계획을 세웠습니다. 제가 왜 그랬는지 잘 모르겠습니다만 아마도 산을 너무 우습게 봤던 것 같습니다. 그리고 등산 경험도 전무한 제가 저 스스로를 너무 과대평과 했던것도 있구요. 경기도 양평의 용문산을 시작으로 원주 치악산, 단양 소백산 그리고 마지막으로 지리산 정상에 올라 대피소에서 하룻밤 묵는 것이 저의 계획이었습니다. 등산 고수님들이 이 계획을 보시면 너무 무모하다 생각하실지 아니면 겨우 이정도 가지고 뭘 그리 유난 떠냐고 하실지는 모르겠습니다만 어쨌든 등산 초보인 저에게는 굉장히 무모한 계획이었다라는 느낌을 받았습니다. 그래서 결국에는 용마산과 치악산 비로봉까지만 오르는 것으로 마무리 짓게 되었습니다.</p>\n<p style=\"text-align: justify;\">산에 올라가신분들은 아시겠지만 산은 굉장히 위험합니다. 모든산이 그렇진 않습니다만 제가 올랐던 두 곳은 바위로 이루어진 산이라 보통의 토산보다는 위험했습니다. '여기서 미끄러지면 바로 죽을꺼야'라는 생각은 다리를 후들거리게 만들고 머리를 어지럽게하지만, 그만큼 위험이 눈앞에 있기에 더욱 조심하게 됩니다. 이렇게 위험을 감수하며 스릴을 추구하는 것이 바로 등산의 묘미이기도 하지요. 그리고 끝없이 오르기만 하다가 정상에 올랐을때 느껴지는 희열 또한 산을 사랑할수밖에 없게 만드는 이유인것 같습니다.</p>\n<p style=\"text-align: justify;\">\n<p style=\"text-align: justify;\">\n<p style=\"text-align: justify;\">\n<p>&nbsp;</p>\n<p><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110410_10000001222.jpg\"><img class=\"size-full wp-image-315\" alt=\"P20110410_1000000122\" src=\"{{ site.baseurl }}/assets/P20110410_10000001222.jpg\" /></a></p>\n<p>&nbsp;</p>\n<p style=\"text-align: justify;\">산을 오르는 일은 인생과 비슷합니다. 사람들이 정상을 향해 끝없이 오르는것 처럼 인생에서 성공이라는 정상에 오르기 위해서는 끊임없이 노력해야 하고 그 노력의 결실을 맺기 전까지는 오로지 노력하는 일밖에 없습니다. 그리고 어느덧 정상에 오르면 그동안의 노력의 고통은 아무것도 아닌것이 되고 눈앞의 광경에 넋을 놓게 되지요. 정말 꿀맛같은 기분입니다. 마찬가지로 인생에서도 엄청난 노력끝에 얻게되는 성공의 맛은 정상에 올랐을 때의 그 기분과 크게 다르지 않을 것입니다.</p>\n<p style=\"text-align: justify;\">이처럼 정상에 오르는것도 중요하지만 사실 그것이 전부는 아닙니다. 정상에 오른 그 기분이 좋은 것은 사실이나 정상에 오르는 것만이 산을 찾는 이유는 아닐 것입니다. 새벽 일찍부터 오르기 시작하여 정상에 올라 정오가 지나자마자 빠르게 내려오는 사람들이 있는 반면 시간을 두고 천천히 오르면서 산의 기운과 자연의 정취를 즐기려는 사람들도 많이 있습니다. 또한 정상에 오르는 것만이 목적이 아니라 여러 사람들과 함께 오르면서 자연을 즐기며 즐거움을 찾는 사람들도 있지요.</p>\n<p style=\"text-align: justify;\">저 또한 산을 오르는 동안 지금 저의 상황과 산을 오르는 모습을 대비시켜보았습니다. 불안하고 불명확하고 이룬것 없이 혼란스럽고 남들에게 뒤쳐지는 것만 같은 현재의 상황에서 정상만을 바라보며 산을 오르는 모습은 내가 추구하는 가치와는 다른 모습이었습니다. 물론 정상을 오르는 것을 목표로 삼고 산을 찾았지만 정작 산을 오를때에 중요한 것은 경쟁이나 속도가 아니라 스스로의 방향과 페이스를 가지고 천천히 한발한발 올라가는 것이었습니다. '왜 내가 남들보다 먼저 정상에 오르지 못한 것일까?' 혹은 '저 앞에 가는 사람보다 내가 먼저 가야지'라는 생각은 자칫 잘못하면 대형사고로 이어질수 있습니다. 모든 사람들은 그들 스스로가 정한 목적과 목표가 있는 것이고 그들 스스로의 페이스가 있는 것이기 때문에 내가 저 사람보다 뒤쳐지는 것은 아무 의미 없는 것입니다. 인생에서도 마찬가지입니다. 내가 친구보다 좀 더 늦게 취직을 했다거나 연봉이 적다거나 하는 것은 지금 순간의 문제일뿐이지 내가 친구보다 뒤쳐지는 것이 아닙니다. 중요한 것은 나의 목표가 무엇이고 내가 지금 가고 있는 길이 나의 목표를 향하고 있느냐는 것이지요.</p>\n<p style=\"text-align: justify;\">얼마전, 기로에 서있던 저는 한가지 길을 선택했습니다. 제가 선택한 그 길이 더 나은 길인지는 두고봐야겠지만 적어도 제가 선택한 길이 제 인생의 목표의 방향으로 향하고 있다고 믿습니다. 그리고 그 길을 걸어가는 그 과정을 제대로 즐겨볼 생각입니다.</p>\n","slug":"2011-04-13-learning-from-mountain","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv5o0002wxt4xu1oxxga","content":"<p style=\"text-align:justify\">최근 많은 일이 있었습니다. 신변의 변화가 있었고, 그 변화로 인한 심정의 변화가 있었습니다. 그러다보니 자연스럽게 블로그에 거의(?) 무신경해져 버린것 같습니다. 인생의 터닝지점이 되는 순간이라 생각했기 때문에 나름의 휴식도 가질겸, 짧게 여행을 다녀왔습니다. 처음에 계획했던대로 못한것은 아쉽지만 짧은 기간동안 새로운 경험을 통해 생각할 시간을 가질 수 있었던 것은 참으로 다행이었던것 같습니다.</p><p style=\"text-align:justify\">저는 산을 다녀왔습니다. 처음에는 하루에 한봉우리씩 총 네 곳의 정상에 도전하는 거창하고도 무모한(?) 계획을 세웠습니다. 제가 왜 그랬는지 잘 모르겠습니다만 아마도 산을 너무 우습게 봤던 것 같습니다. 그리고 등산 경험도 전무한 제가 저 스스로를 너무 과대평과 했던것도 있구요. 경기도 양평의 용문산을 시작으로 원주 치악산, 단양 소백산 그리고 마지막으로 지리산 정상에 올라 대피소에서 하룻밤 묵는 것이 저의 계획이었습니다. 등산 고수님들이 이 계획을 보시면 너무 무모하다 생각하실지 아니면 겨우 이정도 가지고 뭘 그리 유난 떠냐고 하실지는 모르겠습니다만 어쨌든 등산 초보인 저에게는 굉장히 무모한 계획이었다라는 느낌을 받았습니다. 그래서 결국에는 용마산과 치악산 비로봉까지만 오르는 것으로 마무리 짓게 되었습니다.</p><p style=\"text-align:justify\">산에 올라가신분들은 아시겠지만 산은 굉장히 위험합니다. 모든산이 그렇진 않습니다만 제가 올랐던 두 곳은 바위로 이루어진 산이라 보통의 토산보다는 위험했습니다. '여기서 미끄러지면 바로 죽을꺼야'라는 생각은 다리를 후들거리게 만들고 머리를 어지럽게하지만, 그만큼 위험이 눈앞에 있기에 더욱 조심하게 됩니다. 이렇게 위험을 감수하며 스릴을 추구하는 것이 바로 등산의 묘미이기도 하지요. 그리고 끝없이 오르기만 하다가 정상에 올랐을때 느껴지는 희열 또한 산을 사랑할수밖에 없게 만드는 이유인것 같습니다.</p><p style=\"text-align:justify\"></p><p style=\"text-align:justify\"></p><p style=\"text-align:justify\"></p><p>&nbsp;</p><p><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110410_10000001222.jpg\" target=\"_blank\" rel=\"external\"><img class=\"size-full wp-image-315\" alt=\"P20110410_1000000122\" src=\"/assets/P20110410_10000001222.jpg\"></a></p><p>&nbsp;</p><p style=\"text-align:justify\">산을 오르는 일은 인생과 비슷합니다. 사람들이 정상을 향해 끝없이 오르는것 처럼 인생에서 성공이라는 정상에 오르기 위해서는 끊임없이 노력해야 하고 그 노력의 결실을 맺기 전까지는 오로지 노력하는 일밖에 없습니다. 그리고 어느덧 정상에 오르면 그동안의 노력의 고통은 아무것도 아닌것이 되고 눈앞의 광경에 넋을 놓게 되지요. 정말 꿀맛같은 기분입니다. 마찬가지로 인생에서도 엄청난 노력끝에 얻게되는 성공의 맛은 정상에 올랐을 때의 그 기분과 크게 다르지 않을 것입니다.</p><p style=\"text-align:justify\">이처럼 정상에 오르는것도 중요하지만 사실 그것이 전부는 아닙니다. 정상에 오른 그 기분이 좋은 것은 사실이나 정상에 오르는 것만이 산을 찾는 이유는 아닐 것입니다. 새벽 일찍부터 오르기 시작하여 정상에 올라 정오가 지나자마자 빠르게 내려오는 사람들이 있는 반면 시간을 두고 천천히 오르면서 산의 기운과 자연의 정취를 즐기려는 사람들도 많이 있습니다. 또한 정상에 오르는 것만이 목적이 아니라 여러 사람들과 함께 오르면서 자연을 즐기며 즐거움을 찾는 사람들도 있지요.</p><p style=\"text-align:justify\">저 또한 산을 오르는 동안 지금 저의 상황과 산을 오르는 모습을 대비시켜보았습니다. 불안하고 불명확하고 이룬것 없이 혼란스럽고 남들에게 뒤쳐지는 것만 같은 현재의 상황에서 정상만을 바라보며 산을 오르는 모습은 내가 추구하는 가치와는 다른 모습이었습니다. 물론 정상을 오르는 것을 목표로 삼고 산을 찾았지만 정작 산을 오를때에 중요한 것은 경쟁이나 속도가 아니라 스스로의 방향과 페이스를 가지고 천천히 한발한발 올라가는 것이었습니다. '왜 내가 남들보다 먼저 정상에 오르지 못한 것일까?' 혹은 '저 앞에 가는 사람보다 내가 먼저 가야지'라는 생각은 자칫 잘못하면 대형사고로 이어질수 있습니다. 모든 사람들은 그들 스스로가 정한 목적과 목표가 있는 것이고 그들 스스로의 페이스가 있는 것이기 때문에 내가 저 사람보다 뒤쳐지는 것은 아무 의미 없는 것입니다. 인생에서도 마찬가지입니다. 내가 친구보다 좀 더 늦게 취직을 했다거나 연봉이 적다거나 하는 것은 지금 순간의 문제일뿐이지 내가 친구보다 뒤쳐지는 것이 아닙니다. 중요한 것은 나의 목표가 무엇이고 내가 지금 가고 있는 길이 나의 목표를 향하고 있느냐는 것이지요.</p><p style=\"text-align:justify\">얼마전, 기로에 서있던 저는 한가지 길을 선택했습니다. 제가 선택한 그 길이 더 나은 길인지는 두고봐야겠지만 적어도 제가 선택한 길이 제 인생의 목표의 방향으로 향하고 있다고 믿습니다. 그리고 그 길을 걸어가는 그 과정을 제대로 즐겨볼 생각입니다.</p>","excerpt":"","more":"<p style=\"text-align:justify\">최근 많은 일이 있었습니다. 신변의 변화가 있었고, 그 변화로 인한 심정의 변화가 있었습니다. 그러다보니 자연스럽게 블로그에 거의(?) 무신경해져 버린것 같습니다. 인생의 터닝지점이 되는 순간이라 생각했기 때문에 나름의 휴식도 가질겸, 짧게 여행을 다녀왔습니다. 처음에 계획했던대로 못한것은 아쉽지만 짧은 기간동안 새로운 경험을 통해 생각할 시간을 가질 수 있었던 것은 참으로 다행이었던것 같습니다.</p><p style=\"text-align:justify\">저는 산을 다녀왔습니다. 처음에는 하루에 한봉우리씩 총 네 곳의 정상에 도전하는 거창하고도 무모한(?) 계획을 세웠습니다. 제가 왜 그랬는지 잘 모르겠습니다만 아마도 산을 너무 우습게 봤던 것 같습니다. 그리고 등산 경험도 전무한 제가 저 스스로를 너무 과대평과 했던것도 있구요. 경기도 양평의 용문산을 시작으로 원주 치악산, 단양 소백산 그리고 마지막으로 지리산 정상에 올라 대피소에서 하룻밤 묵는 것이 저의 계획이었습니다. 등산 고수님들이 이 계획을 보시면 너무 무모하다 생각하실지 아니면 겨우 이정도 가지고 뭘 그리 유난 떠냐고 하실지는 모르겠습니다만 어쨌든 등산 초보인 저에게는 굉장히 무모한 계획이었다라는 느낌을 받았습니다. 그래서 결국에는 용마산과 치악산 비로봉까지만 오르는 것으로 마무리 짓게 되었습니다.</p><p style=\"text-align:justify\">산에 올라가신분들은 아시겠지만 산은 굉장히 위험합니다. 모든산이 그렇진 않습니다만 제가 올랐던 두 곳은 바위로 이루어진 산이라 보통의 토산보다는 위험했습니다. '여기서 미끄러지면 바로 죽을꺼야'라는 생각은 다리를 후들거리게 만들고 머리를 어지럽게하지만, 그만큼 위험이 눈앞에 있기에 더욱 조심하게 됩니다. 이렇게 위험을 감수하며 스릴을 추구하는 것이 바로 등산의 묘미이기도 하지요. 그리고 끝없이 오르기만 하다가 정상에 올랐을때 느껴지는 희열 또한 산을 사랑할수밖에 없게 만드는 이유인것 같습니다.</p><p style=\"text-align:justify\"></p><p style=\"text-align:justify\"></p><p style=\"text-align:justify\"></p><p>&nbsp;</p><p><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110410_10000001222.jpg\"><img class=\"size-full wp-image-315\" alt=\"P20110410_1000000122\" src=\"/assets/P20110410_10000001222.jpg\"></a></p><p>&nbsp;</p><p style=\"text-align:justify\">산을 오르는 일은 인생과 비슷합니다. 사람들이 정상을 향해 끝없이 오르는것 처럼 인생에서 성공이라는 정상에 오르기 위해서는 끊임없이 노력해야 하고 그 노력의 결실을 맺기 전까지는 오로지 노력하는 일밖에 없습니다. 그리고 어느덧 정상에 오르면 그동안의 노력의 고통은 아무것도 아닌것이 되고 눈앞의 광경에 넋을 놓게 되지요. 정말 꿀맛같은 기분입니다. 마찬가지로 인생에서도 엄청난 노력끝에 얻게되는 성공의 맛은 정상에 올랐을 때의 그 기분과 크게 다르지 않을 것입니다.</p><p style=\"text-align:justify\">이처럼 정상에 오르는것도 중요하지만 사실 그것이 전부는 아닙니다. 정상에 오른 그 기분이 좋은 것은 사실이나 정상에 오르는 것만이 산을 찾는 이유는 아닐 것입니다. 새벽 일찍부터 오르기 시작하여 정상에 올라 정오가 지나자마자 빠르게 내려오는 사람들이 있는 반면 시간을 두고 천천히 오르면서 산의 기운과 자연의 정취를 즐기려는 사람들도 많이 있습니다. 또한 정상에 오르는 것만이 목적이 아니라 여러 사람들과 함께 오르면서 자연을 즐기며 즐거움을 찾는 사람들도 있지요.</p><p style=\"text-align:justify\">저 또한 산을 오르는 동안 지금 저의 상황과 산을 오르는 모습을 대비시켜보았습니다. 불안하고 불명확하고 이룬것 없이 혼란스럽고 남들에게 뒤쳐지는 것만 같은 현재의 상황에서 정상만을 바라보며 산을 오르는 모습은 내가 추구하는 가치와는 다른 모습이었습니다. 물론 정상을 오르는 것을 목표로 삼고 산을 찾았지만 정작 산을 오를때에 중요한 것은 경쟁이나 속도가 아니라 스스로의 방향과 페이스를 가지고 천천히 한발한발 올라가는 것이었습니다. '왜 내가 남들보다 먼저 정상에 오르지 못한 것일까?' 혹은 '저 앞에 가는 사람보다 내가 먼저 가야지'라는 생각은 자칫 잘못하면 대형사고로 이어질수 있습니다. 모든 사람들은 그들 스스로가 정한 목적과 목표가 있는 것이고 그들 스스로의 페이스가 있는 것이기 때문에 내가 저 사람보다 뒤쳐지는 것은 아무 의미 없는 것입니다. 인생에서도 마찬가지입니다. 내가 친구보다 좀 더 늦게 취직을 했다거나 연봉이 적다거나 하는 것은 지금 순간의 문제일뿐이지 내가 친구보다 뒤쳐지는 것이 아닙니다. 중요한 것은 나의 목표가 무엇이고 내가 지금 가고 있는 길이 나의 목표를 향하고 있느냐는 것이지요.</p><p style=\"text-align:justify\">얼마전, 기로에 서있던 저는 한가지 길을 선택했습니다. 제가 선택한 그 길이 더 나은 길인지는 두고봐야겠지만 적어도 제가 선택한 길이 제 인생의 목표의 방향으로 향하고 있다고 믿습니다. 그리고 그 길을 걸어가는 그 과정을 제대로 즐겨볼 생각입니다.</p>"},{"layout":"post","comments":1,"title":"걸음에 대한 단상","date":"2012-04-18T23:45:41.000Z","type":"post","published":1,"status":"publish","meta":{"_thumbnail_id":"754","_wpas_done_all":"1","_wpas_skip_6779368":"1","_edit_last":"1","_aioseop_keywords":"걸음, 도보","_aioseop_title":"걸음에 대한 단상","dsq_thread_id":"3153551924"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"text-align: justify; \"><img src=\"{{ site.baseurl }}/assets/cfile25.uf.1426204B4F8FB5EA33A32B.jpg\" class=\"aligncenter\" width=\"632\" height=\"445\" filename=\"walking_son.jpg\" filemime=\"image/jpeg\" style=\"line-height: 2; text-align: center; \" /></p>\n<p style=\"line-height: 2; text-align: right; \"><span style=\"font-size: 10pt; \"><span style=\"font-size: 9pt; \">(사진출처 : 손현's facebook)</span></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \">하루에 얼마나 걸으시나요? 2,000보? 5,000보? 걸음의 수를 정확히 측정할 수는 없지만 하루에 5,000보 이상을 걷는 사람은&nbsp;그렇게 많지 않을 것이라 생각이 듭니다. 아침에는 지하철을 타러 갈때나, 환승할 때나, 지하철에서 내려 회사까지 걸어갈 때 걷고, 저녁에 퇴근할때는&nbsp;이와는 반대 순서로 걷게 되지요. 조금 나은 사람들은 멀지 않은 거리는 걸어 다니거나, 점심시간에 산책을 하는 정도가 있겠습니다. 하지만 이 정도 걷는다고 하더라도 정작 계산해보면 그 숫자는 결코 많지 않다는 것을 알 수 있습니다.&nbsp;</span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"line-height: 2; font-size: 10pt; \">한 사람의 평균 보폭을 70cm 정도(참고 자료에 의하면 젊은 여자의 경우 70cm 정도이고 남자는 74cm 정도라고 합니다</span><span style=\"line-height: 2; font-size: 10pt; \">)라고 가정하고</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;시간당 4km를 걷는 사람이 한시간 동안 걷게되면&nbsp;그 사람의&nbsp;총 보폭수는 5,714보 정도가 됩니다. 지하철역까지 5분, 환승 5분, 회사까지 10분 정도로 가정하고 저녁에도 이를 반복하게 되면&nbsp;보통 하루 40분 정도를 걷게 되는데, 보폭수로 따져보면 약 3,809보가 되고 소모칼로리는 대략</span><span style=\"font-size: 10pt; \">&nbsp;150Kcal가 되겠지요(</span></span><span style=\"font-size:10pt; line-height: 26px; \">걷는 사람의 몸무게와 걷는 속도가 변수로 작용하겠지만 대략적으로는 이 정도 수치가 나온다고 간주합니다)</span><span style=\"font-size: 10pt; line-height: 2; \">. 그나마 지하철이나 버스등의 대중교통을</span><span style=\"font-size: 10pt; line-height: 2; \">&nbsp;타고 다녀야 이정도의 보폭수와 소모 칼로리가 발생하게 됩니다.</span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; line-height: 2; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">그렇다면 자동차를 타고 출퇴근하는 사람들의 경우는 어떨까요? 이들이 출퇴근하는 모습을 상상해봅시다.</span><span style=\"font-size: 10pt; \">&nbsp;우선 집을 나서서 집</span><span style=\"font-size: 10pt; \">앞에 주차된 자동차까지 걸어갑니다. 자동차 시동을 걸고</span><span style=\"font-size: 10pt; \">&nbsp;회사 지하주차장까지 앉아서 운전합니다. 그리고</span><span style=\"font-size: 10pt; \">&nbsp;주차장에 차를 세워둔 다음</span><span style=\"font-size: 10pt; \">&nbsp;근처에 있는 엘리베이터까지 걸어가겠지요. 그 다음&nbsp;</span><span style=\"font-size: 10pt; \">엘레베이터를</span><span style=\"font-size: 10pt; \">&nbsp;타고 사무실이 있는 층까지 올라와서 자신의 자리까지 걸어서 들어갑니다.</span><span style=\"font-size: 10pt; \">&nbsp;만약 이런 방식의&nbsp;출퇴근이라면</span><span style=\"font-size: 10pt; \">&nbsp;집에서 나와서 자동차까지,</span><span style=\"font-size: 10pt; \">&nbsp;회사 주차장에 세워둔 자신의 차에서&nbsp;</span><span style=\"font-size: 10pt; \">엘레베이터까지, 엘레베이터에서 회사안 자기 자리까지 걷는 것만이&nbsp;출</span><span style=\"font-size: 10pt; \">근 동안 걷는 걸음 수의 전부일 것입니다. </span><span style=\"font-size: 10pt; \">퇴근시에도 반복한다고 가정하고&nbsp;</span></span><span style=\"line-height: 26px; font-size: 10pt; \">그 수에&nbsp;</span><span style=\"line-height: 2; font-size: 10pt; \">2를 곱하면</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;이 사람이 하루동안</span><span style=\"font-size: 10pt; \">&nbsp;출퇴근을 통해 걷는 총 걸음 수가 나오게 됩니다</span></span><span style=\"line-height: 2; font-size: 10pt; \">. 하지만&nbsp;그</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;수는 많아도&nbsp;</span><span style=\"font-size: 10pt; \">1,000보에</span><span style=\"font-size: 10pt; \">&nbsp;미치기</span><span style=\"font-size: 10pt; \">&nbsp;어려울 것입니다</span></span><span style=\"line-height: 2; font-size: 10pt; \">.</span></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">위에 보시는 사진은 오래전에 유행하던 만보기입니다. 하루 만보 걸으면 건강해진다는 말로 한때 너도나도 허리춤에 하나씩 가지고 다녔었지요. 그렇다면&nbsp;하루에 만보를 걸으면 어느 정도의&nbsp;효과가 있을까요? 위에서 3,809보를 걸었을때 대략 150Kcal가 소모된다고 했으므로, 이 수치를 10,000보로 환산해보면 대략 400Kcal에 조금 못미치는 칼로리 소모량이 나옵니다. &nbsp;자전거를 한 시간 타야 300Kcal 정도가 소모되는 것을 감안하면 결코 낮은 수치는 아니지요.&nbsp;</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걷는 것이&nbsp;런닝이나 다른 운동들보다 상대적으로 칼로리 소모량이 큰 것은 아니지만 걷기 운동에는&nbsp;여러가지 장점이 있습니다. 바로 아래와 같은 것들이지요.</span></font></p>\n<ul style=\"list-style-type: disc; \">\n<li>\n<p style=\"text-align: justify; line-height: 2; \"><font size=\"2\"><span style=\"line-height: 26px;\">심폐기능 상승 및 혈액순환 촉진</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">체지방 감소 및 성인병 예방</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">골밀도 유지로 인한 골다공증 예방</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">스트레스 해소 및 불안감, 우울증 해소</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">면역력 증가</span></font></p>\n</li>\n</ul>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">위와 같은 내용들은&nbsp;당연하고 익히 알려진 장점들입니다. 하지만 조금만 생각해보면 거의 모든 운동들이 위와 같은 장점들을 가지고 있는 것을 알 수 있습니다.&nbsp;그렇다면 과연 운동으로서의 걷기가 아닌 걷기 자체만으로의 장점은 어떤 것이 있을까요? 제가 걷는 것을 좋아하고 또 즐겨 하기 때문에 제 경험을 바탕으로 한 장점&nbsp;몇 가지를 추려보면 다음과 같습니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>1. 사색</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걷는 것은 곧 생각하는 것과 연결됩니다. 단순히 걷기 때문에 생각되어 지는&nbsp;것이 아니라 걷기와 생각하는 것 사이에는 좀 더 과학적인 근거가&nbsp;존재합니다. 사람의 몸은&nbsp;땅에 발을 내딛을 때마다 발의 신경부터 시작해서 온몸의 근육이&nbsp;걷는 행위 중에 균형을 잃지 않도록 활동하게 됩니다. 걷는 행위라는 것은 이러한 움직임의&nbsp;반복이기 때문에 활발하게 활동하는&nbsp;신경과 세포들이 뇌신경의 활동에도&nbsp;영향을 미쳐서&nbsp;사색(생각)으로 이어지는 것입니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>2. 관찰</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">도보 여행을 해본 사람들이라면 다들 알고 있을 거라 생각합니다.&nbsp;걷는 것은 기차나 자동차를 타고 지나가는 것과 다릅니다.&nbsp;기차나 자동차를 타고 가면서 보는 창밖의 풍경들에서는 놓쳤던 많은 것들을 걸음을 통해&nbsp;모두 관찰할 수 있습니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>3. 대화</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걸음은 자신과의 대화를 가능하게 합니다. 아무도 없고 아무 소리도 나지 않는 조용한&nbsp;시골길이나 텅빈 도로를 혼자서 걷다보면 자연스럽게 자신이 누구이고 어디로 가야하는지에&nbsp;대한 깊은 생각에 빠지게 됩니다.</span></font></p>\n<p style=\"line-height: 1.5; text-align: justify; \">\n","source":"_posts/2012-04-19-think-about-walking.html","raw":"---\nlayout: post\ncomments: true\ntitle: 걸음에 대한 단상\ndate: 2012-04-19 17:45:41.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- 걸음\n- 도보\nmeta:\n  _thumbnail_id: '754'\n  _wpas_done_all: '1'\n  _wpas_skip_6779368: '1'\n  _edit_last: '1'\n  _aioseop_keywords: 걸음, 도보\n  _aioseop_title: 걸음에 대한 단상\n  dsq_thread_id: '3153551924'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"text-align: justify; \"><img src=\"{{ site.baseurl }}/assets/cfile25.uf.1426204B4F8FB5EA33A32B.jpg\" class=\"aligncenter\" width=\"632\" height=\"445\" filename=\"walking_son.jpg\" filemime=\"image/jpeg\" style=\"line-height: 2; text-align: center; \" /></p>\n<p style=\"line-height: 2; text-align: right; \"><span style=\"font-size: 10pt; \"><span style=\"font-size: 9pt; \">(사진출처 : 손현's facebook)</span></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \">하루에 얼마나 걸으시나요? 2,000보? 5,000보? 걸음의 수를 정확히 측정할 수는 없지만 하루에 5,000보 이상을 걷는 사람은&nbsp;그렇게 많지 않을 것이라 생각이 듭니다. 아침에는 지하철을 타러 갈때나, 환승할 때나, 지하철에서 내려 회사까지 걸어갈 때 걷고, 저녁에 퇴근할때는&nbsp;이와는 반대 순서로 걷게 되지요. 조금 나은 사람들은 멀지 않은 거리는 걸어 다니거나, 점심시간에 산책을 하는 정도가 있겠습니다. 하지만 이 정도 걷는다고 하더라도 정작 계산해보면 그 숫자는 결코 많지 않다는 것을 알 수 있습니다.&nbsp;</span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"line-height: 2; font-size: 10pt; \">한 사람의 평균 보폭을 70cm 정도(참고 자료에 의하면 젊은 여자의 경우 70cm 정도이고 남자는 74cm 정도라고 합니다</span><span style=\"line-height: 2; font-size: 10pt; \">)라고 가정하고</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;시간당 4km를 걷는 사람이 한시간 동안 걷게되면&nbsp;그 사람의&nbsp;총 보폭수는 5,714보 정도가 됩니다. 지하철역까지 5분, 환승 5분, 회사까지 10분 정도로 가정하고 저녁에도 이를 반복하게 되면&nbsp;보통 하루 40분 정도를 걷게 되는데, 보폭수로 따져보면 약 3,809보가 되고 소모칼로리는 대략</span><span style=\"font-size: 10pt; \">&nbsp;150Kcal가 되겠지요(</span></span><span style=\"font-size:10pt; line-height: 26px; \">걷는 사람의 몸무게와 걷는 속도가 변수로 작용하겠지만 대략적으로는 이 정도 수치가 나온다고 간주합니다)</span><span style=\"font-size: 10pt; line-height: 2; \">. 그나마 지하철이나 버스등의 대중교통을</span><span style=\"font-size: 10pt; line-height: 2; \">&nbsp;타고 다녀야 이정도의 보폭수와 소모 칼로리가 발생하게 됩니다.</span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; line-height: 2; \"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2; \"><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">그렇다면 자동차를 타고 출퇴근하는 사람들의 경우는 어떨까요? 이들이 출퇴근하는 모습을 상상해봅시다.</span><span style=\"font-size: 10pt; \">&nbsp;우선 집을 나서서 집</span><span style=\"font-size: 10pt; \">앞에 주차된 자동차까지 걸어갑니다. 자동차 시동을 걸고</span><span style=\"font-size: 10pt; \">&nbsp;회사 지하주차장까지 앉아서 운전합니다. 그리고</span><span style=\"font-size: 10pt; \">&nbsp;주차장에 차를 세워둔 다음</span><span style=\"font-size: 10pt; \">&nbsp;근처에 있는 엘리베이터까지 걸어가겠지요. 그 다음&nbsp;</span><span style=\"font-size: 10pt; \">엘레베이터를</span><span style=\"font-size: 10pt; \">&nbsp;타고 사무실이 있는 층까지 올라와서 자신의 자리까지 걸어서 들어갑니다.</span><span style=\"font-size: 10pt; \">&nbsp;만약 이런 방식의&nbsp;출퇴근이라면</span><span style=\"font-size: 10pt; \">&nbsp;집에서 나와서 자동차까지,</span><span style=\"font-size: 10pt; \">&nbsp;회사 주차장에 세워둔 자신의 차에서&nbsp;</span><span style=\"font-size: 10pt; \">엘레베이터까지, 엘레베이터에서 회사안 자기 자리까지 걷는 것만이&nbsp;출</span><span style=\"font-size: 10pt; \">근 동안 걷는 걸음 수의 전부일 것입니다. </span><span style=\"font-size: 10pt; \">퇴근시에도 반복한다고 가정하고&nbsp;</span></span><span style=\"line-height: 26px; font-size: 10pt; \">그 수에&nbsp;</span><span style=\"line-height: 2; font-size: 10pt; \">2를 곱하면</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;이 사람이 하루동안</span><span style=\"font-size: 10pt; \">&nbsp;출퇴근을 통해 걷는 총 걸음 수가 나오게 됩니다</span></span><span style=\"line-height: 2; font-size: 10pt; \">. 하지만&nbsp;그</span><span style=\"font-size: 10pt; line-height: 2; \"><span style=\"font-size: 10pt; \">&nbsp;수는 많아도&nbsp;</span><span style=\"font-size: 10pt; \">1,000보에</span><span style=\"font-size: 10pt; \">&nbsp;미치기</span><span style=\"font-size: 10pt; \">&nbsp;어려울 것입니다</span></span><span style=\"line-height: 2; font-size: 10pt; \">.</span></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">위에 보시는 사진은 오래전에 유행하던 만보기입니다. 하루 만보 걸으면 건강해진다는 말로 한때 너도나도 허리춤에 하나씩 가지고 다녔었지요. 그렇다면&nbsp;하루에 만보를 걸으면 어느 정도의&nbsp;효과가 있을까요? 위에서 3,809보를 걸었을때 대략 150Kcal가 소모된다고 했으므로, 이 수치를 10,000보로 환산해보면 대략 400Kcal에 조금 못미치는 칼로리 소모량이 나옵니다. &nbsp;자전거를 한 시간 타야 300Kcal 정도가 소모되는 것을 감안하면 결코 낮은 수치는 아니지요.&nbsp;</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걷는 것이&nbsp;런닝이나 다른 운동들보다 상대적으로 칼로리 소모량이 큰 것은 아니지만 걷기 운동에는&nbsp;여러가지 장점이 있습니다. 바로 아래와 같은 것들이지요.</span></font></p>\n<ul style=\"list-style-type: disc; \">\n<li>\n<p style=\"text-align: justify; line-height: 2; \"><font size=\"2\"><span style=\"line-height: 26px;\">심폐기능 상승 및 혈액순환 촉진</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">체지방 감소 및 성인병 예방</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">골밀도 유지로 인한 골다공증 예방</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">스트레스 해소 및 불안감, 우울증 해소</span></font></p>\n</li>\n<li style=\"line-height: 2; \">\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">면역력 증가</span></font></p>\n</li>\n</ul>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">위와 같은 내용들은&nbsp;당연하고 익히 알려진 장점들입니다. 하지만 조금만 생각해보면 거의 모든 운동들이 위와 같은 장점들을 가지고 있는 것을 알 수 있습니다.&nbsp;그렇다면 과연 운동으로서의 걷기가 아닌 걷기 자체만으로의 장점은 어떤 것이 있을까요? 제가 걷는 것을 좋아하고 또 즐겨 하기 때문에 제 경험을 바탕으로 한 장점&nbsp;몇 가지를 추려보면 다음과 같습니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>1. 사색</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걷는 것은 곧 생각하는 것과 연결됩니다. 단순히 걷기 때문에 생각되어 지는&nbsp;것이 아니라 걷기와 생각하는 것 사이에는 좀 더 과학적인 근거가&nbsp;존재합니다. 사람의 몸은&nbsp;땅에 발을 내딛을 때마다 발의 신경부터 시작해서 온몸의 근육이&nbsp;걷는 행위 중에 균형을 잃지 않도록 활동하게 됩니다. 걷는 행위라는 것은 이러한 움직임의&nbsp;반복이기 때문에 활발하게 활동하는&nbsp;신경과 세포들이 뇌신경의 활동에도&nbsp;영향을 미쳐서&nbsp;사색(생각)으로 이어지는 것입니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>2. 관찰</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">도보 여행을 해본 사람들이라면 다들 알고 있을 거라 생각합니다.&nbsp;걷는 것은 기차나 자동차를 타고 지나가는 것과 다릅니다.&nbsp;기차나 자동차를 타고 가면서 보는 창밖의 풍경들에서는 놓쳤던 많은 것들을 걸음을 통해&nbsp;모두 관찰할 수 있습니다.</span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\"><b>3. 대화</b></span></font></p>\n<p style=\"text-align: justify; \"><font size=\"2\"><span style=\"line-height: 26px;\">걸음은 자신과의 대화를 가능하게 합니다. 아무도 없고 아무 소리도 나지 않는 조용한&nbsp;시골길이나 텅빈 도로를 혼자서 걷다보면 자연스럽게 자신이 누구이고 어디로 가야하는지에&nbsp;대한 깊은 생각에 빠지게 됩니다.</span></font></p>\n<p style=\"line-height: 1.5; text-align: justify; \">\n","slug":"2012-04-19-think-about-walking","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv5x0005wxt4hriykkv0","content":"<p style=\"text-align:justify\"><img src=\"/assets/cfile25.uf.1426204B4F8FB5EA33A32B.jpg\" class=\"aligncenter\" width=\"632\" height=\"445\" filename=\"walking_son.jpg\" filemime=\"image/jpeg\" style=\"line-height:2;text-align:center\"></p><p style=\"line-height:2;text-align:right\"><span style=\"font-size:10pt\"><span style=\"font-size:9pt\">(사진출처 : 손현's facebook)</span></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">하루에 얼마나 걸으시나요? 2,000보? 5,000보? 걸음의 수를 정확히 측정할 수는 없지만 하루에 5,000보 이상을 걷는 사람은&nbsp;그렇게 많지 않을 것이라 생각이 듭니다. 아침에는 지하철을 타러 갈때나, 환승할 때나, 지하철에서 내려 회사까지 걸어갈 때 걷고, 저녁에 퇴근할때는&nbsp;이와는 반대 순서로 걷게 되지요. 조금 나은 사람들은 멀지 않은 거리는 걸어 다니거나, 점심시간에 산책을 하는 정도가 있겠습니다. 하지만 이 정도 걷는다고 하더라도 정작 계산해보면 그 숫자는 결코 많지 않다는 것을 알 수 있습니다.&nbsp;</span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"line-height:2;font-size:10pt\">한 사람의 평균 보폭을 70cm 정도(참고 자료에 의하면 젊은 여자의 경우 70cm 정도이고 남자는 74cm 정도라고 합니다</span><span style=\"line-height:2;font-size:10pt\">)라고 가정하고</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;시간당 4km를 걷는 사람이 한시간 동안 걷게되면&nbsp;그 사람의&nbsp;총 보폭수는 5,714보 정도가 됩니다. 지하철역까지 5분, 환승 5분, 회사까지 10분 정도로 가정하고 저녁에도 이를 반복하게 되면&nbsp;보통 하루 40분 정도를 걷게 되는데, 보폭수로 따져보면 약 3,809보가 되고 소모칼로리는 대략</span><span style=\"font-size:10pt\">&nbsp;150Kcal가 되겠지요(</span></span><span style=\"font-size:10pt;line-height:26px\">걷는 사람의 몸무게와 걷는 속도가 변수로 작용하겠지만 대략적으로는 이 정도 수치가 나온다고 간주합니다)</span><span style=\"font-size:10pt;line-height:2\">. 그나마 지하철이나 버스등의 대중교통을</span><span style=\"font-size:10pt;line-height:2\">&nbsp;타고 다녀야 이정도의 보폭수와 소모 칼로리가 발생하게 됩니다.</span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt;line-height:2\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">그렇다면 자동차를 타고 출퇴근하는 사람들의 경우는 어떨까요? 이들이 출퇴근하는 모습을 상상해봅시다.</span><span style=\"font-size:10pt\">&nbsp;우선 집을 나서서 집</span><span style=\"font-size:10pt\">앞에 주차된 자동차까지 걸어갑니다. 자동차 시동을 걸고</span><span style=\"font-size:10pt\">&nbsp;회사 지하주차장까지 앉아서 운전합니다. 그리고</span><span style=\"font-size:10pt\">&nbsp;주차장에 차를 세워둔 다음</span><span style=\"font-size:10pt\">&nbsp;근처에 있는 엘리베이터까지 걸어가겠지요. 그 다음&nbsp;</span><span style=\"font-size:10pt\">엘레베이터를</span><span style=\"font-size:10pt\">&nbsp;타고 사무실이 있는 층까지 올라와서 자신의 자리까지 걸어서 들어갑니다.</span><span style=\"font-size:10pt\">&nbsp;만약 이런 방식의&nbsp;출퇴근이라면</span><span style=\"font-size:10pt\">&nbsp;집에서 나와서 자동차까지,</span><span style=\"font-size:10pt\">&nbsp;회사 주차장에 세워둔 자신의 차에서&nbsp;</span><span style=\"font-size:10pt\">엘레베이터까지, 엘레베이터에서 회사안 자기 자리까지 걷는 것만이&nbsp;출</span><span style=\"font-size:10pt\">근 동안 걷는 걸음 수의 전부일 것입니다. </span><span style=\"font-size:10pt\">퇴근시에도 반복한다고 가정하고&nbsp;</span></span><span style=\"line-height:26px;font-size:10pt\">그 수에&nbsp;</span><span style=\"line-height:2;font-size:10pt\">2를 곱하면</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;이 사람이 하루동안</span><span style=\"font-size:10pt\">&nbsp;출퇴근을 통해 걷는 총 걸음 수가 나오게 됩니다</span></span><span style=\"line-height:2;font-size:10pt\">. 하지만&nbsp;그</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;수는 많아도&nbsp;</span><span style=\"font-size:10pt\">1,000보에</span><span style=\"font-size:10pt\">&nbsp;미치기</span><span style=\"font-size:10pt\">&nbsp;어려울 것입니다</span></span><span style=\"line-height:2;font-size:10pt\">.</span></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">위에 보시는 사진은 오래전에 유행하던 만보기입니다. 하루 만보 걸으면 건강해진다는 말로 한때 너도나도 허리춤에 하나씩 가지고 다녔었지요. 그렇다면&nbsp;하루에 만보를 걸으면 어느 정도의&nbsp;효과가 있을까요? 위에서 3,809보를 걸었을때 대략 150Kcal가 소모된다고 했으므로, 이 수치를 10,000보로 환산해보면 대략 400Kcal에 조금 못미치는 칼로리 소모량이 나옵니다. &nbsp;자전거를 한 시간 타야 300Kcal 정도가 소모되는 것을 감안하면 결코 낮은 수치는 아니지요.&nbsp;</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걷는 것이&nbsp;런닝이나 다른 운동들보다 상대적으로 칼로리 소모량이 큰 것은 아니지만 걷기 운동에는&nbsp;여러가지 장점이 있습니다. 바로 아래와 같은 것들이지요.</span></font></p><ul style=\"list-style-type:disc\"><li><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\">심폐기능 상승 및 혈액순환 촉진</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">체지방 감소 및 성인병 예방</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">골밀도 유지로 인한 골다공증 예방</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">스트레스 해소 및 불안감, 우울증 해소</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">면역력 증가</span></font></p></li></ul><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">위와 같은 내용들은&nbsp;당연하고 익히 알려진 장점들입니다. 하지만 조금만 생각해보면 거의 모든 운동들이 위와 같은 장점들을 가지고 있는 것을 알 수 있습니다.&nbsp;그렇다면 과연 운동으로서의 걷기가 아닌 걷기 자체만으로의 장점은 어떤 것이 있을까요? 제가 걷는 것을 좋아하고 또 즐겨 하기 때문에 제 경험을 바탕으로 한 장점&nbsp;몇 가지를 추려보면 다음과 같습니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>1. 사색</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걷는 것은 곧 생각하는 것과 연결됩니다. 단순히 걷기 때문에 생각되어 지는&nbsp;것이 아니라 걷기와 생각하는 것 사이에는 좀 더 과학적인 근거가&nbsp;존재합니다. 사람의 몸은&nbsp;땅에 발을 내딛을 때마다 발의 신경부터 시작해서 온몸의 근육이&nbsp;걷는 행위 중에 균형을 잃지 않도록 활동하게 됩니다. 걷는 행위라는 것은 이러한 움직임의&nbsp;반복이기 때문에 활발하게 활동하는&nbsp;신경과 세포들이 뇌신경의 활동에도&nbsp;영향을 미쳐서&nbsp;사색(생각)으로 이어지는 것입니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>2. 관찰</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">도보 여행을 해본 사람들이라면 다들 알고 있을 거라 생각합니다.&nbsp;걷는 것은 기차나 자동차를 타고 지나가는 것과 다릅니다.&nbsp;기차나 자동차를 타고 가면서 보는 창밖의 풍경들에서는 놓쳤던 많은 것들을 걸음을 통해&nbsp;모두 관찰할 수 있습니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>3. 대화</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걸음은 자신과의 대화를 가능하게 합니다. 아무도 없고 아무 소리도 나지 않는 조용한&nbsp;시골길이나 텅빈 도로를 혼자서 걷다보면 자연스럽게 자신이 누구이고 어디로 가야하는지에&nbsp;대한 깊은 생각에 빠지게 됩니다.</span></font></p><p style=\"line-height:1.5;text-align:justify\"></p>","excerpt":"","more":"<p style=\"text-align:justify\"><img src=\"/assets/cfile25.uf.1426204B4F8FB5EA33A32B.jpg\" class=\"aligncenter\" width=\"632\" height=\"445\" filename=\"walking_son.jpg\" filemime=\"image/jpeg\" style=\"line-height:2;text-align:center\"></p><p style=\"line-height:2;text-align:right\"><span style=\"font-size:10pt\"><span style=\"font-size:9pt\">(사진출처 : 손현's facebook)</span></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">하루에 얼마나 걸으시나요? 2,000보? 5,000보? 걸음의 수를 정확히 측정할 수는 없지만 하루에 5,000보 이상을 걷는 사람은&nbsp;그렇게 많지 않을 것이라 생각이 듭니다. 아침에는 지하철을 타러 갈때나, 환승할 때나, 지하철에서 내려 회사까지 걸어갈 때 걷고, 저녁에 퇴근할때는&nbsp;이와는 반대 순서로 걷게 되지요. 조금 나은 사람들은 멀지 않은 거리는 걸어 다니거나, 점심시간에 산책을 하는 정도가 있겠습니다. 하지만 이 정도 걷는다고 하더라도 정작 계산해보면 그 숫자는 결코 많지 않다는 것을 알 수 있습니다.&nbsp;</span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"line-height:2;font-size:10pt\">한 사람의 평균 보폭을 70cm 정도(참고 자료에 의하면 젊은 여자의 경우 70cm 정도이고 남자는 74cm 정도라고 합니다</span><span style=\"line-height:2;font-size:10pt\">)라고 가정하고</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;시간당 4km를 걷는 사람이 한시간 동안 걷게되면&nbsp;그 사람의&nbsp;총 보폭수는 5,714보 정도가 됩니다. 지하철역까지 5분, 환승 5분, 회사까지 10분 정도로 가정하고 저녁에도 이를 반복하게 되면&nbsp;보통 하루 40분 정도를 걷게 되는데, 보폭수로 따져보면 약 3,809보가 되고 소모칼로리는 대략</span><span style=\"font-size:10pt\">&nbsp;150Kcal가 되겠지요(</span></span><span style=\"font-size:10pt;line-height:26px\">걷는 사람의 몸무게와 걷는 속도가 변수로 작용하겠지만 대략적으로는 이 정도 수치가 나온다고 간주합니다)</span><span style=\"font-size:10pt;line-height:2\">. 그나마 지하철이나 버스등의 대중교통을</span><span style=\"font-size:10pt;line-height:2\">&nbsp;타고 다녀야 이정도의 보폭수와 소모 칼로리가 발생하게 됩니다.</span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt;line-height:2\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">그렇다면 자동차를 타고 출퇴근하는 사람들의 경우는 어떨까요? 이들이 출퇴근하는 모습을 상상해봅시다.</span><span style=\"font-size:10pt\">&nbsp;우선 집을 나서서 집</span><span style=\"font-size:10pt\">앞에 주차된 자동차까지 걸어갑니다. 자동차 시동을 걸고</span><span style=\"font-size:10pt\">&nbsp;회사 지하주차장까지 앉아서 운전합니다. 그리고</span><span style=\"font-size:10pt\">&nbsp;주차장에 차를 세워둔 다음</span><span style=\"font-size:10pt\">&nbsp;근처에 있는 엘리베이터까지 걸어가겠지요. 그 다음&nbsp;</span><span style=\"font-size:10pt\">엘레베이터를</span><span style=\"font-size:10pt\">&nbsp;타고 사무실이 있는 층까지 올라와서 자신의 자리까지 걸어서 들어갑니다.</span><span style=\"font-size:10pt\">&nbsp;만약 이런 방식의&nbsp;출퇴근이라면</span><span style=\"font-size:10pt\">&nbsp;집에서 나와서 자동차까지,</span><span style=\"font-size:10pt\">&nbsp;회사 주차장에 세워둔 자신의 차에서&nbsp;</span><span style=\"font-size:10pt\">엘레베이터까지, 엘레베이터에서 회사안 자기 자리까지 걷는 것만이&nbsp;출</span><span style=\"font-size:10pt\">근 동안 걷는 걸음 수의 전부일 것입니다. </span><span style=\"font-size:10pt\">퇴근시에도 반복한다고 가정하고&nbsp;</span></span><span style=\"line-height:26px;font-size:10pt\">그 수에&nbsp;</span><span style=\"line-height:2;font-size:10pt\">2를 곱하면</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;이 사람이 하루동안</span><span style=\"font-size:10pt\">&nbsp;출퇴근을 통해 걷는 총 걸음 수가 나오게 됩니다</span></span><span style=\"line-height:2;font-size:10pt\">. 하지만&nbsp;그</span><span style=\"font-size:10pt;line-height:2\"><span style=\"font-size:10pt\">&nbsp;수는 많아도&nbsp;</span><span style=\"font-size:10pt\">1,000보에</span><span style=\"font-size:10pt\">&nbsp;미치기</span><span style=\"font-size:10pt\">&nbsp;어려울 것입니다</span></span><span style=\"line-height:2;font-size:10pt\">.</span></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">위에 보시는 사진은 오래전에 유행하던 만보기입니다. 하루 만보 걸으면 건강해진다는 말로 한때 너도나도 허리춤에 하나씩 가지고 다녔었지요. 그렇다면&nbsp;하루에 만보를 걸으면 어느 정도의&nbsp;효과가 있을까요? 위에서 3,809보를 걸었을때 대략 150Kcal가 소모된다고 했으므로, 이 수치를 10,000보로 환산해보면 대략 400Kcal에 조금 못미치는 칼로리 소모량이 나옵니다. &nbsp;자전거를 한 시간 타야 300Kcal 정도가 소모되는 것을 감안하면 결코 낮은 수치는 아니지요.&nbsp;</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걷는 것이&nbsp;런닝이나 다른 운동들보다 상대적으로 칼로리 소모량이 큰 것은 아니지만 걷기 운동에는&nbsp;여러가지 장점이 있습니다. 바로 아래와 같은 것들이지요.</span></font></p><ul style=\"list-style-type:disc\"><li><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\">심폐기능 상승 및 혈액순환 촉진</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">체지방 감소 및 성인병 예방</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">골밀도 유지로 인한 골다공증 예방</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">스트레스 해소 및 불안감, 우울증 해소</span></font></p></li><li style=\"line-height:2\"><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">면역력 증가</span></font></p></li></ul><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">위와 같은 내용들은&nbsp;당연하고 익히 알려진 장점들입니다. 하지만 조금만 생각해보면 거의 모든 운동들이 위와 같은 장점들을 가지고 있는 것을 알 수 있습니다.&nbsp;그렇다면 과연 운동으로서의 걷기가 아닌 걷기 자체만으로의 장점은 어떤 것이 있을까요? 제가 걷는 것을 좋아하고 또 즐겨 하기 때문에 제 경험을 바탕으로 한 장점&nbsp;몇 가지를 추려보면 다음과 같습니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>1. 사색</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걷는 것은 곧 생각하는 것과 연결됩니다. 단순히 걷기 때문에 생각되어 지는&nbsp;것이 아니라 걷기와 생각하는 것 사이에는 좀 더 과학적인 근거가&nbsp;존재합니다. 사람의 몸은&nbsp;땅에 발을 내딛을 때마다 발의 신경부터 시작해서 온몸의 근육이&nbsp;걷는 행위 중에 균형을 잃지 않도록 활동하게 됩니다. 걷는 행위라는 것은 이러한 움직임의&nbsp;반복이기 때문에 활발하게 활동하는&nbsp;신경과 세포들이 뇌신경의 활동에도&nbsp;영향을 미쳐서&nbsp;사색(생각)으로 이어지는 것입니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>2. 관찰</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">도보 여행을 해본 사람들이라면 다들 알고 있을 거라 생각합니다.&nbsp;걷는 것은 기차나 자동차를 타고 지나가는 것과 다릅니다.&nbsp;기차나 자동차를 타고 가면서 보는 창밖의 풍경들에서는 놓쳤던 많은 것들을 걸음을 통해&nbsp;모두 관찰할 수 있습니다.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><b>3. 대화</b></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">걸음은 자신과의 대화를 가능하게 합니다. 아무도 없고 아무 소리도 나지 않는 조용한&nbsp;시골길이나 텅빈 도로를 혼자서 걷다보면 자연스럽게 자신이 누구이고 어디로 가야하는지에&nbsp;대한 깊은 생각에 빠지게 됩니다.</span></font></p><p style=\"line-height:1.5;text-align:justify\"></p>"},{"layout":"post","comments":1,"title":"대화가 필요해(?)","date":"2012-05-08T22:30:34.000Z","type":"post","published":1,"status":"publish","meta":{"_thumbnail_id":"758","_wpas_done_all":"1","_wpas_skip_6779368":"1","_edit_last":"1","_aioseop_keywords":"대화, 의사소통, 문자, 관계","_aioseop_title":"대화가 필요해(?)","dsq_thread_id":"2965283467"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"text-align: justify;\"><span style=\"font-size: 13px; line-height: 26px;\">연인, 친구, 가족을 포함한 모든 관계에서 대화는 갈등을 해소하는 가장 좋은 수단입니다. 여자친구와 싸웠거나, 친구와 다퉜을 때도 감정을 배제하고 차분하게  대화를 해보면 사실 아무것도 아닌 경우가 대부분이지요. 하지만 감정에 휘둘리거나 자존심의 이유로 다툰 상대와 계속해서 대화하기를 꺼려하다가는 두 사람은 다시는 돌이킬 수 없는 관계가 될 수도 있습니다. 그만큼 대화라는 것은 인간사회의 '관계'에서 굉장히 중요한 부분입니다. </span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\">일반적으로 우리는, 인간 사이에서 발생하는 대부분의 대화는 말이라는 음성으로 이루어지는 것이라 여깁니다. 하지만 한 연구에 따르면, 실제 인간 사이의 의사소통 과정에서 말 자체가 차지하는 비중은 약 10퍼센트 정도밖에  안된다고 합니다. 나머지 90퍼센트는 의사소통 과정 중에서 나타나는 말투, 억양, 행동, 태도, 상황, 몸짓, 눈빛, 뉘앙스 등이 차지하고 있습니다. 이 말은 즉, 같은 말을 해도 내가 어떤 상황에서 어떤 태도로 하느냐에 따라서 받아들이는 사람의 입장에서는 극과 극이 될 수 있다는 것입니다. 대화가 갈등을 해소하는 가장 좋은 수단이 될 수도 있지만, 반대로 관계를 해치는 가장 나쁜 수단이 될 수도 있습니다.</span><span style=\"font-size: 10pt; line-height: 26px;\">  </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">우리 사회에서 말로 인한 문제는 이미 우리 일상에서 쉽게 찾아볼 수 있습니다. 메신저나 문자메세지가 그렇습니다. 메신저 상의 대화는 글로만 이루어져 있습니다. 컴퓨터나 스마트폰으로 전달하는 이 메세지에는 글자만 있을 뿐 말하는 사람의 감정이나 억양, 행동 등을 제대로 표현되어 있지 않습니다. 그렇다보니 받아들이는 사람의 입장에서는 전달된 메세지만 보기 때문에 </span></span><span style=\"font-size: 10pt; line-height: 26px;\">전달하는 사람의 의도와 상관없이</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"line-height: 26px; font-size: 10pt;\">쉽게 오해를 할 수 있습니다. 아마 남성분들이라면 연인에게 이모티콘 하나 없는 건조한 메세지를 보냈다가 괜한 다툼으로 번졌던 일을 한번쯤 겪어 보셨을 것입니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\">\n<p style=\"text-align: center; clear: none; float: none;\"><img class=\"aligncenter\" src=\"{{ site.baseurl }}/assets/cfile29.uf.1926F23A4FE1269625D396.jpg\" alt=\"\" width=\"632\" height=\"472\" /></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">세상에는 말이 필요 없는 관계도 있습니다. 서로 말이 통하지 않아도 충분히 서로를 아끼고, 사랑할 줄 압니다. 말이 통하지 않는데 어떻게 서로를 이해하고 사랑하냐구요? 위에서 언급했듯 인간이 행하는 의사소통에는 말을 제외한 다른 요소들이 약 90퍼센트를 차지하고 있기에 10퍼센트밖에 차지하고 있지 않은 '말'이 없다고 해서 서로를 사랑하지 못한다는 것은 말도 안되는 얘기입니다.</span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">우리 삶은 너무나도 크게 말에 의존하고 있습니다. 스마트폰이 보급되면서 그 의존도는 더 커졌지요. 만나서 얼굴을 마주하고 얘기하는 것 보다 스마트폰의 자판을 누르며 건조한 말(?)을 주고 받는 것이 더 편한 세상입니다. 심지어는 바로 옆자리에 앉은 사람과도 메신저로 말을 주고 받지요. </span></span><span style=\"line-height: 26px; font-size: 10pt;\">대화는 말을 주고 받는</span><span style=\"line-height: 26px; font-size: 10pt;\"> 단순한 것이 아닙니다. 대화는 상대방을 마주하고</span><span style=\"line-height: 26px; font-size: 10pt;\"> 눈과 표정을 보면서</span><span style=\"line-height: 26px; font-size: 10pt;\"> 마음을 주고 받는 행위입니다</span><span style=\"line-height: 26px; font-size: 10pt;\">. 상대방이 하는 말이 중요한 것이 아니라 상대가 어떤 마음으로 이 말을 하는가가 더 중요한 것입니다.</span><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">컴퓨터와 스마트폰의 발달이 우리의 삶을 훨씬 편하게 만들어 준 것은 부정할 수 없는 사실입니다. 하지만 가</span></span><span style=\"font-size: 10pt; line-height: 26px;\">끔은</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"font-size: 10pt; line-height: 26px;\">누군가와 키보드나 스마트폰이 아닌 눈으로, 건조한 메세지가 아닌 마음으로 대화를 나누어 보는 것이 어떨까요?</span></p>\n","source":"_posts/2012-05-09-need-conversation.html","raw":"---\nlayout: post\ncomments: true\ntitle: 대화가 필요해(?)\ndate: 2012-05-09 16:30:34.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- 관계\n- 대화\n- 문자\n- 의사소통\nmeta:\n  _thumbnail_id: '758'\n  _wpas_done_all: '1'\n  _wpas_skip_6779368: '1'\n  _edit_last: '1'\n  _aioseop_keywords: 대화, 의사소통, 문자, 관계\n  _aioseop_title: 대화가 필요해(?)\n  dsq_thread_id: '2965283467'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"text-align: justify;\"><span style=\"font-size: 13px; line-height: 26px;\">연인, 친구, 가족을 포함한 모든 관계에서 대화는 갈등을 해소하는 가장 좋은 수단입니다. 여자친구와 싸웠거나, 친구와 다퉜을 때도 감정을 배제하고 차분하게  대화를 해보면 사실 아무것도 아닌 경우가 대부분이지요. 하지만 감정에 휘둘리거나 자존심의 이유로 다툰 상대와 계속해서 대화하기를 꺼려하다가는 두 사람은 다시는 돌이킬 수 없는 관계가 될 수도 있습니다. 그만큼 대화라는 것은 인간사회의 '관계'에서 굉장히 중요한 부분입니다. </span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\">일반적으로 우리는, 인간 사이에서 발생하는 대부분의 대화는 말이라는 음성으로 이루어지는 것이라 여깁니다. 하지만 한 연구에 따르면, 실제 인간 사이의 의사소통 과정에서 말 자체가 차지하는 비중은 약 10퍼센트 정도밖에  안된다고 합니다. 나머지 90퍼센트는 의사소통 과정 중에서 나타나는 말투, 억양, 행동, 태도, 상황, 몸짓, 눈빛, 뉘앙스 등이 차지하고 있습니다. 이 말은 즉, 같은 말을 해도 내가 어떤 상황에서 어떤 태도로 하느냐에 따라서 받아들이는 사람의 입장에서는 극과 극이 될 수 있다는 것입니다. 대화가 갈등을 해소하는 가장 좋은 수단이 될 수도 있지만, 반대로 관계를 해치는 가장 나쁜 수단이 될 수도 있습니다.</span><span style=\"font-size: 10pt; line-height: 26px;\">  </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">우리 사회에서 말로 인한 문제는 이미 우리 일상에서 쉽게 찾아볼 수 있습니다. 메신저나 문자메세지가 그렇습니다. 메신저 상의 대화는 글로만 이루어져 있습니다. 컴퓨터나 스마트폰으로 전달하는 이 메세지에는 글자만 있을 뿐 말하는 사람의 감정이나 억양, 행동 등을 제대로 표현되어 있지 않습니다. 그렇다보니 받아들이는 사람의 입장에서는 전달된 메세지만 보기 때문에 </span></span><span style=\"font-size: 10pt; line-height: 26px;\">전달하는 사람의 의도와 상관없이</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"line-height: 26px; font-size: 10pt;\">쉽게 오해를 할 수 있습니다. 아마 남성분들이라면 연인에게 이모티콘 하나 없는 건조한 메세지를 보냈다가 괜한 다툼으로 번졌던 일을 한번쯤 겪어 보셨을 것입니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\">\n<p style=\"text-align: center; clear: none; float: none;\"><img class=\"aligncenter\" src=\"{{ site.baseurl }}/assets/cfile29.uf.1926F23A4FE1269625D396.jpg\" alt=\"\" width=\"632\" height=\"472\" /></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">세상에는 말이 필요 없는 관계도 있습니다. 서로 말이 통하지 않아도 충분히 서로를 아끼고, 사랑할 줄 압니다. 말이 통하지 않는데 어떻게 서로를 이해하고 사랑하냐구요? 위에서 언급했듯 인간이 행하는 의사소통에는 말을 제외한 다른 요소들이 약 90퍼센트를 차지하고 있기에 10퍼센트밖에 차지하고 있지 않은 '말'이 없다고 해서 서로를 사랑하지 못한다는 것은 말도 안되는 얘기입니다.</span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">우리 삶은 너무나도 크게 말에 의존하고 있습니다. 스마트폰이 보급되면서 그 의존도는 더 커졌지요. 만나서 얼굴을 마주하고 얘기하는 것 보다 스마트폰의 자판을 누르며 건조한 말(?)을 주고 받는 것이 더 편한 세상입니다. 심지어는 바로 옆자리에 앉은 사람과도 메신저로 말을 주고 받지요. </span></span><span style=\"line-height: 26px; font-size: 10pt;\">대화는 말을 주고 받는</span><span style=\"line-height: 26px; font-size: 10pt;\"> 단순한 것이 아닙니다. 대화는 상대방을 마주하고</span><span style=\"line-height: 26px; font-size: 10pt;\"> 눈과 표정을 보면서</span><span style=\"line-height: 26px; font-size: 10pt;\"> 마음을 주고 받는 행위입니다</span><span style=\"line-height: 26px; font-size: 10pt;\">. 상대방이 하는 말이 중요한 것이 아니라 상대가 어떤 마음으로 이 말을 하는가가 더 중요한 것입니다.</span><span style=\"line-height: 26px; font-size: 10pt;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">컴퓨터와 스마트폰의 발달이 우리의 삶을 훨씬 편하게 만들어 준 것은 부정할 수 없는 사실입니다. 하지만 가</span></span><span style=\"font-size: 10pt; line-height: 26px;\">끔은</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"font-size: 10pt; line-height: 26px;\">누군가와 키보드나 스마트폰이 아닌 눈으로, 건조한 메세지가 아닌 마음으로 대화를 나누어 보는 것이 어떨까요?</span></p>\n","slug":"2012-05-09-need-conversation","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv600006wxt4f3ufr221","content":"<p style=\"text-align:justify\"><span style=\"font-size:13px;line-height:26px\">연인, 친구, 가족을 포함한 모든 관계에서 대화는 갈등을 해소하는 가장 좋은 수단입니다. 여자친구와 싸웠거나, 친구와 다퉜을 때도 감정을 배제하고 차분하게  대화를 해보면 사실 아무것도 아닌 경우가 대부분이지요. 하지만 감정에 휘둘리거나 자존심의 이유로 다툰 상대와 계속해서 대화하기를 꺼려하다가는 두 사람은 다시는 돌이킬 수 없는 관계가 될 수도 있습니다. 그만큼 대화라는 것은 인간사회의 '관계'에서 굉장히 중요한 부분입니다. </span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\">일반적으로 우리는, 인간 사이에서 발생하는 대부분의 대화는 말이라는 음성으로 이루어지는 것이라 여깁니다. 하지만 한 연구에 따르면, 실제 인간 사이의 의사소통 과정에서 말 자체가 차지하는 비중은 약 10퍼센트 정도밖에  안된다고 합니다. 나머지 90퍼센트는 의사소통 과정 중에서 나타나는 말투, 억양, 행동, 태도, 상황, 몸짓, 눈빛, 뉘앙스 등이 차지하고 있습니다. 이 말은 즉, 같은 말을 해도 내가 어떤 상황에서 어떤 태도로 하느냐에 따라서 받아들이는 사람의 입장에서는 극과 극이 될 수 있다는 것입니다. 대화가 갈등을 해소하는 가장 좋은 수단이 될 수도 있지만, 반대로 관계를 해치는 가장 나쁜 수단이 될 수도 있습니다.</span><span style=\"font-size:10pt;line-height:26px\">  </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">우리 사회에서 말로 인한 문제는 이미 우리 일상에서 쉽게 찾아볼 수 있습니다. 메신저나 문자메세지가 그렇습니다. 메신저 상의 대화는 글로만 이루어져 있습니다. 컴퓨터나 스마트폰으로 전달하는 이 메세지에는 글자만 있을 뿐 말하는 사람의 감정이나 억양, 행동 등을 제대로 표현되어 있지 않습니다. 그렇다보니 받아들이는 사람의 입장에서는 전달된 메세지만 보기 때문에 </span></span><span style=\"font-size:10pt;line-height:26px\">전달하는 사람의 의도와 상관없이</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"line-height:26px;font-size:10pt\">쉽게 오해를 할 수 있습니다. 아마 남성분들이라면 연인에게 이모티콘 하나 없는 건조한 메세지를 보냈다가 괜한 다툼으로 번졌던 일을 한번쯤 겪어 보셨을 것입니다.</span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"></p><p style=\"text-align:center;clear:none;float:none\"><img class=\"aligncenter\" src=\"/assets/cfile29.uf.1926F23A4FE1269625D396.jpg\" alt=\"\" width=\"632\" height=\"472\"></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">세상에는 말이 필요 없는 관계도 있습니다. 서로 말이 통하지 않아도 충분히 서로를 아끼고, 사랑할 줄 압니다. 말이 통하지 않는데 어떻게 서로를 이해하고 사랑하냐구요? 위에서 언급했듯 인간이 행하는 의사소통에는 말을 제외한 다른 요소들이 약 90퍼센트를 차지하고 있기에 10퍼센트밖에 차지하고 있지 않은 '말'이 없다고 해서 서로를 사랑하지 못한다는 것은 말도 안되는 얘기입니다.</span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">우리 삶은 너무나도 크게 말에 의존하고 있습니다. 스마트폰이 보급되면서 그 의존도는 더 커졌지요. 만나서 얼굴을 마주하고 얘기하는 것 보다 스마트폰의 자판을 누르며 건조한 말(?)을 주고 받는 것이 더 편한 세상입니다. 심지어는 바로 옆자리에 앉은 사람과도 메신저로 말을 주고 받지요. </span></span><span style=\"line-height:26px;font-size:10pt\">대화는 말을 주고 받는</span><span style=\"line-height:26px;font-size:10pt\"> 단순한 것이 아닙니다. 대화는 상대방을 마주하고</span><span style=\"line-height:26px;font-size:10pt\"> 눈과 표정을 보면서</span><span style=\"line-height:26px;font-size:10pt\"> 마음을 주고 받는 행위입니다</span><span style=\"line-height:26px;font-size:10pt\">. 상대방이 하는 말이 중요한 것이 아니라 상대가 어떤 마음으로 이 말을 하는가가 더 중요한 것입니다.</span><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">컴퓨터와 스마트폰의 발달이 우리의 삶을 훨씬 편하게 만들어 준 것은 부정할 수 없는 사실입니다. 하지만 가</span></span><span style=\"font-size:10pt;line-height:26px\">끔은</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"font-size:10pt;line-height:26px\">누군가와 키보드나 스마트폰이 아닌 눈으로, 건조한 메세지가 아닌 마음으로 대화를 나누어 보는 것이 어떨까요?</span></p>","excerpt":"","more":"<p style=\"text-align:justify\"><span style=\"font-size:13px;line-height:26px\">연인, 친구, 가족을 포함한 모든 관계에서 대화는 갈등을 해소하는 가장 좋은 수단입니다. 여자친구와 싸웠거나, 친구와 다퉜을 때도 감정을 배제하고 차분하게  대화를 해보면 사실 아무것도 아닌 경우가 대부분이지요. 하지만 감정에 휘둘리거나 자존심의 이유로 다툰 상대와 계속해서 대화하기를 꺼려하다가는 두 사람은 다시는 돌이킬 수 없는 관계가 될 수도 있습니다. 그만큼 대화라는 것은 인간사회의 '관계'에서 굉장히 중요한 부분입니다. </span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\">일반적으로 우리는, 인간 사이에서 발생하는 대부분의 대화는 말이라는 음성으로 이루어지는 것이라 여깁니다. 하지만 한 연구에 따르면, 실제 인간 사이의 의사소통 과정에서 말 자체가 차지하는 비중은 약 10퍼센트 정도밖에  안된다고 합니다. 나머지 90퍼센트는 의사소통 과정 중에서 나타나는 말투, 억양, 행동, 태도, 상황, 몸짓, 눈빛, 뉘앙스 등이 차지하고 있습니다. 이 말은 즉, 같은 말을 해도 내가 어떤 상황에서 어떤 태도로 하느냐에 따라서 받아들이는 사람의 입장에서는 극과 극이 될 수 있다는 것입니다. 대화가 갈등을 해소하는 가장 좋은 수단이 될 수도 있지만, 반대로 관계를 해치는 가장 나쁜 수단이 될 수도 있습니다.</span><span style=\"font-size:10pt;line-height:26px\">  </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">우리 사회에서 말로 인한 문제는 이미 우리 일상에서 쉽게 찾아볼 수 있습니다. 메신저나 문자메세지가 그렇습니다. 메신저 상의 대화는 글로만 이루어져 있습니다. 컴퓨터나 스마트폰으로 전달하는 이 메세지에는 글자만 있을 뿐 말하는 사람의 감정이나 억양, 행동 등을 제대로 표현되어 있지 않습니다. 그렇다보니 받아들이는 사람의 입장에서는 전달된 메세지만 보기 때문에 </span></span><span style=\"font-size:10pt;line-height:26px\">전달하는 사람의 의도와 상관없이</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"line-height:26px;font-size:10pt\">쉽게 오해를 할 수 있습니다. 아마 남성분들이라면 연인에게 이모티콘 하나 없는 건조한 메세지를 보냈다가 괜한 다툼으로 번졌던 일을 한번쯤 겪어 보셨을 것입니다.</span></p><p style=\"text-align:justify\"><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"></p><p style=\"text-align:center;clear:none;float:none\"><img class=\"aligncenter\" src=\"/assets/cfile29.uf.1926F23A4FE1269625D396.jpg\" alt=\"\" width=\"632\" height=\"472\"></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">세상에는 말이 필요 없는 관계도 있습니다. 서로 말이 통하지 않아도 충분히 서로를 아끼고, 사랑할 줄 압니다. 말이 통하지 않는데 어떻게 서로를 이해하고 사랑하냐구요? 위에서 언급했듯 인간이 행하는 의사소통에는 말을 제외한 다른 요소들이 약 90퍼센트를 차지하고 있기에 10퍼센트밖에 차지하고 있지 않은 '말'이 없다고 해서 서로를 사랑하지 못한다는 것은 말도 안되는 얘기입니다.</span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">우리 삶은 너무나도 크게 말에 의존하고 있습니다. 스마트폰이 보급되면서 그 의존도는 더 커졌지요. 만나서 얼굴을 마주하고 얘기하는 것 보다 스마트폰의 자판을 누르며 건조한 말(?)을 주고 받는 것이 더 편한 세상입니다. 심지어는 바로 옆자리에 앉은 사람과도 메신저로 말을 주고 받지요. </span></span><span style=\"line-height:26px;font-size:10pt\">대화는 말을 주고 받는</span><span style=\"line-height:26px;font-size:10pt\"> 단순한 것이 아닙니다. 대화는 상대방을 마주하고</span><span style=\"line-height:26px;font-size:10pt\"> 눈과 표정을 보면서</span><span style=\"line-height:26px;font-size:10pt\"> 마음을 주고 받는 행위입니다</span><span style=\"line-height:26px;font-size:10pt\">. 상대방이 하는 말이 중요한 것이 아니라 상대가 어떤 마음으로 이 말을 하는가가 더 중요한 것입니다.</span><span style=\"line-height:26px;font-size:10pt\"> </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">컴퓨터와 스마트폰의 발달이 우리의 삶을 훨씬 편하게 만들어 준 것은 부정할 수 없는 사실입니다. 하지만 가</span></span><span style=\"font-size:10pt;line-height:26px\">끔은</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"font-size:10pt;line-height:26px\">누군가와 키보드나 스마트폰이 아닌 눈으로, 건조한 메세지가 아닌 마음으로 대화를 나누어 보는 것이 어떨까요?</span></p>"},{"layout":"post","comments":1,"title":"글을 써야 한다는 것의 집착","date":"2014-01-02T11:04:28.000Z","type":"post","published":1,"status":"publish","meta":{"_wpas_done_all":"1","_wpas_skip_6779368":"1","_edit_last":"1","_aioseop_title":"글을 써야 한다는 것의 집착","_aioseop_keywords":"글쓰기"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\">블로그 글도 몇 개 되지 않지만 블로그를 거의 내버려둔 시간이 오래되었습니다. 심지어 티스토리 로그인이 3개월이 넘어서 휴면 계정을 해제 하라고 하더군요. 처음 블로그를 시작할 때는 특정 주제에 대해(주로 환경과 관련된) 어느정도의 길이의 완성된 글을 쓰겠다는 생각이었습니다만, 글을 쓰는게 익숙하지 않은 상태의 사람이 갑자기 완성된 형태의 글을 쓴다는 것은 많은 시간의 할애가 필요한 일이더군요. 자료의 수집에서 시작해서 모은 자료를 정리하고 정리된 자료를 통해서 주제를 선정하고 거기에 내 의견을 더하여 글을 쓰고 두어번 퇴고의 과정을 거치다보면 대충 3~4시간이 소요 되더군요. 제가 그렇게 부지런한 성격도 아니고 하루에 3~4시간을 글쓰는데 투자하는 것은 쉽지 않은 일이었습니다. 그러다보니 하루에 하나를 쓰겠다는 의지는 일주일에 세개, 두개가 되고 이런일 저런일이 있다보면&nbsp;자연스럽게&nbsp;글을 쓰는것을 멀리하게 되더군요.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\"><br /></span></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\">왜 그럴까 생각해보았습니다. 생각하다보니 몇가지 이유가 떠오르더군요.</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">1. 너무 전문적인 주제로 글을 쓰려는 생각</span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">2. 완성된 글을 쓰겠다는 생각</span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">3. 글을 길게 써야 한다는 것에 대한 집착</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\">대충 위의 세가지로 요약되는 것 같습니다. 우선 공통적으로 위의 세가지는 모두 블로그의 성격과 목적 때문에 발생한 문제입니다. 기본적으로 블로그는 혼자서 보고 기록하는 매체가 아니라 남들에게 자신의 생각을 보여주기 위한 공간입니다. 이러한 역학관계가 기본전제가 되기 때문에 가벼운 주제로 뒤죽박죽인 글을 쓰는게 쉽지 않은 것이지요.&nbsp;</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\">첫번 째, &nbsp;전문적인 주제에 대한 집착의 문제는 결국 위에서 언급한 공통적인 문제와 유사합니다. 내가 평소에 어떤생각을 가지고 있고 어떤 분야에 관심이 있는지를 쓰기보다는&nbsp;남들이 내가 쓴 글을 보고 어떻게 생각할까가 더 중요했던 것이지요.&nbsp;나 이런사람이다. 대단하지 않느냐? 이런식으로요. 결과적으로 대단히 관심도 없는 분야에 대해서 공부하고 자료를 수집하고 정리하는&nbsp;과정이<span style=\"font-size: 10pt;\">&nbsp;괜히 글쓰는 시간만&nbsp;더 길게 만든 것입니다.</span><span style=\"font-size: 10pt;\">&nbsp;</span><span style=\"font-size: 10pt;\">&nbsp;</span></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><span style=\"font-size: 10pt;\">두번 째, 완성된 글을 쓰겠다는 생각입니다. 이유는 다를게 없습니다. 누군가에게 내가 쓴 문장과 문맥, 표현 등을 보여줘야 하기 때문에 최대한 잘 쓰려고 하다보니 여러차례 퇴고과정을 거치게 되고 이 역시 글 쓰는 시간을 늘리는데 한몫하게 되었습니다.</span><span style=\"font-size: 10pt;\"></span></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\">사실 위의 두 가지 사항은 글을 쓰는 것을 멀리하게 되는 이유이긴 하지만, 어떤 주제를 가지고 완성된 글을 만들어가는 것은 여<span style=\"font-size: 10pt;\">전히 필요한 부분입니다. 세번째로 언급한 글을 길게 쓰는 것에 대한 집착은 조금은 다시 생각할 필요가 있을 것 같습니다. 글을 쓰는 주제에 따라 길게 쓸 필요가 있기도 하지만 가벼운 주제로 간단하게 글을 쓰고 싶은데 길게 써야한다는 압박감에 억지로 문장을 늘리고 사족을 덧붙이는 경우가 많았던 것 같습니다. 때로는</span><span style=\"font-size: 10pt;\">&nbsp;가볍고</span><span style=\"font-size: 10pt;\">&nbsp;짧막하게 쓰는 글이 읽는 이의 입장에서는 더욱 편하게 느껴질지도 모르지요.</span></span></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\">이제는 좀더 가벼운 주제로 아무렇게나 한번 써볼까 합니다. 그래서 남들에게 보여주기 부끄러워 에버노트에 끄적여 놓았던 몇가지 글들도 블로그로 옮겨놓으려구요. 아무튼 블로그 다시 한번 살려보지요.</span></p>\n<p style=\"line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"line-height: 2;\"><span style=\"font-size: 10pt;\"></span></p>\n","source":"_posts/2014-01-03-think-about-my-writing.html","raw":"---\nlayout: post\ncomments: true\ntitle: 글을 써야 한다는 것의 집착\ndate: 2014-01-03 05:04:28.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags: []\nmeta:\n  _wpas_done_all: '1'\n  _wpas_skip_6779368: '1'\n  _edit_last: '1'\n  _aioseop_title: 글을 써야 한다는 것의 집착\n  _aioseop_keywords: 글쓰기\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\">블로그 글도 몇 개 되지 않지만 블로그를 거의 내버려둔 시간이 오래되었습니다. 심지어 티스토리 로그인이 3개월이 넘어서 휴면 계정을 해제 하라고 하더군요. 처음 블로그를 시작할 때는 특정 주제에 대해(주로 환경과 관련된) 어느정도의 길이의 완성된 글을 쓰겠다는 생각이었습니다만, 글을 쓰는게 익숙하지 않은 상태의 사람이 갑자기 완성된 형태의 글을 쓴다는 것은 많은 시간의 할애가 필요한 일이더군요. 자료의 수집에서 시작해서 모은 자료를 정리하고 정리된 자료를 통해서 주제를 선정하고 거기에 내 의견을 더하여 글을 쓰고 두어번 퇴고의 과정을 거치다보면 대충 3~4시간이 소요 되더군요. 제가 그렇게 부지런한 성격도 아니고 하루에 3~4시간을 글쓰는데 투자하는 것은 쉽지 않은 일이었습니다. 그러다보니 하루에 하나를 쓰겠다는 의지는 일주일에 세개, 두개가 되고 이런일 저런일이 있다보면&nbsp;자연스럽게&nbsp;글을 쓰는것을 멀리하게 되더군요.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\"><br /></span></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\">왜 그럴까 생각해보았습니다. 생각하다보니 몇가지 이유가 떠오르더군요.</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">1. 너무 전문적인 주제로 글을 쓰려는 생각</span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">2. 완성된 글을 쓰겠다는 생각</span></font></p>\n<p style=\"margin-left: 2em; text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px; color: rgb(255, 0, 0);\">3. 글을 길게 써야 한다는 것에 대한 집착</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\">대충 위의 세가지로 요약되는 것 같습니다. 우선 공통적으로 위의 세가지는 모두 블로그의 성격과 목적 때문에 발생한 문제입니다. 기본적으로 블로그는 혼자서 보고 기록하는 매체가 아니라 남들에게 자신의 생각을 보여주기 위한 공간입니다. 이러한 역학관계가 기본전제가 되기 때문에 가벼운 주제로 뒤죽박죽인 글을 쓰는게 쉽지 않은 것이지요.&nbsp;</span></font></p>\n<p style=\"text-align: justify;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\">첫번 째, &nbsp;전문적인 주제에 대한 집착의 문제는 결국 위에서 언급한 공통적인 문제와 유사합니다. 내가 평소에 어떤생각을 가지고 있고 어떤 분야에 관심이 있는지를 쓰기보다는&nbsp;남들이 내가 쓴 글을 보고 어떻게 생각할까가 더 중요했던 것이지요.&nbsp;나 이런사람이다. 대단하지 않느냐? 이런식으로요. 결과적으로 대단히 관심도 없는 분야에 대해서 공부하고 자료를 수집하고 정리하는&nbsp;과정이<span style=\"font-size: 10pt;\">&nbsp;괜히 글쓰는 시간만&nbsp;더 길게 만든 것입니다.</span><span style=\"font-size: 10pt;\">&nbsp;</span><span style=\"font-size: 10pt;\">&nbsp;</span></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><span style=\"font-size: 10pt;\">두번 째, 완성된 글을 쓰겠다는 생각입니다. 이유는 다를게 없습니다. 누군가에게 내가 쓴 문장과 문맥, 표현 등을 보여줘야 하기 때문에 최대한 잘 쓰려고 하다보니 여러차례 퇴고과정을 거치게 되고 이 역시 글 쓰는 시간을 늘리는데 한몫하게 되었습니다.</span><span style=\"font-size: 10pt;\"></span></span></font></p>\n<p style=\"text-align: justify; line-height: 2;\"></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\">사실 위의 두 가지 사항은 글을 쓰는 것을 멀리하게 되는 이유이긴 하지만, 어떤 주제를 가지고 완성된 글을 만들어가는 것은 여<span style=\"font-size: 10pt;\">전히 필요한 부분입니다. 세번째로 언급한 글을 길게 쓰는 것에 대한 집착은 조금은 다시 생각할 필요가 있을 것 같습니다. 글을 쓰는 주제에 따라 길게 쓸 필요가 있기도 하지만 가벼운 주제로 간단하게 글을 쓰고 싶은데 길게 써야한다는 압박감에 억지로 문장을 늘리고 사족을 덧붙이는 경우가 많았던 것 같습니다. 때로는</span><span style=\"font-size: 10pt;\">&nbsp;가볍고</span><span style=\"font-size: 10pt;\">&nbsp;짧막하게 쓰는 글이 읽는 이의 입장에서는 더욱 편하게 느껴질지도 모르지요.</span></span></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\"><br /></span></p>\n<p style=\"text-align: justify; line-height: 2;\"><span style=\"font-size: 10pt;\">이제는 좀더 가벼운 주제로 아무렇게나 한번 써볼까 합니다. 그래서 남들에게 보여주기 부끄러워 에버노트에 끄적여 놓았던 몇가지 글들도 블로그로 옮겨놓으려구요. 아무튼 블로그 다시 한번 살려보지요.</span></p>\n<p style=\"line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"line-height: 2;\"><font size=\"2\"><span style=\"line-height: 26px;\"><br /></span></font></p>\n<p style=\"line-height: 2;\"><span style=\"font-size: 10pt;\"></span></p>\n","slug":"2014-01-03-think-about-my-writing","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv630007wxt4bseqol73","content":"<p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\">블로그 글도 몇 개 되지 않지만 블로그를 거의 내버려둔 시간이 오래되었습니다. 심지어 티스토리 로그인이 3개월이 넘어서 휴면 계정을 해제 하라고 하더군요. 처음 블로그를 시작할 때는 특정 주제에 대해(주로 환경과 관련된) 어느정도의 길이의 완성된 글을 쓰겠다는 생각이었습니다만, 글을 쓰는게 익숙하지 않은 상태의 사람이 갑자기 완성된 형태의 글을 쓴다는 것은 많은 시간의 할애가 필요한 일이더군요. 자료의 수집에서 시작해서 모은 자료를 정리하고 정리된 자료를 통해서 주제를 선정하고 거기에 내 의견을 더하여 글을 쓰고 두어번 퇴고의 과정을 거치다보면 대충 3~4시간이 소요 되더군요. 제가 그렇게 부지런한 성격도 아니고 하루에 3~4시간을 글쓰는데 투자하는 것은 쉽지 않은 일이었습니다. 그러다보니 하루에 하나를 쓰겠다는 의지는 일주일에 세개, 두개가 되고 이런일 저런일이 있다보면&nbsp;자연스럽게&nbsp;글을 쓰는것을 멀리하게 되더군요.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">왜 그럴까 생각해보았습니다. 생각하다보니 몇가지 이유가 떠오르더군요.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">1. 너무 전문적인 주제로 글을 쓰려는 생각</span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">2. 완성된 글을 쓰겠다는 생각</span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">3. 글을 길게 써야 한다는 것에 대한 집착</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">대충 위의 세가지로 요약되는 것 같습니다. 우선 공통적으로 위의 세가지는 모두 블로그의 성격과 목적 때문에 발생한 문제입니다. 기본적으로 블로그는 혼자서 보고 기록하는 매체가 아니라 남들에게 자신의 생각을 보여주기 위한 공간입니다. 이러한 역학관계가 기본전제가 되기 때문에 가벼운 주제로 뒤죽박죽인 글을 쓰는게 쉽지 않은 것이지요.&nbsp;</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\">첫번 째, &nbsp;전문적인 주제에 대한 집착의 문제는 결국 위에서 언급한 공통적인 문제와 유사합니다. 내가 평소에 어떤생각을 가지고 있고 어떤 분야에 관심이 있는지를 쓰기보다는&nbsp;남들이 내가 쓴 글을 보고 어떻게 생각할까가 더 중요했던 것이지요.&nbsp;나 이런사람이다. 대단하지 않느냐? 이런식으로요. 결과적으로 대단히 관심도 없는 분야에 대해서 공부하고 자료를 수집하고 정리하는&nbsp;과정이<span style=\"font-size:10pt\">&nbsp;괜히 글쓰는 시간만&nbsp;더 길게 만든 것입니다.</span><span style=\"font-size:10pt\">&nbsp;</span><span style=\"font-size:10pt\">&nbsp;</span></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><span style=\"font-size:10pt\">두번 째, 완성된 글을 쓰겠다는 생각입니다. 이유는 다를게 없습니다. 누군가에게 내가 쓴 문장과 문맥, 표현 등을 보여줘야 하기 때문에 최대한 잘 쓰려고 하다보니 여러차례 퇴고과정을 거치게 되고 이 역시 글 쓰는 시간을 늘리는데 한몫하게 되었습니다.</span><span style=\"font-size:10pt\"></span></span></font></p><p style=\"text-align:justify;line-height:2\"></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">사실 위의 두 가지 사항은 글을 쓰는 것을 멀리하게 되는 이유이긴 하지만, 어떤 주제를 가지고 완성된 글을 만들어가는 것은 여<span style=\"font-size:10pt\">전히 필요한 부분입니다. 세번째로 언급한 글을 길게 쓰는 것에 대한 집착은 조금은 다시 생각할 필요가 있을 것 같습니다. 글을 쓰는 주제에 따라 길게 쓸 필요가 있기도 하지만 가벼운 주제로 간단하게 글을 쓰고 싶은데 길게 써야한다는 압박감에 억지로 문장을 늘리고 사족을 덧붙이는 경우가 많았던 것 같습니다. 때로는</span><span style=\"font-size:10pt\">&nbsp;가볍고</span><span style=\"font-size:10pt\">&nbsp;짧막하게 쓰는 글이 읽는 이의 입장에서는 더욱 편하게 느껴질지도 모르지요.</span></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">이제는 좀더 가벼운 주제로 아무렇게나 한번 써볼까 합니다. 그래서 남들에게 보여주기 부끄러워 에버노트에 끄적여 놓았던 몇가지 글들도 블로그로 옮겨놓으려구요. 아무튼 블로그 다시 한번 살려보지요.</span></p><p style=\"line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"line-height:2\"><span style=\"font-size:10pt\"></span></p>","excerpt":"","more":"<p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\">블로그 글도 몇 개 되지 않지만 블로그를 거의 내버려둔 시간이 오래되었습니다. 심지어 티스토리 로그인이 3개월이 넘어서 휴면 계정을 해제 하라고 하더군요. 처음 블로그를 시작할 때는 특정 주제에 대해(주로 환경과 관련된) 어느정도의 길이의 완성된 글을 쓰겠다는 생각이었습니다만, 글을 쓰는게 익숙하지 않은 상태의 사람이 갑자기 완성된 형태의 글을 쓴다는 것은 많은 시간의 할애가 필요한 일이더군요. 자료의 수집에서 시작해서 모은 자료를 정리하고 정리된 자료를 통해서 주제를 선정하고 거기에 내 의견을 더하여 글을 쓰고 두어번 퇴고의 과정을 거치다보면 대충 3~4시간이 소요 되더군요. 제가 그렇게 부지런한 성격도 아니고 하루에 3~4시간을 글쓰는데 투자하는 것은 쉽지 않은 일이었습니다. 그러다보니 하루에 하나를 쓰겠다는 의지는 일주일에 세개, 두개가 되고 이런일 저런일이 있다보면&nbsp;자연스럽게&nbsp;글을 쓰는것을 멀리하게 되더군요.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">왜 그럴까 생각해보았습니다. 생각하다보니 몇가지 이유가 떠오르더군요.</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">1. 너무 전문적인 주제로 글을 쓰려는 생각</span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">2. 완성된 글을 쓰겠다는 생각</span></font></p><p style=\"margin-left:2em;text-align:justify\"><font size=\"2\"><span style=\"line-height:26px;color:red\">3. 글을 길게 써야 한다는 것에 대한 집착</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\">대충 위의 세가지로 요약되는 것 같습니다. 우선 공통적으로 위의 세가지는 모두 블로그의 성격과 목적 때문에 발생한 문제입니다. 기본적으로 블로그는 혼자서 보고 기록하는 매체가 아니라 남들에게 자신의 생각을 보여주기 위한 공간입니다. 이러한 역학관계가 기본전제가 되기 때문에 가벼운 주제로 뒤죽박죽인 글을 쓰는게 쉽지 않은 것이지요.&nbsp;</span></font></p><p style=\"text-align:justify\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\">첫번 째, &nbsp;전문적인 주제에 대한 집착의 문제는 결국 위에서 언급한 공통적인 문제와 유사합니다. 내가 평소에 어떤생각을 가지고 있고 어떤 분야에 관심이 있는지를 쓰기보다는&nbsp;남들이 내가 쓴 글을 보고 어떻게 생각할까가 더 중요했던 것이지요.&nbsp;나 이런사람이다. 대단하지 않느냐? 이런식으로요. 결과적으로 대단히 관심도 없는 분야에 대해서 공부하고 자료를 수집하고 정리하는&nbsp;과정이<span style=\"font-size:10pt\">&nbsp;괜히 글쓰는 시간만&nbsp;더 길게 만든 것입니다.</span><span style=\"font-size:10pt\">&nbsp;</span><span style=\"font-size:10pt\">&nbsp;</span></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"text-align:justify;line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><span style=\"font-size:10pt\">두번 째, 완성된 글을 쓰겠다는 생각입니다. 이유는 다를게 없습니다. 누군가에게 내가 쓴 문장과 문맥, 표현 등을 보여줘야 하기 때문에 최대한 잘 쓰려고 하다보니 여러차례 퇴고과정을 거치게 되고 이 역시 글 쓰는 시간을 늘리는데 한몫하게 되었습니다.</span><span style=\"font-size:10pt\"></span></span></font></p><p style=\"text-align:justify;line-height:2\"></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">사실 위의 두 가지 사항은 글을 쓰는 것을 멀리하게 되는 이유이긴 하지만, 어떤 주제를 가지고 완성된 글을 만들어가는 것은 여<span style=\"font-size:10pt\">전히 필요한 부분입니다. 세번째로 언급한 글을 길게 쓰는 것에 대한 집착은 조금은 다시 생각할 필요가 있을 것 같습니다. 글을 쓰는 주제에 따라 길게 쓸 필요가 있기도 하지만 가벼운 주제로 간단하게 글을 쓰고 싶은데 길게 써야한다는 압박감에 억지로 문장을 늘리고 사족을 덧붙이는 경우가 많았던 것 같습니다. 때로는</span><span style=\"font-size:10pt\">&nbsp;가볍고</span><span style=\"font-size:10pt\">&nbsp;짧막하게 쓰는 글이 읽는 이의 입장에서는 더욱 편하게 느껴질지도 모르지요.</span></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\"><br></span></p><p style=\"text-align:justify;line-height:2\"><span style=\"font-size:10pt\">이제는 좀더 가벼운 주제로 아무렇게나 한번 써볼까 합니다. 그래서 남들에게 보여주기 부끄러워 에버노트에 끄적여 놓았던 몇가지 글들도 블로그로 옮겨놓으려구요. 아무튼 블로그 다시 한번 살려보지요.</span></p><p style=\"line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"line-height:2\"><font size=\"2\"><span style=\"line-height:26px\"><br></span></font></p><p style=\"line-height:2\"><span style=\"font-size:10pt\"></span></p>"},{"layout":"post","comments":1,"title":"기억(추억)의 형상화","date":"2012-05-21T21:36:56.000Z","type":"post","published":1,"status":"publish","meta":{"_thumbnail_id":"761","_wpas_done_all":"1","_wpas_skip_6779368":"1","_edit_last":"1","_aioseop_keywords":"기억, 추억, 여행, 도보여행, 형상화","_aioseop_title":"기억(추억)의 형상화","dsq_thread_id":"3453727393"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"line-height: 2; text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\">기억은 시간이 지남에 따라서 점차 희미해지거나, 또는 다른 색을 입고는 변색되기 마련입니다. </span><span style=\"font-size: 10pt; line-height: 26px;\">인간에게 있어 기억이라는 것은 컴퓨터에 저장해 놓은 파일들과는 다른 종류의 것이지요. </span><span style=\"font-size: 10pt; line-height: 26px;\">대부분의 사람들은 </span><span style=\"font-size: 10pt; line-height: 26px;\">과거의 순간들 혹은 </span><span style=\"font-size: 10pt; line-height: 26px;\">그 때의 생각이나</span><span style=\"font-size: 10pt; line-height: 26px;\"> 감정을 어렴풋이 알수는 있지만 정확히 기억해내지 못합니다. 그렇기 때문에</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"font-size: 10pt; line-height: 26px;\">찢어질듯이 가슴아픈 이별의 순간도 시간이 지나면 무뎌지기 마련이지요.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\">기억 혹은 추억을 형상화 하는 방법에는 크게 두 가지가 있습니다.  사진으로 남기는 방법, 그리고 글로써 남기는 방법입니다(사실 이 두 가지 외에도 여러가지가 있겠지만, 여기에서는 위의 형태로만 나누겠습니다). 두 가지 중 가장 흔히 사용되는 것은 바로 사진을 이용하는 방법입니다. </span><span style=\"font-size: 10pt;\">사진으로 남기는 방법의 가장 큰 장점은 무엇보다 쉽고 빠르게 만들어 낼 수 있다는 점입니다. </span><span style=\"font-size: 10pt; line-height: 2;\">이제는 흔하다 못해 누구나 가지고 있는 </span><span style=\"font-size: 10pt; line-height: 2;\">디지털카메라</span><span style=\"font-size: 10pt; line-height: 2;\">나 스마트폰만 있으면 언제 어디서나 손쉽게 순간을 사진으로 남길 수 있고, 보고 싶을 때면 언제나 꺼내어 볼 수도 있습니다. </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 13px; line-height: 26px;\">과거 수십년 전만해도 사진의 속성은 지금과는 조금 달랐습니다. 지금이야 사진을 찍었다가 맘에 들지 않으면 지우면 그만이지만, 과거의 필름 카메라의 경우 사용할 수 있는 필름의 수량이 한정적이기 때문에 사진을 한장 찍는데도 수십번 고민한 끝에 숨을 죽이고 셔터를 눌러야합니다. 그리고 그 결과물은 바로 확인할 수 없고 하루나 이틀은 기다려야 받아볼 수 있지요. </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\">사실 구체적인 장면을 담고 있는 것이 사진이지만, 사진에 담긴 장면이 너무나 사실적이기 때문에 그 속에 담긴 개개인의 기억은 오히려 추상적입니다. 그 구체적이고 사실적인 과거의 순간을 담는 것이 사진이지만, 그 시점에 가졌던 나의 생각과 감정은 사진 속에 고스란히 담을 수 없기에 사진은 추상적이라 말할 수 있습니다.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">두 번째 방법은 글을 통한 형상화입니다. 구체적인 사실을 담고 있는 추상적인 이미지인 사진과는 달리 </span></span><span style=\"line-height: 26px; font-size: 10pt;\">글은 구체적인 내용을 통해 추상적인 사실을 상상할 수 있습니다. 사진과 같이</span><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> 정확한 형상을 표현할 수는 없지만 의식의 흐름이라던가, 대상에 대한 느낌 혹은 감정의 변화 등은 오히려 자세히 알 수 있습니다. 그러다 보니 문득 과거에 내가 어떠한 글을 썼는지 궁금해지더군요. </span></span><span style=\"line-height: 26px; font-size: 10pt;\">여행을 할 때, 건축 작업을 할 때, 훈련소에 있을 때, 혹은 방치된 블로그에 버려진 글 등 여러가지가 떠올랐습니다. 그 당시에 가졌던 생각과 마음은 어떠했고, 지금과는 어떻게 다른지 알아보고 싶어 졌습니다.</span><span style=\"font-size: 10pt; line-height: 26px;\"> 그래서 그 글들 중에서 몇가지는 각색하여 블로그에 기록해 놓으면 좋겠다는 생각을 해보았습니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: 10pt; line-height: 26px;\">그래서 우선 5년 전 한</span><span style=\"font-size: 10pt; line-height: 26px;\">달 동안의</span><span style=\"font-size: 10pt; line-height: 26px;\"> 도보여행 중, 끄적였던 것들을 당시의 사진과 함께</span><span style=\"font-size: 10pt; line-height: 26px;\"> 블로깅해 볼까 합니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: 10pt; line-height: 26px;\"> </span></p>\n<p style=\"text-align: center; clear: none; float: none;\"><img class=\"aligncenter\" src=\"{{ site.baseurl }}/assets/cfile25.uf.134F91334FBBB26E30AE1E.jpg\" alt=\"\" width=\"632\" height=\"353\" /></p>\n","source":"_posts/2012-05-22-shaping-memories.html","raw":"---\nlayout: post\ncomments: true\ntitle: 기억(추억)의 형상화\ndate: 2012-05-22 15:36:56.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories:\n- THOUGHT\ntags:\n- 기억\n- 도보여행\n- 여행\n- 추억\n- 형상화\nmeta:\n  _thumbnail_id: '761'\n  _wpas_done_all: '1'\n  _wpas_skip_6779368: '1'\n  _edit_last: '1'\n  _aioseop_keywords: 기억, 추억, 여행, 도보여행, 형상화\n  _aioseop_title: 기억(추억)의 형상화\n  dsq_thread_id: '3453727393'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"line-height: 26px; font-size: 10pt;\">기억은 시간이 지남에 따라서 점차 희미해지거나, 또는 다른 색을 입고는 변색되기 마련입니다. </span><span style=\"font-size: 10pt; line-height: 26px;\">인간에게 있어 기억이라는 것은 컴퓨터에 저장해 놓은 파일들과는 다른 종류의 것이지요. </span><span style=\"font-size: 10pt; line-height: 26px;\">대부분의 사람들은 </span><span style=\"font-size: 10pt; line-height: 26px;\">과거의 순간들 혹은 </span><span style=\"font-size: 10pt; line-height: 26px;\">그 때의 생각이나</span><span style=\"font-size: 10pt; line-height: 26px;\"> 감정을 어렴풋이 알수는 있지만 정확히 기억해내지 못합니다. 그렇기 때문에</span><span style=\"font-size: 10pt; line-height: 26px;\"> </span><span style=\"font-size: 10pt; line-height: 26px;\">찢어질듯이 가슴아픈 이별의 순간도 시간이 지나면 무뎌지기 마련이지요.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt;\">기억 혹은 추억을 형상화 하는 방법에는 크게 두 가지가 있습니다.  사진으로 남기는 방법, 그리고 글로써 남기는 방법입니다(사실 이 두 가지 외에도 여러가지가 있겠지만, 여기에서는 위의 형태로만 나누겠습니다). 두 가지 중 가장 흔히 사용되는 것은 바로 사진을 이용하는 방법입니다. </span><span style=\"font-size: 10pt;\">사진으로 남기는 방법의 가장 큰 장점은 무엇보다 쉽고 빠르게 만들어 낼 수 있다는 점입니다. </span><span style=\"font-size: 10pt; line-height: 2;\">이제는 흔하다 못해 누구나 가지고 있는 </span><span style=\"font-size: 10pt; line-height: 2;\">디지털카메라</span><span style=\"font-size: 10pt; line-height: 2;\">나 스마트폰만 있으면 언제 어디서나 손쉽게 순간을 사진으로 남길 수 있고, 보고 싶을 때면 언제나 꺼내어 볼 수도 있습니다. </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 13px; line-height: 26px;\">과거 수십년 전만해도 사진의 속성은 지금과는 조금 달랐습니다. 지금이야 사진을 찍었다가 맘에 들지 않으면 지우면 그만이지만, 과거의 필름 카메라의 경우 사용할 수 있는 필름의 수량이 한정적이기 때문에 사진을 한장 찍는데도 수십번 고민한 끝에 숨을 죽이고 셔터를 눌러야합니다. 그리고 그 결과물은 바로 확인할 수 없고 하루나 이틀은 기다려야 받아볼 수 있지요. </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\">사실 구체적인 장면을 담고 있는 것이 사진이지만, 사진에 담긴 장면이 너무나 사실적이기 때문에 그 속에 담긴 개개인의 기억은 오히려 추상적입니다. 그 구체적이고 사실적인 과거의 순간을 담는 것이 사진이지만, 그 시점에 가졌던 나의 생각과 감정은 사진 속에 고스란히 담을 수 없기에 사진은 추상적이라 말할 수 있습니다.</span></p>\n<p style=\"line-height: 2; text-align: justify;\"><span style=\"font-size: 10pt; line-height: 2;\"> </span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\">두 번째 방법은 글을 통한 형상화입니다. 구체적인 사실을 담고 있는 추상적인 이미지인 사진과는 달리 </span></span><span style=\"line-height: 26px; font-size: 10pt;\">글은 구체적인 내용을 통해 추상적인 사실을 상상할 수 있습니다. 사진과 같이</span><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> 정확한 형상을 표현할 수는 없지만 의식의 흐름이라던가, 대상에 대한 느낌 혹은 감정의 변화 등은 오히려 자세히 알 수 있습니다. 그러다 보니 문득 과거에 내가 어떠한 글을 썼는지 궁금해지더군요. </span></span><span style=\"line-height: 26px; font-size: 10pt;\">여행을 할 때, 건축 작업을 할 때, 훈련소에 있을 때, 혹은 방치된 블로그에 버려진 글 등 여러가지가 떠올랐습니다. 그 당시에 가졌던 생각과 마음은 어떠했고, 지금과는 어떻게 다른지 알아보고 싶어 졌습니다.</span><span style=\"font-size: 10pt; line-height: 26px;\"> 그래서 그 글들 중에서 몇가지는 각색하여 블로그에 기록해 놓으면 좋겠다는 생각을 해보았습니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"line-height: 26px;\"> </span></span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: 10pt; line-height: 26px;\">그래서 우선 5년 전 한</span><span style=\"font-size: 10pt; line-height: 26px;\">달 동안의</span><span style=\"font-size: 10pt; line-height: 26px;\"> 도보여행 중, 끄적였던 것들을 당시의 사진과 함께</span><span style=\"font-size: 10pt; line-height: 26px;\"> 블로깅해 볼까 합니다.</span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: 10pt; line-height: 26px;\"> </span></p>\n<p style=\"text-align: center; clear: none; float: none;\"><img class=\"aligncenter\" src=\"{{ site.baseurl }}/assets/cfile25.uf.134F91334FBBB26E30AE1E.jpg\" alt=\"\" width=\"632\" height=\"353\" /></p>\n","slug":"2012-05-22-shaping-memories","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv69000awxt4omukklcy","content":"<p style=\"line-height:2;text-align:justify\"><span style=\"line-height:26px;font-size:10pt\">기억은 시간이 지남에 따라서 점차 희미해지거나, 또는 다른 색을 입고는 변색되기 마련입니다. </span><span style=\"font-size:10pt;line-height:26px\">인간에게 있어 기억이라는 것은 컴퓨터에 저장해 놓은 파일들과는 다른 종류의 것이지요. </span><span style=\"font-size:10pt;line-height:26px\">대부분의 사람들은 </span><span style=\"font-size:10pt;line-height:26px\">과거의 순간들 혹은 </span><span style=\"font-size:10pt;line-height:26px\">그 때의 생각이나</span><span style=\"font-size:10pt;line-height:26px\"> 감정을 어렴풋이 알수는 있지만 정확히 기억해내지 못합니다. 그렇기 때문에</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"font-size:10pt;line-height:26px\">찢어질듯이 가슴아픈 이별의 순간도 시간이 지나면 무뎌지기 마련이지요.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\">기억 혹은 추억을 형상화 하는 방법에는 크게 두 가지가 있습니다.  사진으로 남기는 방법, 그리고 글로써 남기는 방법입니다(사실 이 두 가지 외에도 여러가지가 있겠지만, 여기에서는 위의 형태로만 나누겠습니다). 두 가지 중 가장 흔히 사용되는 것은 바로 사진을 이용하는 방법입니다. </span><span style=\"font-size:10pt\">사진으로 남기는 방법의 가장 큰 장점은 무엇보다 쉽고 빠르게 만들어 낼 수 있다는 점입니다. </span><span style=\"font-size:10pt;line-height:2\">이제는 흔하다 못해 누구나 가지고 있는 </span><span style=\"font-size:10pt;line-height:2\">디지털카메라</span><span style=\"font-size:10pt;line-height:2\">나 스마트폰만 있으면 언제 어디서나 손쉽게 순간을 사진으로 남길 수 있고, 보고 싶을 때면 언제나 꺼내어 볼 수도 있습니다. </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:13px;line-height:26px\">과거 수십년 전만해도 사진의 속성은 지금과는 조금 달랐습니다. 지금이야 사진을 찍었다가 맘에 들지 않으면 지우면 그만이지만, 과거의 필름 카메라의 경우 사용할 수 있는 필름의 수량이 한정적이기 때문에 사진을 한장 찍는데도 수십번 고민한 끝에 숨을 죽이고 셔터를 눌러야합니다. 그리고 그 결과물은 바로 확인할 수 없고 하루나 이틀은 기다려야 받아볼 수 있지요. </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\">사실 구체적인 장면을 담고 있는 것이 사진이지만, 사진에 담긴 장면이 너무나 사실적이기 때문에 그 속에 담긴 개개인의 기억은 오히려 추상적입니다. 그 구체적이고 사실적인 과거의 순간을 담는 것이 사진이지만, 그 시점에 가졌던 나의 생각과 감정은 사진 속에 고스란히 담을 수 없기에 사진은 추상적이라 말할 수 있습니다.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">두 번째 방법은 글을 통한 형상화입니다. 구체적인 사실을 담고 있는 추상적인 이미지인 사진과는 달리 </span></span><span style=\"line-height:26px;font-size:10pt\">글은 구체적인 내용을 통해 추상적인 사실을 상상할 수 있습니다. 사진과 같이</span><span style=\"font-size:small\"><span style=\"line-height:26px\"> 정확한 형상을 표현할 수는 없지만 의식의 흐름이라던가, 대상에 대한 느낌 혹은 감정의 변화 등은 오히려 자세히 알 수 있습니다. 그러다 보니 문득 과거에 내가 어떠한 글을 썼는지 궁금해지더군요. </span></span><span style=\"line-height:26px;font-size:10pt\">여행을 할 때, 건축 작업을 할 때, 훈련소에 있을 때, 혹은 방치된 블로그에 버려진 글 등 여러가지가 떠올랐습니다. 그 당시에 가졌던 생각과 마음은 어떠했고, 지금과는 어떻게 다른지 알아보고 싶어 졌습니다.</span><span style=\"font-size:10pt;line-height:26px\"> 그래서 그 글들 중에서 몇가지는 각색하여 블로그에 기록해 놓으면 좋겠다는 생각을 해보았습니다.</span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:10pt;line-height:26px\">그래서 우선 5년 전 한</span><span style=\"font-size:10pt;line-height:26px\">달 동안의</span><span style=\"font-size:10pt;line-height:26px\"> 도보여행 중, 끄적였던 것들을 당시의 사진과 함께</span><span style=\"font-size:10pt;line-height:26px\"> 블로깅해 볼까 합니다.</span></p><p style=\"text-align:justify\"><span style=\"font-size:10pt;line-height:26px\"> </span></p><p style=\"text-align:center;clear:none;float:none\"><img class=\"aligncenter\" src=\"/assets/cfile25.uf.134F91334FBBB26E30AE1E.jpg\" alt=\"\" width=\"632\" height=\"353\"></p>","excerpt":"","more":"<p style=\"line-height:2;text-align:justify\"><span style=\"line-height:26px;font-size:10pt\">기억은 시간이 지남에 따라서 점차 희미해지거나, 또는 다른 색을 입고는 변색되기 마련입니다. </span><span style=\"font-size:10pt;line-height:26px\">인간에게 있어 기억이라는 것은 컴퓨터에 저장해 놓은 파일들과는 다른 종류의 것이지요. </span><span style=\"font-size:10pt;line-height:26px\">대부분의 사람들은 </span><span style=\"font-size:10pt;line-height:26px\">과거의 순간들 혹은 </span><span style=\"font-size:10pt;line-height:26px\">그 때의 생각이나</span><span style=\"font-size:10pt;line-height:26px\"> 감정을 어렴풋이 알수는 있지만 정확히 기억해내지 못합니다. 그렇기 때문에</span><span style=\"font-size:10pt;line-height:26px\"> </span><span style=\"font-size:10pt;line-height:26px\">찢어질듯이 가슴아픈 이별의 순간도 시간이 지나면 무뎌지기 마련이지요.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt\">기억 혹은 추억을 형상화 하는 방법에는 크게 두 가지가 있습니다.  사진으로 남기는 방법, 그리고 글로써 남기는 방법입니다(사실 이 두 가지 외에도 여러가지가 있겠지만, 여기에서는 위의 형태로만 나누겠습니다). 두 가지 중 가장 흔히 사용되는 것은 바로 사진을 이용하는 방법입니다. </span><span style=\"font-size:10pt\">사진으로 남기는 방법의 가장 큰 장점은 무엇보다 쉽고 빠르게 만들어 낼 수 있다는 점입니다. </span><span style=\"font-size:10pt;line-height:2\">이제는 흔하다 못해 누구나 가지고 있는 </span><span style=\"font-size:10pt;line-height:2\">디지털카메라</span><span style=\"font-size:10pt;line-height:2\">나 스마트폰만 있으면 언제 어디서나 손쉽게 순간을 사진으로 남길 수 있고, 보고 싶을 때면 언제나 꺼내어 볼 수도 있습니다. </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:13px;line-height:26px\">과거 수십년 전만해도 사진의 속성은 지금과는 조금 달랐습니다. 지금이야 사진을 찍었다가 맘에 들지 않으면 지우면 그만이지만, 과거의 필름 카메라의 경우 사용할 수 있는 필름의 수량이 한정적이기 때문에 사진을 한장 찍는데도 수십번 고민한 끝에 숨을 죽이고 셔터를 눌러야합니다. 그리고 그 결과물은 바로 확인할 수 없고 하루나 이틀은 기다려야 받아볼 수 있지요. </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\">사실 구체적인 장면을 담고 있는 것이 사진이지만, 사진에 담긴 장면이 너무나 사실적이기 때문에 그 속에 담긴 개개인의 기억은 오히려 추상적입니다. 그 구체적이고 사실적인 과거의 순간을 담는 것이 사진이지만, 그 시점에 가졌던 나의 생각과 감정은 사진 속에 고스란히 담을 수 없기에 사진은 추상적이라 말할 수 있습니다.</span></p><p style=\"line-height:2;text-align:justify\"><span style=\"font-size:10pt;line-height:2\"> </span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\">두 번째 방법은 글을 통한 형상화입니다. 구체적인 사실을 담고 있는 추상적인 이미지인 사진과는 달리 </span></span><span style=\"line-height:26px;font-size:10pt\">글은 구체적인 내용을 통해 추상적인 사실을 상상할 수 있습니다. 사진과 같이</span><span style=\"font-size:small\"><span style=\"line-height:26px\"> 정확한 형상을 표현할 수는 없지만 의식의 흐름이라던가, 대상에 대한 느낌 혹은 감정의 변화 등은 오히려 자세히 알 수 있습니다. 그러다 보니 문득 과거에 내가 어떠한 글을 썼는지 궁금해지더군요. </span></span><span style=\"line-height:26px;font-size:10pt\">여행을 할 때, 건축 작업을 할 때, 훈련소에 있을 때, 혹은 방치된 블로그에 버려진 글 등 여러가지가 떠올랐습니다. 그 당시에 가졌던 생각과 마음은 어떠했고, 지금과는 어떻게 다른지 알아보고 싶어 졌습니다.</span><span style=\"font-size:10pt;line-height:26px\"> 그래서 그 글들 중에서 몇가지는 각색하여 블로그에 기록해 놓으면 좋겠다는 생각을 해보았습니다.</span></p><p style=\"text-align:justify\"><span style=\"font-size:small\"><span style=\"line-height:26px\"> </span></span></p><p style=\"text-align:justify\"><span style=\"font-size:10pt;line-height:26px\">그래서 우선 5년 전 한</span><span style=\"font-size:10pt;line-height:26px\">달 동안의</span><span style=\"font-size:10pt;line-height:26px\"> 도보여행 중, 끄적였던 것들을 당시의 사진과 함께</span><span style=\"font-size:10pt;line-height:26px\"> 블로깅해 볼까 합니다.</span></p><p style=\"text-align:justify\"><span style=\"font-size:10pt;line-height:26px\"> </span></p><p style=\"text-align:center;clear:none;float:none\"><img class=\"aligncenter\" src=\"/assets/cfile25.uf.134F91334FBBB26E30AE1E.jpg\" alt=\"\" width=\"632\" height=\"353\"></p>"},{"layout":"post","comments":1,"title":"나는 왜 건축을 그만두었는가?","date":"2014-04-16T00:43:27.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_wpas_done_all":"1","_aioseop_keywords":"건축, architecture, 설계","_aioseop_title":"나는 왜 건축을 그만두었는가?","dsq_thread_id":"3290457335"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>나는 왜 건축을 그만두었는가? 지금의 나는 이 질문에 대해 완전하게 답하지 못한채로 있습니다. 지금은 완전히 관심밖의 일처럼 자물쇠 달린 오래된 상자안에 방치해둔채 새로운 것에 대한 생각으로 가득차있지요. 건축 경기가 어려워서라던지, 한국에서 건축가라는 직업에 대한 가치를 매우 낮게 평가한다던가 하는 것은 현실에 대한 핑계에 불가하다 생각합니다. 건축을 그만둔 후 몇년간(지금까지), 누군가 저에게 왜 건축을 그만두고 지금의 길을 걷고 있냐고 물어보면 백이면 백 위와 같이 대답하곤 했습니다. 정말 이런 현실이 문제인걸까요?</p>\n<p>&nbsp;</p>\n<p>왜 건축을 그만두었는가를 다시 생각해보기 전에, 제가 건축을 공부하면서 느낀 건축이라는 학문에 대해서 잠깐 얘기해보겠습니다. 건축을 이를 때 좋은 말들이 많이 있습니다. '건축은 사회를 비추는 거울이다', '건축은 종합예술이다', '건축은 자신의 철학이 필요하다' 등등 건축에 대한 정의는(주로 건축학과 에 다니는 학생들의 정의) 굉장히 철학적이고 사회적이며 심지어는 예술적이기까지 합니다. 이런 정의를 진리라고 받아들이는 건축과 학생들은(혹은 이런 정의를 증명하기 위해서는) 광범위한 지식의 습득과정이 필요합니다. 단순히 미적감각을 키우거나 그림을 잘그려서는 안되고, 시대의 흐름에 대해 뒤쳐지면 안되며, 사람과 공간에 대한 개념과 이들의 관계를 미적 또는 형태적으로 표현할 수 있어야 합니다. 그리고 그 표현을 위한 철학적 접근도 필요하지요. 굳이 철학이 아니더라도 공간에 스토리텔링이 필요한 경우도 있으며, 시적으로 공간을 접근할 수도 있습니다. 그것도 모자란건지 아니면 새로운 이론을 만들려는 건지는 잘 모르겠지만, 최근 건축계는 모든 학문과 이종교배를 시도하고 끊임없이 새로운 시도로 추구 합니다. 이 모든 것들이 쌓이고 쌓여서 종합적이고 사회적인 철학 예술이 만들어지는 것입니다.</p>\n<p>&nbsp;</p>\n<p>정말 위에서 말한 건축이 진짜 건축일까요? 저는 고작 1년 동안만 건축 사무소에서 밤낮없이 일해봤습니다. 그렇기 때문에 섣불리 판단할 수는 없습니다만, 건축의 실체는 의외로 간단할지도 모릅니다. '사람들이 원하는 공간을 만든다' 라고 할수 있을까요? 좀 더 현실적으로 말하자면 '건축주가 원하는 공간을 만든다'라고 할 수 있겠습니다. 건축주라는 사람 또는 회사가 원하는 건축물을 만드는 것이 건축이라면 결국 건축주가 누구냐는 것이 가장 중요한 요소가 되겠지요. 아무리 뛰어난 건축가라도 결국은 건축주가 건축의 대부분을 결정하기 때문이지요. 여기서 건축가의 역할이란 단지 건축주가 원하는 건물을 넓고 멋지게(?) 짓는 사람 아닐까요. 물론 건축가 스스로가 건축주의 요구를 받아들이는 수준 안에서 자신의 건축관을 표현할 수는 있습니다. 이런 현실에서 많은 사람들이 원하는 공간을 만드는데는 한계가 있을 수 밖에 없겠습니다. 결국 문제는 돈이 아닐까 생각합니다.</p>\n<p>&nbsp;</p>\n<p>또 한가지 이유를 들어 볼까요? 건축은 굉장히 보수적입니다. 아직도 르꼬르뷔제의 건축의 5원칙에서 거의 벗어나지 못했습니다. 이 5가지 원칙을 벗어난것 처럼 보이는 디지털 아키텍트의 그래픽 작업들은 현실적으로 실현불가능해 보이는 것이 대부분이기 때문에 이 작업들을 건축이라 부르기도 조금 애매합니다. 저는 공간적으로 또는 형태적으로 이 원칙을 벗어나는 것이 미래의 건축이라고 생각하지는 않습니다. 오히려 현재의 상황에서는 오히려 얼마나 지속가능한지(환경을 고려한다던가 건축의 수명이 길다던가) 그리고 얼마나 첨단화되는지가 더 중요해 보입니다. 자원은 한정되어 있고 쓰레기는 넘쳐나기 때문에 이 문제를 조금이나마 덜 야기할 수 있다면 그것은 분명 훌륭한 건축이 될 수 있겠지요. 또 공간의 질을 높이는 것도 공간의 구성이나 동선 등 전통적인 건축 요소뿐 아니라 IT분야와의 접목이 더욱 중요해질 것입니다. 유비쿼터스라던가, 인터랙티브 공간이라든가, 생활패턴에 의한 공간변화와 같은 반응형 공간이 이러한 예가 되겠습니다. 하지만 건축학과의 교육 커리큘럼을 살펴보면 지금이나 10년전이나 전혀 달라진 것이 없습니다. 여전히 설계수업, 구조수업, 의장수업, 설비수업, 재료수업 정도로 나뉘어 있습니다. 환경수업이 있긴 하지만 결로나 태양광 같은 자연적인 것에 한정되어 있고 미래의 환경에 대한 고민은 전혀 없습니다. IT쪽은 더욱 열악하지요. 수업이 전혀 없습니다. 건축과에서 코딩수업을 하라는 말은 아닙니다. 그저 공간의 질을 높이기 위해서 어떤 기술을 접목할 수 있는지에 대한 수업은 필요하겠습니다.</p>\n<p>&nbsp;</p>\n<p>종합해보면, 돈이 우선일수 밖에 없는 현실, 이론이나 교육과 실제 건축의 괴리, 변화없는 보수적인 학문이라는 이유로 요약될 수 있겠는데요. 이런 이유로 건축을 그만둔게 맞을까요? 여전히 잘 모르겠습니다.</p>\n","source":"_posts/2014-04-16-why-did-i-quit-a-job-in-architecture.html","raw":"---\nlayout: post\ncomments: true\ntitle: 나는 왜 건축을 그만두었는가?\ndate: 2014-04-16 18:43:27.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories:\n- THOUGHT\ntags:\n- architecture\n- 건축\n- 설계\nmeta:\n  _edit_last: '1'\n  _wpas_done_all: '1'\n  _aioseop_keywords: 건축, architecture, 설계\n  _aioseop_title: 나는 왜 건축을 그만두었는가?\n  dsq_thread_id: '3290457335'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>나는 왜 건축을 그만두었는가? 지금의 나는 이 질문에 대해 완전하게 답하지 못한채로 있습니다. 지금은 완전히 관심밖의 일처럼 자물쇠 달린 오래된 상자안에 방치해둔채 새로운 것에 대한 생각으로 가득차있지요. 건축 경기가 어려워서라던지, 한국에서 건축가라는 직업에 대한 가치를 매우 낮게 평가한다던가 하는 것은 현실에 대한 핑계에 불가하다 생각합니다. 건축을 그만둔 후 몇년간(지금까지), 누군가 저에게 왜 건축을 그만두고 지금의 길을 걷고 있냐고 물어보면 백이면 백 위와 같이 대답하곤 했습니다. 정말 이런 현실이 문제인걸까요?</p>\n<p>&nbsp;</p>\n<p>왜 건축을 그만두었는가를 다시 생각해보기 전에, 제가 건축을 공부하면서 느낀 건축이라는 학문에 대해서 잠깐 얘기해보겠습니다. 건축을 이를 때 좋은 말들이 많이 있습니다. '건축은 사회를 비추는 거울이다', '건축은 종합예술이다', '건축은 자신의 철학이 필요하다' 등등 건축에 대한 정의는(주로 건축학과 에 다니는 학생들의 정의) 굉장히 철학적이고 사회적이며 심지어는 예술적이기까지 합니다. 이런 정의를 진리라고 받아들이는 건축과 학생들은(혹은 이런 정의를 증명하기 위해서는) 광범위한 지식의 습득과정이 필요합니다. 단순히 미적감각을 키우거나 그림을 잘그려서는 안되고, 시대의 흐름에 대해 뒤쳐지면 안되며, 사람과 공간에 대한 개념과 이들의 관계를 미적 또는 형태적으로 표현할 수 있어야 합니다. 그리고 그 표현을 위한 철학적 접근도 필요하지요. 굳이 철학이 아니더라도 공간에 스토리텔링이 필요한 경우도 있으며, 시적으로 공간을 접근할 수도 있습니다. 그것도 모자란건지 아니면 새로운 이론을 만들려는 건지는 잘 모르겠지만, 최근 건축계는 모든 학문과 이종교배를 시도하고 끊임없이 새로운 시도로 추구 합니다. 이 모든 것들이 쌓이고 쌓여서 종합적이고 사회적인 철학 예술이 만들어지는 것입니다.</p>\n<p>&nbsp;</p>\n<p>정말 위에서 말한 건축이 진짜 건축일까요? 저는 고작 1년 동안만 건축 사무소에서 밤낮없이 일해봤습니다. 그렇기 때문에 섣불리 판단할 수는 없습니다만, 건축의 실체는 의외로 간단할지도 모릅니다. '사람들이 원하는 공간을 만든다' 라고 할수 있을까요? 좀 더 현실적으로 말하자면 '건축주가 원하는 공간을 만든다'라고 할 수 있겠습니다. 건축주라는 사람 또는 회사가 원하는 건축물을 만드는 것이 건축이라면 결국 건축주가 누구냐는 것이 가장 중요한 요소가 되겠지요. 아무리 뛰어난 건축가라도 결국은 건축주가 건축의 대부분을 결정하기 때문이지요. 여기서 건축가의 역할이란 단지 건축주가 원하는 건물을 넓고 멋지게(?) 짓는 사람 아닐까요. 물론 건축가 스스로가 건축주의 요구를 받아들이는 수준 안에서 자신의 건축관을 표현할 수는 있습니다. 이런 현실에서 많은 사람들이 원하는 공간을 만드는데는 한계가 있을 수 밖에 없겠습니다. 결국 문제는 돈이 아닐까 생각합니다.</p>\n<p>&nbsp;</p>\n<p>또 한가지 이유를 들어 볼까요? 건축은 굉장히 보수적입니다. 아직도 르꼬르뷔제의 건축의 5원칙에서 거의 벗어나지 못했습니다. 이 5가지 원칙을 벗어난것 처럼 보이는 디지털 아키텍트의 그래픽 작업들은 현실적으로 실현불가능해 보이는 것이 대부분이기 때문에 이 작업들을 건축이라 부르기도 조금 애매합니다. 저는 공간적으로 또는 형태적으로 이 원칙을 벗어나는 것이 미래의 건축이라고 생각하지는 않습니다. 오히려 현재의 상황에서는 오히려 얼마나 지속가능한지(환경을 고려한다던가 건축의 수명이 길다던가) 그리고 얼마나 첨단화되는지가 더 중요해 보입니다. 자원은 한정되어 있고 쓰레기는 넘쳐나기 때문에 이 문제를 조금이나마 덜 야기할 수 있다면 그것은 분명 훌륭한 건축이 될 수 있겠지요. 또 공간의 질을 높이는 것도 공간의 구성이나 동선 등 전통적인 건축 요소뿐 아니라 IT분야와의 접목이 더욱 중요해질 것입니다. 유비쿼터스라던가, 인터랙티브 공간이라든가, 생활패턴에 의한 공간변화와 같은 반응형 공간이 이러한 예가 되겠습니다. 하지만 건축학과의 교육 커리큘럼을 살펴보면 지금이나 10년전이나 전혀 달라진 것이 없습니다. 여전히 설계수업, 구조수업, 의장수업, 설비수업, 재료수업 정도로 나뉘어 있습니다. 환경수업이 있긴 하지만 결로나 태양광 같은 자연적인 것에 한정되어 있고 미래의 환경에 대한 고민은 전혀 없습니다. IT쪽은 더욱 열악하지요. 수업이 전혀 없습니다. 건축과에서 코딩수업을 하라는 말은 아닙니다. 그저 공간의 질을 높이기 위해서 어떤 기술을 접목할 수 있는지에 대한 수업은 필요하겠습니다.</p>\n<p>&nbsp;</p>\n<p>종합해보면, 돈이 우선일수 밖에 없는 현실, 이론이나 교육과 실제 건축의 괴리, 변화없는 보수적인 학문이라는 이유로 요약될 수 있겠는데요. 이런 이유로 건축을 그만둔게 맞을까요? 여전히 잘 모르겠습니다.</p>\n","slug":"2014-04-16-why-did-i-quit-a-job-in-architecture","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6b000cwxt4ukuvql2z","content":"<p>나는 왜 건축을 그만두었는가? 지금의 나는 이 질문에 대해 완전하게 답하지 못한채로 있습니다. 지금은 완전히 관심밖의 일처럼 자물쇠 달린 오래된 상자안에 방치해둔채 새로운 것에 대한 생각으로 가득차있지요. 건축 경기가 어려워서라던지, 한국에서 건축가라는 직업에 대한 가치를 매우 낮게 평가한다던가 하는 것은 현실에 대한 핑계에 불가하다 생각합니다. 건축을 그만둔 후 몇년간(지금까지), 누군가 저에게 왜 건축을 그만두고 지금의 길을 걷고 있냐고 물어보면 백이면 백 위와 같이 대답하곤 했습니다. 정말 이런 현실이 문제인걸까요?</p><p>&nbsp;</p><p>왜 건축을 그만두었는가를 다시 생각해보기 전에, 제가 건축을 공부하면서 느낀 건축이라는 학문에 대해서 잠깐 얘기해보겠습니다. 건축을 이를 때 좋은 말들이 많이 있습니다. '건축은 사회를 비추는 거울이다', '건축은 종합예술이다', '건축은 자신의 철학이 필요하다' 등등 건축에 대한 정의는(주로 건축학과 에 다니는 학생들의 정의) 굉장히 철학적이고 사회적이며 심지어는 예술적이기까지 합니다. 이런 정의를 진리라고 받아들이는 건축과 학생들은(혹은 이런 정의를 증명하기 위해서는) 광범위한 지식의 습득과정이 필요합니다. 단순히 미적감각을 키우거나 그림을 잘그려서는 안되고, 시대의 흐름에 대해 뒤쳐지면 안되며, 사람과 공간에 대한 개념과 이들의 관계를 미적 또는 형태적으로 표현할 수 있어야 합니다. 그리고 그 표현을 위한 철학적 접근도 필요하지요. 굳이 철학이 아니더라도 공간에 스토리텔링이 필요한 경우도 있으며, 시적으로 공간을 접근할 수도 있습니다. 그것도 모자란건지 아니면 새로운 이론을 만들려는 건지는 잘 모르겠지만, 최근 건축계는 모든 학문과 이종교배를 시도하고 끊임없이 새로운 시도로 추구 합니다. 이 모든 것들이 쌓이고 쌓여서 종합적이고 사회적인 철학 예술이 만들어지는 것입니다.</p><p>&nbsp;</p><p>정말 위에서 말한 건축이 진짜 건축일까요? 저는 고작 1년 동안만 건축 사무소에서 밤낮없이 일해봤습니다. 그렇기 때문에 섣불리 판단할 수는 없습니다만, 건축의 실체는 의외로 간단할지도 모릅니다. '사람들이 원하는 공간을 만든다' 라고 할수 있을까요? 좀 더 현실적으로 말하자면 '건축주가 원하는 공간을 만든다'라고 할 수 있겠습니다. 건축주라는 사람 또는 회사가 원하는 건축물을 만드는 것이 건축이라면 결국 건축주가 누구냐는 것이 가장 중요한 요소가 되겠지요. 아무리 뛰어난 건축가라도 결국은 건축주가 건축의 대부분을 결정하기 때문이지요. 여기서 건축가의 역할이란 단지 건축주가 원하는 건물을 넓고 멋지게(?) 짓는 사람 아닐까요. 물론 건축가 스스로가 건축주의 요구를 받아들이는 수준 안에서 자신의 건축관을 표현할 수는 있습니다. 이런 현실에서 많은 사람들이 원하는 공간을 만드는데는 한계가 있을 수 밖에 없겠습니다. 결국 문제는 돈이 아닐까 생각합니다.</p><p>&nbsp;</p><p>또 한가지 이유를 들어 볼까요? 건축은 굉장히 보수적입니다. 아직도 르꼬르뷔제의 건축의 5원칙에서 거의 벗어나지 못했습니다. 이 5가지 원칙을 벗어난것 처럼 보이는 디지털 아키텍트의 그래픽 작업들은 현실적으로 실현불가능해 보이는 것이 대부분이기 때문에 이 작업들을 건축이라 부르기도 조금 애매합니다. 저는 공간적으로 또는 형태적으로 이 원칙을 벗어나는 것이 미래의 건축이라고 생각하지는 않습니다. 오히려 현재의 상황에서는 오히려 얼마나 지속가능한지(환경을 고려한다던가 건축의 수명이 길다던가) 그리고 얼마나 첨단화되는지가 더 중요해 보입니다. 자원은 한정되어 있고 쓰레기는 넘쳐나기 때문에 이 문제를 조금이나마 덜 야기할 수 있다면 그것은 분명 훌륭한 건축이 될 수 있겠지요. 또 공간의 질을 높이는 것도 공간의 구성이나 동선 등 전통적인 건축 요소뿐 아니라 IT분야와의 접목이 더욱 중요해질 것입니다. 유비쿼터스라던가, 인터랙티브 공간이라든가, 생활패턴에 의한 공간변화와 같은 반응형 공간이 이러한 예가 되겠습니다. 하지만 건축학과의 교육 커리큘럼을 살펴보면 지금이나 10년전이나 전혀 달라진 것이 없습니다. 여전히 설계수업, 구조수업, 의장수업, 설비수업, 재료수업 정도로 나뉘어 있습니다. 환경수업이 있긴 하지만 결로나 태양광 같은 자연적인 것에 한정되어 있고 미래의 환경에 대한 고민은 전혀 없습니다. IT쪽은 더욱 열악하지요. 수업이 전혀 없습니다. 건축과에서 코딩수업을 하라는 말은 아닙니다. 그저 공간의 질을 높이기 위해서 어떤 기술을 접목할 수 있는지에 대한 수업은 필요하겠습니다.</p><p>&nbsp;</p><p>종합해보면, 돈이 우선일수 밖에 없는 현실, 이론이나 교육과 실제 건축의 괴리, 변화없는 보수적인 학문이라는 이유로 요약될 수 있겠는데요. 이런 이유로 건축을 그만둔게 맞을까요? 여전히 잘 모르겠습니다.</p>","excerpt":"","more":"<p>나는 왜 건축을 그만두었는가? 지금의 나는 이 질문에 대해 완전하게 답하지 못한채로 있습니다. 지금은 완전히 관심밖의 일처럼 자물쇠 달린 오래된 상자안에 방치해둔채 새로운 것에 대한 생각으로 가득차있지요. 건축 경기가 어려워서라던지, 한국에서 건축가라는 직업에 대한 가치를 매우 낮게 평가한다던가 하는 것은 현실에 대한 핑계에 불가하다 생각합니다. 건축을 그만둔 후 몇년간(지금까지), 누군가 저에게 왜 건축을 그만두고 지금의 길을 걷고 있냐고 물어보면 백이면 백 위와 같이 대답하곤 했습니다. 정말 이런 현실이 문제인걸까요?</p><p>&nbsp;</p><p>왜 건축을 그만두었는가를 다시 생각해보기 전에, 제가 건축을 공부하면서 느낀 건축이라는 학문에 대해서 잠깐 얘기해보겠습니다. 건축을 이를 때 좋은 말들이 많이 있습니다. '건축은 사회를 비추는 거울이다', '건축은 종합예술이다', '건축은 자신의 철학이 필요하다' 등등 건축에 대한 정의는(주로 건축학과 에 다니는 학생들의 정의) 굉장히 철학적이고 사회적이며 심지어는 예술적이기까지 합니다. 이런 정의를 진리라고 받아들이는 건축과 학생들은(혹은 이런 정의를 증명하기 위해서는) 광범위한 지식의 습득과정이 필요합니다. 단순히 미적감각을 키우거나 그림을 잘그려서는 안되고, 시대의 흐름에 대해 뒤쳐지면 안되며, 사람과 공간에 대한 개념과 이들의 관계를 미적 또는 형태적으로 표현할 수 있어야 합니다. 그리고 그 표현을 위한 철학적 접근도 필요하지요. 굳이 철학이 아니더라도 공간에 스토리텔링이 필요한 경우도 있으며, 시적으로 공간을 접근할 수도 있습니다. 그것도 모자란건지 아니면 새로운 이론을 만들려는 건지는 잘 모르겠지만, 최근 건축계는 모든 학문과 이종교배를 시도하고 끊임없이 새로운 시도로 추구 합니다. 이 모든 것들이 쌓이고 쌓여서 종합적이고 사회적인 철학 예술이 만들어지는 것입니다.</p><p>&nbsp;</p><p>정말 위에서 말한 건축이 진짜 건축일까요? 저는 고작 1년 동안만 건축 사무소에서 밤낮없이 일해봤습니다. 그렇기 때문에 섣불리 판단할 수는 없습니다만, 건축의 실체는 의외로 간단할지도 모릅니다. '사람들이 원하는 공간을 만든다' 라고 할수 있을까요? 좀 더 현실적으로 말하자면 '건축주가 원하는 공간을 만든다'라고 할 수 있겠습니다. 건축주라는 사람 또는 회사가 원하는 건축물을 만드는 것이 건축이라면 결국 건축주가 누구냐는 것이 가장 중요한 요소가 되겠지요. 아무리 뛰어난 건축가라도 결국은 건축주가 건축의 대부분을 결정하기 때문이지요. 여기서 건축가의 역할이란 단지 건축주가 원하는 건물을 넓고 멋지게(?) 짓는 사람 아닐까요. 물론 건축가 스스로가 건축주의 요구를 받아들이는 수준 안에서 자신의 건축관을 표현할 수는 있습니다. 이런 현실에서 많은 사람들이 원하는 공간을 만드는데는 한계가 있을 수 밖에 없겠습니다. 결국 문제는 돈이 아닐까 생각합니다.</p><p>&nbsp;</p><p>또 한가지 이유를 들어 볼까요? 건축은 굉장히 보수적입니다. 아직도 르꼬르뷔제의 건축의 5원칙에서 거의 벗어나지 못했습니다. 이 5가지 원칙을 벗어난것 처럼 보이는 디지털 아키텍트의 그래픽 작업들은 현실적으로 실현불가능해 보이는 것이 대부분이기 때문에 이 작업들을 건축이라 부르기도 조금 애매합니다. 저는 공간적으로 또는 형태적으로 이 원칙을 벗어나는 것이 미래의 건축이라고 생각하지는 않습니다. 오히려 현재의 상황에서는 오히려 얼마나 지속가능한지(환경을 고려한다던가 건축의 수명이 길다던가) 그리고 얼마나 첨단화되는지가 더 중요해 보입니다. 자원은 한정되어 있고 쓰레기는 넘쳐나기 때문에 이 문제를 조금이나마 덜 야기할 수 있다면 그것은 분명 훌륭한 건축이 될 수 있겠지요. 또 공간의 질을 높이는 것도 공간의 구성이나 동선 등 전통적인 건축 요소뿐 아니라 IT분야와의 접목이 더욱 중요해질 것입니다. 유비쿼터스라던가, 인터랙티브 공간이라든가, 생활패턴에 의한 공간변화와 같은 반응형 공간이 이러한 예가 되겠습니다. 하지만 건축학과의 교육 커리큘럼을 살펴보면 지금이나 10년전이나 전혀 달라진 것이 없습니다. 여전히 설계수업, 구조수업, 의장수업, 설비수업, 재료수업 정도로 나뉘어 있습니다. 환경수업이 있긴 하지만 결로나 태양광 같은 자연적인 것에 한정되어 있고 미래의 환경에 대한 고민은 전혀 없습니다. IT쪽은 더욱 열악하지요. 수업이 전혀 없습니다. 건축과에서 코딩수업을 하라는 말은 아닙니다. 그저 공간의 질을 높이기 위해서 어떤 기술을 접목할 수 있는지에 대한 수업은 필요하겠습니다.</p><p>&nbsp;</p><p>종합해보면, 돈이 우선일수 밖에 없는 현실, 이론이나 교육과 실제 건축의 괴리, 변화없는 보수적인 학문이라는 이유로 요약될 수 있겠는데요. 이런 이유로 건축을 그만둔게 맞을까요? 여전히 잘 모르겠습니다.</p>"},{"layout":"post","comments":1,"title":"사회적 기업의 역할 (2011/4/29)","date":"2014-03-19T17:39:00.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_thumbnail_id":"480","_wpas_done_all":"1","_aioseop_keywords":"사회적기업, 박원순","_aioseop_title":"사회적 기업의 역할","dsq_thread_id":"2971997324"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p style=\"text-align: justify;\">한국사회에서는 '3불 타령'이라는 말이 있습니다. 어떤 새로운 일을 하려고 하면 '규정에 맞지않다', '선례가 없다', '예산이 없다' 라는 것입니다. 이와같은 말을 가장 많이 하는 곳이 아마도 공무원들이 일하는 관공서일 것입니다. 실제로 제가 공무원과 그렇게 많은 일을 같이 해보지는 않았지만 그들은 어떤 새로운 일에 대해서 책임지는것을 꺼리는 경향이 있습니다. 무슨 일을 하려고 하면 항상 규정을 따지고 새로운 것에 대한 거부감으로 충만해 있으며 예산은 충분한데 정말 필요한 곳에 쓰려고 하면 예산이 없다고 합니다.</p>\n<p style=\"text-align: justify;\">한국사회에서는 이와관련된 또 하나의 이상한 현상이 있습니다. 그 어느나라보다 공무원이 되고자 하는 청년들이 많아 공무원시험에 합격하기가 하늘의 별따기 만큼이나 어렵습니다. 보통 몇십대일의 경쟁률은 기본인것 같습니다. 그렇다보니 '공무원을 준비하는 사람'이라는 실업자들도 많은 상태이지요. 이런 현상이 존재하는 가장 큰 이유는 공무원을 소위말하는 '철밥통'이라 부르며 일종의 평생직장이라 생각하기 때문입니다. 공무원 시험에 어렵게 붙었는데 자칫잘못해서 어떤일에 책임을 졌다가 문제가 생기길 바라는 공무원은 없을것입니다. 그래서 공무원들은 자신의 자리에서 어떤 일에대해 책임지기를 꺼려하는 것은 어쩌면 당연한 현상이라 할 수도 있겠네요.</p>\n<p style=\"text-align: justify;\">요즘 한국사회는 때아닌(?) 혁신의 바람이 불고 있습니다. 국가와 공무원집단도 마찬가지지요. 무엇을 위한 '혁신'인지는 모르겠지만 자신들에게 문제점이 있는 것을 알고 그것을 고쳐보자는 취지는 나쁘지 않은듯 합니다. 하지만 '혁신'을 위한 혁신이 대부분이고 과한 경쟁으로인한 실적위주의 일처리 방식은 과거 공무원이 보여주었던 나태하고 안일한 모습과 다를바 없다는 생각이 들었습니다.</p>\n<p>&nbsp;</p>\n<p style=\"text-align: center;\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110423_1000000136.jpg\"><img class=\"aligncenter size-full wp-image-480\" alt=\"P20110423_1000000136\" src=\"{{ site.baseurl }}/assets/P20110423_1000000136.jpg\" width=\"640\" height=\"478\" /><br />\n</a></p>\n<p style=\"text-align: justify;\">제가 오늘 말하고자 하는바가 공무원에 대해서가 아닙니다. 하지만 한국의 공무원에 대해서 잠깐 언급한것은 영국의 사회혁신 리포트《올리버는 어떻게 세상을 요리할까?》에 소개된 여러 사례에서 보여주는 관공서의 역할 때문입니다. 현대사회의 문제점을 분석하여 창의적인 해결책을 찾아내는 것이 어찌보면 정부나 관공서의 역할 같아 보입니다. 하지만 실제적으로 이러한 일을 도맡아 하는 곳은 관공서가 아니라 사회단체 및 사회적 기업입니다. 사실 정부는 여러 사회문제에 대해서 분석하여 예산을 편성하는 등의 큰 그림은 그릴수 있을지 몰라도 실제로 사회 깊숙히 들어와 진짜 문제가 무엇이고 무엇을 어떻게 해결해야 하는지 구체적으로 알지는 못합니다. 그리고 현대사회의 문제들은 수없이 많지만 정부가 이 모든 문제들을 단순히 돈으로 해결하기에는 너무나 복잡합니다. 그렇기 때문에 우리사회 곳곳에 사회적 기업이 필요한 것입니다. 어떤 사회문제에 대한 근본적인 해결을 위해서는 정부의 예산이 얼마가 편성되었느냐가 아니라 구체적으로 어떠한 돈을 어디에 얼마만큼 적절히 쓰느냐가 더 중요한 것입니다. 정부가 하지 못하는 일을 사회적 기업이 대신해주는 것이지요. 이것이 사회적 기업이 하는 일이라 할수 있겠습니다.</p>\n<p style=\"text-align: justify;\">저는 사회적 기업에 관심이 많고 사회적 기업에 대해서 공부하고 있습니다. 이 책을 읽은 이유도 이것이지요. 하지만 저는 이 책에서 보여준 대부분의 사회적 기업의 모습은 사회적 기업이라기 보다는 사회단체에 가깝다는 생각을 했습니다. 물론 좋은일을 하자는 취지는 똑같을지 모르겠지만 '기업'이라는 것은 확실한 비즈니스 모델이 있어야 한다고 생각합니다. 사회적기업과 사회단체의 가장 큰 차이점이 바로 하는일을 통해 돈을 벌수 있냐 없냐라는 것이지요. 그래서 사회적 기업을 창업 하려고 할때, '지원금으로 하지 뭐'식의 사고방식은 반드시 지양해야 합니다. 사회적 기업은 영세한 경우가 대부분이라 지원금이 불가피할 경우도 있지만 회사의 운영이 지원금에 의존되어서는 안됩니다. 예를들어 정권이 바뀌거나 예산편성이 바뀌는 경우처럼 지원금은 언제라도 없어질수 있기 때문입니다. 회사가 지원금에만 의존하고 있었다면 이런경우에는 십중팔구는 망하고 말겠죠.</p>\n<p style=\"text-align: justify;\">또 한가지 말하고 싶은것은 현재 대한민국 정부에서 사회적 기업을 바라보는 시각에 대해서입니다. 우리나라에서 정의하는 사회적기업은 한가지의 관점에 국한되어 있습니다. 바로 '고용'입니다. 기업을 만듦에 있어 중요한 것이 이윤추구가 아니라 고용이라는 것이지요. 이윤추구를 위해 고용하는 것이아니라 고용을 위해 이윤을 추구한다는 것이 한국에서 인정하는 사회적기업의 모델입니다. 예를들면 장애인 바리스타를 고용하여 운영하는 까페, 새터민이나 이주여성으로만 구성된 공장을 운영하는 회사 등이 있습니다. 이러한 형태의 기업도 당연히 사회적 기업입니다. 하지만 고용만을 위한 것만이 사회적기업은 아닙니다. 사회적기업이라는 것은 현존하는 사회문제를 기존의 방식과는 다른 창의적인 방법을 통해 고용창출, 빈민구제, 저소득층 지원, 환경문제 해결 등을 실현하는 기업이라 할 수 있습니다. 현재 한국사회에서 가장큰 문제중에 하나가 실업문제임을 감안한다면 고용창출이 사회적 기업을 결정하는 기준이 된것을 이해할수 있지만, 앞으로 한국사회의 다양한 문제들을 효과적으로 해결하기 위해서는 사회적 기업을 결정하는 기준을 확대할 필요가 있습니다.</p>\n","source":"_posts/2014-03-20-role-of-social-venture.html","raw":"---\nlayout: post\ncomments: true\ntitle: 사회적 기업의 역할 (2011/4/29)\ndate: 2014-03-20 11:39:00.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories:\n- THOUGHT\ntags:\n- 박원순\n- 사회적 기업\n- 올리버\nmeta:\n  _edit_last: '1'\n  _thumbnail_id: '480'\n  _wpas_done_all: '1'\n  _aioseop_keywords: 사회적기업, 박원순\n  _aioseop_title: 사회적 기업의 역할\n  dsq_thread_id: '2971997324'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p style=\"text-align: justify;\">한국사회에서는 '3불 타령'이라는 말이 있습니다. 어떤 새로운 일을 하려고 하면 '규정에 맞지않다', '선례가 없다', '예산이 없다' 라는 것입니다. 이와같은 말을 가장 많이 하는 곳이 아마도 공무원들이 일하는 관공서일 것입니다. 실제로 제가 공무원과 그렇게 많은 일을 같이 해보지는 않았지만 그들은 어떤 새로운 일에 대해서 책임지는것을 꺼리는 경향이 있습니다. 무슨 일을 하려고 하면 항상 규정을 따지고 새로운 것에 대한 거부감으로 충만해 있으며 예산은 충분한데 정말 필요한 곳에 쓰려고 하면 예산이 없다고 합니다.</p>\n<p style=\"text-align: justify;\">한국사회에서는 이와관련된 또 하나의 이상한 현상이 있습니다. 그 어느나라보다 공무원이 되고자 하는 청년들이 많아 공무원시험에 합격하기가 하늘의 별따기 만큼이나 어렵습니다. 보통 몇십대일의 경쟁률은 기본인것 같습니다. 그렇다보니 '공무원을 준비하는 사람'이라는 실업자들도 많은 상태이지요. 이런 현상이 존재하는 가장 큰 이유는 공무원을 소위말하는 '철밥통'이라 부르며 일종의 평생직장이라 생각하기 때문입니다. 공무원 시험에 어렵게 붙었는데 자칫잘못해서 어떤일에 책임을 졌다가 문제가 생기길 바라는 공무원은 없을것입니다. 그래서 공무원들은 자신의 자리에서 어떤 일에대해 책임지기를 꺼려하는 것은 어쩌면 당연한 현상이라 할 수도 있겠네요.</p>\n<p style=\"text-align: justify;\">요즘 한국사회는 때아닌(?) 혁신의 바람이 불고 있습니다. 국가와 공무원집단도 마찬가지지요. 무엇을 위한 '혁신'인지는 모르겠지만 자신들에게 문제점이 있는 것을 알고 그것을 고쳐보자는 취지는 나쁘지 않은듯 합니다. 하지만 '혁신'을 위한 혁신이 대부분이고 과한 경쟁으로인한 실적위주의 일처리 방식은 과거 공무원이 보여주었던 나태하고 안일한 모습과 다를바 없다는 생각이 들었습니다.</p>\n<p>&nbsp;</p>\n<p style=\"text-align: center;\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110423_1000000136.jpg\"><img class=\"aligncenter size-full wp-image-480\" alt=\"P20110423_1000000136\" src=\"{{ site.baseurl }}/assets/P20110423_1000000136.jpg\" width=\"640\" height=\"478\" /><br />\n</a></p>\n<p style=\"text-align: justify;\">제가 오늘 말하고자 하는바가 공무원에 대해서가 아닙니다. 하지만 한국의 공무원에 대해서 잠깐 언급한것은 영국의 사회혁신 리포트《올리버는 어떻게 세상을 요리할까?》에 소개된 여러 사례에서 보여주는 관공서의 역할 때문입니다. 현대사회의 문제점을 분석하여 창의적인 해결책을 찾아내는 것이 어찌보면 정부나 관공서의 역할 같아 보입니다. 하지만 실제적으로 이러한 일을 도맡아 하는 곳은 관공서가 아니라 사회단체 및 사회적 기업입니다. 사실 정부는 여러 사회문제에 대해서 분석하여 예산을 편성하는 등의 큰 그림은 그릴수 있을지 몰라도 실제로 사회 깊숙히 들어와 진짜 문제가 무엇이고 무엇을 어떻게 해결해야 하는지 구체적으로 알지는 못합니다. 그리고 현대사회의 문제들은 수없이 많지만 정부가 이 모든 문제들을 단순히 돈으로 해결하기에는 너무나 복잡합니다. 그렇기 때문에 우리사회 곳곳에 사회적 기업이 필요한 것입니다. 어떤 사회문제에 대한 근본적인 해결을 위해서는 정부의 예산이 얼마가 편성되었느냐가 아니라 구체적으로 어떠한 돈을 어디에 얼마만큼 적절히 쓰느냐가 더 중요한 것입니다. 정부가 하지 못하는 일을 사회적 기업이 대신해주는 것이지요. 이것이 사회적 기업이 하는 일이라 할수 있겠습니다.</p>\n<p style=\"text-align: justify;\">저는 사회적 기업에 관심이 많고 사회적 기업에 대해서 공부하고 있습니다. 이 책을 읽은 이유도 이것이지요. 하지만 저는 이 책에서 보여준 대부분의 사회적 기업의 모습은 사회적 기업이라기 보다는 사회단체에 가깝다는 생각을 했습니다. 물론 좋은일을 하자는 취지는 똑같을지 모르겠지만 '기업'이라는 것은 확실한 비즈니스 모델이 있어야 한다고 생각합니다. 사회적기업과 사회단체의 가장 큰 차이점이 바로 하는일을 통해 돈을 벌수 있냐 없냐라는 것이지요. 그래서 사회적 기업을 창업 하려고 할때, '지원금으로 하지 뭐'식의 사고방식은 반드시 지양해야 합니다. 사회적 기업은 영세한 경우가 대부분이라 지원금이 불가피할 경우도 있지만 회사의 운영이 지원금에 의존되어서는 안됩니다. 예를들어 정권이 바뀌거나 예산편성이 바뀌는 경우처럼 지원금은 언제라도 없어질수 있기 때문입니다. 회사가 지원금에만 의존하고 있었다면 이런경우에는 십중팔구는 망하고 말겠죠.</p>\n<p style=\"text-align: justify;\">또 한가지 말하고 싶은것은 현재 대한민국 정부에서 사회적 기업을 바라보는 시각에 대해서입니다. 우리나라에서 정의하는 사회적기업은 한가지의 관점에 국한되어 있습니다. 바로 '고용'입니다. 기업을 만듦에 있어 중요한 것이 이윤추구가 아니라 고용이라는 것이지요. 이윤추구를 위해 고용하는 것이아니라 고용을 위해 이윤을 추구한다는 것이 한국에서 인정하는 사회적기업의 모델입니다. 예를들면 장애인 바리스타를 고용하여 운영하는 까페, 새터민이나 이주여성으로만 구성된 공장을 운영하는 회사 등이 있습니다. 이러한 형태의 기업도 당연히 사회적 기업입니다. 하지만 고용만을 위한 것만이 사회적기업은 아닙니다. 사회적기업이라는 것은 현존하는 사회문제를 기존의 방식과는 다른 창의적인 방법을 통해 고용창출, 빈민구제, 저소득층 지원, 환경문제 해결 등을 실현하는 기업이라 할 수 있습니다. 현재 한국사회에서 가장큰 문제중에 하나가 실업문제임을 감안한다면 고용창출이 사회적 기업을 결정하는 기준이 된것을 이해할수 있지만, 앞으로 한국사회의 다양한 문제들을 효과적으로 해결하기 위해서는 사회적 기업을 결정하는 기준을 확대할 필요가 있습니다.</p>\n","slug":"2014-03-20-role-of-social-venture","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6e000gwxt4d5tm9rsw","content":"<p style=\"text-align:justify\">한국사회에서는 '3불 타령'이라는 말이 있습니다. 어떤 새로운 일을 하려고 하면 '규정에 맞지않다', '선례가 없다', '예산이 없다' 라는 것입니다. 이와같은 말을 가장 많이 하는 곳이 아마도 공무원들이 일하는 관공서일 것입니다. 실제로 제가 공무원과 그렇게 많은 일을 같이 해보지는 않았지만 그들은 어떤 새로운 일에 대해서 책임지는것을 꺼리는 경향이 있습니다. 무슨 일을 하려고 하면 항상 규정을 따지고 새로운 것에 대한 거부감으로 충만해 있으며 예산은 충분한데 정말 필요한 곳에 쓰려고 하면 예산이 없다고 합니다.</p><p style=\"text-align:justify\">한국사회에서는 이와관련된 또 하나의 이상한 현상이 있습니다. 그 어느나라보다 공무원이 되고자 하는 청년들이 많아 공무원시험에 합격하기가 하늘의 별따기 만큼이나 어렵습니다. 보통 몇십대일의 경쟁률은 기본인것 같습니다. 그렇다보니 '공무원을 준비하는 사람'이라는 실업자들도 많은 상태이지요. 이런 현상이 존재하는 가장 큰 이유는 공무원을 소위말하는 '철밥통'이라 부르며 일종의 평생직장이라 생각하기 때문입니다. 공무원 시험에 어렵게 붙었는데 자칫잘못해서 어떤일에 책임을 졌다가 문제가 생기길 바라는 공무원은 없을것입니다. 그래서 공무원들은 자신의 자리에서 어떤 일에대해 책임지기를 꺼려하는 것은 어쩌면 당연한 현상이라 할 수도 있겠네요.</p><p style=\"text-align:justify\">요즘 한국사회는 때아닌(?) 혁신의 바람이 불고 있습니다. 국가와 공무원집단도 마찬가지지요. 무엇을 위한 '혁신'인지는 모르겠지만 자신들에게 문제점이 있는 것을 알고 그것을 고쳐보자는 취지는 나쁘지 않은듯 합니다. 하지만 '혁신'을 위한 혁신이 대부분이고 과한 경쟁으로인한 실적위주의 일처리 방식은 과거 공무원이 보여주었던 나태하고 안일한 모습과 다를바 없다는 생각이 들었습니다.</p><p>&nbsp;</p><p style=\"text-align:center\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110423_1000000136.jpg\" target=\"_blank\" rel=\"external\"><img class=\"aligncenter size-full wp-image-480\" alt=\"P20110423_1000000136\" src=\"/assets/P20110423_1000000136.jpg\" width=\"640\" height=\"478\"><br></a></p><p style=\"text-align:justify\">제가 오늘 말하고자 하는바가 공무원에 대해서가 아닙니다. 하지만 한국의 공무원에 대해서 잠깐 언급한것은 영국의 사회혁신 리포트《올리버는 어떻게 세상을 요리할까?》에 소개된 여러 사례에서 보여주는 관공서의 역할 때문입니다. 현대사회의 문제점을 분석하여 창의적인 해결책을 찾아내는 것이 어찌보면 정부나 관공서의 역할 같아 보입니다. 하지만 실제적으로 이러한 일을 도맡아 하는 곳은 관공서가 아니라 사회단체 및 사회적 기업입니다. 사실 정부는 여러 사회문제에 대해서 분석하여 예산을 편성하는 등의 큰 그림은 그릴수 있을지 몰라도 실제로 사회 깊숙히 들어와 진짜 문제가 무엇이고 무엇을 어떻게 해결해야 하는지 구체적으로 알지는 못합니다. 그리고 현대사회의 문제들은 수없이 많지만 정부가 이 모든 문제들을 단순히 돈으로 해결하기에는 너무나 복잡합니다. 그렇기 때문에 우리사회 곳곳에 사회적 기업이 필요한 것입니다. 어떤 사회문제에 대한 근본적인 해결을 위해서는 정부의 예산이 얼마가 편성되었느냐가 아니라 구체적으로 어떠한 돈을 어디에 얼마만큼 적절히 쓰느냐가 더 중요한 것입니다. 정부가 하지 못하는 일을 사회적 기업이 대신해주는 것이지요. 이것이 사회적 기업이 하는 일이라 할수 있겠습니다.</p><p style=\"text-align:justify\">저는 사회적 기업에 관심이 많고 사회적 기업에 대해서 공부하고 있습니다. 이 책을 읽은 이유도 이것이지요. 하지만 저는 이 책에서 보여준 대부분의 사회적 기업의 모습은 사회적 기업이라기 보다는 사회단체에 가깝다는 생각을 했습니다. 물론 좋은일을 하자는 취지는 똑같을지 모르겠지만 '기업'이라는 것은 확실한 비즈니스 모델이 있어야 한다고 생각합니다. 사회적기업과 사회단체의 가장 큰 차이점이 바로 하는일을 통해 돈을 벌수 있냐 없냐라는 것이지요. 그래서 사회적 기업을 창업 하려고 할때, '지원금으로 하지 뭐'식의 사고방식은 반드시 지양해야 합니다. 사회적 기업은 영세한 경우가 대부분이라 지원금이 불가피할 경우도 있지만 회사의 운영이 지원금에 의존되어서는 안됩니다. 예를들어 정권이 바뀌거나 예산편성이 바뀌는 경우처럼 지원금은 언제라도 없어질수 있기 때문입니다. 회사가 지원금에만 의존하고 있었다면 이런경우에는 십중팔구는 망하고 말겠죠.</p><p style=\"text-align:justify\">또 한가지 말하고 싶은것은 현재 대한민국 정부에서 사회적 기업을 바라보는 시각에 대해서입니다. 우리나라에서 정의하는 사회적기업은 한가지의 관점에 국한되어 있습니다. 바로 '고용'입니다. 기업을 만듦에 있어 중요한 것이 이윤추구가 아니라 고용이라는 것이지요. 이윤추구를 위해 고용하는 것이아니라 고용을 위해 이윤을 추구한다는 것이 한국에서 인정하는 사회적기업의 모델입니다. 예를들면 장애인 바리스타를 고용하여 운영하는 까페, 새터민이나 이주여성으로만 구성된 공장을 운영하는 회사 등이 있습니다. 이러한 형태의 기업도 당연히 사회적 기업입니다. 하지만 고용만을 위한 것만이 사회적기업은 아닙니다. 사회적기업이라는 것은 현존하는 사회문제를 기존의 방식과는 다른 창의적인 방법을 통해 고용창출, 빈민구제, 저소득층 지원, 환경문제 해결 등을 실현하는 기업이라 할 수 있습니다. 현재 한국사회에서 가장큰 문제중에 하나가 실업문제임을 감안한다면 고용창출이 사회적 기업을 결정하는 기준이 된것을 이해할수 있지만, 앞으로 한국사회의 다양한 문제들을 효과적으로 해결하기 위해서는 사회적 기업을 결정하는 기준을 확대할 필요가 있습니다.</p>","excerpt":"","more":"<p style=\"text-align:justify\">한국사회에서는 '3불 타령'이라는 말이 있습니다. 어떤 새로운 일을 하려고 하면 '규정에 맞지않다', '선례가 없다', '예산이 없다' 라는 것입니다. 이와같은 말을 가장 많이 하는 곳이 아마도 공무원들이 일하는 관공서일 것입니다. 실제로 제가 공무원과 그렇게 많은 일을 같이 해보지는 않았지만 그들은 어떤 새로운 일에 대해서 책임지는것을 꺼리는 경향이 있습니다. 무슨 일을 하려고 하면 항상 규정을 따지고 새로운 것에 대한 거부감으로 충만해 있으며 예산은 충분한데 정말 필요한 곳에 쓰려고 하면 예산이 없다고 합니다.</p><p style=\"text-align:justify\">한국사회에서는 이와관련된 또 하나의 이상한 현상이 있습니다. 그 어느나라보다 공무원이 되고자 하는 청년들이 많아 공무원시험에 합격하기가 하늘의 별따기 만큼이나 어렵습니다. 보통 몇십대일의 경쟁률은 기본인것 같습니다. 그렇다보니 '공무원을 준비하는 사람'이라는 실업자들도 많은 상태이지요. 이런 현상이 존재하는 가장 큰 이유는 공무원을 소위말하는 '철밥통'이라 부르며 일종의 평생직장이라 생각하기 때문입니다. 공무원 시험에 어렵게 붙었는데 자칫잘못해서 어떤일에 책임을 졌다가 문제가 생기길 바라는 공무원은 없을것입니다. 그래서 공무원들은 자신의 자리에서 어떤 일에대해 책임지기를 꺼려하는 것은 어쩌면 당연한 현상이라 할 수도 있겠네요.</p><p style=\"text-align:justify\">요즘 한국사회는 때아닌(?) 혁신의 바람이 불고 있습니다. 국가와 공무원집단도 마찬가지지요. 무엇을 위한 '혁신'인지는 모르겠지만 자신들에게 문제점이 있는 것을 알고 그것을 고쳐보자는 취지는 나쁘지 않은듯 합니다. 하지만 '혁신'을 위한 혁신이 대부분이고 과한 경쟁으로인한 실적위주의 일처리 방식은 과거 공무원이 보여주었던 나태하고 안일한 모습과 다를바 없다는 생각이 들었습니다.</p><p>&nbsp;</p><p style=\"text-align:center\"><a href=\"http://www.whynhows.com/wp-content/uploads/2014/03/P20110423_1000000136.jpg\"><img class=\"aligncenter size-full wp-image-480\" alt=\"P20110423_1000000136\" src=\"/assets/P20110423_1000000136.jpg\" width=\"640\" height=\"478\"><br></a></p><p style=\"text-align:justify\">제가 오늘 말하고자 하는바가 공무원에 대해서가 아닙니다. 하지만 한국의 공무원에 대해서 잠깐 언급한것은 영국의 사회혁신 리포트《올리버는 어떻게 세상을 요리할까?》에 소개된 여러 사례에서 보여주는 관공서의 역할 때문입니다. 현대사회의 문제점을 분석하여 창의적인 해결책을 찾아내는 것이 어찌보면 정부나 관공서의 역할 같아 보입니다. 하지만 실제적으로 이러한 일을 도맡아 하는 곳은 관공서가 아니라 사회단체 및 사회적 기업입니다. 사실 정부는 여러 사회문제에 대해서 분석하여 예산을 편성하는 등의 큰 그림은 그릴수 있을지 몰라도 실제로 사회 깊숙히 들어와 진짜 문제가 무엇이고 무엇을 어떻게 해결해야 하는지 구체적으로 알지는 못합니다. 그리고 현대사회의 문제들은 수없이 많지만 정부가 이 모든 문제들을 단순히 돈으로 해결하기에는 너무나 복잡합니다. 그렇기 때문에 우리사회 곳곳에 사회적 기업이 필요한 것입니다. 어떤 사회문제에 대한 근본적인 해결을 위해서는 정부의 예산이 얼마가 편성되었느냐가 아니라 구체적으로 어떠한 돈을 어디에 얼마만큼 적절히 쓰느냐가 더 중요한 것입니다. 정부가 하지 못하는 일을 사회적 기업이 대신해주는 것이지요. 이것이 사회적 기업이 하는 일이라 할수 있겠습니다.</p><p style=\"text-align:justify\">저는 사회적 기업에 관심이 많고 사회적 기업에 대해서 공부하고 있습니다. 이 책을 읽은 이유도 이것이지요. 하지만 저는 이 책에서 보여준 대부분의 사회적 기업의 모습은 사회적 기업이라기 보다는 사회단체에 가깝다는 생각을 했습니다. 물론 좋은일을 하자는 취지는 똑같을지 모르겠지만 '기업'이라는 것은 확실한 비즈니스 모델이 있어야 한다고 생각합니다. 사회적기업과 사회단체의 가장 큰 차이점이 바로 하는일을 통해 돈을 벌수 있냐 없냐라는 것이지요. 그래서 사회적 기업을 창업 하려고 할때, '지원금으로 하지 뭐'식의 사고방식은 반드시 지양해야 합니다. 사회적 기업은 영세한 경우가 대부분이라 지원금이 불가피할 경우도 있지만 회사의 운영이 지원금에 의존되어서는 안됩니다. 예를들어 정권이 바뀌거나 예산편성이 바뀌는 경우처럼 지원금은 언제라도 없어질수 있기 때문입니다. 회사가 지원금에만 의존하고 있었다면 이런경우에는 십중팔구는 망하고 말겠죠.</p><p style=\"text-align:justify\">또 한가지 말하고 싶은것은 현재 대한민국 정부에서 사회적 기업을 바라보는 시각에 대해서입니다. 우리나라에서 정의하는 사회적기업은 한가지의 관점에 국한되어 있습니다. 바로 '고용'입니다. 기업을 만듦에 있어 중요한 것이 이윤추구가 아니라 고용이라는 것이지요. 이윤추구를 위해 고용하는 것이아니라 고용을 위해 이윤을 추구한다는 것이 한국에서 인정하는 사회적기업의 모델입니다. 예를들면 장애인 바리스타를 고용하여 운영하는 까페, 새터민이나 이주여성으로만 구성된 공장을 운영하는 회사 등이 있습니다. 이러한 형태의 기업도 당연히 사회적 기업입니다. 하지만 고용만을 위한 것만이 사회적기업은 아닙니다. 사회적기업이라는 것은 현존하는 사회문제를 기존의 방식과는 다른 창의적인 방법을 통해 고용창출, 빈민구제, 저소득층 지원, 환경문제 해결 등을 실현하는 기업이라 할 수 있습니다. 현재 한국사회에서 가장큰 문제중에 하나가 실업문제임을 감안한다면 고용창출이 사회적 기업을 결정하는 기준이 된것을 이해할수 있지만, 앞으로 한국사회의 다양한 문제들을 효과적으로 해결하기 위해서는 사회적 기업을 결정하는 기준을 확대할 필요가 있습니다.</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(1) - 건축에 뜻을 두다","date":"2014-10-05T18:02:23.000Z","type":"post","published":1,"status":"publish","meta":{"_aioseop_keywords":"개발, 건축, 프로그래머, arcitecture, programmer, 건설, 미래, 직업, 대학","_thumbnail_id":"1606","_wpas_done_all":"1","dsq_thread_id":"3087093054","_edit_last":"1","_wp_jd_target":"http://www.whynhows.com/?p=1601","_wpt_short_url":"","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:105:\"Post Edited: 건축에서 프로그래머로(1) - 건축에 뜻을 두다 http://www.whynhows.com/?p=1601\";s:5:\"error\";s:113:\"This tweet is identical to another Tweet recently sent to this account. Twitter requires all Tweets to be unique.\";s:4:\"code\";i:403;s:9:\"timestamp\";i:1415164229;}","_wpt_status_message":"This tweet is identical to another Tweet recently sent to this account. Twitter requires all Tweets to be unique."},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>어렸을적엔 그림그리는 화가가 되고 싶었습니다. 그림 실력이 그렇게 뛰어나진 않았지만 그림 그리는게 마냥 즐겁고 행복 했었습니다. 누가 시키지 않아도 하루종일 그림 그리는데 몰두하기도 했었지요. 그림뿐만 아니라 만드는데도 흥미가 있었습니다. 약품 박스로 로보트를 만들기도 하고 철사로 이것저것 만들어보기도 했었지요. 하지만, 시간이 지나 중학생이 되고 고등학생이 되면서 예전처럼 그림에 대한 흥미는 사라지고, 대신 여느 아이들처럼 대학을 위한 입시에만 정신이 팔려버리게 되었습니다. 20살, 드디어 대학생이 되었습니다. 제게 20살은 해방의 시간이었습니다. 그때는 '앞으로 무었을 하겠다' 보다는 '지금은 놀자' 란 생각으로 머리속이 가득차 있었지요. 매일같이 친구들, 여자친구와 어울리면서 밤이면 밤마다 술자리에 흥청망청 시간을 보냈습니다.</p>\n<p>당시 제가 들어간 대학은 입학해서 2학년이 되기 전에 과를 선택하는 학부제로 운영되고 있었습니다. 1학년때는 특정 과가 정해져 있지 않고 교양위주의 수업을 들으면서 자신의 진로를 탐색하는 시간이었지요. 이런 방식이 어떻게 보면 긍정적으로 보일지 모르나 사실은 진로 선택을 1년 미루는것 밖에 되지 않는다고 생각합니다. 아직 아무것도 정해져 있지 않다는 생각은 자연스럽게 미래의 나를 생각하는것을 미루게 만들었습니다. 어차피 1년이 지나고 학과를 선택하면 그때부터 시작하면 된다고 그렇게 믿었지요. 그렇게 1년이 순식간에 지나고 선택의 시간이 다가왔습니다. 20년을 살면서 자신의 미래를 위해 제대로된 선택을 한것도 그때가 처음이 아닐까 생각이 듭니다. 고등학교를 다닐때까지는 거의 모든것이 정해진대로, 크게 다르지 않은 삶을 살았습니다. 선택을 하더라도 미래에 크게 영향을 주지 않는 선 안에서 이뤄졌습니다. 대학을 선택하는 시간도 있었지만, 학부로 지원을 했기에 당시에도 별다른 고민은 없었지요. 그런데 드디어 내가 미래에 어떤 삶을 살아야 하는지를 결정하는 시간이 다가왔습니다.</p>\n<p>고민이었습니다. 애초에 전자공학과 정도를 염두에 두고 있었습니다. 전자공학은 인기가 있는 학과여서 어느정도의 학점이 필요로 했지만 그정도의 학점은 충분했습니다. 그래서 외부의 조건이나 환경과는 전혀 상관없이 오로지 나 자신만을 위해서 고민을 하기 시작했습니다. 1년간 별다른 고민없이 지내온 기간이 어쩌면 도움이 됐는지도 모르겠습니다. 문득 어렸을적 시절을 생각해보았습니다. 15권 가량되는 백과사전의 예술분야와 관련된 13번째 책, 그 책 속에서 수없이 보아왔던 이미지 하나가 떠올랐습니다. 집을 만드는것! 건축이었습니다.</p>\n<p>뭔가 운명이 찾아온것처럼 건축공학과(당시는 건축학과 건축공학 분리없이 건축공학이었습니다)에 지원했습니다. 2학년은 1학년과는 다른 시간이었습니다. 건축이라고는 집짓는것이라는것 외에는 아무것도 모르던 제가 건축이 이런것이구나라는걸 깨달아가는 시간이었습니다. 다양한 분야의 책을 읽고 좋은 친구들을 만나고, 많은 이야기를 나누었습니다. 어설픈 실력에도 밤을 꼬박 새면서 작업한 결과물로 교수님에게 칭찬이라도 한번 받게으면 간밤의 피로는 말끔히 사라지고 더없이 행복했었지요. 하지만 대부분은 깨지고(설계 개념이나 모델 등을 평가 받는 것을 critic이라고 합니다), 부시고 다시 만드는 일의 반복이었습니다. 이런 반복의 시간동안 나도 세계적인 건축가들과 어깨를 나란히 하고싶다는 생각이 조금씩 자라나고 있었습니다.</p>\n<p>기나긴 방황의 시간을 보내고 드디오 졸업, 취업이 목전에 다가왔습니다. 여기서도 갈등이 찾아왔습니다. 건설회사(이른바 대기업)는 아예 쳐다보지도 않았습니다. 애초에 설계(건축디자인)를 위해 건축을 선택한 것인데 현실적인 조건(연봉, 네임밸류) 때문에 건설회사에 간다는 것은 자존심이 허락치 않았지요. 대신 큰 회사규모의 기업형 설계사무소에 들어갈 것이냐, 아니면 이른바 작가풍의 건축가 밑으로 들어가서 건축에 대해 제대로 배우로 갈것인가를 결정해야 했습니다. 아무래도 기업형 설계사무소에 들어가면 후자에 비해서 연봉은 조금더 높습니다. 하지만 진짜 건축일을하기 보다는 회사가 요구하는 회사가 원하는 일을 해야했지요. 하루종일 PPT를 만들거나, 말도 안되는 이야기를 갖다 붙이며 '이것이 작품입네'하고 과장하고 부풀리는 그런 일들이었지요. 네, 제가 해봐서 아는것입니다. 즉, 제가 선택한 길은 건축가 밑에서 일하며 배우는 것이 아니라 기업형 회사를 선택했다는 말입니다. 이때 후자의 길을 택했다면 아마도 아직 건축계에 발을 붙이고 살았을지도 모를 일입니다.</p>\n<p>회사 초창기에는 외부 공모전에도 여러번 참여 하고 입상하는 등 학생때의 열정을 이어 갔습니다. 하지만, 회사생활은 쉽지 않았고 밤을 새가며 일도 많이했지만 학생때와는 전혀 다르게 얻는것은 별로 없었습니다. 학교다닐때처럼 밤을 새가며 모형을 만들어도, 발표준비에 PPT를 만들어도 예전의 그것과는 전혀 달랐습니다. 그러다보니 '아, 이게 과연 내가 생각했던 건축인가'와 같은 고민들도 자주하게 되었습니다. 이일들은 내가 학생때 배우고 익혔던 이상적이고 훌륭하고 자부심 넘치는 건축이라는 학문이 아니었습니다. 이것은 단지 회사일 그 이상 그 이하도 아니었습니다.</p>\n<p>한편으로는 회사의 이런 모습이 이해가 가기도 했습니다. 건축은 학문이 아니라 경제적인 부분으로 프로젝트가 좌지우지되는 현실적인 '사업'이기 때문에 이상적인 모습만을 쫓을 수는 없는 노릇입니다. 하물며 이윤을 추구하는 집단인 회사에서 건축이라는 타이틀을 가지고 있으니 뭔가 멋있고 남들이 이해하지 못하고 비효율적인 프로젝트를 어마어마한 돈으로 실행할수는 없는 노릇입니다. 당연히 누군가의 요구와 누군가의 이해관계에 의해서 그들이 원하는 작업을 빠르고 효율적으로 처리해야하죠. 그래야 회사의 직원 모두가 먹고 살수 있는 것입니다.</p>\n<p>이해가 갔지만, 그래도 저는 싫었습니다. 이런저런 고민들로 점점 지쳐가고 있을 때, 어느 날 같은 회사의 10년차 선배님이 농담 삼아 제게 이런 말씀을 하셨습니다. \"지금의 내 모습이 바로 10년 후의 니 모습일꺼야\" 물론 농담이었지만, 이 말을 듣는 순간 뜨끔할 수 밖에 없었습니다. 10년이 지나면 30대 후반의 나이인데, 이런 회사에서 지금과 다를바 없이 일하고 있을 상상을 하니 눈앞이 캄캄하더라구요. 도저히 이건 아니다라는 생각이 들었습니다.</p>\n<p>결국 저는 1년 5개월이라는 짧은 기간이 지난 후 과감히 회사를 내팽개치고 나와버렸습니다. 무려 6~7년간의 열정이 1년 남짓한 시간만에 연기처럼 사라져버린 것이었습니다. 프로그래머로 살고 3년째 살고 있는 지금도 가끔 건축에 대한 향수에 젖어듭니다. 특히 당시에 같이 작업하고 고민하던 친구, 선배들이 자기의 길을 변함없이 묵묵히 걸어가고 있는 모습을 보면 더더욱 그리워지곤 합니다. 그래도 돌아갈 수 없습니다. 이는 마치 헤어진 여자친구를 다시 만나는 것처럼 부질없는 일임을 잘 알기 때문입니다.</p>\n","source":"_posts/2014-10-06-from-architect-to-progammer-1.html","raw":"---\nlayout: post\ncomments: true\ntitle: 건축에서 프로그래머로(1) - 건축에 뜻을 두다\ndate: 2014-10-06 12:02:23.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- arcitecture\n- programmer\n- 개발\n- 건설\n- 건축\n- 대학\n- 미래\n- 직업\n- 프로그래머\nmeta:\n  _aioseop_keywords: 개발, 건축, 프로그래머, arcitecture, programmer, 건설, 미래, 직업, 대학\n  _thumbnail_id: '1606'\n  _wpas_done_all: '1'\n  dsq_thread_id: '3087093054'\n  _edit_last: '1'\n  _wp_jd_target: http://www.whynhows.com/?p=1601\n  _wpt_short_url: ''\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:105:\"Post Edited: 건축에서 프로그래머로(1)\n    - 건축에 뜻을 두다 http://www.whynhows.com/?p=1601\";s:5:\"error\";s:113:\"This tweet is\n    identical to another Tweet recently sent to this account. Twitter requires all\n    Tweets to be unique.\";s:4:\"code\";i:403;s:9:\"timestamp\";i:1415164229;}'\n  _wpt_status_message: This tweet is identical to another Tweet recently sent to this\n    account. Twitter requires all Tweets to be unique.\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>어렸을적엔 그림그리는 화가가 되고 싶었습니다. 그림 실력이 그렇게 뛰어나진 않았지만 그림 그리는게 마냥 즐겁고 행복 했었습니다. 누가 시키지 않아도 하루종일 그림 그리는데 몰두하기도 했었지요. 그림뿐만 아니라 만드는데도 흥미가 있었습니다. 약품 박스로 로보트를 만들기도 하고 철사로 이것저것 만들어보기도 했었지요. 하지만, 시간이 지나 중학생이 되고 고등학생이 되면서 예전처럼 그림에 대한 흥미는 사라지고, 대신 여느 아이들처럼 대학을 위한 입시에만 정신이 팔려버리게 되었습니다. 20살, 드디어 대학생이 되었습니다. 제게 20살은 해방의 시간이었습니다. 그때는 '앞으로 무었을 하겠다' 보다는 '지금은 놀자' 란 생각으로 머리속이 가득차 있었지요. 매일같이 친구들, 여자친구와 어울리면서 밤이면 밤마다 술자리에 흥청망청 시간을 보냈습니다.</p>\n<p>당시 제가 들어간 대학은 입학해서 2학년이 되기 전에 과를 선택하는 학부제로 운영되고 있었습니다. 1학년때는 특정 과가 정해져 있지 않고 교양위주의 수업을 들으면서 자신의 진로를 탐색하는 시간이었지요. 이런 방식이 어떻게 보면 긍정적으로 보일지 모르나 사실은 진로 선택을 1년 미루는것 밖에 되지 않는다고 생각합니다. 아직 아무것도 정해져 있지 않다는 생각은 자연스럽게 미래의 나를 생각하는것을 미루게 만들었습니다. 어차피 1년이 지나고 학과를 선택하면 그때부터 시작하면 된다고 그렇게 믿었지요. 그렇게 1년이 순식간에 지나고 선택의 시간이 다가왔습니다. 20년을 살면서 자신의 미래를 위해 제대로된 선택을 한것도 그때가 처음이 아닐까 생각이 듭니다. 고등학교를 다닐때까지는 거의 모든것이 정해진대로, 크게 다르지 않은 삶을 살았습니다. 선택을 하더라도 미래에 크게 영향을 주지 않는 선 안에서 이뤄졌습니다. 대학을 선택하는 시간도 있었지만, 학부로 지원을 했기에 당시에도 별다른 고민은 없었지요. 그런데 드디어 내가 미래에 어떤 삶을 살아야 하는지를 결정하는 시간이 다가왔습니다.</p>\n<p>고민이었습니다. 애초에 전자공학과 정도를 염두에 두고 있었습니다. 전자공학은 인기가 있는 학과여서 어느정도의 학점이 필요로 했지만 그정도의 학점은 충분했습니다. 그래서 외부의 조건이나 환경과는 전혀 상관없이 오로지 나 자신만을 위해서 고민을 하기 시작했습니다. 1년간 별다른 고민없이 지내온 기간이 어쩌면 도움이 됐는지도 모르겠습니다. 문득 어렸을적 시절을 생각해보았습니다. 15권 가량되는 백과사전의 예술분야와 관련된 13번째 책, 그 책 속에서 수없이 보아왔던 이미지 하나가 떠올랐습니다. 집을 만드는것! 건축이었습니다.</p>\n<p>뭔가 운명이 찾아온것처럼 건축공학과(당시는 건축학과 건축공학 분리없이 건축공학이었습니다)에 지원했습니다. 2학년은 1학년과는 다른 시간이었습니다. 건축이라고는 집짓는것이라는것 외에는 아무것도 모르던 제가 건축이 이런것이구나라는걸 깨달아가는 시간이었습니다. 다양한 분야의 책을 읽고 좋은 친구들을 만나고, 많은 이야기를 나누었습니다. 어설픈 실력에도 밤을 꼬박 새면서 작업한 결과물로 교수님에게 칭찬이라도 한번 받게으면 간밤의 피로는 말끔히 사라지고 더없이 행복했었지요. 하지만 대부분은 깨지고(설계 개념이나 모델 등을 평가 받는 것을 critic이라고 합니다), 부시고 다시 만드는 일의 반복이었습니다. 이런 반복의 시간동안 나도 세계적인 건축가들과 어깨를 나란히 하고싶다는 생각이 조금씩 자라나고 있었습니다.</p>\n<p>기나긴 방황의 시간을 보내고 드디오 졸업, 취업이 목전에 다가왔습니다. 여기서도 갈등이 찾아왔습니다. 건설회사(이른바 대기업)는 아예 쳐다보지도 않았습니다. 애초에 설계(건축디자인)를 위해 건축을 선택한 것인데 현실적인 조건(연봉, 네임밸류) 때문에 건설회사에 간다는 것은 자존심이 허락치 않았지요. 대신 큰 회사규모의 기업형 설계사무소에 들어갈 것이냐, 아니면 이른바 작가풍의 건축가 밑으로 들어가서 건축에 대해 제대로 배우로 갈것인가를 결정해야 했습니다. 아무래도 기업형 설계사무소에 들어가면 후자에 비해서 연봉은 조금더 높습니다. 하지만 진짜 건축일을하기 보다는 회사가 요구하는 회사가 원하는 일을 해야했지요. 하루종일 PPT를 만들거나, 말도 안되는 이야기를 갖다 붙이며 '이것이 작품입네'하고 과장하고 부풀리는 그런 일들이었지요. 네, 제가 해봐서 아는것입니다. 즉, 제가 선택한 길은 건축가 밑에서 일하며 배우는 것이 아니라 기업형 회사를 선택했다는 말입니다. 이때 후자의 길을 택했다면 아마도 아직 건축계에 발을 붙이고 살았을지도 모를 일입니다.</p>\n<p>회사 초창기에는 외부 공모전에도 여러번 참여 하고 입상하는 등 학생때의 열정을 이어 갔습니다. 하지만, 회사생활은 쉽지 않았고 밤을 새가며 일도 많이했지만 학생때와는 전혀 다르게 얻는것은 별로 없었습니다. 학교다닐때처럼 밤을 새가며 모형을 만들어도, 발표준비에 PPT를 만들어도 예전의 그것과는 전혀 달랐습니다. 그러다보니 '아, 이게 과연 내가 생각했던 건축인가'와 같은 고민들도 자주하게 되었습니다. 이일들은 내가 학생때 배우고 익혔던 이상적이고 훌륭하고 자부심 넘치는 건축이라는 학문이 아니었습니다. 이것은 단지 회사일 그 이상 그 이하도 아니었습니다.</p>\n<p>한편으로는 회사의 이런 모습이 이해가 가기도 했습니다. 건축은 학문이 아니라 경제적인 부분으로 프로젝트가 좌지우지되는 현실적인 '사업'이기 때문에 이상적인 모습만을 쫓을 수는 없는 노릇입니다. 하물며 이윤을 추구하는 집단인 회사에서 건축이라는 타이틀을 가지고 있으니 뭔가 멋있고 남들이 이해하지 못하고 비효율적인 프로젝트를 어마어마한 돈으로 실행할수는 없는 노릇입니다. 당연히 누군가의 요구와 누군가의 이해관계에 의해서 그들이 원하는 작업을 빠르고 효율적으로 처리해야하죠. 그래야 회사의 직원 모두가 먹고 살수 있는 것입니다.</p>\n<p>이해가 갔지만, 그래도 저는 싫었습니다. 이런저런 고민들로 점점 지쳐가고 있을 때, 어느 날 같은 회사의 10년차 선배님이 농담 삼아 제게 이런 말씀을 하셨습니다. \"지금의 내 모습이 바로 10년 후의 니 모습일꺼야\" 물론 농담이었지만, 이 말을 듣는 순간 뜨끔할 수 밖에 없었습니다. 10년이 지나면 30대 후반의 나이인데, 이런 회사에서 지금과 다를바 없이 일하고 있을 상상을 하니 눈앞이 캄캄하더라구요. 도저히 이건 아니다라는 생각이 들었습니다.</p>\n<p>결국 저는 1년 5개월이라는 짧은 기간이 지난 후 과감히 회사를 내팽개치고 나와버렸습니다. 무려 6~7년간의 열정이 1년 남짓한 시간만에 연기처럼 사라져버린 것이었습니다. 프로그래머로 살고 3년째 살고 있는 지금도 가끔 건축에 대한 향수에 젖어듭니다. 특히 당시에 같이 작업하고 고민하던 친구, 선배들이 자기의 길을 변함없이 묵묵히 걸어가고 있는 모습을 보면 더더욱 그리워지곤 합니다. 그래도 돌아갈 수 없습니다. 이는 마치 헤어진 여자친구를 다시 만나는 것처럼 부질없는 일임을 잘 알기 때문입니다.</p>\n","slug":"2014-10-06-from-architect-to-progammer-1","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6f000iwxt4r7kczegi","content":"<p>어렸을적엔 그림그리는 화가가 되고 싶었습니다. 그림 실력이 그렇게 뛰어나진 않았지만 그림 그리는게 마냥 즐겁고 행복 했었습니다. 누가 시키지 않아도 하루종일 그림 그리는데 몰두하기도 했었지요. 그림뿐만 아니라 만드는데도 흥미가 있었습니다. 약품 박스로 로보트를 만들기도 하고 철사로 이것저것 만들어보기도 했었지요. 하지만, 시간이 지나 중학생이 되고 고등학생이 되면서 예전처럼 그림에 대한 흥미는 사라지고, 대신 여느 아이들처럼 대학을 위한 입시에만 정신이 팔려버리게 되었습니다. 20살, 드디어 대학생이 되었습니다. 제게 20살은 해방의 시간이었습니다. 그때는 '앞으로 무었을 하겠다' 보다는 '지금은 놀자' 란 생각으로 머리속이 가득차 있었지요. 매일같이 친구들, 여자친구와 어울리면서 밤이면 밤마다 술자리에 흥청망청 시간을 보냈습니다.</p><p>당시 제가 들어간 대학은 입학해서 2학년이 되기 전에 과를 선택하는 학부제로 운영되고 있었습니다. 1학년때는 특정 과가 정해져 있지 않고 교양위주의 수업을 들으면서 자신의 진로를 탐색하는 시간이었지요. 이런 방식이 어떻게 보면 긍정적으로 보일지 모르나 사실은 진로 선택을 1년 미루는것 밖에 되지 않는다고 생각합니다. 아직 아무것도 정해져 있지 않다는 생각은 자연스럽게 미래의 나를 생각하는것을 미루게 만들었습니다. 어차피 1년이 지나고 학과를 선택하면 그때부터 시작하면 된다고 그렇게 믿었지요. 그렇게 1년이 순식간에 지나고 선택의 시간이 다가왔습니다. 20년을 살면서 자신의 미래를 위해 제대로된 선택을 한것도 그때가 처음이 아닐까 생각이 듭니다. 고등학교를 다닐때까지는 거의 모든것이 정해진대로, 크게 다르지 않은 삶을 살았습니다. 선택을 하더라도 미래에 크게 영향을 주지 않는 선 안에서 이뤄졌습니다. 대학을 선택하는 시간도 있었지만, 학부로 지원을 했기에 당시에도 별다른 고민은 없었지요. 그런데 드디어 내가 미래에 어떤 삶을 살아야 하는지를 결정하는 시간이 다가왔습니다.</p><p>고민이었습니다. 애초에 전자공학과 정도를 염두에 두고 있었습니다. 전자공학은 인기가 있는 학과여서 어느정도의 학점이 필요로 했지만 그정도의 학점은 충분했습니다. 그래서 외부의 조건이나 환경과는 전혀 상관없이 오로지 나 자신만을 위해서 고민을 하기 시작했습니다. 1년간 별다른 고민없이 지내온 기간이 어쩌면 도움이 됐는지도 모르겠습니다. 문득 어렸을적 시절을 생각해보았습니다. 15권 가량되는 백과사전의 예술분야와 관련된 13번째 책, 그 책 속에서 수없이 보아왔던 이미지 하나가 떠올랐습니다. 집을 만드는것! 건축이었습니다.</p><p>뭔가 운명이 찾아온것처럼 건축공학과(당시는 건축학과 건축공학 분리없이 건축공학이었습니다)에 지원했습니다. 2학년은 1학년과는 다른 시간이었습니다. 건축이라고는 집짓는것이라는것 외에는 아무것도 모르던 제가 건축이 이런것이구나라는걸 깨달아가는 시간이었습니다. 다양한 분야의 책을 읽고 좋은 친구들을 만나고, 많은 이야기를 나누었습니다. 어설픈 실력에도 밤을 꼬박 새면서 작업한 결과물로 교수님에게 칭찬이라도 한번 받게으면 간밤의 피로는 말끔히 사라지고 더없이 행복했었지요. 하지만 대부분은 깨지고(설계 개념이나 모델 등을 평가 받는 것을 critic이라고 합니다), 부시고 다시 만드는 일의 반복이었습니다. 이런 반복의 시간동안 나도 세계적인 건축가들과 어깨를 나란히 하고싶다는 생각이 조금씩 자라나고 있었습니다.</p><p>기나긴 방황의 시간을 보내고 드디오 졸업, 취업이 목전에 다가왔습니다. 여기서도 갈등이 찾아왔습니다. 건설회사(이른바 대기업)는 아예 쳐다보지도 않았습니다. 애초에 설계(건축디자인)를 위해 건축을 선택한 것인데 현실적인 조건(연봉, 네임밸류) 때문에 건설회사에 간다는 것은 자존심이 허락치 않았지요. 대신 큰 회사규모의 기업형 설계사무소에 들어갈 것이냐, 아니면 이른바 작가풍의 건축가 밑으로 들어가서 건축에 대해 제대로 배우로 갈것인가를 결정해야 했습니다. 아무래도 기업형 설계사무소에 들어가면 후자에 비해서 연봉은 조금더 높습니다. 하지만 진짜 건축일을하기 보다는 회사가 요구하는 회사가 원하는 일을 해야했지요. 하루종일 PPT를 만들거나, 말도 안되는 이야기를 갖다 붙이며 '이것이 작품입네'하고 과장하고 부풀리는 그런 일들이었지요. 네, 제가 해봐서 아는것입니다. 즉, 제가 선택한 길은 건축가 밑에서 일하며 배우는 것이 아니라 기업형 회사를 선택했다는 말입니다. 이때 후자의 길을 택했다면 아마도 아직 건축계에 발을 붙이고 살았을지도 모를 일입니다.</p><p>회사 초창기에는 외부 공모전에도 여러번 참여 하고 입상하는 등 학생때의 열정을 이어 갔습니다. 하지만, 회사생활은 쉽지 않았고 밤을 새가며 일도 많이했지만 학생때와는 전혀 다르게 얻는것은 별로 없었습니다. 학교다닐때처럼 밤을 새가며 모형을 만들어도, 발표준비에 PPT를 만들어도 예전의 그것과는 전혀 달랐습니다. 그러다보니 '아, 이게 과연 내가 생각했던 건축인가'와 같은 고민들도 자주하게 되었습니다. 이일들은 내가 학생때 배우고 익혔던 이상적이고 훌륭하고 자부심 넘치는 건축이라는 학문이 아니었습니다. 이것은 단지 회사일 그 이상 그 이하도 아니었습니다.</p><p>한편으로는 회사의 이런 모습이 이해가 가기도 했습니다. 건축은 학문이 아니라 경제적인 부분으로 프로젝트가 좌지우지되는 현실적인 '사업'이기 때문에 이상적인 모습만을 쫓을 수는 없는 노릇입니다. 하물며 이윤을 추구하는 집단인 회사에서 건축이라는 타이틀을 가지고 있으니 뭔가 멋있고 남들이 이해하지 못하고 비효율적인 프로젝트를 어마어마한 돈으로 실행할수는 없는 노릇입니다. 당연히 누군가의 요구와 누군가의 이해관계에 의해서 그들이 원하는 작업을 빠르고 효율적으로 처리해야하죠. 그래야 회사의 직원 모두가 먹고 살수 있는 것입니다.</p><p>이해가 갔지만, 그래도 저는 싫었습니다. 이런저런 고민들로 점점 지쳐가고 있을 때, 어느 날 같은 회사의 10년차 선배님이 농담 삼아 제게 이런 말씀을 하셨습니다. \"지금의 내 모습이 바로 10년 후의 니 모습일꺼야\" 물론 농담이었지만, 이 말을 듣는 순간 뜨끔할 수 밖에 없었습니다. 10년이 지나면 30대 후반의 나이인데, 이런 회사에서 지금과 다를바 없이 일하고 있을 상상을 하니 눈앞이 캄캄하더라구요. 도저히 이건 아니다라는 생각이 들었습니다.</p><p>결국 저는 1년 5개월이라는 짧은 기간이 지난 후 과감히 회사를 내팽개치고 나와버렸습니다. 무려 6~7년간의 열정이 1년 남짓한 시간만에 연기처럼 사라져버린 것이었습니다. 프로그래머로 살고 3년째 살고 있는 지금도 가끔 건축에 대한 향수에 젖어듭니다. 특히 당시에 같이 작업하고 고민하던 친구, 선배들이 자기의 길을 변함없이 묵묵히 걸어가고 있는 모습을 보면 더더욱 그리워지곤 합니다. 그래도 돌아갈 수 없습니다. 이는 마치 헤어진 여자친구를 다시 만나는 것처럼 부질없는 일임을 잘 알기 때문입니다.</p>","excerpt":"","more":"<p>어렸을적엔 그림그리는 화가가 되고 싶었습니다. 그림 실력이 그렇게 뛰어나진 않았지만 그림 그리는게 마냥 즐겁고 행복 했었습니다. 누가 시키지 않아도 하루종일 그림 그리는데 몰두하기도 했었지요. 그림뿐만 아니라 만드는데도 흥미가 있었습니다. 약품 박스로 로보트를 만들기도 하고 철사로 이것저것 만들어보기도 했었지요. 하지만, 시간이 지나 중학생이 되고 고등학생이 되면서 예전처럼 그림에 대한 흥미는 사라지고, 대신 여느 아이들처럼 대학을 위한 입시에만 정신이 팔려버리게 되었습니다. 20살, 드디어 대학생이 되었습니다. 제게 20살은 해방의 시간이었습니다. 그때는 '앞으로 무었을 하겠다' 보다는 '지금은 놀자' 란 생각으로 머리속이 가득차 있었지요. 매일같이 친구들, 여자친구와 어울리면서 밤이면 밤마다 술자리에 흥청망청 시간을 보냈습니다.</p><p>당시 제가 들어간 대학은 입학해서 2학년이 되기 전에 과를 선택하는 학부제로 운영되고 있었습니다. 1학년때는 특정 과가 정해져 있지 않고 교양위주의 수업을 들으면서 자신의 진로를 탐색하는 시간이었지요. 이런 방식이 어떻게 보면 긍정적으로 보일지 모르나 사실은 진로 선택을 1년 미루는것 밖에 되지 않는다고 생각합니다. 아직 아무것도 정해져 있지 않다는 생각은 자연스럽게 미래의 나를 생각하는것을 미루게 만들었습니다. 어차피 1년이 지나고 학과를 선택하면 그때부터 시작하면 된다고 그렇게 믿었지요. 그렇게 1년이 순식간에 지나고 선택의 시간이 다가왔습니다. 20년을 살면서 자신의 미래를 위해 제대로된 선택을 한것도 그때가 처음이 아닐까 생각이 듭니다. 고등학교를 다닐때까지는 거의 모든것이 정해진대로, 크게 다르지 않은 삶을 살았습니다. 선택을 하더라도 미래에 크게 영향을 주지 않는 선 안에서 이뤄졌습니다. 대학을 선택하는 시간도 있었지만, 학부로 지원을 했기에 당시에도 별다른 고민은 없었지요. 그런데 드디어 내가 미래에 어떤 삶을 살아야 하는지를 결정하는 시간이 다가왔습니다.</p><p>고민이었습니다. 애초에 전자공학과 정도를 염두에 두고 있었습니다. 전자공학은 인기가 있는 학과여서 어느정도의 학점이 필요로 했지만 그정도의 학점은 충분했습니다. 그래서 외부의 조건이나 환경과는 전혀 상관없이 오로지 나 자신만을 위해서 고민을 하기 시작했습니다. 1년간 별다른 고민없이 지내온 기간이 어쩌면 도움이 됐는지도 모르겠습니다. 문득 어렸을적 시절을 생각해보았습니다. 15권 가량되는 백과사전의 예술분야와 관련된 13번째 책, 그 책 속에서 수없이 보아왔던 이미지 하나가 떠올랐습니다. 집을 만드는것! 건축이었습니다.</p><p>뭔가 운명이 찾아온것처럼 건축공학과(당시는 건축학과 건축공학 분리없이 건축공학이었습니다)에 지원했습니다. 2학년은 1학년과는 다른 시간이었습니다. 건축이라고는 집짓는것이라는것 외에는 아무것도 모르던 제가 건축이 이런것이구나라는걸 깨달아가는 시간이었습니다. 다양한 분야의 책을 읽고 좋은 친구들을 만나고, 많은 이야기를 나누었습니다. 어설픈 실력에도 밤을 꼬박 새면서 작업한 결과물로 교수님에게 칭찬이라도 한번 받게으면 간밤의 피로는 말끔히 사라지고 더없이 행복했었지요. 하지만 대부분은 깨지고(설계 개념이나 모델 등을 평가 받는 것을 critic이라고 합니다), 부시고 다시 만드는 일의 반복이었습니다. 이런 반복의 시간동안 나도 세계적인 건축가들과 어깨를 나란히 하고싶다는 생각이 조금씩 자라나고 있었습니다.</p><p>기나긴 방황의 시간을 보내고 드디오 졸업, 취업이 목전에 다가왔습니다. 여기서도 갈등이 찾아왔습니다. 건설회사(이른바 대기업)는 아예 쳐다보지도 않았습니다. 애초에 설계(건축디자인)를 위해 건축을 선택한 것인데 현실적인 조건(연봉, 네임밸류) 때문에 건설회사에 간다는 것은 자존심이 허락치 않았지요. 대신 큰 회사규모의 기업형 설계사무소에 들어갈 것이냐, 아니면 이른바 작가풍의 건축가 밑으로 들어가서 건축에 대해 제대로 배우로 갈것인가를 결정해야 했습니다. 아무래도 기업형 설계사무소에 들어가면 후자에 비해서 연봉은 조금더 높습니다. 하지만 진짜 건축일을하기 보다는 회사가 요구하는 회사가 원하는 일을 해야했지요. 하루종일 PPT를 만들거나, 말도 안되는 이야기를 갖다 붙이며 '이것이 작품입네'하고 과장하고 부풀리는 그런 일들이었지요. 네, 제가 해봐서 아는것입니다. 즉, 제가 선택한 길은 건축가 밑에서 일하며 배우는 것이 아니라 기업형 회사를 선택했다는 말입니다. 이때 후자의 길을 택했다면 아마도 아직 건축계에 발을 붙이고 살았을지도 모를 일입니다.</p><p>회사 초창기에는 외부 공모전에도 여러번 참여 하고 입상하는 등 학생때의 열정을 이어 갔습니다. 하지만, 회사생활은 쉽지 않았고 밤을 새가며 일도 많이했지만 학생때와는 전혀 다르게 얻는것은 별로 없었습니다. 학교다닐때처럼 밤을 새가며 모형을 만들어도, 발표준비에 PPT를 만들어도 예전의 그것과는 전혀 달랐습니다. 그러다보니 '아, 이게 과연 내가 생각했던 건축인가'와 같은 고민들도 자주하게 되었습니다. 이일들은 내가 학생때 배우고 익혔던 이상적이고 훌륭하고 자부심 넘치는 건축이라는 학문이 아니었습니다. 이것은 단지 회사일 그 이상 그 이하도 아니었습니다.</p><p>한편으로는 회사의 이런 모습이 이해가 가기도 했습니다. 건축은 학문이 아니라 경제적인 부분으로 프로젝트가 좌지우지되는 현실적인 '사업'이기 때문에 이상적인 모습만을 쫓을 수는 없는 노릇입니다. 하물며 이윤을 추구하는 집단인 회사에서 건축이라는 타이틀을 가지고 있으니 뭔가 멋있고 남들이 이해하지 못하고 비효율적인 프로젝트를 어마어마한 돈으로 실행할수는 없는 노릇입니다. 당연히 누군가의 요구와 누군가의 이해관계에 의해서 그들이 원하는 작업을 빠르고 효율적으로 처리해야하죠. 그래야 회사의 직원 모두가 먹고 살수 있는 것입니다.</p><p>이해가 갔지만, 그래도 저는 싫었습니다. 이런저런 고민들로 점점 지쳐가고 있을 때, 어느 날 같은 회사의 10년차 선배님이 농담 삼아 제게 이런 말씀을 하셨습니다. \"지금의 내 모습이 바로 10년 후의 니 모습일꺼야\" 물론 농담이었지만, 이 말을 듣는 순간 뜨끔할 수 밖에 없었습니다. 10년이 지나면 30대 후반의 나이인데, 이런 회사에서 지금과 다를바 없이 일하고 있을 상상을 하니 눈앞이 캄캄하더라구요. 도저히 이건 아니다라는 생각이 들었습니다.</p><p>결국 저는 1년 5개월이라는 짧은 기간이 지난 후 과감히 회사를 내팽개치고 나와버렸습니다. 무려 6~7년간의 열정이 1년 남짓한 시간만에 연기처럼 사라져버린 것이었습니다. 프로그래머로 살고 3년째 살고 있는 지금도 가끔 건축에 대한 향수에 젖어듭니다. 특히 당시에 같이 작업하고 고민하던 친구, 선배들이 자기의 길을 변함없이 묵묵히 걸어가고 있는 모습을 보면 더더욱 그리워지곤 합니다. 그래도 돌아갈 수 없습니다. 이는 마치 헤어진 여자친구를 다시 만나는 것처럼 부질없는 일임을 잘 알기 때문입니다.</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(3) – 내가 직접 만들어 볼까?","date":"2014-10-24T18:06:17.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_aioseop_keywords":"건축, 프로그래머, 프로그래밍, 블로그, 워드프레스, 티스토리, HTML, IT, 학원","_thumbnail_id":"1632","_wpas_done_all":"1","_wpt_short_url":"","_wp_jd_target":"http://www.whynhows.com/?p=1626","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:115:\"Post Edited: 건축에서 프로그래머로(3) – 내가 직접 만들어 볼까? http://www.whynhows.com/?p=1626\";s:5:\"error\";s:232:\"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1415164697;}","_wpt_status_message":"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.","dsq_thread_id":"3197512004"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>한창 사업준비에 몰두하고 있을때였습니다. 기획이 어느정도 진행되었고, 이제는 우리가 생각해왔던 것이 실제로 가능한 것인지, 어느정도의 시간과 노력이 필요한 것인지를 알고 싶었습니다. 전에 언급했던것 처럼 당시에는 절대로 개발자를 구할 수 없는 상태였습니다. 사무실도 구하지 못하고 친구 삼촌네 사무실에 기생하고 있었고, 점심값도 아끼려고 이리저리 돌아다니며 여러 사람들에게 얻어 먹던 상황이었으니까요. 이런 상태에서 개발자를 고용한다는 것은 사치나 다름 없었습니다. 더군다나 기획한 프로젝트가 제대로 될지 안될지도 모르는 상황이었는데 무리를 할 필요는 없었지요. 수 년째 개발일을 하고 있던 친구 지인분이 우리에게 해준 조언 덕택에 우리가 기획한 서비스가 단기간에 고용한 개발자 한두명으로는 어림없다는 것을 알게된 것도 무조건적으로 개발자를 고용해야한다는 생각에서 깨어나게 해주었습니다.</p>\n<p>우리 기획이 잘못된 것인가? 베타버전을 만들어 보기 위해서라도 조금더 간단하고 단순화된 형태로 바꿔야하나? 이런 생각들로 몇날 며칠을 보내고 있었습니다. 당시에 앞으로 사용할 회사이름으로(아직 회사를 설립하지 않았기에 이름만 있음) 티스토리 블로그를 이용하여 만들어 운영중이었습니다. 아시다시피 티스토리는 설치형 블로그의 형태를 띈 가입형 블로그입니다. 즉, 사이트에 종속되어 있어 따로 자신의 웹서버를 구축할 필요가 없고(가입형), 사용자에게 블로그 수정의 자율성이 보장(설치형)됩니다. 대표적인 가입형 블로그에는 네이버나 다음 블로그가 있고, 대표적인 설치형 블로그에는 지금 제가 사용하는 워드프레스가 있습니다. 양쪽 다 워낙 유명해 따로 설명할 필요는 없을 것 같네요. 티스토리가 수정이 된다고는 하지만 워드프레스 만큼이나 방대하고 자유롭게 수정이 가능하지는 않습니다. 티스토리에서만 제공하는 플러그인을 사용해야하고 일부 소스를 수정하는 정도에 불과하지요. 워드프레스를 사용해보신분은 아시겠지만 테마와 플러그인을 사용자가 직접만들고 배포할수 있다보니 어마어마하게 방대한 종류의 테마와 플러그인이 있습니다. 그래서 웬만한 플러그인만 잘 사용하면 코드 한줄 고칠 필요 없이 쉽게 블로그를 꾸밀 수 있지요.</p>\n<p>친구와 저 중에서 그나마 제가 컴퓨터와 친하고 컴퓨터 작업을 좋아했던 터라 회사 블로그의 제작과 운영을 제가 맡게 되었습니다. 처음에는 어떻게 블로그를 만들까 고민하다가 팀블로그로 사용이 가능한 티스토리를 선택하게 되었습니다.네이버 블로그를 사용했더라면 아무런 고민도 없이 네이버에서 제공하는 템플릿으로 뚝딱 만들어버렸겠지만, 가입도 번거럽고(초대 메일을 받아서 가입해야함) 노출도 네이버에 뒤지는 티스토리 블로그를 선택한 것은 오로지 팀블로그 기능 때문이었지요. 사실 친구와 저와 아이디를 공유하면서 하나의 아이디로 글을 써도 무방한 것인데 그때는 그게 뭐가 그리 중요하게 느껴졌는지 꼭 티스토리로 만드러 보고 싶더라구요. 아무튼 티스토리를 선택했으니 어느정도 소스 수정은 필요할 상황이었습니다. 티스토리에서 제공하는 템플릿을 그냥 써도 괜찮지만 무슨 오기에 그래도 우리 색이 담긴 블로그니깐 뭔가 우리가 원하는 모습이 필요하겠다 생각이 들었습니다.</p>\n<p>이 때 저는 HTML 태그 사용도 거의 하지 못하는 바닥 수준이었습니다. 사용해본 태그라고하면 고등학교시절 친구들 사이에서 사용하던 글자에 색 넣기, 글자 움직이기, bold 처리, 이미지 불러오기 정도가 전부였지요. 그래서 학원에 몇달 다니며 HTML을 익힌 와이프에게 물어가며 블로그에 로고를 입히고 디자인을 변경하는 등 조금씩 우리가 생각하는 모습대로 만들어 갔습니다. 블로그 수정이라고 별게 있겠냐 싶지만, IT 지식이 거의 없는 상태에서 원하는 모습대로 만드는게 생각보다 쉬운일이 아니었습니다. 원하는 모양과 기능을 어떠한 코드(태그)로 만들어야 되는지를 알면 검색이라도 하겠는데 아무것도 모르니 검색 또한 쉽지 않았습니다. 어떤 날은 풀리지 않는 문제로 씨름하다 밤을 새기도 했지요. 몇날 며칠을 별로 수정한 것도 없는데 그렇게 어렵게 또 어설프게 드디어 우리가 앞으로 만들어갈 회사의 블로그를 만들었다는 뿌듯함 때문에 괜시리 기분이 좋아지더라구요. 만드는 과정 자체도 재미있기다고 느끼기도 했습니다. 특히 풀리지 않은 문제를 만났을때 느껴지는 극도의 스트레스도 막상 문제가 해결되었을 때의 희열은 이루 말할 수 없는 정도였습니다.</p>\n<p>블로그를 만들었던 이 경험은 내 안의 뭔가를 바꿔 놓았습니다. IT분야를 이끌어가는 이 기술인 프로그래밍에 대한 호기심이 발동하기 시작한 것이죠. 그렇다고 당장에 사업을 때려치우고 개발자가 되겠다는 생각은 전혀 없었습니다. 단지 친구와 제가 어렵게 만들어 놓은 기획을 배우고 익히다 보면 나 스스로도 만들 수 있지 않을까, 그런 생각 정도였습니다. 지금 생각해보면 잠깐 프로그래밍을 배운다고해서 뚝딱뚝딱 만들 수 있을만큼 간단한 것도 아니었는데, 당시에는 뭔가 희미한 안개속에서 뭔가 형체가 보이듯이 금방 만들 수 있을것만 같았습니다. 그래서 일단 프로그램을 공부하기 위해서 무엇을 먼저 해야할까 찾아보았습니다. 와이프가 조언하길 아무것도 모르는 상태에서 혼자 공부하려면 더 힘드니 학원에 한번 다녀보면 어떠냐고 그러더라구요.</p>\n<p>그래서 학원으로 달려갔습니다.</p>\n","source":"_posts/2014-10-25-from-architect-to-progammer-3.html","raw":"---\nlayout: post\ncomments: true\ntitle: 건축에서 프로그래머로(3) – 내가 직접 만들어 볼까?\ndate: 2014-10-25 12:06:17.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- HTML\n- IT\n- 건축\n- 블로그\n- 워드프레스\n- 티스토리\n- 프로그래머\n- 프로그래밍\n- 학원\nmeta:\n  _edit_last: '1'\n  _aioseop_keywords: 건축, 프로그래머, 프로그래밍, 블로그, 워드프레스, 티스토리, HTML, IT, 학원\n  _thumbnail_id: '1632'\n  _wpas_done_all: '1'\n  _wpt_short_url: ''\n  _wp_jd_target: http://www.whynhows.com/?p=1626\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:115:\"Post Edited: 건축에서 프로그래머로(3)\n    – 내가 직접 만들어 볼까? http://www.whynhows.com/?p=1626\";s:5:\"error\";s:232:\"401 Unauthorized:\n    Authentication credentials were missing or incorrect. Your Twitter application\n    does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your\n    Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1415164697;}'\n  _wpt_status_message: '401 Unauthorized: Authentication credentials were missing\n    or incorrect. Your Twitter application does not have read and write permissions.\n    Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify\n    these settings.'\n  dsq_thread_id: '3197512004'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>한창 사업준비에 몰두하고 있을때였습니다. 기획이 어느정도 진행되었고, 이제는 우리가 생각해왔던 것이 실제로 가능한 것인지, 어느정도의 시간과 노력이 필요한 것인지를 알고 싶었습니다. 전에 언급했던것 처럼 당시에는 절대로 개발자를 구할 수 없는 상태였습니다. 사무실도 구하지 못하고 친구 삼촌네 사무실에 기생하고 있었고, 점심값도 아끼려고 이리저리 돌아다니며 여러 사람들에게 얻어 먹던 상황이었으니까요. 이런 상태에서 개발자를 고용한다는 것은 사치나 다름 없었습니다. 더군다나 기획한 프로젝트가 제대로 될지 안될지도 모르는 상황이었는데 무리를 할 필요는 없었지요. 수 년째 개발일을 하고 있던 친구 지인분이 우리에게 해준 조언 덕택에 우리가 기획한 서비스가 단기간에 고용한 개발자 한두명으로는 어림없다는 것을 알게된 것도 무조건적으로 개발자를 고용해야한다는 생각에서 깨어나게 해주었습니다.</p>\n<p>우리 기획이 잘못된 것인가? 베타버전을 만들어 보기 위해서라도 조금더 간단하고 단순화된 형태로 바꿔야하나? 이런 생각들로 몇날 며칠을 보내고 있었습니다. 당시에 앞으로 사용할 회사이름으로(아직 회사를 설립하지 않았기에 이름만 있음) 티스토리 블로그를 이용하여 만들어 운영중이었습니다. 아시다시피 티스토리는 설치형 블로그의 형태를 띈 가입형 블로그입니다. 즉, 사이트에 종속되어 있어 따로 자신의 웹서버를 구축할 필요가 없고(가입형), 사용자에게 블로그 수정의 자율성이 보장(설치형)됩니다. 대표적인 가입형 블로그에는 네이버나 다음 블로그가 있고, 대표적인 설치형 블로그에는 지금 제가 사용하는 워드프레스가 있습니다. 양쪽 다 워낙 유명해 따로 설명할 필요는 없을 것 같네요. 티스토리가 수정이 된다고는 하지만 워드프레스 만큼이나 방대하고 자유롭게 수정이 가능하지는 않습니다. 티스토리에서만 제공하는 플러그인을 사용해야하고 일부 소스를 수정하는 정도에 불과하지요. 워드프레스를 사용해보신분은 아시겠지만 테마와 플러그인을 사용자가 직접만들고 배포할수 있다보니 어마어마하게 방대한 종류의 테마와 플러그인이 있습니다. 그래서 웬만한 플러그인만 잘 사용하면 코드 한줄 고칠 필요 없이 쉽게 블로그를 꾸밀 수 있지요.</p>\n<p>친구와 저 중에서 그나마 제가 컴퓨터와 친하고 컴퓨터 작업을 좋아했던 터라 회사 블로그의 제작과 운영을 제가 맡게 되었습니다. 처음에는 어떻게 블로그를 만들까 고민하다가 팀블로그로 사용이 가능한 티스토리를 선택하게 되었습니다.네이버 블로그를 사용했더라면 아무런 고민도 없이 네이버에서 제공하는 템플릿으로 뚝딱 만들어버렸겠지만, 가입도 번거럽고(초대 메일을 받아서 가입해야함) 노출도 네이버에 뒤지는 티스토리 블로그를 선택한 것은 오로지 팀블로그 기능 때문이었지요. 사실 친구와 저와 아이디를 공유하면서 하나의 아이디로 글을 써도 무방한 것인데 그때는 그게 뭐가 그리 중요하게 느껴졌는지 꼭 티스토리로 만드러 보고 싶더라구요. 아무튼 티스토리를 선택했으니 어느정도 소스 수정은 필요할 상황이었습니다. 티스토리에서 제공하는 템플릿을 그냥 써도 괜찮지만 무슨 오기에 그래도 우리 색이 담긴 블로그니깐 뭔가 우리가 원하는 모습이 필요하겠다 생각이 들었습니다.</p>\n<p>이 때 저는 HTML 태그 사용도 거의 하지 못하는 바닥 수준이었습니다. 사용해본 태그라고하면 고등학교시절 친구들 사이에서 사용하던 글자에 색 넣기, 글자 움직이기, bold 처리, 이미지 불러오기 정도가 전부였지요. 그래서 학원에 몇달 다니며 HTML을 익힌 와이프에게 물어가며 블로그에 로고를 입히고 디자인을 변경하는 등 조금씩 우리가 생각하는 모습대로 만들어 갔습니다. 블로그 수정이라고 별게 있겠냐 싶지만, IT 지식이 거의 없는 상태에서 원하는 모습대로 만드는게 생각보다 쉬운일이 아니었습니다. 원하는 모양과 기능을 어떠한 코드(태그)로 만들어야 되는지를 알면 검색이라도 하겠는데 아무것도 모르니 검색 또한 쉽지 않았습니다. 어떤 날은 풀리지 않는 문제로 씨름하다 밤을 새기도 했지요. 몇날 며칠을 별로 수정한 것도 없는데 그렇게 어렵게 또 어설프게 드디어 우리가 앞으로 만들어갈 회사의 블로그를 만들었다는 뿌듯함 때문에 괜시리 기분이 좋아지더라구요. 만드는 과정 자체도 재미있기다고 느끼기도 했습니다. 특히 풀리지 않은 문제를 만났을때 느껴지는 극도의 스트레스도 막상 문제가 해결되었을 때의 희열은 이루 말할 수 없는 정도였습니다.</p>\n<p>블로그를 만들었던 이 경험은 내 안의 뭔가를 바꿔 놓았습니다. IT분야를 이끌어가는 이 기술인 프로그래밍에 대한 호기심이 발동하기 시작한 것이죠. 그렇다고 당장에 사업을 때려치우고 개발자가 되겠다는 생각은 전혀 없었습니다. 단지 친구와 제가 어렵게 만들어 놓은 기획을 배우고 익히다 보면 나 스스로도 만들 수 있지 않을까, 그런 생각 정도였습니다. 지금 생각해보면 잠깐 프로그래밍을 배운다고해서 뚝딱뚝딱 만들 수 있을만큼 간단한 것도 아니었는데, 당시에는 뭔가 희미한 안개속에서 뭔가 형체가 보이듯이 금방 만들 수 있을것만 같았습니다. 그래서 일단 프로그램을 공부하기 위해서 무엇을 먼저 해야할까 찾아보았습니다. 와이프가 조언하길 아무것도 모르는 상태에서 혼자 공부하려면 더 힘드니 학원에 한번 다녀보면 어떠냐고 그러더라구요.</p>\n<p>그래서 학원으로 달려갔습니다.</p>\n","slug":"2014-10-25-from-architect-to-progammer-3","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6i000mwxt444ajp9x4","content":"<p>한창 사업준비에 몰두하고 있을때였습니다. 기획이 어느정도 진행되었고, 이제는 우리가 생각해왔던 것이 실제로 가능한 것인지, 어느정도의 시간과 노력이 필요한 것인지를 알고 싶었습니다. 전에 언급했던것 처럼 당시에는 절대로 개발자를 구할 수 없는 상태였습니다. 사무실도 구하지 못하고 친구 삼촌네 사무실에 기생하고 있었고, 점심값도 아끼려고 이리저리 돌아다니며 여러 사람들에게 얻어 먹던 상황이었으니까요. 이런 상태에서 개발자를 고용한다는 것은 사치나 다름 없었습니다. 더군다나 기획한 프로젝트가 제대로 될지 안될지도 모르는 상황이었는데 무리를 할 필요는 없었지요. 수 년째 개발일을 하고 있던 친구 지인분이 우리에게 해준 조언 덕택에 우리가 기획한 서비스가 단기간에 고용한 개발자 한두명으로는 어림없다는 것을 알게된 것도 무조건적으로 개발자를 고용해야한다는 생각에서 깨어나게 해주었습니다.</p><p>우리 기획이 잘못된 것인가? 베타버전을 만들어 보기 위해서라도 조금더 간단하고 단순화된 형태로 바꿔야하나? 이런 생각들로 몇날 며칠을 보내고 있었습니다. 당시에 앞으로 사용할 회사이름으로(아직 회사를 설립하지 않았기에 이름만 있음) 티스토리 블로그를 이용하여 만들어 운영중이었습니다. 아시다시피 티스토리는 설치형 블로그의 형태를 띈 가입형 블로그입니다. 즉, 사이트에 종속되어 있어 따로 자신의 웹서버를 구축할 필요가 없고(가입형), 사용자에게 블로그 수정의 자율성이 보장(설치형)됩니다. 대표적인 가입형 블로그에는 네이버나 다음 블로그가 있고, 대표적인 설치형 블로그에는 지금 제가 사용하는 워드프레스가 있습니다. 양쪽 다 워낙 유명해 따로 설명할 필요는 없을 것 같네요. 티스토리가 수정이 된다고는 하지만 워드프레스 만큼이나 방대하고 자유롭게 수정이 가능하지는 않습니다. 티스토리에서만 제공하는 플러그인을 사용해야하고 일부 소스를 수정하는 정도에 불과하지요. 워드프레스를 사용해보신분은 아시겠지만 테마와 플러그인을 사용자가 직접만들고 배포할수 있다보니 어마어마하게 방대한 종류의 테마와 플러그인이 있습니다. 그래서 웬만한 플러그인만 잘 사용하면 코드 한줄 고칠 필요 없이 쉽게 블로그를 꾸밀 수 있지요.</p><p>친구와 저 중에서 그나마 제가 컴퓨터와 친하고 컴퓨터 작업을 좋아했던 터라 회사 블로그의 제작과 운영을 제가 맡게 되었습니다. 처음에는 어떻게 블로그를 만들까 고민하다가 팀블로그로 사용이 가능한 티스토리를 선택하게 되었습니다.네이버 블로그를 사용했더라면 아무런 고민도 없이 네이버에서 제공하는 템플릿으로 뚝딱 만들어버렸겠지만, 가입도 번거럽고(초대 메일을 받아서 가입해야함) 노출도 네이버에 뒤지는 티스토리 블로그를 선택한 것은 오로지 팀블로그 기능 때문이었지요. 사실 친구와 저와 아이디를 공유하면서 하나의 아이디로 글을 써도 무방한 것인데 그때는 그게 뭐가 그리 중요하게 느껴졌는지 꼭 티스토리로 만드러 보고 싶더라구요. 아무튼 티스토리를 선택했으니 어느정도 소스 수정은 필요할 상황이었습니다. 티스토리에서 제공하는 템플릿을 그냥 써도 괜찮지만 무슨 오기에 그래도 우리 색이 담긴 블로그니깐 뭔가 우리가 원하는 모습이 필요하겠다 생각이 들었습니다.</p><p>이 때 저는 HTML 태그 사용도 거의 하지 못하는 바닥 수준이었습니다. 사용해본 태그라고하면 고등학교시절 친구들 사이에서 사용하던 글자에 색 넣기, 글자 움직이기, bold 처리, 이미지 불러오기 정도가 전부였지요. 그래서 학원에 몇달 다니며 HTML을 익힌 와이프에게 물어가며 블로그에 로고를 입히고 디자인을 변경하는 등 조금씩 우리가 생각하는 모습대로 만들어 갔습니다. 블로그 수정이라고 별게 있겠냐 싶지만, IT 지식이 거의 없는 상태에서 원하는 모습대로 만드는게 생각보다 쉬운일이 아니었습니다. 원하는 모양과 기능을 어떠한 코드(태그)로 만들어야 되는지를 알면 검색이라도 하겠는데 아무것도 모르니 검색 또한 쉽지 않았습니다. 어떤 날은 풀리지 않는 문제로 씨름하다 밤을 새기도 했지요. 몇날 며칠을 별로 수정한 것도 없는데 그렇게 어렵게 또 어설프게 드디어 우리가 앞으로 만들어갈 회사의 블로그를 만들었다는 뿌듯함 때문에 괜시리 기분이 좋아지더라구요. 만드는 과정 자체도 재미있기다고 느끼기도 했습니다. 특히 풀리지 않은 문제를 만났을때 느껴지는 극도의 스트레스도 막상 문제가 해결되었을 때의 희열은 이루 말할 수 없는 정도였습니다.</p><p>블로그를 만들었던 이 경험은 내 안의 뭔가를 바꿔 놓았습니다. IT분야를 이끌어가는 이 기술인 프로그래밍에 대한 호기심이 발동하기 시작한 것이죠. 그렇다고 당장에 사업을 때려치우고 개발자가 되겠다는 생각은 전혀 없었습니다. 단지 친구와 제가 어렵게 만들어 놓은 기획을 배우고 익히다 보면 나 스스로도 만들 수 있지 않을까, 그런 생각 정도였습니다. 지금 생각해보면 잠깐 프로그래밍을 배운다고해서 뚝딱뚝딱 만들 수 있을만큼 간단한 것도 아니었는데, 당시에는 뭔가 희미한 안개속에서 뭔가 형체가 보이듯이 금방 만들 수 있을것만 같았습니다. 그래서 일단 프로그램을 공부하기 위해서 무엇을 먼저 해야할까 찾아보았습니다. 와이프가 조언하길 아무것도 모르는 상태에서 혼자 공부하려면 더 힘드니 학원에 한번 다녀보면 어떠냐고 그러더라구요.</p><p>그래서 학원으로 달려갔습니다.</p>","excerpt":"","more":"<p>한창 사업준비에 몰두하고 있을때였습니다. 기획이 어느정도 진행되었고, 이제는 우리가 생각해왔던 것이 실제로 가능한 것인지, 어느정도의 시간과 노력이 필요한 것인지를 알고 싶었습니다. 전에 언급했던것 처럼 당시에는 절대로 개발자를 구할 수 없는 상태였습니다. 사무실도 구하지 못하고 친구 삼촌네 사무실에 기생하고 있었고, 점심값도 아끼려고 이리저리 돌아다니며 여러 사람들에게 얻어 먹던 상황이었으니까요. 이런 상태에서 개발자를 고용한다는 것은 사치나 다름 없었습니다. 더군다나 기획한 프로젝트가 제대로 될지 안될지도 모르는 상황이었는데 무리를 할 필요는 없었지요. 수 년째 개발일을 하고 있던 친구 지인분이 우리에게 해준 조언 덕택에 우리가 기획한 서비스가 단기간에 고용한 개발자 한두명으로는 어림없다는 것을 알게된 것도 무조건적으로 개발자를 고용해야한다는 생각에서 깨어나게 해주었습니다.</p><p>우리 기획이 잘못된 것인가? 베타버전을 만들어 보기 위해서라도 조금더 간단하고 단순화된 형태로 바꿔야하나? 이런 생각들로 몇날 며칠을 보내고 있었습니다. 당시에 앞으로 사용할 회사이름으로(아직 회사를 설립하지 않았기에 이름만 있음) 티스토리 블로그를 이용하여 만들어 운영중이었습니다. 아시다시피 티스토리는 설치형 블로그의 형태를 띈 가입형 블로그입니다. 즉, 사이트에 종속되어 있어 따로 자신의 웹서버를 구축할 필요가 없고(가입형), 사용자에게 블로그 수정의 자율성이 보장(설치형)됩니다. 대표적인 가입형 블로그에는 네이버나 다음 블로그가 있고, 대표적인 설치형 블로그에는 지금 제가 사용하는 워드프레스가 있습니다. 양쪽 다 워낙 유명해 따로 설명할 필요는 없을 것 같네요. 티스토리가 수정이 된다고는 하지만 워드프레스 만큼이나 방대하고 자유롭게 수정이 가능하지는 않습니다. 티스토리에서만 제공하는 플러그인을 사용해야하고 일부 소스를 수정하는 정도에 불과하지요. 워드프레스를 사용해보신분은 아시겠지만 테마와 플러그인을 사용자가 직접만들고 배포할수 있다보니 어마어마하게 방대한 종류의 테마와 플러그인이 있습니다. 그래서 웬만한 플러그인만 잘 사용하면 코드 한줄 고칠 필요 없이 쉽게 블로그를 꾸밀 수 있지요.</p><p>친구와 저 중에서 그나마 제가 컴퓨터와 친하고 컴퓨터 작업을 좋아했던 터라 회사 블로그의 제작과 운영을 제가 맡게 되었습니다. 처음에는 어떻게 블로그를 만들까 고민하다가 팀블로그로 사용이 가능한 티스토리를 선택하게 되었습니다.네이버 블로그를 사용했더라면 아무런 고민도 없이 네이버에서 제공하는 템플릿으로 뚝딱 만들어버렸겠지만, 가입도 번거럽고(초대 메일을 받아서 가입해야함) 노출도 네이버에 뒤지는 티스토리 블로그를 선택한 것은 오로지 팀블로그 기능 때문이었지요. 사실 친구와 저와 아이디를 공유하면서 하나의 아이디로 글을 써도 무방한 것인데 그때는 그게 뭐가 그리 중요하게 느껴졌는지 꼭 티스토리로 만드러 보고 싶더라구요. 아무튼 티스토리를 선택했으니 어느정도 소스 수정은 필요할 상황이었습니다. 티스토리에서 제공하는 템플릿을 그냥 써도 괜찮지만 무슨 오기에 그래도 우리 색이 담긴 블로그니깐 뭔가 우리가 원하는 모습이 필요하겠다 생각이 들었습니다.</p><p>이 때 저는 HTML 태그 사용도 거의 하지 못하는 바닥 수준이었습니다. 사용해본 태그라고하면 고등학교시절 친구들 사이에서 사용하던 글자에 색 넣기, 글자 움직이기, bold 처리, 이미지 불러오기 정도가 전부였지요. 그래서 학원에 몇달 다니며 HTML을 익힌 와이프에게 물어가며 블로그에 로고를 입히고 디자인을 변경하는 등 조금씩 우리가 생각하는 모습대로 만들어 갔습니다. 블로그 수정이라고 별게 있겠냐 싶지만, IT 지식이 거의 없는 상태에서 원하는 모습대로 만드는게 생각보다 쉬운일이 아니었습니다. 원하는 모양과 기능을 어떠한 코드(태그)로 만들어야 되는지를 알면 검색이라도 하겠는데 아무것도 모르니 검색 또한 쉽지 않았습니다. 어떤 날은 풀리지 않는 문제로 씨름하다 밤을 새기도 했지요. 몇날 며칠을 별로 수정한 것도 없는데 그렇게 어렵게 또 어설프게 드디어 우리가 앞으로 만들어갈 회사의 블로그를 만들었다는 뿌듯함 때문에 괜시리 기분이 좋아지더라구요. 만드는 과정 자체도 재미있기다고 느끼기도 했습니다. 특히 풀리지 않은 문제를 만났을때 느껴지는 극도의 스트레스도 막상 문제가 해결되었을 때의 희열은 이루 말할 수 없는 정도였습니다.</p><p>블로그를 만들었던 이 경험은 내 안의 뭔가를 바꿔 놓았습니다. IT분야를 이끌어가는 이 기술인 프로그래밍에 대한 호기심이 발동하기 시작한 것이죠. 그렇다고 당장에 사업을 때려치우고 개발자가 되겠다는 생각은 전혀 없었습니다. 단지 친구와 제가 어렵게 만들어 놓은 기획을 배우고 익히다 보면 나 스스로도 만들 수 있지 않을까, 그런 생각 정도였습니다. 지금 생각해보면 잠깐 프로그래밍을 배운다고해서 뚝딱뚝딱 만들 수 있을만큼 간단한 것도 아니었는데, 당시에는 뭔가 희미한 안개속에서 뭔가 형체가 보이듯이 금방 만들 수 있을것만 같았습니다. 그래서 일단 프로그램을 공부하기 위해서 무엇을 먼저 해야할까 찾아보았습니다. 와이프가 조언하길 아무것도 모르는 상태에서 혼자 공부하려면 더 힘드니 학원에 한번 다녀보면 어떠냐고 그러더라구요.</p><p>그래서 학원으로 달려갔습니다.</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(2) - 사업 한번 해볼까?","date":"2014-10-14T17:41:25.000Z","type":"post","published":1,"status":"publish","meta":{"_aioseop_keywords":"건축, 프로그래머, 사업, 사회적기업, 개발자","dsq_thread_id":"3118003004","_wpas_skip_6779368":"1","_wpas_done_all":"1","_edit_last":"1","_thumbnail_id":"1624","_wpt_short_url":"","_wp_jd_target":"http://www.whynhows.com/?p=1612","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:106:\"Post Edited: 건축에서 프로그래머로(2) - 사업 한번 해볼까? http://www.whynhows.com/?p=1612\";s:5:\"error\";s:113:\"This tweet is identical to another Tweet recently sent to this account. Twitter requires all Tweets to be unique.\";s:4:\"code\";i:403;s:9:\"timestamp\";i:1415164615;}","_wpt_status_message":"This tweet is identical to another Tweet recently sent to this account. Twitter requires all Tweets to be unique."},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>박차고 나온 직장, 의미 있는 뭔가를 하고 싶었습니다. 허나 거의 7년간 내게 의미 있었던 것을 단숨에 그만둔다는 것은 쉬운일이 아니었습니다. 때마침 대학때 뜻이 맞던 친구가 저와 비슷한 시기에 비슷한 고민을 하고 있었지요. 그래서 저희는 자연스럽게 앞으로의 일에대해서 많은 고민과 대화를 하게 되었고, 마침내 둘이서 뭔가를 해보자는 결론을 내렸습니다. 즉, 사업한번 해보자는 것이었죠. 우리의 결심은 일사천리로 진행되었습니다. 그리고 저를 회사에 뽑아주셨던 회사 대표님께 뭔가 더 가치있는 일을 하기 위해 회사를 그만둬야겠다고 말씀드렸습니다. 의외로 대표님은 흔쾌히 보내주셨습니다. 같은 동문이라 애착이 있으셨을법도한데 제 결심과 표정을 보고 제 마음을 바꾸지 못할꺼라는 것을 아셨을지도 모르겠습니다.</p>\n<p>막상 회사를 그만두었지만 앞으로 어떻게 해야할지 막막했습니다. 회사를 그만두긴 했지만 그만두기 전에 충분한 준비를 하지 못했었고, 회사를 나와서 준비하면 될거라는 안일한 생각에 빠져있었습니다. 게다가 저는 결혼하지 몇 달 되지도 않은 상황이었습니다. 제 마음대로 회사를 관두기 힘든 상황이었었죠. 하지만, 와이프는 참 고맙게도 저의 뜻을 높게 사주었고 당분간은 힘들겠지만 앞으로는 잘될거라며 굳게 믿어주었습니다. 당시에는 자본금을 마련하기도 힘들어 처음에는 까페를 전전하며 커피 두잔으로 사무실 비용을 대신했었지요. 그렇게 매일같이 마시는 두 잔의 쓰린 커피로는 도저히 안되겠다 싶어서 결국 친구집 빈방에 사무실을 만들었습니다. 처음에는 그럭저럭 쾌적한듯 느껴졌습니다만, 시간이 지날수록 친구의 '집' 이라는 사실이 발목을 잡더군요. 게을러지고 의미없이 보내는 시간들이 많아졌습니다. 그래서 또다시 이사를 감행했습니다. 친구 삼촌이 쓰시는 사무실 한켠에 파티션을 설치하고 책상 두개를 만들어 사무실로 사용했었습니다.</p>\n<p>처음 친구와 저는 먼저 무슨일을 해야할까를 고민하기 시작했습니다. 회사를 관둘때 생각했던 우리에게 가치 있는일, 또한 사회에 긍정적인 영향을 끼칠 수 있는 일이 과연 무엇인지 부터 찾아보았지요. 당시에 '사회적 기업'이라는 사회의 이익을 위한 일을 하는 기업이라는 형태가 유행하던 시기였습니다. 기존의 기업들은 이익의 극대화를 위해서 존재한다면, 사회적기업은 소수자들의 자립을 도와준다거나 우리사회나 나아가서는 전 지구적으로 도움이 되는 일을 하자는 취지에 그 존재목적이 있습니다. 저희는 이거다 싶었습니다. 그때부터 사회적 기업 관련 책을 읽거나 세미나, 행사 등을 찾아 다니며 사회적 기업이 무엇인지 공부하기 시작했습니다.</p>\n<p>사회적기업에 대해 알면 알수록 이건 좀 이상하다 싶었습니다. 당시에 우후죽순처럼 나타나던 사회적기업들은 대부분 투자를 받거나 국가에서 지원을 받아서 사업을 해나가던 경우가 많았는데, 국가의 지원같은 경우는 보통 3년정도의 임금을 지원해주었습니다. 지원 받는 그 3년간의 기간동안은 그럭저럭 운영을 해가지만 3년이 지나고 지원금이 사라졌을때, 자생력을 갖추는 사회적기업을 찾아보기가 쉽지 않았습니다. 결론부터 보면 3년정도 흐른 지금에 와서 보면 그때에 등장했던 수많은 사회적 기업들 중 지금도 존재하는 기업은 많지 않습니다. 저희는 그 때 사회적 기업이라는 것은 한때 유행에 지나지 않을것이고 조금만 있으면 거의 사라질 것이라는 것이라는 생각이 들었습니다. 간단하게 생각만 해보아도 보통의 기업도 돈을 버는 것이 쉬운일이 아닌데 하물며 기반도 부족한 젊은이들이 사회에 공헌하면서 돈도 벌겠다라는 것이 얼마나 어려운 일인지 알 수 있습니다.</p>\n<p>이대로는 무리라고 판단이 되어, 생각을 조금 바꿔보았지요. 우리가 꼭 사회적 기업이라는 틀에 갖힐 필요가 없다. 그저 우리의 생각에 적합하면서 우리가 원하는 개인적 가치, 사회적 가치를 실현할 수 있으면 되는 것이다. 이렇게 말입니다.</p>\n<p>틀에 얽매이는 생각을 조금만 비틀었을 뿐인데 그때부터 여러가지 아이디어가 나오기 시작했습니다. 몇달의 시간이 흘러 아이디어를 추리고 발전시키고 정제하는 과정을 계속해서 반복해갔습니다. 그러던 중 하나의 완성된 아이디어가 나오기 직전, 이제 투자 받을수 있겠구나 생각하던 시점에서 뭔가 잘못됐다는것을 깨달았습니다. 우리가 생각한 아이디어는 IT를 기반으로 하는 벤처들의 창업과 유사한 형태였습니다. 그런데 친구나 저나 IT와는 전혀 상관없는 인생을 살아왔기 때문에 당장에 우리가 기획한 것을 베타버전이라도 만들어보려면 개발자가 필요했습니다. 우리는 기획을 하면서 꿈을 꾸고 있었는지 현실적으로 만들어 낼수 있는지에 대한 필터링도 전혀 없었기 때문에 더더욱 개발자의 안목이 필요했었지요. 우연히 친구 아는 분이 개발분야에서 일하고 있어 우리가 기획한 것을 간단하게 보여드렸습니다. 우리가 이 분을 모셔올 수는 없더라도 이렇게 기획한 것이 과연 얼마의 시간동안 얼마의 인력으로 가능할지에 대한 기준이라도 알고 싶었습니다. 대답은 우리의 상상했던 것 이상이었습니다. 1년 이상의 개발기간에 최소 2~3억은 필요하다 답해 주셨습니다. 하늘이 무너지는 줄 알았습니다. 아무리 우리가 개발적 지식이 전무하다고 했지만 이정도로 우리의 상상과 현실의 갭이 클줄은 몰랐지요.</p>\n<p>아무런 해결책도 기대도 없던 그 때 거대한 인터넷 기업에서 우리가 생각했던 서비스와 매우 유사한 것을 내놓겠다는 발표를 보게 되었습니다. 기획한 서비스와 완전히 똑같지는 않았지만, 뭔가 잘못됐다는 것을 직감할 수 있었습니다. 혹 우리가 지금까지 꿈을 꾸었던 것이었을까? 불안한 마음도 들었습니다. 예상보다 경제적, 시간적으로 무리라는 조언에 낙담한 상황에서 업친데 덥친격으로 유사 서비스의 발표까지 나오다 보니 이걸 정말 할 수 있을까라는 의구심마저 들기 시작했습니다. 당시에 친구와 저는 서로 말하지는 않았지만 더이상 우리가 하려고 했던 이 사업 놀이(?)는 여기서 끝내야한다는 것을 어렴풋이 느끼고 있었는지도 모릅니다. 결국 누가 먼저랄것도 없이 여기서 그만 두는게 맞는것 같다고 서로 얘기하게 되었지요. 8개월간 꾸었던 꿈을, 이제는 깨어날 때가 되었던 것입니다. 그리고 이후 우리는 헤어져 또다시 각자 서로 다른 가치를 찾기 위해 각자의 길을 찾아 나서게 되었습니다. 시간이 지난 지금 돌이켜보면, 사실 이 유사한 서비스의 등장이 결정적인 원인이었다 생각하지 않습니다. 그 8개월 동안 단 한번도 절실하게 원하지 않았기 때문에, 그렇기 때문에 단 한번의 위기로 와르르 쉽게 무너져버린것은 아닐까요?</p>\n<p>좋은 경험이었습니다. 결과는 없었고 과정만 있었지만 많은 고민을 하고 생각을 나누고 아이디어를 쏟아내는 그 과정들은 저에겐 건축과는 또다른 형태의 재산이 될 수 있었습니다. 값진 경험이었습니다. 그리고, 사업은 이렇게 하면 안되는구나(?)라는 것도 알게 되었지요. 특히 IT벤처를 시작하려면, 확실한 아이디어와 실현할수 있는 기술을 가진 누군가가 꼭 있어야하고 어느정도 현실화가 되기전에는 회사를 그만두지 않는게 좋다는 교훈도 얻게 되었습니다. 이제 저는 또다른 길을 가게 되었습니다. 나이 서른이 다되어서 또다른 일을 결심할 수 있는것이 행복한 것인지 불행한 것인지는 모르겠습니다. 하지만 지금까지의 경험이면 무슨일을 하던지 새롭게 도전할 수 있을것만 같았습니다.</p>\n","source":"_posts/2014-10-15-from-architect-to-progammer-2.html","raw":"---\nlayout: post\ncomments: true\ntitle: 건축에서 프로그래머로(2) - 사업 한번 해볼까?\ndate: 2014-10-15 11:41:25.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- 개발자\n- 건축\n- 사업\n- 사회적기업\n- 프로그래머\nmeta:\n  _aioseop_keywords: 건축, 프로그래머, 사업, 사회적기업, 개발자\n  dsq_thread_id: '3118003004'\n  _wpas_skip_6779368: '1'\n  _wpas_done_all: '1'\n  _edit_last: '1'\n  _thumbnail_id: '1624'\n  _wpt_short_url: ''\n  _wp_jd_target: http://www.whynhows.com/?p=1612\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:106:\"Post Edited: 건축에서 프로그래머로(2)\n    - 사업 한번 해볼까? http://www.whynhows.com/?p=1612\";s:5:\"error\";s:113:\"This tweet is\n    identical to another Tweet recently sent to this account. Twitter requires all\n    Tweets to be unique.\";s:4:\"code\";i:403;s:9:\"timestamp\";i:1415164615;}'\n  _wpt_status_message: This tweet is identical to another Tweet recently sent to this\n    account. Twitter requires all Tweets to be unique.\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>박차고 나온 직장, 의미 있는 뭔가를 하고 싶었습니다. 허나 거의 7년간 내게 의미 있었던 것을 단숨에 그만둔다는 것은 쉬운일이 아니었습니다. 때마침 대학때 뜻이 맞던 친구가 저와 비슷한 시기에 비슷한 고민을 하고 있었지요. 그래서 저희는 자연스럽게 앞으로의 일에대해서 많은 고민과 대화를 하게 되었고, 마침내 둘이서 뭔가를 해보자는 결론을 내렸습니다. 즉, 사업한번 해보자는 것이었죠. 우리의 결심은 일사천리로 진행되었습니다. 그리고 저를 회사에 뽑아주셨던 회사 대표님께 뭔가 더 가치있는 일을 하기 위해 회사를 그만둬야겠다고 말씀드렸습니다. 의외로 대표님은 흔쾌히 보내주셨습니다. 같은 동문이라 애착이 있으셨을법도한데 제 결심과 표정을 보고 제 마음을 바꾸지 못할꺼라는 것을 아셨을지도 모르겠습니다.</p>\n<p>막상 회사를 그만두었지만 앞으로 어떻게 해야할지 막막했습니다. 회사를 그만두긴 했지만 그만두기 전에 충분한 준비를 하지 못했었고, 회사를 나와서 준비하면 될거라는 안일한 생각에 빠져있었습니다. 게다가 저는 결혼하지 몇 달 되지도 않은 상황이었습니다. 제 마음대로 회사를 관두기 힘든 상황이었었죠. 하지만, 와이프는 참 고맙게도 저의 뜻을 높게 사주었고 당분간은 힘들겠지만 앞으로는 잘될거라며 굳게 믿어주었습니다. 당시에는 자본금을 마련하기도 힘들어 처음에는 까페를 전전하며 커피 두잔으로 사무실 비용을 대신했었지요. 그렇게 매일같이 마시는 두 잔의 쓰린 커피로는 도저히 안되겠다 싶어서 결국 친구집 빈방에 사무실을 만들었습니다. 처음에는 그럭저럭 쾌적한듯 느껴졌습니다만, 시간이 지날수록 친구의 '집' 이라는 사실이 발목을 잡더군요. 게을러지고 의미없이 보내는 시간들이 많아졌습니다. 그래서 또다시 이사를 감행했습니다. 친구 삼촌이 쓰시는 사무실 한켠에 파티션을 설치하고 책상 두개를 만들어 사무실로 사용했었습니다.</p>\n<p>처음 친구와 저는 먼저 무슨일을 해야할까를 고민하기 시작했습니다. 회사를 관둘때 생각했던 우리에게 가치 있는일, 또한 사회에 긍정적인 영향을 끼칠 수 있는 일이 과연 무엇인지 부터 찾아보았지요. 당시에 '사회적 기업'이라는 사회의 이익을 위한 일을 하는 기업이라는 형태가 유행하던 시기였습니다. 기존의 기업들은 이익의 극대화를 위해서 존재한다면, 사회적기업은 소수자들의 자립을 도와준다거나 우리사회나 나아가서는 전 지구적으로 도움이 되는 일을 하자는 취지에 그 존재목적이 있습니다. 저희는 이거다 싶었습니다. 그때부터 사회적 기업 관련 책을 읽거나 세미나, 행사 등을 찾아 다니며 사회적 기업이 무엇인지 공부하기 시작했습니다.</p>\n<p>사회적기업에 대해 알면 알수록 이건 좀 이상하다 싶었습니다. 당시에 우후죽순처럼 나타나던 사회적기업들은 대부분 투자를 받거나 국가에서 지원을 받아서 사업을 해나가던 경우가 많았는데, 국가의 지원같은 경우는 보통 3년정도의 임금을 지원해주었습니다. 지원 받는 그 3년간의 기간동안은 그럭저럭 운영을 해가지만 3년이 지나고 지원금이 사라졌을때, 자생력을 갖추는 사회적기업을 찾아보기가 쉽지 않았습니다. 결론부터 보면 3년정도 흐른 지금에 와서 보면 그때에 등장했던 수많은 사회적 기업들 중 지금도 존재하는 기업은 많지 않습니다. 저희는 그 때 사회적 기업이라는 것은 한때 유행에 지나지 않을것이고 조금만 있으면 거의 사라질 것이라는 것이라는 생각이 들었습니다. 간단하게 생각만 해보아도 보통의 기업도 돈을 버는 것이 쉬운일이 아닌데 하물며 기반도 부족한 젊은이들이 사회에 공헌하면서 돈도 벌겠다라는 것이 얼마나 어려운 일인지 알 수 있습니다.</p>\n<p>이대로는 무리라고 판단이 되어, 생각을 조금 바꿔보았지요. 우리가 꼭 사회적 기업이라는 틀에 갖힐 필요가 없다. 그저 우리의 생각에 적합하면서 우리가 원하는 개인적 가치, 사회적 가치를 실현할 수 있으면 되는 것이다. 이렇게 말입니다.</p>\n<p>틀에 얽매이는 생각을 조금만 비틀었을 뿐인데 그때부터 여러가지 아이디어가 나오기 시작했습니다. 몇달의 시간이 흘러 아이디어를 추리고 발전시키고 정제하는 과정을 계속해서 반복해갔습니다. 그러던 중 하나의 완성된 아이디어가 나오기 직전, 이제 투자 받을수 있겠구나 생각하던 시점에서 뭔가 잘못됐다는것을 깨달았습니다. 우리가 생각한 아이디어는 IT를 기반으로 하는 벤처들의 창업과 유사한 형태였습니다. 그런데 친구나 저나 IT와는 전혀 상관없는 인생을 살아왔기 때문에 당장에 우리가 기획한 것을 베타버전이라도 만들어보려면 개발자가 필요했습니다. 우리는 기획을 하면서 꿈을 꾸고 있었는지 현실적으로 만들어 낼수 있는지에 대한 필터링도 전혀 없었기 때문에 더더욱 개발자의 안목이 필요했었지요. 우연히 친구 아는 분이 개발분야에서 일하고 있어 우리가 기획한 것을 간단하게 보여드렸습니다. 우리가 이 분을 모셔올 수는 없더라도 이렇게 기획한 것이 과연 얼마의 시간동안 얼마의 인력으로 가능할지에 대한 기준이라도 알고 싶었습니다. 대답은 우리의 상상했던 것 이상이었습니다. 1년 이상의 개발기간에 최소 2~3억은 필요하다 답해 주셨습니다. 하늘이 무너지는 줄 알았습니다. 아무리 우리가 개발적 지식이 전무하다고 했지만 이정도로 우리의 상상과 현실의 갭이 클줄은 몰랐지요.</p>\n<p>아무런 해결책도 기대도 없던 그 때 거대한 인터넷 기업에서 우리가 생각했던 서비스와 매우 유사한 것을 내놓겠다는 발표를 보게 되었습니다. 기획한 서비스와 완전히 똑같지는 않았지만, 뭔가 잘못됐다는 것을 직감할 수 있었습니다. 혹 우리가 지금까지 꿈을 꾸었던 것이었을까? 불안한 마음도 들었습니다. 예상보다 경제적, 시간적으로 무리라는 조언에 낙담한 상황에서 업친데 덥친격으로 유사 서비스의 발표까지 나오다 보니 이걸 정말 할 수 있을까라는 의구심마저 들기 시작했습니다. 당시에 친구와 저는 서로 말하지는 않았지만 더이상 우리가 하려고 했던 이 사업 놀이(?)는 여기서 끝내야한다는 것을 어렴풋이 느끼고 있었는지도 모릅니다. 결국 누가 먼저랄것도 없이 여기서 그만 두는게 맞는것 같다고 서로 얘기하게 되었지요. 8개월간 꾸었던 꿈을, 이제는 깨어날 때가 되었던 것입니다. 그리고 이후 우리는 헤어져 또다시 각자 서로 다른 가치를 찾기 위해 각자의 길을 찾아 나서게 되었습니다. 시간이 지난 지금 돌이켜보면, 사실 이 유사한 서비스의 등장이 결정적인 원인이었다 생각하지 않습니다. 그 8개월 동안 단 한번도 절실하게 원하지 않았기 때문에, 그렇기 때문에 단 한번의 위기로 와르르 쉽게 무너져버린것은 아닐까요?</p>\n<p>좋은 경험이었습니다. 결과는 없었고 과정만 있었지만 많은 고민을 하고 생각을 나누고 아이디어를 쏟아내는 그 과정들은 저에겐 건축과는 또다른 형태의 재산이 될 수 있었습니다. 값진 경험이었습니다. 그리고, 사업은 이렇게 하면 안되는구나(?)라는 것도 알게 되었지요. 특히 IT벤처를 시작하려면, 확실한 아이디어와 실현할수 있는 기술을 가진 누군가가 꼭 있어야하고 어느정도 현실화가 되기전에는 회사를 그만두지 않는게 좋다는 교훈도 얻게 되었습니다. 이제 저는 또다른 길을 가게 되었습니다. 나이 서른이 다되어서 또다른 일을 결심할 수 있는것이 행복한 것인지 불행한 것인지는 모르겠습니다. 하지만 지금까지의 경험이면 무슨일을 하던지 새롭게 도전할 수 있을것만 같았습니다.</p>\n","slug":"2014-10-15-from-architect-to-progammer-2","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6j000pwxt4wbsjv6pd","content":"<p>박차고 나온 직장, 의미 있는 뭔가를 하고 싶었습니다. 허나 거의 7년간 내게 의미 있었던 것을 단숨에 그만둔다는 것은 쉬운일이 아니었습니다. 때마침 대학때 뜻이 맞던 친구가 저와 비슷한 시기에 비슷한 고민을 하고 있었지요. 그래서 저희는 자연스럽게 앞으로의 일에대해서 많은 고민과 대화를 하게 되었고, 마침내 둘이서 뭔가를 해보자는 결론을 내렸습니다. 즉, 사업한번 해보자는 것이었죠. 우리의 결심은 일사천리로 진행되었습니다. 그리고 저를 회사에 뽑아주셨던 회사 대표님께 뭔가 더 가치있는 일을 하기 위해 회사를 그만둬야겠다고 말씀드렸습니다. 의외로 대표님은 흔쾌히 보내주셨습니다. 같은 동문이라 애착이 있으셨을법도한데 제 결심과 표정을 보고 제 마음을 바꾸지 못할꺼라는 것을 아셨을지도 모르겠습니다.</p><p>막상 회사를 그만두었지만 앞으로 어떻게 해야할지 막막했습니다. 회사를 그만두긴 했지만 그만두기 전에 충분한 준비를 하지 못했었고, 회사를 나와서 준비하면 될거라는 안일한 생각에 빠져있었습니다. 게다가 저는 결혼하지 몇 달 되지도 않은 상황이었습니다. 제 마음대로 회사를 관두기 힘든 상황이었었죠. 하지만, 와이프는 참 고맙게도 저의 뜻을 높게 사주었고 당분간은 힘들겠지만 앞으로는 잘될거라며 굳게 믿어주었습니다. 당시에는 자본금을 마련하기도 힘들어 처음에는 까페를 전전하며 커피 두잔으로 사무실 비용을 대신했었지요. 그렇게 매일같이 마시는 두 잔의 쓰린 커피로는 도저히 안되겠다 싶어서 결국 친구집 빈방에 사무실을 만들었습니다. 처음에는 그럭저럭 쾌적한듯 느껴졌습니다만, 시간이 지날수록 친구의 '집' 이라는 사실이 발목을 잡더군요. 게을러지고 의미없이 보내는 시간들이 많아졌습니다. 그래서 또다시 이사를 감행했습니다. 친구 삼촌이 쓰시는 사무실 한켠에 파티션을 설치하고 책상 두개를 만들어 사무실로 사용했었습니다.</p><p>처음 친구와 저는 먼저 무슨일을 해야할까를 고민하기 시작했습니다. 회사를 관둘때 생각했던 우리에게 가치 있는일, 또한 사회에 긍정적인 영향을 끼칠 수 있는 일이 과연 무엇인지 부터 찾아보았지요. 당시에 '사회적 기업'이라는 사회의 이익을 위한 일을 하는 기업이라는 형태가 유행하던 시기였습니다. 기존의 기업들은 이익의 극대화를 위해서 존재한다면, 사회적기업은 소수자들의 자립을 도와준다거나 우리사회나 나아가서는 전 지구적으로 도움이 되는 일을 하자는 취지에 그 존재목적이 있습니다. 저희는 이거다 싶었습니다. 그때부터 사회적 기업 관련 책을 읽거나 세미나, 행사 등을 찾아 다니며 사회적 기업이 무엇인지 공부하기 시작했습니다.</p><p>사회적기업에 대해 알면 알수록 이건 좀 이상하다 싶었습니다. 당시에 우후죽순처럼 나타나던 사회적기업들은 대부분 투자를 받거나 국가에서 지원을 받아서 사업을 해나가던 경우가 많았는데, 국가의 지원같은 경우는 보통 3년정도의 임금을 지원해주었습니다. 지원 받는 그 3년간의 기간동안은 그럭저럭 운영을 해가지만 3년이 지나고 지원금이 사라졌을때, 자생력을 갖추는 사회적기업을 찾아보기가 쉽지 않았습니다. 결론부터 보면 3년정도 흐른 지금에 와서 보면 그때에 등장했던 수많은 사회적 기업들 중 지금도 존재하는 기업은 많지 않습니다. 저희는 그 때 사회적 기업이라는 것은 한때 유행에 지나지 않을것이고 조금만 있으면 거의 사라질 것이라는 것이라는 생각이 들었습니다. 간단하게 생각만 해보아도 보통의 기업도 돈을 버는 것이 쉬운일이 아닌데 하물며 기반도 부족한 젊은이들이 사회에 공헌하면서 돈도 벌겠다라는 것이 얼마나 어려운 일인지 알 수 있습니다.</p><p>이대로는 무리라고 판단이 되어, 생각을 조금 바꿔보았지요. 우리가 꼭 사회적 기업이라는 틀에 갖힐 필요가 없다. 그저 우리의 생각에 적합하면서 우리가 원하는 개인적 가치, 사회적 가치를 실현할 수 있으면 되는 것이다. 이렇게 말입니다.</p><p>틀에 얽매이는 생각을 조금만 비틀었을 뿐인데 그때부터 여러가지 아이디어가 나오기 시작했습니다. 몇달의 시간이 흘러 아이디어를 추리고 발전시키고 정제하는 과정을 계속해서 반복해갔습니다. 그러던 중 하나의 완성된 아이디어가 나오기 직전, 이제 투자 받을수 있겠구나 생각하던 시점에서 뭔가 잘못됐다는것을 깨달았습니다. 우리가 생각한 아이디어는 IT를 기반으로 하는 벤처들의 창업과 유사한 형태였습니다. 그런데 친구나 저나 IT와는 전혀 상관없는 인생을 살아왔기 때문에 당장에 우리가 기획한 것을 베타버전이라도 만들어보려면 개발자가 필요했습니다. 우리는 기획을 하면서 꿈을 꾸고 있었는지 현실적으로 만들어 낼수 있는지에 대한 필터링도 전혀 없었기 때문에 더더욱 개발자의 안목이 필요했었지요. 우연히 친구 아는 분이 개발분야에서 일하고 있어 우리가 기획한 것을 간단하게 보여드렸습니다. 우리가 이 분을 모셔올 수는 없더라도 이렇게 기획한 것이 과연 얼마의 시간동안 얼마의 인력으로 가능할지에 대한 기준이라도 알고 싶었습니다. 대답은 우리의 상상했던 것 이상이었습니다. 1년 이상의 개발기간에 최소 2~3억은 필요하다 답해 주셨습니다. 하늘이 무너지는 줄 알았습니다. 아무리 우리가 개발적 지식이 전무하다고 했지만 이정도로 우리의 상상과 현실의 갭이 클줄은 몰랐지요.</p><p>아무런 해결책도 기대도 없던 그 때 거대한 인터넷 기업에서 우리가 생각했던 서비스와 매우 유사한 것을 내놓겠다는 발표를 보게 되었습니다. 기획한 서비스와 완전히 똑같지는 않았지만, 뭔가 잘못됐다는 것을 직감할 수 있었습니다. 혹 우리가 지금까지 꿈을 꾸었던 것이었을까? 불안한 마음도 들었습니다. 예상보다 경제적, 시간적으로 무리라는 조언에 낙담한 상황에서 업친데 덥친격으로 유사 서비스의 발표까지 나오다 보니 이걸 정말 할 수 있을까라는 의구심마저 들기 시작했습니다. 당시에 친구와 저는 서로 말하지는 않았지만 더이상 우리가 하려고 했던 이 사업 놀이(?)는 여기서 끝내야한다는 것을 어렴풋이 느끼고 있었는지도 모릅니다. 결국 누가 먼저랄것도 없이 여기서 그만 두는게 맞는것 같다고 서로 얘기하게 되었지요. 8개월간 꾸었던 꿈을, 이제는 깨어날 때가 되었던 것입니다. 그리고 이후 우리는 헤어져 또다시 각자 서로 다른 가치를 찾기 위해 각자의 길을 찾아 나서게 되었습니다. 시간이 지난 지금 돌이켜보면, 사실 이 유사한 서비스의 등장이 결정적인 원인이었다 생각하지 않습니다. 그 8개월 동안 단 한번도 절실하게 원하지 않았기 때문에, 그렇기 때문에 단 한번의 위기로 와르르 쉽게 무너져버린것은 아닐까요?</p><p>좋은 경험이었습니다. 결과는 없었고 과정만 있었지만 많은 고민을 하고 생각을 나누고 아이디어를 쏟아내는 그 과정들은 저에겐 건축과는 또다른 형태의 재산이 될 수 있었습니다. 값진 경험이었습니다. 그리고, 사업은 이렇게 하면 안되는구나(?)라는 것도 알게 되었지요. 특히 IT벤처를 시작하려면, 확실한 아이디어와 실현할수 있는 기술을 가진 누군가가 꼭 있어야하고 어느정도 현실화가 되기전에는 회사를 그만두지 않는게 좋다는 교훈도 얻게 되었습니다. 이제 저는 또다른 길을 가게 되었습니다. 나이 서른이 다되어서 또다른 일을 결심할 수 있는것이 행복한 것인지 불행한 것인지는 모르겠습니다. 하지만 지금까지의 경험이면 무슨일을 하던지 새롭게 도전할 수 있을것만 같았습니다.</p>","excerpt":"","more":"<p>박차고 나온 직장, 의미 있는 뭔가를 하고 싶었습니다. 허나 거의 7년간 내게 의미 있었던 것을 단숨에 그만둔다는 것은 쉬운일이 아니었습니다. 때마침 대학때 뜻이 맞던 친구가 저와 비슷한 시기에 비슷한 고민을 하고 있었지요. 그래서 저희는 자연스럽게 앞으로의 일에대해서 많은 고민과 대화를 하게 되었고, 마침내 둘이서 뭔가를 해보자는 결론을 내렸습니다. 즉, 사업한번 해보자는 것이었죠. 우리의 결심은 일사천리로 진행되었습니다. 그리고 저를 회사에 뽑아주셨던 회사 대표님께 뭔가 더 가치있는 일을 하기 위해 회사를 그만둬야겠다고 말씀드렸습니다. 의외로 대표님은 흔쾌히 보내주셨습니다. 같은 동문이라 애착이 있으셨을법도한데 제 결심과 표정을 보고 제 마음을 바꾸지 못할꺼라는 것을 아셨을지도 모르겠습니다.</p><p>막상 회사를 그만두었지만 앞으로 어떻게 해야할지 막막했습니다. 회사를 그만두긴 했지만 그만두기 전에 충분한 준비를 하지 못했었고, 회사를 나와서 준비하면 될거라는 안일한 생각에 빠져있었습니다. 게다가 저는 결혼하지 몇 달 되지도 않은 상황이었습니다. 제 마음대로 회사를 관두기 힘든 상황이었었죠. 하지만, 와이프는 참 고맙게도 저의 뜻을 높게 사주었고 당분간은 힘들겠지만 앞으로는 잘될거라며 굳게 믿어주었습니다. 당시에는 자본금을 마련하기도 힘들어 처음에는 까페를 전전하며 커피 두잔으로 사무실 비용을 대신했었지요. 그렇게 매일같이 마시는 두 잔의 쓰린 커피로는 도저히 안되겠다 싶어서 결국 친구집 빈방에 사무실을 만들었습니다. 처음에는 그럭저럭 쾌적한듯 느껴졌습니다만, 시간이 지날수록 친구의 '집' 이라는 사실이 발목을 잡더군요. 게을러지고 의미없이 보내는 시간들이 많아졌습니다. 그래서 또다시 이사를 감행했습니다. 친구 삼촌이 쓰시는 사무실 한켠에 파티션을 설치하고 책상 두개를 만들어 사무실로 사용했었습니다.</p><p>처음 친구와 저는 먼저 무슨일을 해야할까를 고민하기 시작했습니다. 회사를 관둘때 생각했던 우리에게 가치 있는일, 또한 사회에 긍정적인 영향을 끼칠 수 있는 일이 과연 무엇인지 부터 찾아보았지요. 당시에 '사회적 기업'이라는 사회의 이익을 위한 일을 하는 기업이라는 형태가 유행하던 시기였습니다. 기존의 기업들은 이익의 극대화를 위해서 존재한다면, 사회적기업은 소수자들의 자립을 도와준다거나 우리사회나 나아가서는 전 지구적으로 도움이 되는 일을 하자는 취지에 그 존재목적이 있습니다. 저희는 이거다 싶었습니다. 그때부터 사회적 기업 관련 책을 읽거나 세미나, 행사 등을 찾아 다니며 사회적 기업이 무엇인지 공부하기 시작했습니다.</p><p>사회적기업에 대해 알면 알수록 이건 좀 이상하다 싶었습니다. 당시에 우후죽순처럼 나타나던 사회적기업들은 대부분 투자를 받거나 국가에서 지원을 받아서 사업을 해나가던 경우가 많았는데, 국가의 지원같은 경우는 보통 3년정도의 임금을 지원해주었습니다. 지원 받는 그 3년간의 기간동안은 그럭저럭 운영을 해가지만 3년이 지나고 지원금이 사라졌을때, 자생력을 갖추는 사회적기업을 찾아보기가 쉽지 않았습니다. 결론부터 보면 3년정도 흐른 지금에 와서 보면 그때에 등장했던 수많은 사회적 기업들 중 지금도 존재하는 기업은 많지 않습니다. 저희는 그 때 사회적 기업이라는 것은 한때 유행에 지나지 않을것이고 조금만 있으면 거의 사라질 것이라는 것이라는 생각이 들었습니다. 간단하게 생각만 해보아도 보통의 기업도 돈을 버는 것이 쉬운일이 아닌데 하물며 기반도 부족한 젊은이들이 사회에 공헌하면서 돈도 벌겠다라는 것이 얼마나 어려운 일인지 알 수 있습니다.</p><p>이대로는 무리라고 판단이 되어, 생각을 조금 바꿔보았지요. 우리가 꼭 사회적 기업이라는 틀에 갖힐 필요가 없다. 그저 우리의 생각에 적합하면서 우리가 원하는 개인적 가치, 사회적 가치를 실현할 수 있으면 되는 것이다. 이렇게 말입니다.</p><p>틀에 얽매이는 생각을 조금만 비틀었을 뿐인데 그때부터 여러가지 아이디어가 나오기 시작했습니다. 몇달의 시간이 흘러 아이디어를 추리고 발전시키고 정제하는 과정을 계속해서 반복해갔습니다. 그러던 중 하나의 완성된 아이디어가 나오기 직전, 이제 투자 받을수 있겠구나 생각하던 시점에서 뭔가 잘못됐다는것을 깨달았습니다. 우리가 생각한 아이디어는 IT를 기반으로 하는 벤처들의 창업과 유사한 형태였습니다. 그런데 친구나 저나 IT와는 전혀 상관없는 인생을 살아왔기 때문에 당장에 우리가 기획한 것을 베타버전이라도 만들어보려면 개발자가 필요했습니다. 우리는 기획을 하면서 꿈을 꾸고 있었는지 현실적으로 만들어 낼수 있는지에 대한 필터링도 전혀 없었기 때문에 더더욱 개발자의 안목이 필요했었지요. 우연히 친구 아는 분이 개발분야에서 일하고 있어 우리가 기획한 것을 간단하게 보여드렸습니다. 우리가 이 분을 모셔올 수는 없더라도 이렇게 기획한 것이 과연 얼마의 시간동안 얼마의 인력으로 가능할지에 대한 기준이라도 알고 싶었습니다. 대답은 우리의 상상했던 것 이상이었습니다. 1년 이상의 개발기간에 최소 2~3억은 필요하다 답해 주셨습니다. 하늘이 무너지는 줄 알았습니다. 아무리 우리가 개발적 지식이 전무하다고 했지만 이정도로 우리의 상상과 현실의 갭이 클줄은 몰랐지요.</p><p>아무런 해결책도 기대도 없던 그 때 거대한 인터넷 기업에서 우리가 생각했던 서비스와 매우 유사한 것을 내놓겠다는 발표를 보게 되었습니다. 기획한 서비스와 완전히 똑같지는 않았지만, 뭔가 잘못됐다는 것을 직감할 수 있었습니다. 혹 우리가 지금까지 꿈을 꾸었던 것이었을까? 불안한 마음도 들었습니다. 예상보다 경제적, 시간적으로 무리라는 조언에 낙담한 상황에서 업친데 덥친격으로 유사 서비스의 발표까지 나오다 보니 이걸 정말 할 수 있을까라는 의구심마저 들기 시작했습니다. 당시에 친구와 저는 서로 말하지는 않았지만 더이상 우리가 하려고 했던 이 사업 놀이(?)는 여기서 끝내야한다는 것을 어렴풋이 느끼고 있었는지도 모릅니다. 결국 누가 먼저랄것도 없이 여기서 그만 두는게 맞는것 같다고 서로 얘기하게 되었지요. 8개월간 꾸었던 꿈을, 이제는 깨어날 때가 되었던 것입니다. 그리고 이후 우리는 헤어져 또다시 각자 서로 다른 가치를 찾기 위해 각자의 길을 찾아 나서게 되었습니다. 시간이 지난 지금 돌이켜보면, 사실 이 유사한 서비스의 등장이 결정적인 원인이었다 생각하지 않습니다. 그 8개월 동안 단 한번도 절실하게 원하지 않았기 때문에, 그렇기 때문에 단 한번의 위기로 와르르 쉽게 무너져버린것은 아닐까요?</p><p>좋은 경험이었습니다. 결과는 없었고 과정만 있었지만 많은 고민을 하고 생각을 나누고 아이디어를 쏟아내는 그 과정들은 저에겐 건축과는 또다른 형태의 재산이 될 수 있었습니다. 값진 경험이었습니다. 그리고, 사업은 이렇게 하면 안되는구나(?)라는 것도 알게 되었지요. 특히 IT벤처를 시작하려면, 확실한 아이디어와 실현할수 있는 기술을 가진 누군가가 꼭 있어야하고 어느정도 현실화가 되기전에는 회사를 그만두지 않는게 좋다는 교훈도 얻게 되었습니다. 이제 저는 또다른 길을 가게 되었습니다. 나이 서른이 다되어서 또다른 일을 결심할 수 있는것이 행복한 것인지 불행한 것인지는 모르겠습니다. 하지만 지금까지의 경험이면 무슨일을 하던지 새롭게 도전할 수 있을것만 같았습니다.</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(4) – 학원에 등록하다","date":"2014-11-01T06:35:25.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_thumbnail_id":"1639","_wpas_done_all":"1","dsq_thread_id":"3180151902","_aioseop_keywords":"IT, 건축, 프로그래머, 프로그래밍, 학원, 계좌제, 내일배움카드제, 안드로이드, 아이폰, 모바일, 자바","_wpt_short_url":"","_wp_jd_target":"http://www.whynhows.com/?p=1634","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:106:\"Post Edited: 건축에서 프로그래머로(4) – 학원에 등록하다 http://www.whynhows.com/?p=1634\";s:5:\"error\";s:232:\"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1415164734;}","_wpt_status_message":"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings."},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>IT관련 학원, 아시는분들은 아시겠지만 무지하게 비쌉니다. 한달 단과반, 하루 3시간 강의를 수강하면 보통 40만원 정도가 들어요. 영어학원이나 다른 여타 학원들에 비해서도 지나치게 비싼편입니다. 프로그래밍을 가르치는 일에는 전문적인 지식을 필요하기 때문이라고 말할수도 있겠지만, 이 점을 감안하더라도 너무 비싸다는건 부정할 수 없습니다. 그런데 컴퓨터 관련 학원들을 자세히 알아보면 뭔가 이상한점을 발견할 수 있습니다. 어느 학원을 알아보더라도 거의 비슷한 과정을 개설하고 있고, 수강료 마저 비슷한 선에서 형성되어 있습니다. 여기엔 분명히 뭔가 있어보이지요.</p>\n<p>90년대 말에서 2000년 초반 벤처 붐이 일어날 당시에 정부에서는 IT강국으로 도약하기 위해 엄청난 지원금을 쏟아 부었습니다. 이 지원금 중에서 일부는 비전공자를 대상으로하는 학원으로 흘러들어갔지요. 이때 새롭게 발생한 이 수요를 감당하기 위해 컴퓨터 학원들이 많이 생겼겠지요. 그리고 그 결과 초급 개발자(주로 PHP등의 웹 개발자)가 대량으로 양산되었고 개발자의 몸값도 확 내려갔습니다. 아마도 이때 정부의 지원에 의해 만들어진 학원들이 지금까지 쭉 이어져오고 있는게 아닌가 생각합니다(제가 언급한 위의 내용들은 사실확인을 하지 않은 제 개인적인 추측이니 감안해서 보시면 될것 같네요^^).</p>\n<p>이렇게 비싼 컴퓨터학원에 가보면 여전히 많은 수강생들이 다니고 있는걸 볼 수 있습니다. 이렇게 비싼데도 말이지요. 하지만 대부분의 수강생은 제 돈주고 강의 듣지 않습니다. 다양한 형태로 지원금을 받아서 무료로 강의를 듣거나 일부 금액을 내고 듣기도 합니다. 지원금을 받을 수 있는 형태는 여러가지가 있습니다만, 그 중에서 대표적인 것이 중소기업 재직자 과정, 내일배움카드카드제(계좌제, 이하 계좌제) 등 입니다. 중소기업 재직자 과정의 경우는 처음에 전액을 지불한 다음 규정에 명시된 출석률에 도달하면 전액을 돌려받는 형태입니다. 계좌제(아래에서 자세하게 설명)의 경우에는 20퍼센트만 지불하고 나머지 80퍼센트를 지원받는 형태이죠. 예를 들어서 40만원짜리 단과반 강의를 듣는다면 중소기업 재직자는 100% 환급이 가능하니 무료이고, 계좌제(조금 후에 설명드리겠습니다)를 이용하는 사람은 20%인 8만원만 지불하고 나머지는 정부지원금으로 지불합니다. 현실이 이렇다보니 실제로 수강료를 모두 지불하고 강의를 듣는 학생은 많지 않습니다. 한달 강의에 40만원은 쉽게 낼 수 있는 돈이 아니죠. 그런데 강의를 직접 들어보면, 이게 과연 한달 강의의 가치가 될까하는 의문이 듭니다. 아마도 이들 학원들은 정부의 지원금을 이용하여 강의료를 엄청 올린다음 마치 이 비싼 강의를 싸게 들을 수 있는 기회를 준다는 식으로 생색을 내는게 아닌가 생각이 듭니다. 말하자면 돈은 돈대로 정부로부터 받아내고 수강생들에게 생색은 내는대로 낸다는 말입니다.</p>\n<p><a title=\"계좌제 홈페이지\" href=\"http://www.hrd.go.kr/jsp/HRDP/main/index.jsp\" target=\"_blank\">계좌제 홈페이지 들어가기</a></p>\n<p>&nbsp;</p>\n<p>여기서 계좌제를 모르시는 분들은 잠깐 설명드리겠습니다. 계좌제의 공식 명칭은 내일배움카드제입니다. 2010년에 정식으로 규정이 만들어졌습니다. 2010년 이전에도 지원 제도가 없진 않았는데, 2010년에 이름을 바꿔서 규정을 정리한것으로 보입니다. 계좌제는 직업을 가지지 못하거나 실직한 사람들에게 정부에서 내일배움카드(계좌제 카드)를 발급하여 일정금액(200만원)을 지원해주는 제도입니다. 대학졸업자, 실직자, 구직자 등 현재 직업이 없는 성인은 대부분 이용할 수 있습니다. 위에서도 잠깐 언급했지만, 40만원짜리 단과반을 수강한다면 20%인 8만원은 본인 부담으로 결제합니다. 그리고 나머지 32만원은 정부 지원금 200만원에서 차감됩니다. 즉, 단과반을 한달 수강하고나면 지원금이 168만원 남게 된다는 것이죠. 이런 방식으로 남은 금액 한도내에서 어떤 강의든 자신이 원하는 강의를 들을 수 있습니다. 단, 최초에 내일배움카드를 발급받을 때 본인이 취직하려는 직종과 일치하는 강의여야하지요. 강의를 잘 들으면 보너스도 있습니다. 수업에 빠지지 않고 대부분을 출석하면, 교통비랑 식비를 11만원까지 받을 수 있습니다. 완전 대박이죠!! 여기서 또 한가지 주의하실점은 지원금은 발급일로부터 1년안에 꼭 사용하셔야 한다는 것입니다. 제가 2011년에 지원받은 거라 위의 내용이 정확하지 않을 수도 있습니다. 그렇기 때문에 꼭 홈페이지에 들어가셔서 정확한 내용은 확인해보시길 바랍니다.</p>\n<p>여러 학원들에서는 이 계좌제에 맞춰서 안드로이드 전문가 과정, 아이폰 전문가 과정, 오라클 전문가 과정 등의 3~6개월 과정을 많이 모집하고 있습니다. 이 과정들은 완전 기초(C, JAVA등의 언어)에서부터 각각의 과정을 소화하기 위해서 필요한 기반지식을 모두 배웁니다. 과정을 모두 이수하고나면 학원에서 우수(?) 중소기업에 취업을 연결시켜주기도 합니다(취업하기 쉬워보입니다만...).</p>\n<p>저는 당시(2011년)에 프로그램을 처음 배우는 입장이어서 무엇을 먼저 해야할까 고민이었습니다. 공과대학을 졸업했음에도 불구하고 건축공학이라는 이유로 C언어조차 배우지 않은 상태였기에 무엇부터 어떻게 배워야하는지 전혀 감이 없었고 조언을 구할데도 마땅지 않은 상황이었습니다. 또한 친구와 사업을 계속 추진하고 있는 상태여서 남들처럼 풀타임으로 3~6개월 과정을 진행하기란 불가능했습니다. 2011년은 스마트폰이 한창 뜨고 있을 때였죠. 학원에서도 시대의 흐름에 맞춰 안드로이드나 아이폰 과정이 인기가 있었습니다. 아! 이거구나 싶었죠. 하지만 학원에 알아본결과, 모바일 과정은 대부분 3개월 이상의 풀타임(오전9시~오후6시)으로 진행하고 있었고, 단과로 개설된 과정은 거의 없었습니다. 단과만 가능했던 저는 이런 풀타임 과정을수강을 할 수 없었습니다. 그래서 학원의 상담사와 상담을 한 끝에, 안드로이드 앱을 개발하는 언어인 자바 단과반을 수강하기로 결정했습니다.(이 때의 선택이 아직도 이어지네요^^)</p>\n","source":"_posts/2014-11-02-from-architect-to-progammer-4.html","raw":"---\nlayout: post\ncomments: true\ntitle: 건축에서 프로그래머로(4) – 학원에 등록하다\ndate: 2014-11-02 00:35:25.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- IT\n- 건축\n- 계좌제\n- 내일배움카드제\n- 모바일\n- 아이폰\n- 안드로이드\n- 자바\n- 프로그래머\n- 프로그래밍\n- 학원\nmeta:\n  _edit_last: '1'\n  _thumbnail_id: '1639'\n  _wpas_done_all: '1'\n  dsq_thread_id: '3180151902'\n  _aioseop_keywords: IT, 건축, 프로그래머, 프로그래밍, 학원, 계좌제, 내일배움카드제, 안드로이드, 아이폰, 모바일, 자바\n  _wpt_short_url: ''\n  _wp_jd_target: http://www.whynhows.com/?p=1634\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:106:\"Post Edited: 건축에서 프로그래머로(4)\n    – 학원에 등록하다 http://www.whynhows.com/?p=1634\";s:5:\"error\";s:232:\"401 Unauthorized:\n    Authentication credentials were missing or incorrect. Your Twitter application\n    does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your\n    Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1415164734;}'\n  _wpt_status_message: '401 Unauthorized: Authentication credentials were missing\n    or incorrect. Your Twitter application does not have read and write permissions.\n    Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify\n    these settings.'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>IT관련 학원, 아시는분들은 아시겠지만 무지하게 비쌉니다. 한달 단과반, 하루 3시간 강의를 수강하면 보통 40만원 정도가 들어요. 영어학원이나 다른 여타 학원들에 비해서도 지나치게 비싼편입니다. 프로그래밍을 가르치는 일에는 전문적인 지식을 필요하기 때문이라고 말할수도 있겠지만, 이 점을 감안하더라도 너무 비싸다는건 부정할 수 없습니다. 그런데 컴퓨터 관련 학원들을 자세히 알아보면 뭔가 이상한점을 발견할 수 있습니다. 어느 학원을 알아보더라도 거의 비슷한 과정을 개설하고 있고, 수강료 마저 비슷한 선에서 형성되어 있습니다. 여기엔 분명히 뭔가 있어보이지요.</p>\n<p>90년대 말에서 2000년 초반 벤처 붐이 일어날 당시에 정부에서는 IT강국으로 도약하기 위해 엄청난 지원금을 쏟아 부었습니다. 이 지원금 중에서 일부는 비전공자를 대상으로하는 학원으로 흘러들어갔지요. 이때 새롭게 발생한 이 수요를 감당하기 위해 컴퓨터 학원들이 많이 생겼겠지요. 그리고 그 결과 초급 개발자(주로 PHP등의 웹 개발자)가 대량으로 양산되었고 개발자의 몸값도 확 내려갔습니다. 아마도 이때 정부의 지원에 의해 만들어진 학원들이 지금까지 쭉 이어져오고 있는게 아닌가 생각합니다(제가 언급한 위의 내용들은 사실확인을 하지 않은 제 개인적인 추측이니 감안해서 보시면 될것 같네요^^).</p>\n<p>이렇게 비싼 컴퓨터학원에 가보면 여전히 많은 수강생들이 다니고 있는걸 볼 수 있습니다. 이렇게 비싼데도 말이지요. 하지만 대부분의 수강생은 제 돈주고 강의 듣지 않습니다. 다양한 형태로 지원금을 받아서 무료로 강의를 듣거나 일부 금액을 내고 듣기도 합니다. 지원금을 받을 수 있는 형태는 여러가지가 있습니다만, 그 중에서 대표적인 것이 중소기업 재직자 과정, 내일배움카드카드제(계좌제, 이하 계좌제) 등 입니다. 중소기업 재직자 과정의 경우는 처음에 전액을 지불한 다음 규정에 명시된 출석률에 도달하면 전액을 돌려받는 형태입니다. 계좌제(아래에서 자세하게 설명)의 경우에는 20퍼센트만 지불하고 나머지 80퍼센트를 지원받는 형태이죠. 예를 들어서 40만원짜리 단과반 강의를 듣는다면 중소기업 재직자는 100% 환급이 가능하니 무료이고, 계좌제(조금 후에 설명드리겠습니다)를 이용하는 사람은 20%인 8만원만 지불하고 나머지는 정부지원금으로 지불합니다. 현실이 이렇다보니 실제로 수강료를 모두 지불하고 강의를 듣는 학생은 많지 않습니다. 한달 강의에 40만원은 쉽게 낼 수 있는 돈이 아니죠. 그런데 강의를 직접 들어보면, 이게 과연 한달 강의의 가치가 될까하는 의문이 듭니다. 아마도 이들 학원들은 정부의 지원금을 이용하여 강의료를 엄청 올린다음 마치 이 비싼 강의를 싸게 들을 수 있는 기회를 준다는 식으로 생색을 내는게 아닌가 생각이 듭니다. 말하자면 돈은 돈대로 정부로부터 받아내고 수강생들에게 생색은 내는대로 낸다는 말입니다.</p>\n<p><a title=\"계좌제 홈페이지\" href=\"http://www.hrd.go.kr/jsp/HRDP/main/index.jsp\" target=\"_blank\">계좌제 홈페이지 들어가기</a></p>\n<p>&nbsp;</p>\n<p>여기서 계좌제를 모르시는 분들은 잠깐 설명드리겠습니다. 계좌제의 공식 명칭은 내일배움카드제입니다. 2010년에 정식으로 규정이 만들어졌습니다. 2010년 이전에도 지원 제도가 없진 않았는데, 2010년에 이름을 바꿔서 규정을 정리한것으로 보입니다. 계좌제는 직업을 가지지 못하거나 실직한 사람들에게 정부에서 내일배움카드(계좌제 카드)를 발급하여 일정금액(200만원)을 지원해주는 제도입니다. 대학졸업자, 실직자, 구직자 등 현재 직업이 없는 성인은 대부분 이용할 수 있습니다. 위에서도 잠깐 언급했지만, 40만원짜리 단과반을 수강한다면 20%인 8만원은 본인 부담으로 결제합니다. 그리고 나머지 32만원은 정부 지원금 200만원에서 차감됩니다. 즉, 단과반을 한달 수강하고나면 지원금이 168만원 남게 된다는 것이죠. 이런 방식으로 남은 금액 한도내에서 어떤 강의든 자신이 원하는 강의를 들을 수 있습니다. 단, 최초에 내일배움카드를 발급받을 때 본인이 취직하려는 직종과 일치하는 강의여야하지요. 강의를 잘 들으면 보너스도 있습니다. 수업에 빠지지 않고 대부분을 출석하면, 교통비랑 식비를 11만원까지 받을 수 있습니다. 완전 대박이죠!! 여기서 또 한가지 주의하실점은 지원금은 발급일로부터 1년안에 꼭 사용하셔야 한다는 것입니다. 제가 2011년에 지원받은 거라 위의 내용이 정확하지 않을 수도 있습니다. 그렇기 때문에 꼭 홈페이지에 들어가셔서 정확한 내용은 확인해보시길 바랍니다.</p>\n<p>여러 학원들에서는 이 계좌제에 맞춰서 안드로이드 전문가 과정, 아이폰 전문가 과정, 오라클 전문가 과정 등의 3~6개월 과정을 많이 모집하고 있습니다. 이 과정들은 완전 기초(C, JAVA등의 언어)에서부터 각각의 과정을 소화하기 위해서 필요한 기반지식을 모두 배웁니다. 과정을 모두 이수하고나면 학원에서 우수(?) 중소기업에 취업을 연결시켜주기도 합니다(취업하기 쉬워보입니다만...).</p>\n<p>저는 당시(2011년)에 프로그램을 처음 배우는 입장이어서 무엇을 먼저 해야할까 고민이었습니다. 공과대학을 졸업했음에도 불구하고 건축공학이라는 이유로 C언어조차 배우지 않은 상태였기에 무엇부터 어떻게 배워야하는지 전혀 감이 없었고 조언을 구할데도 마땅지 않은 상황이었습니다. 또한 친구와 사업을 계속 추진하고 있는 상태여서 남들처럼 풀타임으로 3~6개월 과정을 진행하기란 불가능했습니다. 2011년은 스마트폰이 한창 뜨고 있을 때였죠. 학원에서도 시대의 흐름에 맞춰 안드로이드나 아이폰 과정이 인기가 있었습니다. 아! 이거구나 싶었죠. 하지만 학원에 알아본결과, 모바일 과정은 대부분 3개월 이상의 풀타임(오전9시~오후6시)으로 진행하고 있었고, 단과로 개설된 과정은 거의 없었습니다. 단과만 가능했던 저는 이런 풀타임 과정을수강을 할 수 없었습니다. 그래서 학원의 상담사와 상담을 한 끝에, 안드로이드 앱을 개발하는 언어인 자바 단과반을 수강하기로 결정했습니다.(이 때의 선택이 아직도 이어지네요^^)</p>\n","slug":"2014-11-02-from-architect-to-progammer-4","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6m000uwxt4bedd6asx","content":"<p>IT관련 학원, 아시는분들은 아시겠지만 무지하게 비쌉니다. 한달 단과반, 하루 3시간 강의를 수강하면 보통 40만원 정도가 들어요. 영어학원이나 다른 여타 학원들에 비해서도 지나치게 비싼편입니다. 프로그래밍을 가르치는 일에는 전문적인 지식을 필요하기 때문이라고 말할수도 있겠지만, 이 점을 감안하더라도 너무 비싸다는건 부정할 수 없습니다. 그런데 컴퓨터 관련 학원들을 자세히 알아보면 뭔가 이상한점을 발견할 수 있습니다. 어느 학원을 알아보더라도 거의 비슷한 과정을 개설하고 있고, 수강료 마저 비슷한 선에서 형성되어 있습니다. 여기엔 분명히 뭔가 있어보이지요.</p><p>90년대 말에서 2000년 초반 벤처 붐이 일어날 당시에 정부에서는 IT강국으로 도약하기 위해 엄청난 지원금을 쏟아 부었습니다. 이 지원금 중에서 일부는 비전공자를 대상으로하는 학원으로 흘러들어갔지요. 이때 새롭게 발생한 이 수요를 감당하기 위해 컴퓨터 학원들이 많이 생겼겠지요. 그리고 그 결과 초급 개발자(주로 PHP등의 웹 개발자)가 대량으로 양산되었고 개발자의 몸값도 확 내려갔습니다. 아마도 이때 정부의 지원에 의해 만들어진 학원들이 지금까지 쭉 이어져오고 있는게 아닌가 생각합니다(제가 언급한 위의 내용들은 사실확인을 하지 않은 제 개인적인 추측이니 감안해서 보시면 될것 같네요^^).</p><p>이렇게 비싼 컴퓨터학원에 가보면 여전히 많은 수강생들이 다니고 있는걸 볼 수 있습니다. 이렇게 비싼데도 말이지요. 하지만 대부분의 수강생은 제 돈주고 강의 듣지 않습니다. 다양한 형태로 지원금을 받아서 무료로 강의를 듣거나 일부 금액을 내고 듣기도 합니다. 지원금을 받을 수 있는 형태는 여러가지가 있습니다만, 그 중에서 대표적인 것이 중소기업 재직자 과정, 내일배움카드카드제(계좌제, 이하 계좌제) 등 입니다. 중소기업 재직자 과정의 경우는 처음에 전액을 지불한 다음 규정에 명시된 출석률에 도달하면 전액을 돌려받는 형태입니다. 계좌제(아래에서 자세하게 설명)의 경우에는 20퍼센트만 지불하고 나머지 80퍼센트를 지원받는 형태이죠. 예를 들어서 40만원짜리 단과반 강의를 듣는다면 중소기업 재직자는 100% 환급이 가능하니 무료이고, 계좌제(조금 후에 설명드리겠습니다)를 이용하는 사람은 20%인 8만원만 지불하고 나머지는 정부지원금으로 지불합니다. 현실이 이렇다보니 실제로 수강료를 모두 지불하고 강의를 듣는 학생은 많지 않습니다. 한달 강의에 40만원은 쉽게 낼 수 있는 돈이 아니죠. 그런데 강의를 직접 들어보면, 이게 과연 한달 강의의 가치가 될까하는 의문이 듭니다. 아마도 이들 학원들은 정부의 지원금을 이용하여 강의료를 엄청 올린다음 마치 이 비싼 강의를 싸게 들을 수 있는 기회를 준다는 식으로 생색을 내는게 아닌가 생각이 듭니다. 말하자면 돈은 돈대로 정부로부터 받아내고 수강생들에게 생색은 내는대로 낸다는 말입니다.</p><p><a title=\"계좌제 홈페이지\" href=\"http://www.hrd.go.kr/jsp/HRDP/main/index.jsp\" target=\"_blank\">계좌제 홈페이지 들어가기</a></p><p>&nbsp;</p><p>여기서 계좌제를 모르시는 분들은 잠깐 설명드리겠습니다. 계좌제의 공식 명칭은 내일배움카드제입니다. 2010년에 정식으로 규정이 만들어졌습니다. 2010년 이전에도 지원 제도가 없진 않았는데, 2010년에 이름을 바꿔서 규정을 정리한것으로 보입니다. 계좌제는 직업을 가지지 못하거나 실직한 사람들에게 정부에서 내일배움카드(계좌제 카드)를 발급하여 일정금액(200만원)을 지원해주는 제도입니다. 대학졸업자, 실직자, 구직자 등 현재 직업이 없는 성인은 대부분 이용할 수 있습니다. 위에서도 잠깐 언급했지만, 40만원짜리 단과반을 수강한다면 20%인 8만원은 본인 부담으로 결제합니다. 그리고 나머지 32만원은 정부 지원금 200만원에서 차감됩니다. 즉, 단과반을 한달 수강하고나면 지원금이 168만원 남게 된다는 것이죠. 이런 방식으로 남은 금액 한도내에서 어떤 강의든 자신이 원하는 강의를 들을 수 있습니다. 단, 최초에 내일배움카드를 발급받을 때 본인이 취직하려는 직종과 일치하는 강의여야하지요. 강의를 잘 들으면 보너스도 있습니다. 수업에 빠지지 않고 대부분을 출석하면, 교통비랑 식비를 11만원까지 받을 수 있습니다. 완전 대박이죠!! 여기서 또 한가지 주의하실점은 지원금은 발급일로부터 1년안에 꼭 사용하셔야 한다는 것입니다. 제가 2011년에 지원받은 거라 위의 내용이 정확하지 않을 수도 있습니다. 그렇기 때문에 꼭 홈페이지에 들어가셔서 정확한 내용은 확인해보시길 바랍니다.</p><p>여러 학원들에서는 이 계좌제에 맞춰서 안드로이드 전문가 과정, 아이폰 전문가 과정, 오라클 전문가 과정 등의 3~6개월 과정을 많이 모집하고 있습니다. 이 과정들은 완전 기초(C, JAVA등의 언어)에서부터 각각의 과정을 소화하기 위해서 필요한 기반지식을 모두 배웁니다. 과정을 모두 이수하고나면 학원에서 우수(?) 중소기업에 취업을 연결시켜주기도 합니다(취업하기 쉬워보입니다만...).</p><p>저는 당시(2011년)에 프로그램을 처음 배우는 입장이어서 무엇을 먼저 해야할까 고민이었습니다. 공과대학을 졸업했음에도 불구하고 건축공학이라는 이유로 C언어조차 배우지 않은 상태였기에 무엇부터 어떻게 배워야하는지 전혀 감이 없었고 조언을 구할데도 마땅지 않은 상황이었습니다. 또한 친구와 사업을 계속 추진하고 있는 상태여서 남들처럼 풀타임으로 3~6개월 과정을 진행하기란 불가능했습니다. 2011년은 스마트폰이 한창 뜨고 있을 때였죠. 학원에서도 시대의 흐름에 맞춰 안드로이드나 아이폰 과정이 인기가 있었습니다. 아! 이거구나 싶었죠. 하지만 학원에 알아본결과, 모바일 과정은 대부분 3개월 이상의 풀타임(오전9시~오후6시)으로 진행하고 있었고, 단과로 개설된 과정은 거의 없었습니다. 단과만 가능했던 저는 이런 풀타임 과정을수강을 할 수 없었습니다. 그래서 학원의 상담사와 상담을 한 끝에, 안드로이드 앱을 개발하는 언어인 자바 단과반을 수강하기로 결정했습니다.(이 때의 선택이 아직도 이어지네요^^)</p>","excerpt":"","more":"<p>IT관련 학원, 아시는분들은 아시겠지만 무지하게 비쌉니다. 한달 단과반, 하루 3시간 강의를 수강하면 보통 40만원 정도가 들어요. 영어학원이나 다른 여타 학원들에 비해서도 지나치게 비싼편입니다. 프로그래밍을 가르치는 일에는 전문적인 지식을 필요하기 때문이라고 말할수도 있겠지만, 이 점을 감안하더라도 너무 비싸다는건 부정할 수 없습니다. 그런데 컴퓨터 관련 학원들을 자세히 알아보면 뭔가 이상한점을 발견할 수 있습니다. 어느 학원을 알아보더라도 거의 비슷한 과정을 개설하고 있고, 수강료 마저 비슷한 선에서 형성되어 있습니다. 여기엔 분명히 뭔가 있어보이지요.</p><p>90년대 말에서 2000년 초반 벤처 붐이 일어날 당시에 정부에서는 IT강국으로 도약하기 위해 엄청난 지원금을 쏟아 부었습니다. 이 지원금 중에서 일부는 비전공자를 대상으로하는 학원으로 흘러들어갔지요. 이때 새롭게 발생한 이 수요를 감당하기 위해 컴퓨터 학원들이 많이 생겼겠지요. 그리고 그 결과 초급 개발자(주로 PHP등의 웹 개발자)가 대량으로 양산되었고 개발자의 몸값도 확 내려갔습니다. 아마도 이때 정부의 지원에 의해 만들어진 학원들이 지금까지 쭉 이어져오고 있는게 아닌가 생각합니다(제가 언급한 위의 내용들은 사실확인을 하지 않은 제 개인적인 추측이니 감안해서 보시면 될것 같네요^^).</p><p>이렇게 비싼 컴퓨터학원에 가보면 여전히 많은 수강생들이 다니고 있는걸 볼 수 있습니다. 이렇게 비싼데도 말이지요. 하지만 대부분의 수강생은 제 돈주고 강의 듣지 않습니다. 다양한 형태로 지원금을 받아서 무료로 강의를 듣거나 일부 금액을 내고 듣기도 합니다. 지원금을 받을 수 있는 형태는 여러가지가 있습니다만, 그 중에서 대표적인 것이 중소기업 재직자 과정, 내일배움카드카드제(계좌제, 이하 계좌제) 등 입니다. 중소기업 재직자 과정의 경우는 처음에 전액을 지불한 다음 규정에 명시된 출석률에 도달하면 전액을 돌려받는 형태입니다. 계좌제(아래에서 자세하게 설명)의 경우에는 20퍼센트만 지불하고 나머지 80퍼센트를 지원받는 형태이죠. 예를 들어서 40만원짜리 단과반 강의를 듣는다면 중소기업 재직자는 100% 환급이 가능하니 무료이고, 계좌제(조금 후에 설명드리겠습니다)를 이용하는 사람은 20%인 8만원만 지불하고 나머지는 정부지원금으로 지불합니다. 현실이 이렇다보니 실제로 수강료를 모두 지불하고 강의를 듣는 학생은 많지 않습니다. 한달 강의에 40만원은 쉽게 낼 수 있는 돈이 아니죠. 그런데 강의를 직접 들어보면, 이게 과연 한달 강의의 가치가 될까하는 의문이 듭니다. 아마도 이들 학원들은 정부의 지원금을 이용하여 강의료를 엄청 올린다음 마치 이 비싼 강의를 싸게 들을 수 있는 기회를 준다는 식으로 생색을 내는게 아닌가 생각이 듭니다. 말하자면 돈은 돈대로 정부로부터 받아내고 수강생들에게 생색은 내는대로 낸다는 말입니다.</p><p><a title=\"계좌제 홈페이지\" href=\"http://www.hrd.go.kr/jsp/HRDP/main/index.jsp\" target=\"_blank\">계좌제 홈페이지 들어가기</a></p><p>&nbsp;</p><p>여기서 계좌제를 모르시는 분들은 잠깐 설명드리겠습니다. 계좌제의 공식 명칭은 내일배움카드제입니다. 2010년에 정식으로 규정이 만들어졌습니다. 2010년 이전에도 지원 제도가 없진 않았는데, 2010년에 이름을 바꿔서 규정을 정리한것으로 보입니다. 계좌제는 직업을 가지지 못하거나 실직한 사람들에게 정부에서 내일배움카드(계좌제 카드)를 발급하여 일정금액(200만원)을 지원해주는 제도입니다. 대학졸업자, 실직자, 구직자 등 현재 직업이 없는 성인은 대부분 이용할 수 있습니다. 위에서도 잠깐 언급했지만, 40만원짜리 단과반을 수강한다면 20%인 8만원은 본인 부담으로 결제합니다. 그리고 나머지 32만원은 정부 지원금 200만원에서 차감됩니다. 즉, 단과반을 한달 수강하고나면 지원금이 168만원 남게 된다는 것이죠. 이런 방식으로 남은 금액 한도내에서 어떤 강의든 자신이 원하는 강의를 들을 수 있습니다. 단, 최초에 내일배움카드를 발급받을 때 본인이 취직하려는 직종과 일치하는 강의여야하지요. 강의를 잘 들으면 보너스도 있습니다. 수업에 빠지지 않고 대부분을 출석하면, 교통비랑 식비를 11만원까지 받을 수 있습니다. 완전 대박이죠!! 여기서 또 한가지 주의하실점은 지원금은 발급일로부터 1년안에 꼭 사용하셔야 한다는 것입니다. 제가 2011년에 지원받은 거라 위의 내용이 정확하지 않을 수도 있습니다. 그렇기 때문에 꼭 홈페이지에 들어가셔서 정확한 내용은 확인해보시길 바랍니다.</p><p>여러 학원들에서는 이 계좌제에 맞춰서 안드로이드 전문가 과정, 아이폰 전문가 과정, 오라클 전문가 과정 등의 3~6개월 과정을 많이 모집하고 있습니다. 이 과정들은 완전 기초(C, JAVA등의 언어)에서부터 각각의 과정을 소화하기 위해서 필요한 기반지식을 모두 배웁니다. 과정을 모두 이수하고나면 학원에서 우수(?) 중소기업에 취업을 연결시켜주기도 합니다(취업하기 쉬워보입니다만...).</p><p>저는 당시(2011년)에 프로그램을 처음 배우는 입장이어서 무엇을 먼저 해야할까 고민이었습니다. 공과대학을 졸업했음에도 불구하고 건축공학이라는 이유로 C언어조차 배우지 않은 상태였기에 무엇부터 어떻게 배워야하는지 전혀 감이 없었고 조언을 구할데도 마땅지 않은 상황이었습니다. 또한 친구와 사업을 계속 추진하고 있는 상태여서 남들처럼 풀타임으로 3~6개월 과정을 진행하기란 불가능했습니다. 2011년은 스마트폰이 한창 뜨고 있을 때였죠. 학원에서도 시대의 흐름에 맞춰 안드로이드나 아이폰 과정이 인기가 있었습니다. 아! 이거구나 싶었죠. 하지만 학원에 알아본결과, 모바일 과정은 대부분 3개월 이상의 풀타임(오전9시~오후6시)으로 진행하고 있었고, 단과로 개설된 과정은 거의 없었습니다. 단과만 가능했던 저는 이런 풀타임 과정을수강을 할 수 없었습니다. 그래서 학원의 상담사와 상담을 한 끝에, 안드로이드 앱을 개발하는 언어인 자바 단과반을 수강하기로 결정했습니다.(이 때의 선택이 아직도 이어지네요^^)</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(5) – 학원 VS 독학","date":"2015-02-09T07:45:34.000Z","type":"post","published":1,"status":"publish","meta":{"_edit_last":"1","_jd_twitter":"","_jd_tweet_this":"yes","_thumbnail_id":"1646","dsq_thread_id":"3499918550","_wpas_done_all":"1","_aioseop_keywords":"IT,건축,안드로이드,모바일,자바,프로그래머,프로그래밍,학원,강의","_wpt_short_url":"","_wp_jd_target":"http://www.whynhows.com/?p=1641","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:97:\"New post: 건축에서 프로그래머로(5) – 학원 VS 독학 http://www.whynhows.com/?p=1641\";s:5:\"error\";s:232:\"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1423500337;}","_wpt_status_message":"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.","_wpas_skip_6779368":"1"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>자바 강의를 등록하고 들어간 첫 수업날, 자바뿐 아니라 그 어떤 프로그램 언어를 다뤄본 경험도 없었기에 강사님의 말씀을 거의 알아들을 수 없었습니다. 보통 첫날에는 우리가 지금 배우는게 어떤것이며 어떻게 사용되는지 따위의 개괄적인 내용을 강의하죠. 그리고는 어떤 언어를 배우든 반드시 처음에 어떤 작은 프로그램을 짜보게 되는데요. 바로 \"Hello Wordl!!\"를 출력하는 프로그램!!!(또는 Hello Java) 당시에는 아무것도 모르고'뭐가 이렇게 간단한거지? 프로그래밍이란게 별거 없구만!!'이라고 생각했었습니다. 하지만, 하지만 말입니다. 'Hello World'이후에 강사님을 따라 이것저것 여러가지 프로그램을 한글자 한글자 타이핑 해보고 실행도 해보았습니다. 그런데 가면갈수록 머리속이 흐리멍텅해지더니 급기야 까만건 글자요 들리는건 주문이 되는 경지에 이르렀습니다. 도대체 이건 무슨 의미인거지? 어떤 원리로 실행되는거지? 그나마 그중에 한가지 알 수 있는 게 있었으니,</p>\n<p>XXXX.print(\"Hello Java\");</p>\n<p>앞에 X들은 뭔말인지 전혀 모르겠지만(강사님도 지금은 알 필요는 없다고 했습니다!!), print라는 문구를 보니 대강 \"Hello Java\"라는 문구를 츨략하라는 뜻인것 같았습니다. 실행해보니 예상한대로 콘솔(이라 불리는 어떤 영역)에 \"Hello Java\"가 출력되더라구요. 또다시 자신감 급상승!! '프로그래밍 별거 없구나' 라는 생각이 또다시 스믈스믈 기어나왔지요. 하지만 'print'를 제외하고는 다른 문자들은 정말 어느 오지의 외국어 같은 느낌뿐이었습니다. 강사님 왈, 아무것도 모르는 초보에게 처음부터 너무 많은 것을 가르쳐 주면 오히려 헷갈리니 그냥 자신이 불러주는데로 타이핑하는게 낫다는 것이었습니다. 정말인가?? 반신반의했지만, 오랫동안 강의를 해왔으니 나름의 생각이 있을거라 생각했습니다. 지금와서 생각해보면, 아마도 복잡한 문법이나 원리를 설명하기전에 우선 어떤식으로 프로그램이 작동하는지 이해하는게 먼저라고 생각했던것 같습니다. 예를들어 처음부터 '이것은 어떤 자료형의 변수고, 이건 클래스 이름이고, 이건 파라미터입니다' 따위의 말들을 했었다면 단 한마디도 알아들을 수 없었을 것입니다.</p>\n<p>두번째 날, 그리고 세번째 날이 지나면서 자료형, 변수, 배열, 메소드, 클래스 등 을 하나씩 배워갔습니다. 배열과 메소드까지는 어느정도 이해가 가능했지만, 클래스를 처음 접했을 때는 도대체 이게 뭔가 싶었지요. 클래스가 뭐고 변수가 뭔지 알고 있는 지금 그 때의 기분을 정확히 표현할 수는 없지만, 아마 중학교 1학년이 처음 수동태, 능동태를 배울때의 느낌이랄까? 클래스에 대한 이해가 전무한 상태 이후는 아무 의미 없는 시간들의 연속이었습니다. 말그대로 '쇠 귀에 경 읽기' 였죠. 몸은 학원에 나가고 있었지만, 제가 할수 있는 건 들리는 단어를 그대로 타이핑하는것뿐이었습니다. 그래도 실행은 되니깐 근근히 버틸수 있었던것 같습니다. 당시에 10대 초등학생 꼬마와 같이 강의를 들었는데, 그 친구보다 내가 못따라간다는 느낌마저 들 정도였으니 좌절의 연속이었죠.</p>\n<p>사실 18일이라는 짧은 시간(한 달 강의지만 실제 강의 일수는 18일 입니다) 동안 자바라는 언어 하나를 프로그래밍의 '프'자도 모르는 사람들에게 가르치려고 하다보니 이해를 하고 못하고는 중요한 문제가 아니었지요. 강사 입장에서는 커리큘럼에 따라서 반드시 수강생들에게 모든 강의를 해주어야 했습니다. 한달의 강의로 '학생들이 자바를 알고 자바 프로그램을 작성할 수 있게 되었다'는 사실은 학원에게는 중요한 관심사가 아니었습니다. 단지 몇명의 학생이 등록했고, 다음 달에는 또 몇명이 등록할지가 주요 관심사였죠. 한명을 유치함에 따라서 학원이 얻는 이익은 결코 작지 않았기 때문이겠죠. 그래도 강사님은 나름대로 열심히 가르쳐 주었습니다. 질문을 하면 최대한 이해가 가능하도록 설명해 주었고, 이해를 할 때까지 몇번이고 반복해서 설명도 해주셨습니다. 그렇지만 시간은 세시간으로 정해져있었고 그 이상을 초과할 수는 없었습니다.</p>\n<p>그렇게 한달이 지나고 수업이 끝났을 무렵, 나는 아무것도 배우지 못했단걸 깨달았습니다. 내가 제대로 이해할 수 있는 거라곤 \"Hello Java\"와 초반에 배운 자료형이나 연산자 정도밖에 없단걸 알았지요. 처음 자바를 배우기 시작한건 친구와 구상한 사업 아이템으로 안드로이드 앱을 직접 만들어 보겠다는 막연한 생각에서부터였습니다. 처음에는 세네 달 정도 학원에 다니면 충분히 만들수 있을거라 생각했었는데, 딱 한달만에 완전히 잘못생각했었단걸 깨달았습니다. 제가 세운 막연한 계획은 정말 말도 안되는 망상이었단걸 알게된 것이죠.</p>\n<p>두 달만에 결국 학원이 무의미하단걸 깨닫고는 혼자서 공부하기 시작했습니다. 유명하다는 자바강의 서적을 구매해서 보기도 하고, 인터넷 강의도 구해도 보기도 했었습니다. 하지만, 아무 기반지식이 없는 상태에서 혼자서 새로운 개념을 이해하고 받아들인다는게 쉬운 일은 아니더라구요. 그래도 학원에 비해서 나은점은 분명 있었습니다. 학원은 정해진 커리큘럼에 따라서 정해진 시간동안 반드시 진도를 나가야 하기에 수강생들이 이해를 하고 말고의 여부는 중요한게 아니죠. 그렇기 때문에 수업에 따라가지 못하게 되면 그 이후에는 아무 의미없는 시간이 되고 맙니다. 하지만, 혼자서 독학하게 되면 사정이 조금 다르죠. 진도를 나가다가도 이해가지 않는 부분이 있다면, 시간을 두고 여러번 반복해서 학습할 수 있다는 장점이 있습니다. 처음에 이해가 안된다고 하더라도 두번, 세번 계속해서 보다보면 언젠가는 깨닫게 되는 순간이 있는 법이죠. 물론 시간이 많이 걸린다는 단점도 분명 존재합니다.</p>\n<p>그럼 어떤 학습법이 더 좋은걸까요? 만약에 저와 같은 과정을 거쳐가려는 친구가 제게 조언을 구한다면, 어떤 충고를 해줘야 할까요? 지금의 저라면, T아카데미와 같이 전문 강사의 강의에 하나의 완성된 결과물을 낼 수 있는 강의를 찾아서 수강하라고 권하고 싶네요. 과정이 어렵고 이해가지 않는 부분이 있다 하더라도 완성된 하나의 결과물이 존재한다면, 프로그래밍을 통해서 얻는 기쁨이랄까.. 그런 성취감을 느낄수 있기 때문에 학습을 지속해 나갈수 있다고 생각이 들어요. T아카데미와 같은 전문가과정을 수강하기 어려워 학원을 다녀야만 하는 경우라면, 한달짜리 단과반보다는 최소 세달 이상 결과물을 만들어낼수 있는 과정을 듣는 것이 좋다고 생각합니다. 그리고 처음부터 독학은 좀 무리라고 생각이 듭니다. 아무런 기본 지식이 없는 상태에서의 독학은 오히려 쉽게 포기하게 되버리므로, 어느정도 기반지식이 쌓은 상태에서 독학을 하는게 좋을것 같아요.</p>\n<p>여기서 T아카데미가 잠시 언급이 됐는데요. 네 그렇습니다. 다음 이야기의 주제가 바로 T아카데미입니다. 저의 첫 결과물을 만들게 해준 고마운 학교임과 동시에 프로그래밍에 재미를 붙여준 곳이기도 하지요.</p>\n<p>&nbsp;</p>\n","source":"_posts/2015-02-10-from-architect-to-progammer-5.html","raw":"---\nlayout: post\ncomments: true\ntitle: 건축에서 프로그래머로(5) – 학원 VS 독학\ndate: 2015-02-10 01:45:34.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- IT\n- 강의\n- 건축\n- 모바일\n- 안드로이드\n- 자바\n- 프로그래머\n- 프로그래밍\n- 학원\nmeta:\n  _edit_last: '1'\n  _jd_twitter: ''\n  _jd_tweet_this: 'yes'\n  _thumbnail_id: '1646'\n  dsq_thread_id: '3499918550'\n  _wpas_done_all: '1'\n  _aioseop_keywords: IT,건축,안드로이드,모바일,자바,프로그래머,프로그래밍,학원,강의\n  _wpt_short_url: ''\n  _wp_jd_target: http://www.whynhows.com/?p=1641\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:97:\"New post: 건축에서 프로그래머로(5)\n    – 학원 VS 독학 http://www.whynhows.com/?p=1641\";s:5:\"error\";s:232:\"401 Unauthorized:\n    Authentication credentials were missing or incorrect. Your Twitter application\n    does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your\n    Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1423500337;}'\n  _wpt_status_message: '401 Unauthorized: Authentication credentials were missing\n    or incorrect. Your Twitter application does not have read and write permissions.\n    Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify\n    these settings.'\n  _wpas_skip_6779368: '1'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>자바 강의를 등록하고 들어간 첫 수업날, 자바뿐 아니라 그 어떤 프로그램 언어를 다뤄본 경험도 없었기에 강사님의 말씀을 거의 알아들을 수 없었습니다. 보통 첫날에는 우리가 지금 배우는게 어떤것이며 어떻게 사용되는지 따위의 개괄적인 내용을 강의하죠. 그리고는 어떤 언어를 배우든 반드시 처음에 어떤 작은 프로그램을 짜보게 되는데요. 바로 \"Hello Wordl!!\"를 출력하는 프로그램!!!(또는 Hello Java) 당시에는 아무것도 모르고'뭐가 이렇게 간단한거지? 프로그래밍이란게 별거 없구만!!'이라고 생각했었습니다. 하지만, 하지만 말입니다. 'Hello World'이후에 강사님을 따라 이것저것 여러가지 프로그램을 한글자 한글자 타이핑 해보고 실행도 해보았습니다. 그런데 가면갈수록 머리속이 흐리멍텅해지더니 급기야 까만건 글자요 들리는건 주문이 되는 경지에 이르렀습니다. 도대체 이건 무슨 의미인거지? 어떤 원리로 실행되는거지? 그나마 그중에 한가지 알 수 있는 게 있었으니,</p>\n<p>XXXX.print(\"Hello Java\");</p>\n<p>앞에 X들은 뭔말인지 전혀 모르겠지만(강사님도 지금은 알 필요는 없다고 했습니다!!), print라는 문구를 보니 대강 \"Hello Java\"라는 문구를 츨략하라는 뜻인것 같았습니다. 실행해보니 예상한대로 콘솔(이라 불리는 어떤 영역)에 \"Hello Java\"가 출력되더라구요. 또다시 자신감 급상승!! '프로그래밍 별거 없구나' 라는 생각이 또다시 스믈스믈 기어나왔지요. 하지만 'print'를 제외하고는 다른 문자들은 정말 어느 오지의 외국어 같은 느낌뿐이었습니다. 강사님 왈, 아무것도 모르는 초보에게 처음부터 너무 많은 것을 가르쳐 주면 오히려 헷갈리니 그냥 자신이 불러주는데로 타이핑하는게 낫다는 것이었습니다. 정말인가?? 반신반의했지만, 오랫동안 강의를 해왔으니 나름의 생각이 있을거라 생각했습니다. 지금와서 생각해보면, 아마도 복잡한 문법이나 원리를 설명하기전에 우선 어떤식으로 프로그램이 작동하는지 이해하는게 먼저라고 생각했던것 같습니다. 예를들어 처음부터 '이것은 어떤 자료형의 변수고, 이건 클래스 이름이고, 이건 파라미터입니다' 따위의 말들을 했었다면 단 한마디도 알아들을 수 없었을 것입니다.</p>\n<p>두번째 날, 그리고 세번째 날이 지나면서 자료형, 변수, 배열, 메소드, 클래스 등 을 하나씩 배워갔습니다. 배열과 메소드까지는 어느정도 이해가 가능했지만, 클래스를 처음 접했을 때는 도대체 이게 뭔가 싶었지요. 클래스가 뭐고 변수가 뭔지 알고 있는 지금 그 때의 기분을 정확히 표현할 수는 없지만, 아마 중학교 1학년이 처음 수동태, 능동태를 배울때의 느낌이랄까? 클래스에 대한 이해가 전무한 상태 이후는 아무 의미 없는 시간들의 연속이었습니다. 말그대로 '쇠 귀에 경 읽기' 였죠. 몸은 학원에 나가고 있었지만, 제가 할수 있는 건 들리는 단어를 그대로 타이핑하는것뿐이었습니다. 그래도 실행은 되니깐 근근히 버틸수 있었던것 같습니다. 당시에 10대 초등학생 꼬마와 같이 강의를 들었는데, 그 친구보다 내가 못따라간다는 느낌마저 들 정도였으니 좌절의 연속이었죠.</p>\n<p>사실 18일이라는 짧은 시간(한 달 강의지만 실제 강의 일수는 18일 입니다) 동안 자바라는 언어 하나를 프로그래밍의 '프'자도 모르는 사람들에게 가르치려고 하다보니 이해를 하고 못하고는 중요한 문제가 아니었지요. 강사 입장에서는 커리큘럼에 따라서 반드시 수강생들에게 모든 강의를 해주어야 했습니다. 한달의 강의로 '학생들이 자바를 알고 자바 프로그램을 작성할 수 있게 되었다'는 사실은 학원에게는 중요한 관심사가 아니었습니다. 단지 몇명의 학생이 등록했고, 다음 달에는 또 몇명이 등록할지가 주요 관심사였죠. 한명을 유치함에 따라서 학원이 얻는 이익은 결코 작지 않았기 때문이겠죠. 그래도 강사님은 나름대로 열심히 가르쳐 주었습니다. 질문을 하면 최대한 이해가 가능하도록 설명해 주었고, 이해를 할 때까지 몇번이고 반복해서 설명도 해주셨습니다. 그렇지만 시간은 세시간으로 정해져있었고 그 이상을 초과할 수는 없었습니다.</p>\n<p>그렇게 한달이 지나고 수업이 끝났을 무렵, 나는 아무것도 배우지 못했단걸 깨달았습니다. 내가 제대로 이해할 수 있는 거라곤 \"Hello Java\"와 초반에 배운 자료형이나 연산자 정도밖에 없단걸 알았지요. 처음 자바를 배우기 시작한건 친구와 구상한 사업 아이템으로 안드로이드 앱을 직접 만들어 보겠다는 막연한 생각에서부터였습니다. 처음에는 세네 달 정도 학원에 다니면 충분히 만들수 있을거라 생각했었는데, 딱 한달만에 완전히 잘못생각했었단걸 깨달았습니다. 제가 세운 막연한 계획은 정말 말도 안되는 망상이었단걸 알게된 것이죠.</p>\n<p>두 달만에 결국 학원이 무의미하단걸 깨닫고는 혼자서 공부하기 시작했습니다. 유명하다는 자바강의 서적을 구매해서 보기도 하고, 인터넷 강의도 구해도 보기도 했었습니다. 하지만, 아무 기반지식이 없는 상태에서 혼자서 새로운 개념을 이해하고 받아들인다는게 쉬운 일은 아니더라구요. 그래도 학원에 비해서 나은점은 분명 있었습니다. 학원은 정해진 커리큘럼에 따라서 정해진 시간동안 반드시 진도를 나가야 하기에 수강생들이 이해를 하고 말고의 여부는 중요한게 아니죠. 그렇기 때문에 수업에 따라가지 못하게 되면 그 이후에는 아무 의미없는 시간이 되고 맙니다. 하지만, 혼자서 독학하게 되면 사정이 조금 다르죠. 진도를 나가다가도 이해가지 않는 부분이 있다면, 시간을 두고 여러번 반복해서 학습할 수 있다는 장점이 있습니다. 처음에 이해가 안된다고 하더라도 두번, 세번 계속해서 보다보면 언젠가는 깨닫게 되는 순간이 있는 법이죠. 물론 시간이 많이 걸린다는 단점도 분명 존재합니다.</p>\n<p>그럼 어떤 학습법이 더 좋은걸까요? 만약에 저와 같은 과정을 거쳐가려는 친구가 제게 조언을 구한다면, 어떤 충고를 해줘야 할까요? 지금의 저라면, T아카데미와 같이 전문 강사의 강의에 하나의 완성된 결과물을 낼 수 있는 강의를 찾아서 수강하라고 권하고 싶네요. 과정이 어렵고 이해가지 않는 부분이 있다 하더라도 완성된 하나의 결과물이 존재한다면, 프로그래밍을 통해서 얻는 기쁨이랄까.. 그런 성취감을 느낄수 있기 때문에 학습을 지속해 나갈수 있다고 생각이 들어요. T아카데미와 같은 전문가과정을 수강하기 어려워 학원을 다녀야만 하는 경우라면, 한달짜리 단과반보다는 최소 세달 이상 결과물을 만들어낼수 있는 과정을 듣는 것이 좋다고 생각합니다. 그리고 처음부터 독학은 좀 무리라고 생각이 듭니다. 아무런 기본 지식이 없는 상태에서의 독학은 오히려 쉽게 포기하게 되버리므로, 어느정도 기반지식이 쌓은 상태에서 독학을 하는게 좋을것 같아요.</p>\n<p>여기서 T아카데미가 잠시 언급이 됐는데요. 네 그렇습니다. 다음 이야기의 주제가 바로 T아카데미입니다. 저의 첫 결과물을 만들게 해준 고마운 학교임과 동시에 프로그래밍에 재미를 붙여준 곳이기도 하지요.</p>\n<p>&nbsp;</p>\n","slug":"2015-02-10-from-architect-to-progammer-5","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6o000xwxt454r5pexb","content":"<p>자바 강의를 등록하고 들어간 첫 수업날, 자바뿐 아니라 그 어떤 프로그램 언어를 다뤄본 경험도 없었기에 강사님의 말씀을 거의 알아들을 수 없었습니다. 보통 첫날에는 우리가 지금 배우는게 어떤것이며 어떻게 사용되는지 따위의 개괄적인 내용을 강의하죠. 그리고는 어떤 언어를 배우든 반드시 처음에 어떤 작은 프로그램을 짜보게 되는데요. 바로 \"Hello Wordl!!\"를 출력하는 프로그램!!!(또는 Hello Java) 당시에는 아무것도 모르고'뭐가 이렇게 간단한거지? 프로그래밍이란게 별거 없구만!!'이라고 생각했었습니다. 하지만, 하지만 말입니다. 'Hello World'이후에 강사님을 따라 이것저것 여러가지 프로그램을 한글자 한글자 타이핑 해보고 실행도 해보았습니다. 그런데 가면갈수록 머리속이 흐리멍텅해지더니 급기야 까만건 글자요 들리는건 주문이 되는 경지에 이르렀습니다. 도대체 이건 무슨 의미인거지? 어떤 원리로 실행되는거지? 그나마 그중에 한가지 알 수 있는 게 있었으니,</p><p>XXXX.print(\"Hello Java\");</p><p>앞에 X들은 뭔말인지 전혀 모르겠지만(강사님도 지금은 알 필요는 없다고 했습니다!!), print라는 문구를 보니 대강 \"Hello Java\"라는 문구를 츨략하라는 뜻인것 같았습니다. 실행해보니 예상한대로 콘솔(이라 불리는 어떤 영역)에 \"Hello Java\"가 출력되더라구요. 또다시 자신감 급상승!! '프로그래밍 별거 없구나' 라는 생각이 또다시 스믈스믈 기어나왔지요. 하지만 'print'를 제외하고는 다른 문자들은 정말 어느 오지의 외국어 같은 느낌뿐이었습니다. 강사님 왈, 아무것도 모르는 초보에게 처음부터 너무 많은 것을 가르쳐 주면 오히려 헷갈리니 그냥 자신이 불러주는데로 타이핑하는게 낫다는 것이었습니다. 정말인가?? 반신반의했지만, 오랫동안 강의를 해왔으니 나름의 생각이 있을거라 생각했습니다. 지금와서 생각해보면, 아마도 복잡한 문법이나 원리를 설명하기전에 우선 어떤식으로 프로그램이 작동하는지 이해하는게 먼저라고 생각했던것 같습니다. 예를들어 처음부터 '이것은 어떤 자료형의 변수고, 이건 클래스 이름이고, 이건 파라미터입니다' 따위의 말들을 했었다면 단 한마디도 알아들을 수 없었을 것입니다.</p><p>두번째 날, 그리고 세번째 날이 지나면서 자료형, 변수, 배열, 메소드, 클래스 등 을 하나씩 배워갔습니다. 배열과 메소드까지는 어느정도 이해가 가능했지만, 클래스를 처음 접했을 때는 도대체 이게 뭔가 싶었지요. 클래스가 뭐고 변수가 뭔지 알고 있는 지금 그 때의 기분을 정확히 표현할 수는 없지만, 아마 중학교 1학년이 처음 수동태, 능동태를 배울때의 느낌이랄까? 클래스에 대한 이해가 전무한 상태 이후는 아무 의미 없는 시간들의 연속이었습니다. 말그대로 '쇠 귀에 경 읽기' 였죠. 몸은 학원에 나가고 있었지만, 제가 할수 있는 건 들리는 단어를 그대로 타이핑하는것뿐이었습니다. 그래도 실행은 되니깐 근근히 버틸수 있었던것 같습니다. 당시에 10대 초등학생 꼬마와 같이 강의를 들었는데, 그 친구보다 내가 못따라간다는 느낌마저 들 정도였으니 좌절의 연속이었죠.</p><p>사실 18일이라는 짧은 시간(한 달 강의지만 실제 강의 일수는 18일 입니다) 동안 자바라는 언어 하나를 프로그래밍의 '프'자도 모르는 사람들에게 가르치려고 하다보니 이해를 하고 못하고는 중요한 문제가 아니었지요. 강사 입장에서는 커리큘럼에 따라서 반드시 수강생들에게 모든 강의를 해주어야 했습니다. 한달의 강의로 '학생들이 자바를 알고 자바 프로그램을 작성할 수 있게 되었다'는 사실은 학원에게는 중요한 관심사가 아니었습니다. 단지 몇명의 학생이 등록했고, 다음 달에는 또 몇명이 등록할지가 주요 관심사였죠. 한명을 유치함에 따라서 학원이 얻는 이익은 결코 작지 않았기 때문이겠죠. 그래도 강사님은 나름대로 열심히 가르쳐 주었습니다. 질문을 하면 최대한 이해가 가능하도록 설명해 주었고, 이해를 할 때까지 몇번이고 반복해서 설명도 해주셨습니다. 그렇지만 시간은 세시간으로 정해져있었고 그 이상을 초과할 수는 없었습니다.</p><p>그렇게 한달이 지나고 수업이 끝났을 무렵, 나는 아무것도 배우지 못했단걸 깨달았습니다. 내가 제대로 이해할 수 있는 거라곤 \"Hello Java\"와 초반에 배운 자료형이나 연산자 정도밖에 없단걸 알았지요. 처음 자바를 배우기 시작한건 친구와 구상한 사업 아이템으로 안드로이드 앱을 직접 만들어 보겠다는 막연한 생각에서부터였습니다. 처음에는 세네 달 정도 학원에 다니면 충분히 만들수 있을거라 생각했었는데, 딱 한달만에 완전히 잘못생각했었단걸 깨달았습니다. 제가 세운 막연한 계획은 정말 말도 안되는 망상이었단걸 알게된 것이죠.</p><p>두 달만에 결국 학원이 무의미하단걸 깨닫고는 혼자서 공부하기 시작했습니다. 유명하다는 자바강의 서적을 구매해서 보기도 하고, 인터넷 강의도 구해도 보기도 했었습니다. 하지만, 아무 기반지식이 없는 상태에서 혼자서 새로운 개념을 이해하고 받아들인다는게 쉬운 일은 아니더라구요. 그래도 학원에 비해서 나은점은 분명 있었습니다. 학원은 정해진 커리큘럼에 따라서 정해진 시간동안 반드시 진도를 나가야 하기에 수강생들이 이해를 하고 말고의 여부는 중요한게 아니죠. 그렇기 때문에 수업에 따라가지 못하게 되면 그 이후에는 아무 의미없는 시간이 되고 맙니다. 하지만, 혼자서 독학하게 되면 사정이 조금 다르죠. 진도를 나가다가도 이해가지 않는 부분이 있다면, 시간을 두고 여러번 반복해서 학습할 수 있다는 장점이 있습니다. 처음에 이해가 안된다고 하더라도 두번, 세번 계속해서 보다보면 언젠가는 깨닫게 되는 순간이 있는 법이죠. 물론 시간이 많이 걸린다는 단점도 분명 존재합니다.</p><p>그럼 어떤 학습법이 더 좋은걸까요? 만약에 저와 같은 과정을 거쳐가려는 친구가 제게 조언을 구한다면, 어떤 충고를 해줘야 할까요? 지금의 저라면, T아카데미와 같이 전문 강사의 강의에 하나의 완성된 결과물을 낼 수 있는 강의를 찾아서 수강하라고 권하고 싶네요. 과정이 어렵고 이해가지 않는 부분이 있다 하더라도 완성된 하나의 결과물이 존재한다면, 프로그래밍을 통해서 얻는 기쁨이랄까.. 그런 성취감을 느낄수 있기 때문에 학습을 지속해 나갈수 있다고 생각이 들어요. T아카데미와 같은 전문가과정을 수강하기 어려워 학원을 다녀야만 하는 경우라면, 한달짜리 단과반보다는 최소 세달 이상 결과물을 만들어낼수 있는 과정을 듣는 것이 좋다고 생각합니다. 그리고 처음부터 독학은 좀 무리라고 생각이 듭니다. 아무런 기본 지식이 없는 상태에서의 독학은 오히려 쉽게 포기하게 되버리므로, 어느정도 기반지식이 쌓은 상태에서 독학을 하는게 좋을것 같아요.</p><p>여기서 T아카데미가 잠시 언급이 됐는데요. 네 그렇습니다. 다음 이야기의 주제가 바로 T아카데미입니다. 저의 첫 결과물을 만들게 해준 고마운 학교임과 동시에 프로그래밍에 재미를 붙여준 곳이기도 하지요.</p><p>&nbsp;</p>","excerpt":"","more":"<p>자바 강의를 등록하고 들어간 첫 수업날, 자바뿐 아니라 그 어떤 프로그램 언어를 다뤄본 경험도 없었기에 강사님의 말씀을 거의 알아들을 수 없었습니다. 보통 첫날에는 우리가 지금 배우는게 어떤것이며 어떻게 사용되는지 따위의 개괄적인 내용을 강의하죠. 그리고는 어떤 언어를 배우든 반드시 처음에 어떤 작은 프로그램을 짜보게 되는데요. 바로 \"Hello Wordl!!\"를 출력하는 프로그램!!!(또는 Hello Java) 당시에는 아무것도 모르고'뭐가 이렇게 간단한거지? 프로그래밍이란게 별거 없구만!!'이라고 생각했었습니다. 하지만, 하지만 말입니다. 'Hello World'이후에 강사님을 따라 이것저것 여러가지 프로그램을 한글자 한글자 타이핑 해보고 실행도 해보았습니다. 그런데 가면갈수록 머리속이 흐리멍텅해지더니 급기야 까만건 글자요 들리는건 주문이 되는 경지에 이르렀습니다. 도대체 이건 무슨 의미인거지? 어떤 원리로 실행되는거지? 그나마 그중에 한가지 알 수 있는 게 있었으니,</p><p>XXXX.print(\"Hello Java\");</p><p>앞에 X들은 뭔말인지 전혀 모르겠지만(강사님도 지금은 알 필요는 없다고 했습니다!!), print라는 문구를 보니 대강 \"Hello Java\"라는 문구를 츨략하라는 뜻인것 같았습니다. 실행해보니 예상한대로 콘솔(이라 불리는 어떤 영역)에 \"Hello Java\"가 출력되더라구요. 또다시 자신감 급상승!! '프로그래밍 별거 없구나' 라는 생각이 또다시 스믈스믈 기어나왔지요. 하지만 'print'를 제외하고는 다른 문자들은 정말 어느 오지의 외국어 같은 느낌뿐이었습니다. 강사님 왈, 아무것도 모르는 초보에게 처음부터 너무 많은 것을 가르쳐 주면 오히려 헷갈리니 그냥 자신이 불러주는데로 타이핑하는게 낫다는 것이었습니다. 정말인가?? 반신반의했지만, 오랫동안 강의를 해왔으니 나름의 생각이 있을거라 생각했습니다. 지금와서 생각해보면, 아마도 복잡한 문법이나 원리를 설명하기전에 우선 어떤식으로 프로그램이 작동하는지 이해하는게 먼저라고 생각했던것 같습니다. 예를들어 처음부터 '이것은 어떤 자료형의 변수고, 이건 클래스 이름이고, 이건 파라미터입니다' 따위의 말들을 했었다면 단 한마디도 알아들을 수 없었을 것입니다.</p><p>두번째 날, 그리고 세번째 날이 지나면서 자료형, 변수, 배열, 메소드, 클래스 등 을 하나씩 배워갔습니다. 배열과 메소드까지는 어느정도 이해가 가능했지만, 클래스를 처음 접했을 때는 도대체 이게 뭔가 싶었지요. 클래스가 뭐고 변수가 뭔지 알고 있는 지금 그 때의 기분을 정확히 표현할 수는 없지만, 아마 중학교 1학년이 처음 수동태, 능동태를 배울때의 느낌이랄까? 클래스에 대한 이해가 전무한 상태 이후는 아무 의미 없는 시간들의 연속이었습니다. 말그대로 '쇠 귀에 경 읽기' 였죠. 몸은 학원에 나가고 있었지만, 제가 할수 있는 건 들리는 단어를 그대로 타이핑하는것뿐이었습니다. 그래도 실행은 되니깐 근근히 버틸수 있었던것 같습니다. 당시에 10대 초등학생 꼬마와 같이 강의를 들었는데, 그 친구보다 내가 못따라간다는 느낌마저 들 정도였으니 좌절의 연속이었죠.</p><p>사실 18일이라는 짧은 시간(한 달 강의지만 실제 강의 일수는 18일 입니다) 동안 자바라는 언어 하나를 프로그래밍의 '프'자도 모르는 사람들에게 가르치려고 하다보니 이해를 하고 못하고는 중요한 문제가 아니었지요. 강사 입장에서는 커리큘럼에 따라서 반드시 수강생들에게 모든 강의를 해주어야 했습니다. 한달의 강의로 '학생들이 자바를 알고 자바 프로그램을 작성할 수 있게 되었다'는 사실은 학원에게는 중요한 관심사가 아니었습니다. 단지 몇명의 학생이 등록했고, 다음 달에는 또 몇명이 등록할지가 주요 관심사였죠. 한명을 유치함에 따라서 학원이 얻는 이익은 결코 작지 않았기 때문이겠죠. 그래도 강사님은 나름대로 열심히 가르쳐 주었습니다. 질문을 하면 최대한 이해가 가능하도록 설명해 주었고, 이해를 할 때까지 몇번이고 반복해서 설명도 해주셨습니다. 그렇지만 시간은 세시간으로 정해져있었고 그 이상을 초과할 수는 없었습니다.</p><p>그렇게 한달이 지나고 수업이 끝났을 무렵, 나는 아무것도 배우지 못했단걸 깨달았습니다. 내가 제대로 이해할 수 있는 거라곤 \"Hello Java\"와 초반에 배운 자료형이나 연산자 정도밖에 없단걸 알았지요. 처음 자바를 배우기 시작한건 친구와 구상한 사업 아이템으로 안드로이드 앱을 직접 만들어 보겠다는 막연한 생각에서부터였습니다. 처음에는 세네 달 정도 학원에 다니면 충분히 만들수 있을거라 생각했었는데, 딱 한달만에 완전히 잘못생각했었단걸 깨달았습니다. 제가 세운 막연한 계획은 정말 말도 안되는 망상이었단걸 알게된 것이죠.</p><p>두 달만에 결국 학원이 무의미하단걸 깨닫고는 혼자서 공부하기 시작했습니다. 유명하다는 자바강의 서적을 구매해서 보기도 하고, 인터넷 강의도 구해도 보기도 했었습니다. 하지만, 아무 기반지식이 없는 상태에서 혼자서 새로운 개념을 이해하고 받아들인다는게 쉬운 일은 아니더라구요. 그래도 학원에 비해서 나은점은 분명 있었습니다. 학원은 정해진 커리큘럼에 따라서 정해진 시간동안 반드시 진도를 나가야 하기에 수강생들이 이해를 하고 말고의 여부는 중요한게 아니죠. 그렇기 때문에 수업에 따라가지 못하게 되면 그 이후에는 아무 의미없는 시간이 되고 맙니다. 하지만, 혼자서 독학하게 되면 사정이 조금 다르죠. 진도를 나가다가도 이해가지 않는 부분이 있다면, 시간을 두고 여러번 반복해서 학습할 수 있다는 장점이 있습니다. 처음에 이해가 안된다고 하더라도 두번, 세번 계속해서 보다보면 언젠가는 깨닫게 되는 순간이 있는 법이죠. 물론 시간이 많이 걸린다는 단점도 분명 존재합니다.</p><p>그럼 어떤 학습법이 더 좋은걸까요? 만약에 저와 같은 과정을 거쳐가려는 친구가 제게 조언을 구한다면, 어떤 충고를 해줘야 할까요? 지금의 저라면, T아카데미와 같이 전문 강사의 강의에 하나의 완성된 결과물을 낼 수 있는 강의를 찾아서 수강하라고 권하고 싶네요. 과정이 어렵고 이해가지 않는 부분이 있다 하더라도 완성된 하나의 결과물이 존재한다면, 프로그래밍을 통해서 얻는 기쁨이랄까.. 그런 성취감을 느낄수 있기 때문에 학습을 지속해 나갈수 있다고 생각이 들어요. T아카데미와 같은 전문가과정을 수강하기 어려워 학원을 다녀야만 하는 경우라면, 한달짜리 단과반보다는 최소 세달 이상 결과물을 만들어낼수 있는 과정을 듣는 것이 좋다고 생각합니다. 그리고 처음부터 독학은 좀 무리라고 생각이 듭니다. 아무런 기본 지식이 없는 상태에서의 독학은 오히려 쉽게 포기하게 되버리므로, 어느정도 기반지식이 쌓은 상태에서 독학을 하는게 좋을것 같아요.</p><p>여기서 T아카데미가 잠시 언급이 됐는데요. 네 그렇습니다. 다음 이야기의 주제가 바로 T아카데미입니다. 저의 첫 결과물을 만들게 해준 고마운 학교임과 동시에 프로그래밍에 재미를 붙여준 곳이기도 하지요.</p><p>&nbsp;</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(7) – 안드로이드 앱을 만들자!!","date":"2015-03-28T07:19:50.000Z","_content":"\n안드로이드 개발 전문가 과정에 합격했지만, 올레 에코노베이션과 마찬가지로 T아카데미에서도 선수과목이 필요했습니다. 그것도 에코노베이션과 똑같은 3일짜리 자바 고급강의!! 그 때의 기억이 떠오르면서 합격했다는 뿌듯함과 자신감은 사라지고 또다시 불안감이 저를 휘감았습니다. 하지만 어쩌겠습니까? 또다시 지난번처럼 도망쳐버리기에는 돌아갈 곳도 없는 상황에서 사치에 불과하다는걸 알고 있었습니다. 그래서 일단 부딪혀보자는 마음을 가지고 면접때와 같이 낙성대 역에서 마을버스에 올랐습니다. 도착한 T아카데미, 배정받은 강의실로 들어가 일단 앞쪽에 자리를 잡았습니다. 그러고는 주위를 둘러봤습니다. 대부분 저보다는 어린 대학생들처럼 보였습니다. 그 친구들을 둘러보면서, 지금 실력이 저 어린 친구들보다 훨씬 떨어진다는 생각에 자신이 더욱 작게 느껴졌습니다. 혼자 감상에 빠져있다가 강의가 시작될 무렵, 강의실 앞으로 형님처럼 보이는 한 분이 헐레벌떡 강의실에 도착했고, 마침 비어있던 제 옆자리에 자리를 잡으셨습니다. 훗날 이 만남은 제게 큰 힘이 되는데요. 좀 과장해서 말하면, 이 형님이 없었다면 아마 저는 안드로이드 전문가 과정에서 중도 하차하지 않았을까 생각할 정도랍니다.\n\n자바 고급 강의가 시작되었고, 시간이 점점 흐르면서 에코노베이션과는 뭔가 다름을 느꼈습니다. 사실 안드로이드를 위한 자바 고급 강의에서 DAO와 DTO와 같은 자바 서블릿에서나 사용하는 개념들이 등장할 필요가 없지요. 안드로이드 앱을 만들때도 DB를 다루고 쿼리를 다루지만, 그렇게 중요하지는 않다고 생각합니다. 이런 관점에서 T아카데미에서 진행하는 자바 강의는 정말 딱 필요하다 싶을 정도의 내용들로 이뤄졌습니다. 주로 인터페이스와 상속 구조 및 사용하는 방법이나 각종 자료구조의 응용 등의 내용이었습니다. 학원에서 배웠던 내용, 혼자서 자바 서적을 탐독하면서 익혔던 개념들이 살아나면서 이해가 되기 시작했지요. 물론 완벽하진 못했습니다. TreeMap이나 TreeSet 등 잘 접해보지 못했던 자료구조를 배울때나 강사님이 내준 과제를 해결하는데는 주변 사람의 도움이 필요했었습니다. 이 때 바로 옆에 앉아 계시던 형님의 역할이 컸습니다. 제가 이해하지 못하고 있거나 과제를 진행하지 못하고 있을때는 친절하게 먼저 문제가 뭔지 물어봐주셨고, 친절하게 설명해주셨지요. 많은 도움이 됐습니다. 이후에는 모르는 문제가 생겨도 의지할곳이 있다고 생각하니 에코노베이션에서 강의를 들을때처럼 당황스럽지도 않았고 마음에는 안정감이 생겼죠. \n\n그렇게 무사히 3일의 자바 고급강의를 마치고 돌아오는 월요일부터 본격적으로 안드로이드 강좌에 돌입했습니다. 안드로이드는 완전 처음이었죠. 관련 책을 구매해서 한번 훝어본적은 있지만, 아직까지 완전히 처음이라고 볼수 있는 정도였지요. 개발하시는분들은 다들 아시겠지만, 안드로이드 응용프로그램은 JAVA를 기반으로 만들어졌습니다. 물론 자바 JVM(자바가상머신) 대신 달빅이라는 모바일에 최적화된 가상머신을 사용하고 있지요. 안드로이드가 자바 기반으로 이뤄져 있지만, 사실상 자바와는 별도로 동작한다고 봐도 무방하다 생각합니다.\n\n안드로이드 전문가 과정은 두달간 진행되었습니다. 그 중 한달은 안드로이드 이론과 개념에 대한 강의로 진행되었고, 나머지 한달은 실제 프로젝트를 만드는 것으로 진행되었습니다. 안드로이드를 배우는 기간 동안은 학원에서는 절대로 느끼지 못했던 프로그래밍의 재미에 대해서 알게 되었지요. T아카데미에서는 강의실 공간을 수강생들을 위해 밤늦게까지 개방해서 강의와 프로젝트에 집중하여 작업할 수 있도록 배려해 주었고, 덕분에 이해가지 않는 부분이 발생하거나 문제가 생겼을 때 강의실에 남아있던 형님과 동생들과 함께 문제를 해결해 나갈수 있었죠. 힘들때도 있었습니다. 도무지 개념이 이해가지 않을 때는 내가 프로그래밍과 맞지 않은건 아닌지 고민하기도 했고, 진지하게 중간에 그만둘까 생각해보기도 했습니다. 하지만, 강사님 주변의 강의를 같이 듣던 친구들덕에 꿋꿋하게 버틸수 있었지요.\n\n그렇게 한달동안 이론강의를 들었지만, 이정도로 과연 내가 앱을 만들 수 있는지 의심이 들긴 했습니다. 아무리 한달내내 안드로이드 강의를 듣고 실습을 했다하더라도 온전한 하나의 프로그램(앱)을 만드는데는 이론의 이해만으로는 부족할거라 생각했지요. 가령 어떤 기능을 만드려면 나름의 설계와 시나리오가 필요합니다. 하지만 이건 이론을 이해했다고 잘 할수 있는건 아닙니다. 댜수의 프로그래밍 경험을 통한 문제해결능력을 키워야지만 가능하지요. 저는 다른 친구들에 비해서 이런 경험이 턱없이 부족했습니다. 부족한게 아니라 아예 없었죠. 그래서 저는 모든게 처음이었습니다. \n\n우선 어떤 앱을 만들것인지 결정하고 기획서를 작성한 뒤 DB설계, 클래스 설계 등의 과정을 거치고 드디어 실제로 코딩을 할 시간이 다가왔습니다. 기획서에 작성한것처럼 어떤 기능을 구현해야 하는데 당췌 뭐부터 시작해서 진행해야할지 막막하더군요. 옆에 계신 형님께 이런 고충을 말하니 일단 원하는 기능이 있다면 구글 검색을 해보라는 것이었습니다. 그래서 말 그대로 관련 기능에 대해 검색해봤습니다. 최대한 비슷한 형태로 구글검색을 해보니 대부분은 구글이 답을 주더군요!! 완전 신세계였어요. 검색을 통해서 하나하나 찾아가다보니 어느정도 구색이 맞춰졌습니다. 기본적인 기능에 대해서는 대부분 구글을 통해서 찾아보고 그래도 모르는게 생겨면 옆에 계신 형님께 도움을 구했지요. 사실 그 형님도 배우러 오신거고 본인 프로젝트 진행하기에도 바쁠텐데 저 같은 완전 초보 옆에 앉은 죄(?)로 시간을 많이 뺏기셨지요. 그래도 항상 친절하게 알려주셨습니다. \n\n위에서 잠깐 언급했지만, T아카데미 전문가 과정은 정말 알찬 강의입니다. 한달간 이론을 배운 뒤 프로젝트를 진행합니다. 아마 일반 학원이었으면 프로젝트의 완성만을 목표로 삼았을겁니다. 프로젝트의 질이라던가 평가 같은 과정은 생략되거나 간소화했겠죠. 하지만 T아카데미는 프로젝트 선정과정에서부터 우선 다양한 아이디어를 내고 그 중에 정말 마켓에서 팔릴만한 아이템을 선정합니다. 그리고 그 아이디어가 수강생의 수준에 맞춰서 정말 한달안에 완성할 수 있는지를 판단하고 최종 결정합니다. 아이디어가 결정되면 클래스 다이어그램, DB설계 등의 과정을 거치게 됩니다. 이런 과정을 모두 수행하는데 꼬박 일주일이 소요됩니다. 한달동안 프로젝트를 진행하는데 일주일이면 아주 긴 시간입니다. 약 1/4의 시간을 소비하는 것이니까요. 그리고 나머지 3/4의 시간을 모두 코딩의 시간으로 할애할 수도 없습니다. 마지막 1주일은 디자인을 입히고 발표준비를 하는 등의 시간으로 할애해야하기 때문에 실제로 코딩 가능한 시간은 약 2주정도 밖에 안되죠. 그러다보니 큰 규모의 프로젝트를 진행하기는 힘듭니다. 또 서버통신이 필요한 기능은 모두 제외하고 오로지 앱 상에서 모든 기능을 구현해야 했지요. 2주동안에 실제 코딩을 완료하려고 하다보니 시간이 많이 촉박했습니다. 밤새는건 기본이고 주말도 모두 코딩에 힘을 쏟았습니다. \n\n어느덧 3주가 지나고 마지막 1주가 남았습니다. 그러나 아직도 미완성. 계속해서 코딩에 시간을 할애할 수밖에 없었습니다. 다행인것은 건축학을 전공해서 디자인에 대해서는 전혀 부담이 없었습니다. 다른 친구들은 디자인 때문에 며칠간 골머리를 앓아도 저는 거의 하루 정도만에 디자인을 끝낼 수 있었지요. 그래서 코딩에 시간을 더 할애할 수 있었습니다. 코딩만으로도 시간이 부족했던 저는 코딩에 대해서 다른 친구들에게 물어본 대신 저는 디자인 방법이나 포토샵 다루는 법에 대해서 알려주면서 서로 도움을 주었습니다.\n\n제가 만든 앱은 '좋은습관만들기(Habit Maker)'라는 이름의 습관 관리 앱이었습니다. 좋은 습관을 들이고 싶은데 항상 신경을 쓰고 살 수는 없는 바쁜 현대인들을 위해서 일정시간 간격을 설정해두면 그 시간이 되서 알림 푸시를 날려주죠. 그러면 사용자는 푸시를 클릭해서 앱에 접속하여 습관을 실행했음을 알리는 체크를 하고 그 결과를 다양한 통계로 보여줍니다. \n\n한달의 시간이 끝나고 완벽한 수준의 결과물은 아니었지만 드디어 원하는 기능이 동작하는 앱을 완성하게 되었습니다. 감격의 기쁨!! 뭔가 해냈다는 느낌이 들었지요. 덜달아 개발에 대한 자신감도 상승했습니다. 마지막으로 결과물에 대한 발표와 평가의 시간이 남았습니다. 발표는 앱을 만들게 된 배경부터 앱에 대한 시연까지 대략 15분정도의 시간동안 진행합니다. 그리고 평가는 우리 강사님만 하시는게 아니라, 외부에서 몇분의 심사위원을 초청해서 평가하죠. 그렇다보니 허술하게 대충 준비할 수는 없었습니다. 강사님도 자신이 가르친 수강생들의 결과를 발표시키는 입장이되다 보니 그 어느때보다 많은 신경을 써주셨습니다. 초시계를 들고 발표시간을 조정해주기도 하시고, 발표 과정에 대해서도 조언해 주셨습니다. 저는 나름 아이디어에 자신감이 있었고 발표하는걸 꺼리는 성격은 아니다보니 즐겁게 발표준비를 할 수 있었습니다. 발표전날은 집에도 못가고 밤새 준비했었죠. 다들 그랬습니다. 누구하나 자기 앱에 대해 애정이 없는 친구가 단 한명도 없었기 때문이죠. 그래서 다들 피곤했지만 표정은 밝았습니다. \n\n긴장되는 마음으로 발표를 시작했고, 시간이 지나가는 것도 모를정도로 빠르게 발표를 무사히 끝냈습니다. 코딩 과정에서 가끔 앱에 버그가 발생했었는데, 시연할 때 나오면 어쩌지 하고 조마조마했었는데, 다행히 잘 작동했습니다. 다음날, 결과가 발표됐는데 결과에 경악할수 밖에 없었습니다. 1등!!! '와~ 내가 일등이라니!!!'. 말도 안되는 일이 벌어졌습니다. 같이 수강한 20명 중에서 제가 1등을 차지한 것입니다. 뿌듯함이나 대견한 마음보다는 같이 고생한 친구들에게 미안한 마음이 먼저 들더라구요. 내가 가장 많은 도움을 받았고, 내 개발 실력이 가장 형편없는데도 제가 1등을 한것이 미안했습니다. 개발 실력보다는 아이디어가 좋아서 수상을 하게 된거라 생각했습니다. 우리반 친구들 모두 축하를 해주었고, 여러 전문가 과정을 마치는 행사에서 SK플래닛 대표님 앞에서 시연을 끝으로 2달간의 과정을 모두 마치게 되었습니다.\n\n이 두 달은 제 인생의 가장 큰 터닝포인트였습니다. 거의 6~7년간 건축 하나만을 바라보면서 살아왔던 제가 고작 두 달만에 완전 다른 길로 접어들게 된 것입니다. 학원이나 다른 기관에서 두달을 보냈다면, 이런 성과는 없었을거라 확신합니다. T아카데미에서의 모든 상황이 저에게 긍정적으로 작용했습니다. 옆에 앉은 형님, 같이 수강했던 친구들, 강사님, T아카데미 직원분들, 이 모든 요소들이 제 주변에 한꺼번에 일어났기 때문에 이런 성과를 낼 수 있었습니다. T아카데미를 수료한 뒤로는 이제 저는 개발자가 되어도 좋다는 생각을 했습니다. 이전에는 개발을 오로지 사업을 실현시키기 위한 수단 정도로 시작했었는데, 이 두 달을 통해서 개발자로서의 길을 걸어보기로 결정한 것이죠. 그렇다고 사업을 하겠다는 생각을 완전히 접은것은 아니지만, 단지 개발자로서도 한번 살아봐도 좋을것 같다는 생각이 처음 들었던 것입니다. \n\n그리고, 한달뒤 어느 회사에 취업하게 되었습니다. 이 이야기는 다음에 이어서~^^\n","source":"_posts/2015-03-28-from-architect-to-programmer-7.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"건축에서 프로그래머로(7) – 안드로이드 앱을 만들자!!\"\ncategories: essay\ndate:   2015-03-28 16:19:50 +0900\n---\n\n안드로이드 개발 전문가 과정에 합격했지만, 올레 에코노베이션과 마찬가지로 T아카데미에서도 선수과목이 필요했습니다. 그것도 에코노베이션과 똑같은 3일짜리 자바 고급강의!! 그 때의 기억이 떠오르면서 합격했다는 뿌듯함과 자신감은 사라지고 또다시 불안감이 저를 휘감았습니다. 하지만 어쩌겠습니까? 또다시 지난번처럼 도망쳐버리기에는 돌아갈 곳도 없는 상황에서 사치에 불과하다는걸 알고 있었습니다. 그래서 일단 부딪혀보자는 마음을 가지고 면접때와 같이 낙성대 역에서 마을버스에 올랐습니다. 도착한 T아카데미, 배정받은 강의실로 들어가 일단 앞쪽에 자리를 잡았습니다. 그러고는 주위를 둘러봤습니다. 대부분 저보다는 어린 대학생들처럼 보였습니다. 그 친구들을 둘러보면서, 지금 실력이 저 어린 친구들보다 훨씬 떨어진다는 생각에 자신이 더욱 작게 느껴졌습니다. 혼자 감상에 빠져있다가 강의가 시작될 무렵, 강의실 앞으로 형님처럼 보이는 한 분이 헐레벌떡 강의실에 도착했고, 마침 비어있던 제 옆자리에 자리를 잡으셨습니다. 훗날 이 만남은 제게 큰 힘이 되는데요. 좀 과장해서 말하면, 이 형님이 없었다면 아마 저는 안드로이드 전문가 과정에서 중도 하차하지 않았을까 생각할 정도랍니다.\n\n자바 고급 강의가 시작되었고, 시간이 점점 흐르면서 에코노베이션과는 뭔가 다름을 느꼈습니다. 사실 안드로이드를 위한 자바 고급 강의에서 DAO와 DTO와 같은 자바 서블릿에서나 사용하는 개념들이 등장할 필요가 없지요. 안드로이드 앱을 만들때도 DB를 다루고 쿼리를 다루지만, 그렇게 중요하지는 않다고 생각합니다. 이런 관점에서 T아카데미에서 진행하는 자바 강의는 정말 딱 필요하다 싶을 정도의 내용들로 이뤄졌습니다. 주로 인터페이스와 상속 구조 및 사용하는 방법이나 각종 자료구조의 응용 등의 내용이었습니다. 학원에서 배웠던 내용, 혼자서 자바 서적을 탐독하면서 익혔던 개념들이 살아나면서 이해가 되기 시작했지요. 물론 완벽하진 못했습니다. TreeMap이나 TreeSet 등 잘 접해보지 못했던 자료구조를 배울때나 강사님이 내준 과제를 해결하는데는 주변 사람의 도움이 필요했었습니다. 이 때 바로 옆에 앉아 계시던 형님의 역할이 컸습니다. 제가 이해하지 못하고 있거나 과제를 진행하지 못하고 있을때는 친절하게 먼저 문제가 뭔지 물어봐주셨고, 친절하게 설명해주셨지요. 많은 도움이 됐습니다. 이후에는 모르는 문제가 생겨도 의지할곳이 있다고 생각하니 에코노베이션에서 강의를 들을때처럼 당황스럽지도 않았고 마음에는 안정감이 생겼죠. \n\n그렇게 무사히 3일의 자바 고급강의를 마치고 돌아오는 월요일부터 본격적으로 안드로이드 강좌에 돌입했습니다. 안드로이드는 완전 처음이었죠. 관련 책을 구매해서 한번 훝어본적은 있지만, 아직까지 완전히 처음이라고 볼수 있는 정도였지요. 개발하시는분들은 다들 아시겠지만, 안드로이드 응용프로그램은 JAVA를 기반으로 만들어졌습니다. 물론 자바 JVM(자바가상머신) 대신 달빅이라는 모바일에 최적화된 가상머신을 사용하고 있지요. 안드로이드가 자바 기반으로 이뤄져 있지만, 사실상 자바와는 별도로 동작한다고 봐도 무방하다 생각합니다.\n\n안드로이드 전문가 과정은 두달간 진행되었습니다. 그 중 한달은 안드로이드 이론과 개념에 대한 강의로 진행되었고, 나머지 한달은 실제 프로젝트를 만드는 것으로 진행되었습니다. 안드로이드를 배우는 기간 동안은 학원에서는 절대로 느끼지 못했던 프로그래밍의 재미에 대해서 알게 되었지요. T아카데미에서는 강의실 공간을 수강생들을 위해 밤늦게까지 개방해서 강의와 프로젝트에 집중하여 작업할 수 있도록 배려해 주었고, 덕분에 이해가지 않는 부분이 발생하거나 문제가 생겼을 때 강의실에 남아있던 형님과 동생들과 함께 문제를 해결해 나갈수 있었죠. 힘들때도 있었습니다. 도무지 개념이 이해가지 않을 때는 내가 프로그래밍과 맞지 않은건 아닌지 고민하기도 했고, 진지하게 중간에 그만둘까 생각해보기도 했습니다. 하지만, 강사님 주변의 강의를 같이 듣던 친구들덕에 꿋꿋하게 버틸수 있었지요.\n\n그렇게 한달동안 이론강의를 들었지만, 이정도로 과연 내가 앱을 만들 수 있는지 의심이 들긴 했습니다. 아무리 한달내내 안드로이드 강의를 듣고 실습을 했다하더라도 온전한 하나의 프로그램(앱)을 만드는데는 이론의 이해만으로는 부족할거라 생각했지요. 가령 어떤 기능을 만드려면 나름의 설계와 시나리오가 필요합니다. 하지만 이건 이론을 이해했다고 잘 할수 있는건 아닙니다. 댜수의 프로그래밍 경험을 통한 문제해결능력을 키워야지만 가능하지요. 저는 다른 친구들에 비해서 이런 경험이 턱없이 부족했습니다. 부족한게 아니라 아예 없었죠. 그래서 저는 모든게 처음이었습니다. \n\n우선 어떤 앱을 만들것인지 결정하고 기획서를 작성한 뒤 DB설계, 클래스 설계 등의 과정을 거치고 드디어 실제로 코딩을 할 시간이 다가왔습니다. 기획서에 작성한것처럼 어떤 기능을 구현해야 하는데 당췌 뭐부터 시작해서 진행해야할지 막막하더군요. 옆에 계신 형님께 이런 고충을 말하니 일단 원하는 기능이 있다면 구글 검색을 해보라는 것이었습니다. 그래서 말 그대로 관련 기능에 대해 검색해봤습니다. 최대한 비슷한 형태로 구글검색을 해보니 대부분은 구글이 답을 주더군요!! 완전 신세계였어요. 검색을 통해서 하나하나 찾아가다보니 어느정도 구색이 맞춰졌습니다. 기본적인 기능에 대해서는 대부분 구글을 통해서 찾아보고 그래도 모르는게 생겨면 옆에 계신 형님께 도움을 구했지요. 사실 그 형님도 배우러 오신거고 본인 프로젝트 진행하기에도 바쁠텐데 저 같은 완전 초보 옆에 앉은 죄(?)로 시간을 많이 뺏기셨지요. 그래도 항상 친절하게 알려주셨습니다. \n\n위에서 잠깐 언급했지만, T아카데미 전문가 과정은 정말 알찬 강의입니다. 한달간 이론을 배운 뒤 프로젝트를 진행합니다. 아마 일반 학원이었으면 프로젝트의 완성만을 목표로 삼았을겁니다. 프로젝트의 질이라던가 평가 같은 과정은 생략되거나 간소화했겠죠. 하지만 T아카데미는 프로젝트 선정과정에서부터 우선 다양한 아이디어를 내고 그 중에 정말 마켓에서 팔릴만한 아이템을 선정합니다. 그리고 그 아이디어가 수강생의 수준에 맞춰서 정말 한달안에 완성할 수 있는지를 판단하고 최종 결정합니다. 아이디어가 결정되면 클래스 다이어그램, DB설계 등의 과정을 거치게 됩니다. 이런 과정을 모두 수행하는데 꼬박 일주일이 소요됩니다. 한달동안 프로젝트를 진행하는데 일주일이면 아주 긴 시간입니다. 약 1/4의 시간을 소비하는 것이니까요. 그리고 나머지 3/4의 시간을 모두 코딩의 시간으로 할애할 수도 없습니다. 마지막 1주일은 디자인을 입히고 발표준비를 하는 등의 시간으로 할애해야하기 때문에 실제로 코딩 가능한 시간은 약 2주정도 밖에 안되죠. 그러다보니 큰 규모의 프로젝트를 진행하기는 힘듭니다. 또 서버통신이 필요한 기능은 모두 제외하고 오로지 앱 상에서 모든 기능을 구현해야 했지요. 2주동안에 실제 코딩을 완료하려고 하다보니 시간이 많이 촉박했습니다. 밤새는건 기본이고 주말도 모두 코딩에 힘을 쏟았습니다. \n\n어느덧 3주가 지나고 마지막 1주가 남았습니다. 그러나 아직도 미완성. 계속해서 코딩에 시간을 할애할 수밖에 없었습니다. 다행인것은 건축학을 전공해서 디자인에 대해서는 전혀 부담이 없었습니다. 다른 친구들은 디자인 때문에 며칠간 골머리를 앓아도 저는 거의 하루 정도만에 디자인을 끝낼 수 있었지요. 그래서 코딩에 시간을 더 할애할 수 있었습니다. 코딩만으로도 시간이 부족했던 저는 코딩에 대해서 다른 친구들에게 물어본 대신 저는 디자인 방법이나 포토샵 다루는 법에 대해서 알려주면서 서로 도움을 주었습니다.\n\n제가 만든 앱은 '좋은습관만들기(Habit Maker)'라는 이름의 습관 관리 앱이었습니다. 좋은 습관을 들이고 싶은데 항상 신경을 쓰고 살 수는 없는 바쁜 현대인들을 위해서 일정시간 간격을 설정해두면 그 시간이 되서 알림 푸시를 날려주죠. 그러면 사용자는 푸시를 클릭해서 앱에 접속하여 습관을 실행했음을 알리는 체크를 하고 그 결과를 다양한 통계로 보여줍니다. \n\n한달의 시간이 끝나고 완벽한 수준의 결과물은 아니었지만 드디어 원하는 기능이 동작하는 앱을 완성하게 되었습니다. 감격의 기쁨!! 뭔가 해냈다는 느낌이 들었지요. 덜달아 개발에 대한 자신감도 상승했습니다. 마지막으로 결과물에 대한 발표와 평가의 시간이 남았습니다. 발표는 앱을 만들게 된 배경부터 앱에 대한 시연까지 대략 15분정도의 시간동안 진행합니다. 그리고 평가는 우리 강사님만 하시는게 아니라, 외부에서 몇분의 심사위원을 초청해서 평가하죠. 그렇다보니 허술하게 대충 준비할 수는 없었습니다. 강사님도 자신이 가르친 수강생들의 결과를 발표시키는 입장이되다 보니 그 어느때보다 많은 신경을 써주셨습니다. 초시계를 들고 발표시간을 조정해주기도 하시고, 발표 과정에 대해서도 조언해 주셨습니다. 저는 나름 아이디어에 자신감이 있었고 발표하는걸 꺼리는 성격은 아니다보니 즐겁게 발표준비를 할 수 있었습니다. 발표전날은 집에도 못가고 밤새 준비했었죠. 다들 그랬습니다. 누구하나 자기 앱에 대해 애정이 없는 친구가 단 한명도 없었기 때문이죠. 그래서 다들 피곤했지만 표정은 밝았습니다. \n\n긴장되는 마음으로 발표를 시작했고, 시간이 지나가는 것도 모를정도로 빠르게 발표를 무사히 끝냈습니다. 코딩 과정에서 가끔 앱에 버그가 발생했었는데, 시연할 때 나오면 어쩌지 하고 조마조마했었는데, 다행히 잘 작동했습니다. 다음날, 결과가 발표됐는데 결과에 경악할수 밖에 없었습니다. 1등!!! '와~ 내가 일등이라니!!!'. 말도 안되는 일이 벌어졌습니다. 같이 수강한 20명 중에서 제가 1등을 차지한 것입니다. 뿌듯함이나 대견한 마음보다는 같이 고생한 친구들에게 미안한 마음이 먼저 들더라구요. 내가 가장 많은 도움을 받았고, 내 개발 실력이 가장 형편없는데도 제가 1등을 한것이 미안했습니다. 개발 실력보다는 아이디어가 좋아서 수상을 하게 된거라 생각했습니다. 우리반 친구들 모두 축하를 해주었고, 여러 전문가 과정을 마치는 행사에서 SK플래닛 대표님 앞에서 시연을 끝으로 2달간의 과정을 모두 마치게 되었습니다.\n\n이 두 달은 제 인생의 가장 큰 터닝포인트였습니다. 거의 6~7년간 건축 하나만을 바라보면서 살아왔던 제가 고작 두 달만에 완전 다른 길로 접어들게 된 것입니다. 학원이나 다른 기관에서 두달을 보냈다면, 이런 성과는 없었을거라 확신합니다. T아카데미에서의 모든 상황이 저에게 긍정적으로 작용했습니다. 옆에 앉은 형님, 같이 수강했던 친구들, 강사님, T아카데미 직원분들, 이 모든 요소들이 제 주변에 한꺼번에 일어났기 때문에 이런 성과를 낼 수 있었습니다. T아카데미를 수료한 뒤로는 이제 저는 개발자가 되어도 좋다는 생각을 했습니다. 이전에는 개발을 오로지 사업을 실현시키기 위한 수단 정도로 시작했었는데, 이 두 달을 통해서 개발자로서의 길을 걸어보기로 결정한 것이죠. 그렇다고 사업을 하겠다는 생각을 완전히 접은것은 아니지만, 단지 개발자로서도 한번 살아봐도 좋을것 같다는 생각이 처음 들었던 것입니다. \n\n그리고, 한달뒤 어느 회사에 취업하게 되었습니다. 이 이야기는 다음에 이어서~^^\n","slug":"2015-03-28-from-architect-to-programmer-7","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6r0010wxt40r1vi2zj","content":"<p>안드로이드 개발 전문가 과정에 합격했지만, 올레 에코노베이션과 마찬가지로 T아카데미에서도 선수과목이 필요했습니다. 그것도 에코노베이션과 똑같은 3일짜리 자바 고급강의!! 그 때의 기억이 떠오르면서 합격했다는 뿌듯함과 자신감은 사라지고 또다시 불안감이 저를 휘감았습니다. 하지만 어쩌겠습니까? 또다시 지난번처럼 도망쳐버리기에는 돌아갈 곳도 없는 상황에서 사치에 불과하다는걸 알고 있었습니다. 그래서 일단 부딪혀보자는 마음을 가지고 면접때와 같이 낙성대 역에서 마을버스에 올랐습니다. 도착한 T아카데미, 배정받은 강의실로 들어가 일단 앞쪽에 자리를 잡았습니다. 그러고는 주위를 둘러봤습니다. 대부분 저보다는 어린 대학생들처럼 보였습니다. 그 친구들을 둘러보면서, 지금 실력이 저 어린 친구들보다 훨씬 떨어진다는 생각에 자신이 더욱 작게 느껴졌습니다. 혼자 감상에 빠져있다가 강의가 시작될 무렵, 강의실 앞으로 형님처럼 보이는 한 분이 헐레벌떡 강의실에 도착했고, 마침 비어있던 제 옆자리에 자리를 잡으셨습니다. 훗날 이 만남은 제게 큰 힘이 되는데요. 좀 과장해서 말하면, 이 형님이 없었다면 아마 저는 안드로이드 전문가 과정에서 중도 하차하지 않았을까 생각할 정도랍니다.</p><p>자바 고급 강의가 시작되었고, 시간이 점점 흐르면서 에코노베이션과는 뭔가 다름을 느꼈습니다. 사실 안드로이드를 위한 자바 고급 강의에서 DAO와 DTO와 같은 자바 서블릿에서나 사용하는 개념들이 등장할 필요가 없지요. 안드로이드 앱을 만들때도 DB를 다루고 쿼리를 다루지만, 그렇게 중요하지는 않다고 생각합니다. 이런 관점에서 T아카데미에서 진행하는 자바 강의는 정말 딱 필요하다 싶을 정도의 내용들로 이뤄졌습니다. 주로 인터페이스와 상속 구조 및 사용하는 방법이나 각종 자료구조의 응용 등의 내용이었습니다. 학원에서 배웠던 내용, 혼자서 자바 서적을 탐독하면서 익혔던 개념들이 살아나면서 이해가 되기 시작했지요. 물론 완벽하진 못했습니다. TreeMap이나 TreeSet 등 잘 접해보지 못했던 자료구조를 배울때나 강사님이 내준 과제를 해결하는데는 주변 사람의 도움이 필요했었습니다. 이 때 바로 옆에 앉아 계시던 형님의 역할이 컸습니다. 제가 이해하지 못하고 있거나 과제를 진행하지 못하고 있을때는 친절하게 먼저 문제가 뭔지 물어봐주셨고, 친절하게 설명해주셨지요. 많은 도움이 됐습니다. 이후에는 모르는 문제가 생겨도 의지할곳이 있다고 생각하니 에코노베이션에서 강의를 들을때처럼 당황스럽지도 않았고 마음에는 안정감이 생겼죠.</p><p>그렇게 무사히 3일의 자바 고급강의를 마치고 돌아오는 월요일부터 본격적으로 안드로이드 강좌에 돌입했습니다. 안드로이드는 완전 처음이었죠. 관련 책을 구매해서 한번 훝어본적은 있지만, 아직까지 완전히 처음이라고 볼수 있는 정도였지요. 개발하시는분들은 다들 아시겠지만, 안드로이드 응용프로그램은 JAVA를 기반으로 만들어졌습니다. 물론 자바 JVM(자바가상머신) 대신 달빅이라는 모바일에 최적화된 가상머신을 사용하고 있지요. 안드로이드가 자바 기반으로 이뤄져 있지만, 사실상 자바와는 별도로 동작한다고 봐도 무방하다 생각합니다.</p><p>안드로이드 전문가 과정은 두달간 진행되었습니다. 그 중 한달은 안드로이드 이론과 개념에 대한 강의로 진행되었고, 나머지 한달은 실제 프로젝트를 만드는 것으로 진행되었습니다. 안드로이드를 배우는 기간 동안은 학원에서는 절대로 느끼지 못했던 프로그래밍의 재미에 대해서 알게 되었지요. T아카데미에서는 강의실 공간을 수강생들을 위해 밤늦게까지 개방해서 강의와 프로젝트에 집중하여 작업할 수 있도록 배려해 주었고, 덕분에 이해가지 않는 부분이 발생하거나 문제가 생겼을 때 강의실에 남아있던 형님과 동생들과 함께 문제를 해결해 나갈수 있었죠. 힘들때도 있었습니다. 도무지 개념이 이해가지 않을 때는 내가 프로그래밍과 맞지 않은건 아닌지 고민하기도 했고, 진지하게 중간에 그만둘까 생각해보기도 했습니다. 하지만, 강사님 주변의 강의를 같이 듣던 친구들덕에 꿋꿋하게 버틸수 있었지요.</p><p>그렇게 한달동안 이론강의를 들었지만, 이정도로 과연 내가 앱을 만들 수 있는지 의심이 들긴 했습니다. 아무리 한달내내 안드로이드 강의를 듣고 실습을 했다하더라도 온전한 하나의 프로그램(앱)을 만드는데는 이론의 이해만으로는 부족할거라 생각했지요. 가령 어떤 기능을 만드려면 나름의 설계와 시나리오가 필요합니다. 하지만 이건 이론을 이해했다고 잘 할수 있는건 아닙니다. 댜수의 프로그래밍 경험을 통한 문제해결능력을 키워야지만 가능하지요. 저는 다른 친구들에 비해서 이런 경험이 턱없이 부족했습니다. 부족한게 아니라 아예 없었죠. 그래서 저는 모든게 처음이었습니다.</p><p>우선 어떤 앱을 만들것인지 결정하고 기획서를 작성한 뒤 DB설계, 클래스 설계 등의 과정을 거치고 드디어 실제로 코딩을 할 시간이 다가왔습니다. 기획서에 작성한것처럼 어떤 기능을 구현해야 하는데 당췌 뭐부터 시작해서 진행해야할지 막막하더군요. 옆에 계신 형님께 이런 고충을 말하니 일단 원하는 기능이 있다면 구글 검색을 해보라는 것이었습니다. 그래서 말 그대로 관련 기능에 대해 검색해봤습니다. 최대한 비슷한 형태로 구글검색을 해보니 대부분은 구글이 답을 주더군요!! 완전 신세계였어요. 검색을 통해서 하나하나 찾아가다보니 어느정도 구색이 맞춰졌습니다. 기본적인 기능에 대해서는 대부분 구글을 통해서 찾아보고 그래도 모르는게 생겨면 옆에 계신 형님께 도움을 구했지요. 사실 그 형님도 배우러 오신거고 본인 프로젝트 진행하기에도 바쁠텐데 저 같은 완전 초보 옆에 앉은 죄(?)로 시간을 많이 뺏기셨지요. 그래도 항상 친절하게 알려주셨습니다.</p><p>위에서 잠깐 언급했지만, T아카데미 전문가 과정은 정말 알찬 강의입니다. 한달간 이론을 배운 뒤 프로젝트를 진행합니다. 아마 일반 학원이었으면 프로젝트의 완성만을 목표로 삼았을겁니다. 프로젝트의 질이라던가 평가 같은 과정은 생략되거나 간소화했겠죠. 하지만 T아카데미는 프로젝트 선정과정에서부터 우선 다양한 아이디어를 내고 그 중에 정말 마켓에서 팔릴만한 아이템을 선정합니다. 그리고 그 아이디어가 수강생의 수준에 맞춰서 정말 한달안에 완성할 수 있는지를 판단하고 최종 결정합니다. 아이디어가 결정되면 클래스 다이어그램, DB설계 등의 과정을 거치게 됩니다. 이런 과정을 모두 수행하는데 꼬박 일주일이 소요됩니다. 한달동안 프로젝트를 진행하는데 일주일이면 아주 긴 시간입니다. 약 1/4의 시간을 소비하는 것이니까요. 그리고 나머지 3/4의 시간을 모두 코딩의 시간으로 할애할 수도 없습니다. 마지막 1주일은 디자인을 입히고 발표준비를 하는 등의 시간으로 할애해야하기 때문에 실제로 코딩 가능한 시간은 약 2주정도 밖에 안되죠. 그러다보니 큰 규모의 프로젝트를 진행하기는 힘듭니다. 또 서버통신이 필요한 기능은 모두 제외하고 오로지 앱 상에서 모든 기능을 구현해야 했지요. 2주동안에 실제 코딩을 완료하려고 하다보니 시간이 많이 촉박했습니다. 밤새는건 기본이고 주말도 모두 코딩에 힘을 쏟았습니다.</p><p>어느덧 3주가 지나고 마지막 1주가 남았습니다. 그러나 아직도 미완성. 계속해서 코딩에 시간을 할애할 수밖에 없었습니다. 다행인것은 건축학을 전공해서 디자인에 대해서는 전혀 부담이 없었습니다. 다른 친구들은 디자인 때문에 며칠간 골머리를 앓아도 저는 거의 하루 정도만에 디자인을 끝낼 수 있었지요. 그래서 코딩에 시간을 더 할애할 수 있었습니다. 코딩만으로도 시간이 부족했던 저는 코딩에 대해서 다른 친구들에게 물어본 대신 저는 디자인 방법이나 포토샵 다루는 법에 대해서 알려주면서 서로 도움을 주었습니다.</p><p>제가 만든 앱은 ‘좋은습관만들기(Habit Maker)’라는 이름의 습관 관리 앱이었습니다. 좋은 습관을 들이고 싶은데 항상 신경을 쓰고 살 수는 없는 바쁜 현대인들을 위해서 일정시간 간격을 설정해두면 그 시간이 되서 알림 푸시를 날려주죠. 그러면 사용자는 푸시를 클릭해서 앱에 접속하여 습관을 실행했음을 알리는 체크를 하고 그 결과를 다양한 통계로 보여줍니다.</p><p>한달의 시간이 끝나고 완벽한 수준의 결과물은 아니었지만 드디어 원하는 기능이 동작하는 앱을 완성하게 되었습니다. 감격의 기쁨!! 뭔가 해냈다는 느낌이 들었지요. 덜달아 개발에 대한 자신감도 상승했습니다. 마지막으로 결과물에 대한 발표와 평가의 시간이 남았습니다. 발표는 앱을 만들게 된 배경부터 앱에 대한 시연까지 대략 15분정도의 시간동안 진행합니다. 그리고 평가는 우리 강사님만 하시는게 아니라, 외부에서 몇분의 심사위원을 초청해서 평가하죠. 그렇다보니 허술하게 대충 준비할 수는 없었습니다. 강사님도 자신이 가르친 수강생들의 결과를 발표시키는 입장이되다 보니 그 어느때보다 많은 신경을 써주셨습니다. 초시계를 들고 발표시간을 조정해주기도 하시고, 발표 과정에 대해서도 조언해 주셨습니다. 저는 나름 아이디어에 자신감이 있었고 발표하는걸 꺼리는 성격은 아니다보니 즐겁게 발표준비를 할 수 있었습니다. 발표전날은 집에도 못가고 밤새 준비했었죠. 다들 그랬습니다. 누구하나 자기 앱에 대해 애정이 없는 친구가 단 한명도 없었기 때문이죠. 그래서 다들 피곤했지만 표정은 밝았습니다.</p><p>긴장되는 마음으로 발표를 시작했고, 시간이 지나가는 것도 모를정도로 빠르게 발표를 무사히 끝냈습니다. 코딩 과정에서 가끔 앱에 버그가 발생했었는데, 시연할 때 나오면 어쩌지 하고 조마조마했었는데, 다행히 잘 작동했습니다. 다음날, 결과가 발표됐는데 결과에 경악할수 밖에 없었습니다. 1등!!! ‘와~ 내가 일등이라니!!!’. 말도 안되는 일이 벌어졌습니다. 같이 수강한 20명 중에서 제가 1등을 차지한 것입니다. 뿌듯함이나 대견한 마음보다는 같이 고생한 친구들에게 미안한 마음이 먼저 들더라구요. 내가 가장 많은 도움을 받았고, 내 개발 실력이 가장 형편없는데도 제가 1등을 한것이 미안했습니다. 개발 실력보다는 아이디어가 좋아서 수상을 하게 된거라 생각했습니다. 우리반 친구들 모두 축하를 해주었고, 여러 전문가 과정을 마치는 행사에서 SK플래닛 대표님 앞에서 시연을 끝으로 2달간의 과정을 모두 마치게 되었습니다.</p><p>이 두 달은 제 인생의 가장 큰 터닝포인트였습니다. 거의 6~7년간 건축 하나만을 바라보면서 살아왔던 제가 고작 두 달만에 완전 다른 길로 접어들게 된 것입니다. 학원이나 다른 기관에서 두달을 보냈다면, 이런 성과는 없었을거라 확신합니다. T아카데미에서의 모든 상황이 저에게 긍정적으로 작용했습니다. 옆에 앉은 형님, 같이 수강했던 친구들, 강사님, T아카데미 직원분들, 이 모든 요소들이 제 주변에 한꺼번에 일어났기 때문에 이런 성과를 낼 수 있었습니다. T아카데미를 수료한 뒤로는 이제 저는 개발자가 되어도 좋다는 생각을 했습니다. 이전에는 개발을 오로지 사업을 실현시키기 위한 수단 정도로 시작했었는데, 이 두 달을 통해서 개발자로서의 길을 걸어보기로 결정한 것이죠. 그렇다고 사업을 하겠다는 생각을 완전히 접은것은 아니지만, 단지 개발자로서도 한번 살아봐도 좋을것 같다는 생각이 처음 들었던 것입니다.</p><p>그리고, 한달뒤 어느 회사에 취업하게 되었습니다. 이 이야기는 다음에 이어서~^^</p>","excerpt":"","more":"<p>안드로이드 개발 전문가 과정에 합격했지만, 올레 에코노베이션과 마찬가지로 T아카데미에서도 선수과목이 필요했습니다. 그것도 에코노베이션과 똑같은 3일짜리 자바 고급강의!! 그 때의 기억이 떠오르면서 합격했다는 뿌듯함과 자신감은 사라지고 또다시 불안감이 저를 휘감았습니다. 하지만 어쩌겠습니까? 또다시 지난번처럼 도망쳐버리기에는 돌아갈 곳도 없는 상황에서 사치에 불과하다는걸 알고 있었습니다. 그래서 일단 부딪혀보자는 마음을 가지고 면접때와 같이 낙성대 역에서 마을버스에 올랐습니다. 도착한 T아카데미, 배정받은 강의실로 들어가 일단 앞쪽에 자리를 잡았습니다. 그러고는 주위를 둘러봤습니다. 대부분 저보다는 어린 대학생들처럼 보였습니다. 그 친구들을 둘러보면서, 지금 실력이 저 어린 친구들보다 훨씬 떨어진다는 생각에 자신이 더욱 작게 느껴졌습니다. 혼자 감상에 빠져있다가 강의가 시작될 무렵, 강의실 앞으로 형님처럼 보이는 한 분이 헐레벌떡 강의실에 도착했고, 마침 비어있던 제 옆자리에 자리를 잡으셨습니다. 훗날 이 만남은 제게 큰 힘이 되는데요. 좀 과장해서 말하면, 이 형님이 없었다면 아마 저는 안드로이드 전문가 과정에서 중도 하차하지 않았을까 생각할 정도랍니다.</p><p>자바 고급 강의가 시작되었고, 시간이 점점 흐르면서 에코노베이션과는 뭔가 다름을 느꼈습니다. 사실 안드로이드를 위한 자바 고급 강의에서 DAO와 DTO와 같은 자바 서블릿에서나 사용하는 개념들이 등장할 필요가 없지요. 안드로이드 앱을 만들때도 DB를 다루고 쿼리를 다루지만, 그렇게 중요하지는 않다고 생각합니다. 이런 관점에서 T아카데미에서 진행하는 자바 강의는 정말 딱 필요하다 싶을 정도의 내용들로 이뤄졌습니다. 주로 인터페이스와 상속 구조 및 사용하는 방법이나 각종 자료구조의 응용 등의 내용이었습니다. 학원에서 배웠던 내용, 혼자서 자바 서적을 탐독하면서 익혔던 개념들이 살아나면서 이해가 되기 시작했지요. 물론 완벽하진 못했습니다. TreeMap이나 TreeSet 등 잘 접해보지 못했던 자료구조를 배울때나 강사님이 내준 과제를 해결하는데는 주변 사람의 도움이 필요했었습니다. 이 때 바로 옆에 앉아 계시던 형님의 역할이 컸습니다. 제가 이해하지 못하고 있거나 과제를 진행하지 못하고 있을때는 친절하게 먼저 문제가 뭔지 물어봐주셨고, 친절하게 설명해주셨지요. 많은 도움이 됐습니다. 이후에는 모르는 문제가 생겨도 의지할곳이 있다고 생각하니 에코노베이션에서 강의를 들을때처럼 당황스럽지도 않았고 마음에는 안정감이 생겼죠.</p><p>그렇게 무사히 3일의 자바 고급강의를 마치고 돌아오는 월요일부터 본격적으로 안드로이드 강좌에 돌입했습니다. 안드로이드는 완전 처음이었죠. 관련 책을 구매해서 한번 훝어본적은 있지만, 아직까지 완전히 처음이라고 볼수 있는 정도였지요. 개발하시는분들은 다들 아시겠지만, 안드로이드 응용프로그램은 JAVA를 기반으로 만들어졌습니다. 물론 자바 JVM(자바가상머신) 대신 달빅이라는 모바일에 최적화된 가상머신을 사용하고 있지요. 안드로이드가 자바 기반으로 이뤄져 있지만, 사실상 자바와는 별도로 동작한다고 봐도 무방하다 생각합니다.</p><p>안드로이드 전문가 과정은 두달간 진행되었습니다. 그 중 한달은 안드로이드 이론과 개념에 대한 강의로 진행되었고, 나머지 한달은 실제 프로젝트를 만드는 것으로 진행되었습니다. 안드로이드를 배우는 기간 동안은 학원에서는 절대로 느끼지 못했던 프로그래밍의 재미에 대해서 알게 되었지요. T아카데미에서는 강의실 공간을 수강생들을 위해 밤늦게까지 개방해서 강의와 프로젝트에 집중하여 작업할 수 있도록 배려해 주었고, 덕분에 이해가지 않는 부분이 발생하거나 문제가 생겼을 때 강의실에 남아있던 형님과 동생들과 함께 문제를 해결해 나갈수 있었죠. 힘들때도 있었습니다. 도무지 개념이 이해가지 않을 때는 내가 프로그래밍과 맞지 않은건 아닌지 고민하기도 했고, 진지하게 중간에 그만둘까 생각해보기도 했습니다. 하지만, 강사님 주변의 강의를 같이 듣던 친구들덕에 꿋꿋하게 버틸수 있었지요.</p><p>그렇게 한달동안 이론강의를 들었지만, 이정도로 과연 내가 앱을 만들 수 있는지 의심이 들긴 했습니다. 아무리 한달내내 안드로이드 강의를 듣고 실습을 했다하더라도 온전한 하나의 프로그램(앱)을 만드는데는 이론의 이해만으로는 부족할거라 생각했지요. 가령 어떤 기능을 만드려면 나름의 설계와 시나리오가 필요합니다. 하지만 이건 이론을 이해했다고 잘 할수 있는건 아닙니다. 댜수의 프로그래밍 경험을 통한 문제해결능력을 키워야지만 가능하지요. 저는 다른 친구들에 비해서 이런 경험이 턱없이 부족했습니다. 부족한게 아니라 아예 없었죠. 그래서 저는 모든게 처음이었습니다.</p><p>우선 어떤 앱을 만들것인지 결정하고 기획서를 작성한 뒤 DB설계, 클래스 설계 등의 과정을 거치고 드디어 실제로 코딩을 할 시간이 다가왔습니다. 기획서에 작성한것처럼 어떤 기능을 구현해야 하는데 당췌 뭐부터 시작해서 진행해야할지 막막하더군요. 옆에 계신 형님께 이런 고충을 말하니 일단 원하는 기능이 있다면 구글 검색을 해보라는 것이었습니다. 그래서 말 그대로 관련 기능에 대해 검색해봤습니다. 최대한 비슷한 형태로 구글검색을 해보니 대부분은 구글이 답을 주더군요!! 완전 신세계였어요. 검색을 통해서 하나하나 찾아가다보니 어느정도 구색이 맞춰졌습니다. 기본적인 기능에 대해서는 대부분 구글을 통해서 찾아보고 그래도 모르는게 생겨면 옆에 계신 형님께 도움을 구했지요. 사실 그 형님도 배우러 오신거고 본인 프로젝트 진행하기에도 바쁠텐데 저 같은 완전 초보 옆에 앉은 죄(?)로 시간을 많이 뺏기셨지요. 그래도 항상 친절하게 알려주셨습니다.</p><p>위에서 잠깐 언급했지만, T아카데미 전문가 과정은 정말 알찬 강의입니다. 한달간 이론을 배운 뒤 프로젝트를 진행합니다. 아마 일반 학원이었으면 프로젝트의 완성만을 목표로 삼았을겁니다. 프로젝트의 질이라던가 평가 같은 과정은 생략되거나 간소화했겠죠. 하지만 T아카데미는 프로젝트 선정과정에서부터 우선 다양한 아이디어를 내고 그 중에 정말 마켓에서 팔릴만한 아이템을 선정합니다. 그리고 그 아이디어가 수강생의 수준에 맞춰서 정말 한달안에 완성할 수 있는지를 판단하고 최종 결정합니다. 아이디어가 결정되면 클래스 다이어그램, DB설계 등의 과정을 거치게 됩니다. 이런 과정을 모두 수행하는데 꼬박 일주일이 소요됩니다. 한달동안 프로젝트를 진행하는데 일주일이면 아주 긴 시간입니다. 약 1/4의 시간을 소비하는 것이니까요. 그리고 나머지 3/4의 시간을 모두 코딩의 시간으로 할애할 수도 없습니다. 마지막 1주일은 디자인을 입히고 발표준비를 하는 등의 시간으로 할애해야하기 때문에 실제로 코딩 가능한 시간은 약 2주정도 밖에 안되죠. 그러다보니 큰 규모의 프로젝트를 진행하기는 힘듭니다. 또 서버통신이 필요한 기능은 모두 제외하고 오로지 앱 상에서 모든 기능을 구현해야 했지요. 2주동안에 실제 코딩을 완료하려고 하다보니 시간이 많이 촉박했습니다. 밤새는건 기본이고 주말도 모두 코딩에 힘을 쏟았습니다.</p><p>어느덧 3주가 지나고 마지막 1주가 남았습니다. 그러나 아직도 미완성. 계속해서 코딩에 시간을 할애할 수밖에 없었습니다. 다행인것은 건축학을 전공해서 디자인에 대해서는 전혀 부담이 없었습니다. 다른 친구들은 디자인 때문에 며칠간 골머리를 앓아도 저는 거의 하루 정도만에 디자인을 끝낼 수 있었지요. 그래서 코딩에 시간을 더 할애할 수 있었습니다. 코딩만으로도 시간이 부족했던 저는 코딩에 대해서 다른 친구들에게 물어본 대신 저는 디자인 방법이나 포토샵 다루는 법에 대해서 알려주면서 서로 도움을 주었습니다.</p><p>제가 만든 앱은 ‘좋은습관만들기(Habit Maker)’라는 이름의 습관 관리 앱이었습니다. 좋은 습관을 들이고 싶은데 항상 신경을 쓰고 살 수는 없는 바쁜 현대인들을 위해서 일정시간 간격을 설정해두면 그 시간이 되서 알림 푸시를 날려주죠. 그러면 사용자는 푸시를 클릭해서 앱에 접속하여 습관을 실행했음을 알리는 체크를 하고 그 결과를 다양한 통계로 보여줍니다.</p><p>한달의 시간이 끝나고 완벽한 수준의 결과물은 아니었지만 드디어 원하는 기능이 동작하는 앱을 완성하게 되었습니다. 감격의 기쁨!! 뭔가 해냈다는 느낌이 들었지요. 덜달아 개발에 대한 자신감도 상승했습니다. 마지막으로 결과물에 대한 발표와 평가의 시간이 남았습니다. 발표는 앱을 만들게 된 배경부터 앱에 대한 시연까지 대략 15분정도의 시간동안 진행합니다. 그리고 평가는 우리 강사님만 하시는게 아니라, 외부에서 몇분의 심사위원을 초청해서 평가하죠. 그렇다보니 허술하게 대충 준비할 수는 없었습니다. 강사님도 자신이 가르친 수강생들의 결과를 발표시키는 입장이되다 보니 그 어느때보다 많은 신경을 써주셨습니다. 초시계를 들고 발표시간을 조정해주기도 하시고, 발표 과정에 대해서도 조언해 주셨습니다. 저는 나름 아이디어에 자신감이 있었고 발표하는걸 꺼리는 성격은 아니다보니 즐겁게 발표준비를 할 수 있었습니다. 발표전날은 집에도 못가고 밤새 준비했었죠. 다들 그랬습니다. 누구하나 자기 앱에 대해 애정이 없는 친구가 단 한명도 없었기 때문이죠. 그래서 다들 피곤했지만 표정은 밝았습니다.</p><p>긴장되는 마음으로 발표를 시작했고, 시간이 지나가는 것도 모를정도로 빠르게 발표를 무사히 끝냈습니다. 코딩 과정에서 가끔 앱에 버그가 발생했었는데, 시연할 때 나오면 어쩌지 하고 조마조마했었는데, 다행히 잘 작동했습니다. 다음날, 결과가 발표됐는데 결과에 경악할수 밖에 없었습니다. 1등!!! ‘와~ 내가 일등이라니!!!’. 말도 안되는 일이 벌어졌습니다. 같이 수강한 20명 중에서 제가 1등을 차지한 것입니다. 뿌듯함이나 대견한 마음보다는 같이 고생한 친구들에게 미안한 마음이 먼저 들더라구요. 내가 가장 많은 도움을 받았고, 내 개발 실력이 가장 형편없는데도 제가 1등을 한것이 미안했습니다. 개발 실력보다는 아이디어가 좋아서 수상을 하게 된거라 생각했습니다. 우리반 친구들 모두 축하를 해주었고, 여러 전문가 과정을 마치는 행사에서 SK플래닛 대표님 앞에서 시연을 끝으로 2달간의 과정을 모두 마치게 되었습니다.</p><p>이 두 달은 제 인생의 가장 큰 터닝포인트였습니다. 거의 6~7년간 건축 하나만을 바라보면서 살아왔던 제가 고작 두 달만에 완전 다른 길로 접어들게 된 것입니다. 학원이나 다른 기관에서 두달을 보냈다면, 이런 성과는 없었을거라 확신합니다. T아카데미에서의 모든 상황이 저에게 긍정적으로 작용했습니다. 옆에 앉은 형님, 같이 수강했던 친구들, 강사님, T아카데미 직원분들, 이 모든 요소들이 제 주변에 한꺼번에 일어났기 때문에 이런 성과를 낼 수 있었습니다. T아카데미를 수료한 뒤로는 이제 저는 개발자가 되어도 좋다는 생각을 했습니다. 이전에는 개발을 오로지 사업을 실현시키기 위한 수단 정도로 시작했었는데, 이 두 달을 통해서 개발자로서의 길을 걸어보기로 결정한 것이죠. 그렇다고 사업을 하겠다는 생각을 완전히 접은것은 아니지만, 단지 개발자로서도 한번 살아봐도 좋을것 같다는 생각이 처음 들었던 것입니다.</p><p>그리고, 한달뒤 어느 회사에 취업하게 되었습니다. 이 이야기는 다음에 이어서~^^</p>"},{"layout":"post","comments":1,"title":"건축에서 프로그래머로(6) - 프로그래머의 시작 :: T아카데미를 만나다","date":"2015-02-16T18:09:41.000Z","type":"post","published":1,"status":"publish","meta":{"_jd_twitter":"","_jd_tweet_this":"yes","_edit_last":"1","_wpt_failed":"a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:134:\"New post: 건축에서 프로그래머로(6) - 프로그래머의 시작 :: T아카데미를 만나다 http://www.whynhows.com/?p=1656\";s:5:\"error\";s:232:\"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1424142584;}","_wpas_done_all":"1","_thumbnail_id":"1659","_aioseop_keywords":"IT, 건축, 모바일, 안드로이드, 자바, 프로그래머, 프로그래밍, T아카데미, 에코노베이션, 면접","_wpt_short_url":"http://www.whynhows.com/?p=1656","_wp_jd_target":"http://www.whynhows.com/?p=1656","_wpt_status_message":"401 Unauthorized: Authentication credentials were missing or incorrect. Your Twitter application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify these settings.","dsq_thread_id":"3522246089","_wpas_skip_6779368":"1"},"author":{"login":"blueshw","email":"blueshw83@gmail.com","display_name":"blueshw","first_name":"","last_name":""},"_content":"<p>T아카데미를 알게된건 사실 KT에서 운영하는 <strong><a title=\"KT에코노베이션\" href=\"http://www.econovation.co.kr/\" target=\"_blank\">에코노베이션</a></strong>을 통해서였습니다. 당시에는 창업에 대한 열망이 강하던 시기여서, 창업과 관련된 정보를 얻기 위한 여러곳의 다양한 강좌를 찾아다니고 있었죠. 마침 에코노베이션에서 창업 관련 2일짜리 단기 강좌가 있더라구요. 수익창출을 위한 비즈니스 모델을 세우는 연습을 하는 강좌였습니다. 생각보다 강의의 질이 괜찮았고, 강사진 또한 나쁘지 않았습니다.</p>\n<p>이후 에코노베이션 홈페이지를 살펴보던중 에코노베이션 강의 목록에 창업관련 교육만 있는게 아니라는걸 알게되었습니다. 디자인, 기획, 개발 등 다양한 분야에서 교육을 진행하고 있었죠. 게다가 전에 컴퓨터 학원에서 수강하지 못했던 안드로이드 과정도 있는게 아니겠습니까?? 그것도 공짜!! 완전 대박, 이건 꼭 수강해야겠다고 생각했습니다.</p>\n<p>학원에서 안드로이드(대략 3개월 과정) 과정을 수강하려면 거의 200만원 정도의 수강료(계좌제로 지원받으면 20프로인 40만원만 내면 되겠죠!!)가 필요했는데, 공짜라니.... 그리고 KT같이 큰(?) 기업에서 운영하는 교육과정이 학원처럼 허술하진 않을거란 생각도 들었죠.</p>\n<p>그런데 말입니다. 당장 안드로이드 과정을 수행하려고 했더니 선수과목이 필요하더군요. 당시의 과목명이 정확히 기억나지는 않지만 \"안드로이드 개발을 위한 자바 고급과정\" 같은 느낌의 이름이었습니다. 고급과정이라.. 완전 초보에 가까운 제가 과연 고급과정을 잘 소화할 수 있을까 걱정이었죠. 괜히 이름에 겁먹은것도 없지 않아 있었지만, 그래도 안드로이드 수강을 하기 위해서라면 반드시 들어야만 했기에 수강하기로 결정했습니다.</p>\n<p>따로 선발 기준이 있는건 아니여서(T아카데미의 전문과 가정은 인터넷 필기 + 면접) 신청 후 바로 수업에 들어갔었습니다. 또다시 멘붕. 맨 처음으로 강사가 간단한 실습을 시켰는데, VO가 뭐고 DAO가 뭐고 어쩌고 저쩌고.. 겨우 자바의 기초만 익혀왔던 제게는 강사가 말하는 말이 외계어와 다를바 없었습니다. 당연히 아무것도 하지 못하고 손놓고 있어야만 햇죠. 멘붕에 빠져 정신을 못차리는 한시간 동안 여기서 나가야겠다는 생각밖에는 들지 않았습니다. 여기서 엉덩이를 붙이고 의자에 앉아 있어본들 정신적으로 더 피폐해질것만 같았기 때문이죠. 결국 쉬는시간을 틈타 짐을 챙기고 찜찜한 마음과 함께 황급히 자리를 뜨게 되었습니다. 강의 내용을 알아듣지 못하는 자신에 대한 무력감과 자괴감이 마음을 불편하게 했지만 도저히 그 자리에 앉아 있을 수가 없었습니다.</p>\n<p>그렇게 첫번째 도전이 실패로 끝난 뒤 한동안 실의에 빠져있었습니다. 프로그래밍은 아예 거들떠보지도 않고 창업 아이템에만 몰두했었지요. 그러던 어느날 인터넷 검색중에 우연히 SK플래닛에서 운영하는 T아카데미란게 있다는 것을 알게되었습니다. <a title=\"T아카데미\" href=\"https://oic.skplanet.com/front/tacademy/courseinfo/courseInfoGuide.action\" target=\"_blank\"><strong>T아카데미</strong></a>란 말하자면 KT에코노베이션과 비슷한 기관입니다. 일반인을 대상으로 디자인, 개발, 기획등을 교육하고 가능하다면 일자리도 연결해주는 일종의 교육기관이지요. T아카데미에서 제공하는 강의들을 본 순간 한동안 잠자고 있던 개발에 대한 열망(?)이 또다시 꿈틀거렸습니다. 좌절을 한번 겪어봐서 그런지 몰라도 왠지모르게 다시 도전해볼 용기가 나지 않더라구요. 그때는 개발을 업으로 삼겠다란 생각 자체를 하지 않았던 시기라 그런지 굳이 이걸 꼭 해야겠다는 생각은 들지 않았습니다.</p>\n<p>시간이 어느정도 흘렀을까요? 창업에 열광하던 두 청년은 더 이상은 시간낭비라는 걸 깨달았는지 누가 먼저랄것도 없이 여기서 그만 두는게 좋을것 같다는 결론을 내리게 되었습니다. 8개월의 시간은 그리 길지는 않았지만 많은 생각과 시도를 했고, 또 창업하기에는 서로의 역량이 많이 부족하다는걸 절실히 깨달은 시간이었습니다. 막상 결정을 내리고 나서 이제는 뭘 해야할까 고민하던 찰나, 잠깐 묵혀두었던 T아카데미가 생각이 났습니다. 아직 모집 기간이 끝나지 않았는지 급하게 확인을 해보았는데 다행히도 마감되지는 않았더라구요.</p>\n<p>T아카데미에서 전문가 과정을 등록하려면 총 두가지 관문을 넘어야 합니다. 첫째는 온라인 시험입니다. 다양한 수강과목들은 각각 수준이 다르기 때문에 적절한 기본지식을 갖춘 사람이 수강의 기회를 얻어야 합니다. 만약 아무런 기본 지식도 없는 상태에서 꽤 어려운 과목을 수강하게 된다면, 수강생에게도 시간낭비일뿐 아니라 강의를 개설한 T아카데미도 적절한 사람에게 적절한 강의를 제공하지 못함으로써 시간과 비용을 낭비하는 꼴이 됩니다. 그래서 최소한의 기본 소양을 확인하는 차원에서 온라인 시험제도를 마련해 둔것 같습니다.</p>\n<p>두번째는 온라인 시험에 통과한 사람들을 대상으로 최종 합격자를 선발하기 위한 면접입니다. 심층면접은 아니고 과정에 얼마나 열정적으로 임해서 최종 결과물을 낼 수 있느냐의 의지를 보는 정도의 면접이에요. 나중에 들은 얘기지만, 면접의 성패는 전공지식이나 코딩 실력보다는 하고자하는 의지가 더 크게 작용한다고 하더라구요~(참고하시길..)</p>\n<p>두근두근하는 마음으로 온라인 시험의 버튼을 힘껏 눌렀습니다. 기회는 총 세번, 그 중에 일정 이상의 점수를 넘으면 통과하는 형식입니다. '시험'이라고 해도 기회를 세번이나 주기 때문에 어렵지 않게 통과할 수 있습니다. 혹 풀다가 모르는 문제가 나오더라도, 인터넷에 검색해보거나 직접 코드를 작성해보면 손쉽게 풀 수 있습니다. 제가 등록한 '안드로이드 전문가 과정'은 안드로이드의 개발 언어인 자바(JAVA) 기초문제가 20개 정도 나왔던걸로 기억하는데요. 아무리 쉽고 검색으로 충분히 찾을 수 있다고 해도 저는 기초가 거의 없는 상태였기 때문에 첫번째와 두번째는 간발의 차로 떨어졌었지요. 그러다가 우여곡절 끝에 세번째 만에 겨우 성공했었습니다. 만약 세번째 시험까지 떨어졌으면 지금쯤 인생이 달라졌을 수도 있겠네요.^^</p>\n<p>가까스로 온라인 시험에 통과하고 난뒤 며칠이 지나자 T아카데미 측에서 면접보러 오라는 연락이 왔습니다. 혹시 프로그래밍 지식에 대해서 물어보면 어쩌지 하는 생각에 불안불안해서 면접을 보기전날까지 제대로 이해하지도 못하고 있던 JAVA 책만 주구장창 보고 있었지요. 아무리 봐도 머리에 들어오지 않더라구요. 그래서 혹 면접시 잘모르는 프로그래밍이나 컴퓨터 관련 지식을 물어보게되면 떨어질 것을 각오하고 솔직하게 잘 모른다고 말하자고 생각하니 마음이 한결 편해지더라구요.</p>\n<p>드디어 기다리고 기다리던 면접날이 다가왔습니다. T아카데미는 서울대학교 내에 SK텔레콤 연구동에 위치하고 있습니다. 2호선 낙성대 역에서 내려 마을버스를 타고 5분쯤 가면 도착할 수 있습니다. 무거운 마음으로 면접보러왔다고 데스크에 말하니 잠시 기다리라고 하더라구요. 저 말고도 몇명 기다리는 분들이 있었습니다. 잠깐 기다리니 세명을 호명하고는 면접장소로 들어오라고 하더라구요. 세명이 동시에 면접을 봤는데, 그때가 겨울방학 기간이라 그런지 저랑 같이 면접 봤던 두 친구는 모두 컴퓨터 전공 대학생인듯해 보였습니다. 면접이 시작되고 면접관 두 명(아마 강사인듯 보였습니다.)이 먼저 저말고 나머지 두 친구에게 약간의 전공관련 지식을 물어보셨습니다. \"아~ 망했다..떨어지겠구나\"라고 마음속으로 생각하고 있었는데 이상하게도 저한테는 전공관련 지식은 전혀 물어보지 않으시더라구요. 자신있게 몇 가지 질문에 대답하고는 면접실에서 나왔습니다. 사실 붙거나 떨어져도 인생에 크게 영향을 주지 않을(거라 생각했었죠^^;;) 면접인데도 불구하고 이상하게 긴장이 됐었고 면접이 끝나니 속이 다 후련해 지더라구요. 그리고 며칠 후 당당히 합격~!</p>\n<p>드디어 안드로이드 전문가 과정을 수강할 수 있게 되었습니다. 뭔가 이룬것 같은 기분이 들었지만, 사실 이제 부터가 진짜 시작인 것이죠. 그러나 아직도 이 과정을 통해서 프로그래머가 되어야겠다는 생각보다는 앱 만드는 방법을 배워서 창업이나 해볼까 하는 생각이 더 컸던 것 같습니다. 이런 제 단순한 생각은 수업을 듣고 앱을 만들어가면서 점점 바뀌게 되는데요. 다음에는 T아카데미에서 배우고 익히고 앱을 만들었던 과정에 대해서 얘기해 볼까 합니다. 그럼 다음에 뵐게요~</p>\n<p>&nbsp;</p>\n","source":"_posts/2015-02-17-from-architect-to-progammer-6.html","raw":"---\nlayout: post\ncomments: true\ntitle: '건축에서 프로그래머로(6) - 프로그래머의 시작 :: T아카데미를 만나다'\ndate: 2015-02-17 12:09:41.000000000 +09:00\ntype: post\npublished: true\nstatus: publish\ncategories: essay\ntags:\n- IT\n- T아카데미\n- 건축\n- 면접\n- 모바일\n- 안드로이드\n- 에코노베이션\n- 자바\n- 프로그래머\n- 프로그래밍\nmeta:\n  _jd_twitter: ''\n  _jd_tweet_this: 'yes'\n  _edit_last: '1'\n  _wpt_failed: 'a:5:{s:6:\"author\";b:0;s:8:\"sentence\";s:134:\"New post: 건축에서 프로그래머로(6)\n    - 프로그래머의 시작 :: T아카데미를 만나다 http://www.whynhows.com/?p=1656\";s:5:\"error\";s:232:\"401\n    Unauthorized: Authentication credentials were missing or incorrect. Your Twitter\n    application does not have read and write permissions. Go to <a href=\"https://dev.twitter.com/apps/\">your\n    Twitter apps</a> to modify these settings.\";s:4:\"code\";i:401;s:9:\"timestamp\";i:1424142584;}'\n  _wpas_done_all: '1'\n  _thumbnail_id: '1659'\n  _aioseop_keywords: IT, 건축, 모바일, 안드로이드, 자바, 프로그래머, 프로그래밍, T아카데미, 에코노베이션, 면접\n  _wpt_short_url: http://www.whynhows.com/?p=1656\n  _wp_jd_target: http://www.whynhows.com/?p=1656\n  _wpt_status_message: '401 Unauthorized: Authentication credentials were missing\n    or incorrect. Your Twitter application does not have read and write permissions.\n    Go to <a href=\"https://dev.twitter.com/apps/\">your Twitter apps</a> to modify\n    these settings.'\n  dsq_thread_id: '3522246089'\n  _wpas_skip_6779368: '1'\nauthor:\n  login: blueshw\n  email: blueshw83@gmail.com\n  display_name: blueshw\n  first_name: ''\n  last_name: ''\n---\n<p>T아카데미를 알게된건 사실 KT에서 운영하는 <strong><a title=\"KT에코노베이션\" href=\"http://www.econovation.co.kr/\" target=\"_blank\">에코노베이션</a></strong>을 통해서였습니다. 당시에는 창업에 대한 열망이 강하던 시기여서, 창업과 관련된 정보를 얻기 위한 여러곳의 다양한 강좌를 찾아다니고 있었죠. 마침 에코노베이션에서 창업 관련 2일짜리 단기 강좌가 있더라구요. 수익창출을 위한 비즈니스 모델을 세우는 연습을 하는 강좌였습니다. 생각보다 강의의 질이 괜찮았고, 강사진 또한 나쁘지 않았습니다.</p>\n<p>이후 에코노베이션 홈페이지를 살펴보던중 에코노베이션 강의 목록에 창업관련 교육만 있는게 아니라는걸 알게되었습니다. 디자인, 기획, 개발 등 다양한 분야에서 교육을 진행하고 있었죠. 게다가 전에 컴퓨터 학원에서 수강하지 못했던 안드로이드 과정도 있는게 아니겠습니까?? 그것도 공짜!! 완전 대박, 이건 꼭 수강해야겠다고 생각했습니다.</p>\n<p>학원에서 안드로이드(대략 3개월 과정) 과정을 수강하려면 거의 200만원 정도의 수강료(계좌제로 지원받으면 20프로인 40만원만 내면 되겠죠!!)가 필요했는데, 공짜라니.... 그리고 KT같이 큰(?) 기업에서 운영하는 교육과정이 학원처럼 허술하진 않을거란 생각도 들었죠.</p>\n<p>그런데 말입니다. 당장 안드로이드 과정을 수행하려고 했더니 선수과목이 필요하더군요. 당시의 과목명이 정확히 기억나지는 않지만 \"안드로이드 개발을 위한 자바 고급과정\" 같은 느낌의 이름이었습니다. 고급과정이라.. 완전 초보에 가까운 제가 과연 고급과정을 잘 소화할 수 있을까 걱정이었죠. 괜히 이름에 겁먹은것도 없지 않아 있었지만, 그래도 안드로이드 수강을 하기 위해서라면 반드시 들어야만 했기에 수강하기로 결정했습니다.</p>\n<p>따로 선발 기준이 있는건 아니여서(T아카데미의 전문과 가정은 인터넷 필기 + 면접) 신청 후 바로 수업에 들어갔었습니다. 또다시 멘붕. 맨 처음으로 강사가 간단한 실습을 시켰는데, VO가 뭐고 DAO가 뭐고 어쩌고 저쩌고.. 겨우 자바의 기초만 익혀왔던 제게는 강사가 말하는 말이 외계어와 다를바 없었습니다. 당연히 아무것도 하지 못하고 손놓고 있어야만 햇죠. 멘붕에 빠져 정신을 못차리는 한시간 동안 여기서 나가야겠다는 생각밖에는 들지 않았습니다. 여기서 엉덩이를 붙이고 의자에 앉아 있어본들 정신적으로 더 피폐해질것만 같았기 때문이죠. 결국 쉬는시간을 틈타 짐을 챙기고 찜찜한 마음과 함께 황급히 자리를 뜨게 되었습니다. 강의 내용을 알아듣지 못하는 자신에 대한 무력감과 자괴감이 마음을 불편하게 했지만 도저히 그 자리에 앉아 있을 수가 없었습니다.</p>\n<p>그렇게 첫번째 도전이 실패로 끝난 뒤 한동안 실의에 빠져있었습니다. 프로그래밍은 아예 거들떠보지도 않고 창업 아이템에만 몰두했었지요. 그러던 어느날 인터넷 검색중에 우연히 SK플래닛에서 운영하는 T아카데미란게 있다는 것을 알게되었습니다. <a title=\"T아카데미\" href=\"https://oic.skplanet.com/front/tacademy/courseinfo/courseInfoGuide.action\" target=\"_blank\"><strong>T아카데미</strong></a>란 말하자면 KT에코노베이션과 비슷한 기관입니다. 일반인을 대상으로 디자인, 개발, 기획등을 교육하고 가능하다면 일자리도 연결해주는 일종의 교육기관이지요. T아카데미에서 제공하는 강의들을 본 순간 한동안 잠자고 있던 개발에 대한 열망(?)이 또다시 꿈틀거렸습니다. 좌절을 한번 겪어봐서 그런지 몰라도 왠지모르게 다시 도전해볼 용기가 나지 않더라구요. 그때는 개발을 업으로 삼겠다란 생각 자체를 하지 않았던 시기라 그런지 굳이 이걸 꼭 해야겠다는 생각은 들지 않았습니다.</p>\n<p>시간이 어느정도 흘렀을까요? 창업에 열광하던 두 청년은 더 이상은 시간낭비라는 걸 깨달았는지 누가 먼저랄것도 없이 여기서 그만 두는게 좋을것 같다는 결론을 내리게 되었습니다. 8개월의 시간은 그리 길지는 않았지만 많은 생각과 시도를 했고, 또 창업하기에는 서로의 역량이 많이 부족하다는걸 절실히 깨달은 시간이었습니다. 막상 결정을 내리고 나서 이제는 뭘 해야할까 고민하던 찰나, 잠깐 묵혀두었던 T아카데미가 생각이 났습니다. 아직 모집 기간이 끝나지 않았는지 급하게 확인을 해보았는데 다행히도 마감되지는 않았더라구요.</p>\n<p>T아카데미에서 전문가 과정을 등록하려면 총 두가지 관문을 넘어야 합니다. 첫째는 온라인 시험입니다. 다양한 수강과목들은 각각 수준이 다르기 때문에 적절한 기본지식을 갖춘 사람이 수강의 기회를 얻어야 합니다. 만약 아무런 기본 지식도 없는 상태에서 꽤 어려운 과목을 수강하게 된다면, 수강생에게도 시간낭비일뿐 아니라 강의를 개설한 T아카데미도 적절한 사람에게 적절한 강의를 제공하지 못함으로써 시간과 비용을 낭비하는 꼴이 됩니다. 그래서 최소한의 기본 소양을 확인하는 차원에서 온라인 시험제도를 마련해 둔것 같습니다.</p>\n<p>두번째는 온라인 시험에 통과한 사람들을 대상으로 최종 합격자를 선발하기 위한 면접입니다. 심층면접은 아니고 과정에 얼마나 열정적으로 임해서 최종 결과물을 낼 수 있느냐의 의지를 보는 정도의 면접이에요. 나중에 들은 얘기지만, 면접의 성패는 전공지식이나 코딩 실력보다는 하고자하는 의지가 더 크게 작용한다고 하더라구요~(참고하시길..)</p>\n<p>두근두근하는 마음으로 온라인 시험의 버튼을 힘껏 눌렀습니다. 기회는 총 세번, 그 중에 일정 이상의 점수를 넘으면 통과하는 형식입니다. '시험'이라고 해도 기회를 세번이나 주기 때문에 어렵지 않게 통과할 수 있습니다. 혹 풀다가 모르는 문제가 나오더라도, 인터넷에 검색해보거나 직접 코드를 작성해보면 손쉽게 풀 수 있습니다. 제가 등록한 '안드로이드 전문가 과정'은 안드로이드의 개발 언어인 자바(JAVA) 기초문제가 20개 정도 나왔던걸로 기억하는데요. 아무리 쉽고 검색으로 충분히 찾을 수 있다고 해도 저는 기초가 거의 없는 상태였기 때문에 첫번째와 두번째는 간발의 차로 떨어졌었지요. 그러다가 우여곡절 끝에 세번째 만에 겨우 성공했었습니다. 만약 세번째 시험까지 떨어졌으면 지금쯤 인생이 달라졌을 수도 있겠네요.^^</p>\n<p>가까스로 온라인 시험에 통과하고 난뒤 며칠이 지나자 T아카데미 측에서 면접보러 오라는 연락이 왔습니다. 혹시 프로그래밍 지식에 대해서 물어보면 어쩌지 하는 생각에 불안불안해서 면접을 보기전날까지 제대로 이해하지도 못하고 있던 JAVA 책만 주구장창 보고 있었지요. 아무리 봐도 머리에 들어오지 않더라구요. 그래서 혹 면접시 잘모르는 프로그래밍이나 컴퓨터 관련 지식을 물어보게되면 떨어질 것을 각오하고 솔직하게 잘 모른다고 말하자고 생각하니 마음이 한결 편해지더라구요.</p>\n<p>드디어 기다리고 기다리던 면접날이 다가왔습니다. T아카데미는 서울대학교 내에 SK텔레콤 연구동에 위치하고 있습니다. 2호선 낙성대 역에서 내려 마을버스를 타고 5분쯤 가면 도착할 수 있습니다. 무거운 마음으로 면접보러왔다고 데스크에 말하니 잠시 기다리라고 하더라구요. 저 말고도 몇명 기다리는 분들이 있었습니다. 잠깐 기다리니 세명을 호명하고는 면접장소로 들어오라고 하더라구요. 세명이 동시에 면접을 봤는데, 그때가 겨울방학 기간이라 그런지 저랑 같이 면접 봤던 두 친구는 모두 컴퓨터 전공 대학생인듯해 보였습니다. 면접이 시작되고 면접관 두 명(아마 강사인듯 보였습니다.)이 먼저 저말고 나머지 두 친구에게 약간의 전공관련 지식을 물어보셨습니다. \"아~ 망했다..떨어지겠구나\"라고 마음속으로 생각하고 있었는데 이상하게도 저한테는 전공관련 지식은 전혀 물어보지 않으시더라구요. 자신있게 몇 가지 질문에 대답하고는 면접실에서 나왔습니다. 사실 붙거나 떨어져도 인생에 크게 영향을 주지 않을(거라 생각했었죠^^;;) 면접인데도 불구하고 이상하게 긴장이 됐었고 면접이 끝나니 속이 다 후련해 지더라구요. 그리고 며칠 후 당당히 합격~!</p>\n<p>드디어 안드로이드 전문가 과정을 수강할 수 있게 되었습니다. 뭔가 이룬것 같은 기분이 들었지만, 사실 이제 부터가 진짜 시작인 것이죠. 그러나 아직도 이 과정을 통해서 프로그래머가 되어야겠다는 생각보다는 앱 만드는 방법을 배워서 창업이나 해볼까 하는 생각이 더 컸던 것 같습니다. 이런 제 단순한 생각은 수업을 듣고 앱을 만들어가면서 점점 바뀌게 되는데요. 다음에는 T아카데미에서 배우고 익히고 앱을 만들었던 과정에 대해서 얘기해 볼까 합니다. 그럼 다음에 뵐게요~</p>\n<p>&nbsp;</p>\n","slug":"2015-02-17-from-architect-to-progammer-6","updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6t0013wxt4igpi9z1d","content":"<p>T아카데미를 알게된건 사실 KT에서 운영하는 <strong><a title=\"KT에코노베이션\" href=\"http://www.econovation.co.kr/\" target=\"_blank\">에코노베이션</a></strong>을 통해서였습니다. 당시에는 창업에 대한 열망이 강하던 시기여서, 창업과 관련된 정보를 얻기 위한 여러곳의 다양한 강좌를 찾아다니고 있었죠. 마침 에코노베이션에서 창업 관련 2일짜리 단기 강좌가 있더라구요. 수익창출을 위한 비즈니스 모델을 세우는 연습을 하는 강좌였습니다. 생각보다 강의의 질이 괜찮았고, 강사진 또한 나쁘지 않았습니다.</p><p>이후 에코노베이션 홈페이지를 살펴보던중 에코노베이션 강의 목록에 창업관련 교육만 있는게 아니라는걸 알게되었습니다. 디자인, 기획, 개발 등 다양한 분야에서 교육을 진행하고 있었죠. 게다가 전에 컴퓨터 학원에서 수강하지 못했던 안드로이드 과정도 있는게 아니겠습니까?? 그것도 공짜!! 완전 대박, 이건 꼭 수강해야겠다고 생각했습니다.</p><p>학원에서 안드로이드(대략 3개월 과정) 과정을 수강하려면 거의 200만원 정도의 수강료(계좌제로 지원받으면 20프로인 40만원만 내면 되겠죠!!)가 필요했는데, 공짜라니.... 그리고 KT같이 큰(?) 기업에서 운영하는 교육과정이 학원처럼 허술하진 않을거란 생각도 들었죠.</p><p>그런데 말입니다. 당장 안드로이드 과정을 수행하려고 했더니 선수과목이 필요하더군요. 당시의 과목명이 정확히 기억나지는 않지만 \"안드로이드 개발을 위한 자바 고급과정\" 같은 느낌의 이름이었습니다. 고급과정이라.. 완전 초보에 가까운 제가 과연 고급과정을 잘 소화할 수 있을까 걱정이었죠. 괜히 이름에 겁먹은것도 없지 않아 있었지만, 그래도 안드로이드 수강을 하기 위해서라면 반드시 들어야만 했기에 수강하기로 결정했습니다.</p><p>따로 선발 기준이 있는건 아니여서(T아카데미의 전문과 가정은 인터넷 필기 + 면접) 신청 후 바로 수업에 들어갔었습니다. 또다시 멘붕. 맨 처음으로 강사가 간단한 실습을 시켰는데, VO가 뭐고 DAO가 뭐고 어쩌고 저쩌고.. 겨우 자바의 기초만 익혀왔던 제게는 강사가 말하는 말이 외계어와 다를바 없었습니다. 당연히 아무것도 하지 못하고 손놓고 있어야만 햇죠. 멘붕에 빠져 정신을 못차리는 한시간 동안 여기서 나가야겠다는 생각밖에는 들지 않았습니다. 여기서 엉덩이를 붙이고 의자에 앉아 있어본들 정신적으로 더 피폐해질것만 같았기 때문이죠. 결국 쉬는시간을 틈타 짐을 챙기고 찜찜한 마음과 함께 황급히 자리를 뜨게 되었습니다. 강의 내용을 알아듣지 못하는 자신에 대한 무력감과 자괴감이 마음을 불편하게 했지만 도저히 그 자리에 앉아 있을 수가 없었습니다.</p><p>그렇게 첫번째 도전이 실패로 끝난 뒤 한동안 실의에 빠져있었습니다. 프로그래밍은 아예 거들떠보지도 않고 창업 아이템에만 몰두했었지요. 그러던 어느날 인터넷 검색중에 우연히 SK플래닛에서 운영하는 T아카데미란게 있다는 것을 알게되었습니다. <a title=\"T아카데미\" href=\"https://oic.skplanet.com/front/tacademy/courseinfo/courseInfoGuide.action\" target=\"_blank\"><strong>T아카데미</strong></a>란 말하자면 KT에코노베이션과 비슷한 기관입니다. 일반인을 대상으로 디자인, 개발, 기획등을 교육하고 가능하다면 일자리도 연결해주는 일종의 교육기관이지요. T아카데미에서 제공하는 강의들을 본 순간 한동안 잠자고 있던 개발에 대한 열망(?)이 또다시 꿈틀거렸습니다. 좌절을 한번 겪어봐서 그런지 몰라도 왠지모르게 다시 도전해볼 용기가 나지 않더라구요. 그때는 개발을 업으로 삼겠다란 생각 자체를 하지 않았던 시기라 그런지 굳이 이걸 꼭 해야겠다는 생각은 들지 않았습니다.</p><p>시간이 어느정도 흘렀을까요? 창업에 열광하던 두 청년은 더 이상은 시간낭비라는 걸 깨달았는지 누가 먼저랄것도 없이 여기서 그만 두는게 좋을것 같다는 결론을 내리게 되었습니다. 8개월의 시간은 그리 길지는 않았지만 많은 생각과 시도를 했고, 또 창업하기에는 서로의 역량이 많이 부족하다는걸 절실히 깨달은 시간이었습니다. 막상 결정을 내리고 나서 이제는 뭘 해야할까 고민하던 찰나, 잠깐 묵혀두었던 T아카데미가 생각이 났습니다. 아직 모집 기간이 끝나지 않았는지 급하게 확인을 해보았는데 다행히도 마감되지는 않았더라구요.</p><p>T아카데미에서 전문가 과정을 등록하려면 총 두가지 관문을 넘어야 합니다. 첫째는 온라인 시험입니다. 다양한 수강과목들은 각각 수준이 다르기 때문에 적절한 기본지식을 갖춘 사람이 수강의 기회를 얻어야 합니다. 만약 아무런 기본 지식도 없는 상태에서 꽤 어려운 과목을 수강하게 된다면, 수강생에게도 시간낭비일뿐 아니라 강의를 개설한 T아카데미도 적절한 사람에게 적절한 강의를 제공하지 못함으로써 시간과 비용을 낭비하는 꼴이 됩니다. 그래서 최소한의 기본 소양을 확인하는 차원에서 온라인 시험제도를 마련해 둔것 같습니다.</p><p>두번째는 온라인 시험에 통과한 사람들을 대상으로 최종 합격자를 선발하기 위한 면접입니다. 심층면접은 아니고 과정에 얼마나 열정적으로 임해서 최종 결과물을 낼 수 있느냐의 의지를 보는 정도의 면접이에요. 나중에 들은 얘기지만, 면접의 성패는 전공지식이나 코딩 실력보다는 하고자하는 의지가 더 크게 작용한다고 하더라구요~(참고하시길..)</p><p>두근두근하는 마음으로 온라인 시험의 버튼을 힘껏 눌렀습니다. 기회는 총 세번, 그 중에 일정 이상의 점수를 넘으면 통과하는 형식입니다. '시험'이라고 해도 기회를 세번이나 주기 때문에 어렵지 않게 통과할 수 있습니다. 혹 풀다가 모르는 문제가 나오더라도, 인터넷에 검색해보거나 직접 코드를 작성해보면 손쉽게 풀 수 있습니다. 제가 등록한 '안드로이드 전문가 과정'은 안드로이드의 개발 언어인 자바(JAVA) 기초문제가 20개 정도 나왔던걸로 기억하는데요. 아무리 쉽고 검색으로 충분히 찾을 수 있다고 해도 저는 기초가 거의 없는 상태였기 때문에 첫번째와 두번째는 간발의 차로 떨어졌었지요. 그러다가 우여곡절 끝에 세번째 만에 겨우 성공했었습니다. 만약 세번째 시험까지 떨어졌으면 지금쯤 인생이 달라졌을 수도 있겠네요.^^</p><p>가까스로 온라인 시험에 통과하고 난뒤 며칠이 지나자 T아카데미 측에서 면접보러 오라는 연락이 왔습니다. 혹시 프로그래밍 지식에 대해서 물어보면 어쩌지 하는 생각에 불안불안해서 면접을 보기전날까지 제대로 이해하지도 못하고 있던 JAVA 책만 주구장창 보고 있었지요. 아무리 봐도 머리에 들어오지 않더라구요. 그래서 혹 면접시 잘모르는 프로그래밍이나 컴퓨터 관련 지식을 물어보게되면 떨어질 것을 각오하고 솔직하게 잘 모른다고 말하자고 생각하니 마음이 한결 편해지더라구요.</p><p>드디어 기다리고 기다리던 면접날이 다가왔습니다. T아카데미는 서울대학교 내에 SK텔레콤 연구동에 위치하고 있습니다. 2호선 낙성대 역에서 내려 마을버스를 타고 5분쯤 가면 도착할 수 있습니다. 무거운 마음으로 면접보러왔다고 데스크에 말하니 잠시 기다리라고 하더라구요. 저 말고도 몇명 기다리는 분들이 있었습니다. 잠깐 기다리니 세명을 호명하고는 면접장소로 들어오라고 하더라구요. 세명이 동시에 면접을 봤는데, 그때가 겨울방학 기간이라 그런지 저랑 같이 면접 봤던 두 친구는 모두 컴퓨터 전공 대학생인듯해 보였습니다. 면접이 시작되고 면접관 두 명(아마 강사인듯 보였습니다.)이 먼저 저말고 나머지 두 친구에게 약간의 전공관련 지식을 물어보셨습니다. \"아~ 망했다..떨어지겠구나\"라고 마음속으로 생각하고 있었는데 이상하게도 저한테는 전공관련 지식은 전혀 물어보지 않으시더라구요. 자신있게 몇 가지 질문에 대답하고는 면접실에서 나왔습니다. 사실 붙거나 떨어져도 인생에 크게 영향을 주지 않을(거라 생각했었죠^^;;) 면접인데도 불구하고 이상하게 긴장이 됐었고 면접이 끝나니 속이 다 후련해 지더라구요. 그리고 며칠 후 당당히 합격~!</p><p>드디어 안드로이드 전문가 과정을 수강할 수 있게 되었습니다. 뭔가 이룬것 같은 기분이 들었지만, 사실 이제 부터가 진짜 시작인 것이죠. 그러나 아직도 이 과정을 통해서 프로그래머가 되어야겠다는 생각보다는 앱 만드는 방법을 배워서 창업이나 해볼까 하는 생각이 더 컸던 것 같습니다. 이런 제 단순한 생각은 수업을 듣고 앱을 만들어가면서 점점 바뀌게 되는데요. 다음에는 T아카데미에서 배우고 익히고 앱을 만들었던 과정에 대해서 얘기해 볼까 합니다. 그럼 다음에 뵐게요~</p><p>&nbsp;</p>","excerpt":"","more":"<p>T아카데미를 알게된건 사실 KT에서 운영하는 <strong><a title=\"KT에코노베이션\" href=\"http://www.econovation.co.kr/\" target=\"_blank\">에코노베이션</a></strong>을 통해서였습니다. 당시에는 창업에 대한 열망이 강하던 시기여서, 창업과 관련된 정보를 얻기 위한 여러곳의 다양한 강좌를 찾아다니고 있었죠. 마침 에코노베이션에서 창업 관련 2일짜리 단기 강좌가 있더라구요. 수익창출을 위한 비즈니스 모델을 세우는 연습을 하는 강좌였습니다. 생각보다 강의의 질이 괜찮았고, 강사진 또한 나쁘지 않았습니다.</p><p>이후 에코노베이션 홈페이지를 살펴보던중 에코노베이션 강의 목록에 창업관련 교육만 있는게 아니라는걸 알게되었습니다. 디자인, 기획, 개발 등 다양한 분야에서 교육을 진행하고 있었죠. 게다가 전에 컴퓨터 학원에서 수강하지 못했던 안드로이드 과정도 있는게 아니겠습니까?? 그것도 공짜!! 완전 대박, 이건 꼭 수강해야겠다고 생각했습니다.</p><p>학원에서 안드로이드(대략 3개월 과정) 과정을 수강하려면 거의 200만원 정도의 수강료(계좌제로 지원받으면 20프로인 40만원만 내면 되겠죠!!)가 필요했는데, 공짜라니.... 그리고 KT같이 큰(?) 기업에서 운영하는 교육과정이 학원처럼 허술하진 않을거란 생각도 들었죠.</p><p>그런데 말입니다. 당장 안드로이드 과정을 수행하려고 했더니 선수과목이 필요하더군요. 당시의 과목명이 정확히 기억나지는 않지만 \"안드로이드 개발을 위한 자바 고급과정\" 같은 느낌의 이름이었습니다. 고급과정이라.. 완전 초보에 가까운 제가 과연 고급과정을 잘 소화할 수 있을까 걱정이었죠. 괜히 이름에 겁먹은것도 없지 않아 있었지만, 그래도 안드로이드 수강을 하기 위해서라면 반드시 들어야만 했기에 수강하기로 결정했습니다.</p><p>따로 선발 기준이 있는건 아니여서(T아카데미의 전문과 가정은 인터넷 필기 + 면접) 신청 후 바로 수업에 들어갔었습니다. 또다시 멘붕. 맨 처음으로 강사가 간단한 실습을 시켰는데, VO가 뭐고 DAO가 뭐고 어쩌고 저쩌고.. 겨우 자바의 기초만 익혀왔던 제게는 강사가 말하는 말이 외계어와 다를바 없었습니다. 당연히 아무것도 하지 못하고 손놓고 있어야만 햇죠. 멘붕에 빠져 정신을 못차리는 한시간 동안 여기서 나가야겠다는 생각밖에는 들지 않았습니다. 여기서 엉덩이를 붙이고 의자에 앉아 있어본들 정신적으로 더 피폐해질것만 같았기 때문이죠. 결국 쉬는시간을 틈타 짐을 챙기고 찜찜한 마음과 함께 황급히 자리를 뜨게 되었습니다. 강의 내용을 알아듣지 못하는 자신에 대한 무력감과 자괴감이 마음을 불편하게 했지만 도저히 그 자리에 앉아 있을 수가 없었습니다.</p><p>그렇게 첫번째 도전이 실패로 끝난 뒤 한동안 실의에 빠져있었습니다. 프로그래밍은 아예 거들떠보지도 않고 창업 아이템에만 몰두했었지요. 그러던 어느날 인터넷 검색중에 우연히 SK플래닛에서 운영하는 T아카데미란게 있다는 것을 알게되었습니다. <a title=\"T아카데미\" href=\"https://oic.skplanet.com/front/tacademy/courseinfo/courseInfoGuide.action\" target=\"_blank\"><strong>T아카데미</strong></a>란 말하자면 KT에코노베이션과 비슷한 기관입니다. 일반인을 대상으로 디자인, 개발, 기획등을 교육하고 가능하다면 일자리도 연결해주는 일종의 교육기관이지요. T아카데미에서 제공하는 강의들을 본 순간 한동안 잠자고 있던 개발에 대한 열망(?)이 또다시 꿈틀거렸습니다. 좌절을 한번 겪어봐서 그런지 몰라도 왠지모르게 다시 도전해볼 용기가 나지 않더라구요. 그때는 개발을 업으로 삼겠다란 생각 자체를 하지 않았던 시기라 그런지 굳이 이걸 꼭 해야겠다는 생각은 들지 않았습니다.</p><p>시간이 어느정도 흘렀을까요? 창업에 열광하던 두 청년은 더 이상은 시간낭비라는 걸 깨달았는지 누가 먼저랄것도 없이 여기서 그만 두는게 좋을것 같다는 결론을 내리게 되었습니다. 8개월의 시간은 그리 길지는 않았지만 많은 생각과 시도를 했고, 또 창업하기에는 서로의 역량이 많이 부족하다는걸 절실히 깨달은 시간이었습니다. 막상 결정을 내리고 나서 이제는 뭘 해야할까 고민하던 찰나, 잠깐 묵혀두었던 T아카데미가 생각이 났습니다. 아직 모집 기간이 끝나지 않았는지 급하게 확인을 해보았는데 다행히도 마감되지는 않았더라구요.</p><p>T아카데미에서 전문가 과정을 등록하려면 총 두가지 관문을 넘어야 합니다. 첫째는 온라인 시험입니다. 다양한 수강과목들은 각각 수준이 다르기 때문에 적절한 기본지식을 갖춘 사람이 수강의 기회를 얻어야 합니다. 만약 아무런 기본 지식도 없는 상태에서 꽤 어려운 과목을 수강하게 된다면, 수강생에게도 시간낭비일뿐 아니라 강의를 개설한 T아카데미도 적절한 사람에게 적절한 강의를 제공하지 못함으로써 시간과 비용을 낭비하는 꼴이 됩니다. 그래서 최소한의 기본 소양을 확인하는 차원에서 온라인 시험제도를 마련해 둔것 같습니다.</p><p>두번째는 온라인 시험에 통과한 사람들을 대상으로 최종 합격자를 선발하기 위한 면접입니다. 심층면접은 아니고 과정에 얼마나 열정적으로 임해서 최종 결과물을 낼 수 있느냐의 의지를 보는 정도의 면접이에요. 나중에 들은 얘기지만, 면접의 성패는 전공지식이나 코딩 실력보다는 하고자하는 의지가 더 크게 작용한다고 하더라구요~(참고하시길..)</p><p>두근두근하는 마음으로 온라인 시험의 버튼을 힘껏 눌렀습니다. 기회는 총 세번, 그 중에 일정 이상의 점수를 넘으면 통과하는 형식입니다. '시험'이라고 해도 기회를 세번이나 주기 때문에 어렵지 않게 통과할 수 있습니다. 혹 풀다가 모르는 문제가 나오더라도, 인터넷에 검색해보거나 직접 코드를 작성해보면 손쉽게 풀 수 있습니다. 제가 등록한 '안드로이드 전문가 과정'은 안드로이드의 개발 언어인 자바(JAVA) 기초문제가 20개 정도 나왔던걸로 기억하는데요. 아무리 쉽고 검색으로 충분히 찾을 수 있다고 해도 저는 기초가 거의 없는 상태였기 때문에 첫번째와 두번째는 간발의 차로 떨어졌었지요. 그러다가 우여곡절 끝에 세번째 만에 겨우 성공했었습니다. 만약 세번째 시험까지 떨어졌으면 지금쯤 인생이 달라졌을 수도 있겠네요.^^</p><p>가까스로 온라인 시험에 통과하고 난뒤 며칠이 지나자 T아카데미 측에서 면접보러 오라는 연락이 왔습니다. 혹시 프로그래밍 지식에 대해서 물어보면 어쩌지 하는 생각에 불안불안해서 면접을 보기전날까지 제대로 이해하지도 못하고 있던 JAVA 책만 주구장창 보고 있었지요. 아무리 봐도 머리에 들어오지 않더라구요. 그래서 혹 면접시 잘모르는 프로그래밍이나 컴퓨터 관련 지식을 물어보게되면 떨어질 것을 각오하고 솔직하게 잘 모른다고 말하자고 생각하니 마음이 한결 편해지더라구요.</p><p>드디어 기다리고 기다리던 면접날이 다가왔습니다. T아카데미는 서울대학교 내에 SK텔레콤 연구동에 위치하고 있습니다. 2호선 낙성대 역에서 내려 마을버스를 타고 5분쯤 가면 도착할 수 있습니다. 무거운 마음으로 면접보러왔다고 데스크에 말하니 잠시 기다리라고 하더라구요. 저 말고도 몇명 기다리는 분들이 있었습니다. 잠깐 기다리니 세명을 호명하고는 면접장소로 들어오라고 하더라구요. 세명이 동시에 면접을 봤는데, 그때가 겨울방학 기간이라 그런지 저랑 같이 면접 봤던 두 친구는 모두 컴퓨터 전공 대학생인듯해 보였습니다. 면접이 시작되고 면접관 두 명(아마 강사인듯 보였습니다.)이 먼저 저말고 나머지 두 친구에게 약간의 전공관련 지식을 물어보셨습니다. \"아~ 망했다..떨어지겠구나\"라고 마음속으로 생각하고 있었는데 이상하게도 저한테는 전공관련 지식은 전혀 물어보지 않으시더라구요. 자신있게 몇 가지 질문에 대답하고는 면접실에서 나왔습니다. 사실 붙거나 떨어져도 인생에 크게 영향을 주지 않을(거라 생각했었죠^^;;) 면접인데도 불구하고 이상하게 긴장이 됐었고 면접이 끝나니 속이 다 후련해 지더라구요. 그리고 며칠 후 당당히 합격~!</p><p>드디어 안드로이드 전문가 과정을 수강할 수 있게 되었습니다. 뭔가 이룬것 같은 기분이 들었지만, 사실 이제 부터가 진짜 시작인 것이죠. 그러나 아직도 이 과정을 통해서 프로그래머가 되어야겠다는 생각보다는 앱 만드는 방법을 배워서 창업이나 해볼까 하는 생각이 더 컸던 것 같습니다. 이런 제 단순한 생각은 수업을 듣고 앱을 만들어가면서 점점 바뀌게 되는데요. 다음에는 T아카데미에서 배우고 익히고 앱을 만들었던 과정에 대해서 얘기해 볼까 합니다. 그럼 다음에 뵐게요~</p><p>&nbsp;</p>"},{"layout":"post","comments":1,"title":"난 2년동안 다녔던 방송통신대학에 대한 회고","date":"2015-06-29T14:30:00.000Z","_content":"\n저는 비전공자입니다. 그래서인지 소프트웨어 개발일을 하면서 늘 비전공자 딱지를 달고 일을 해왔던거 같습니다. 사실 학위라는게 그 사람의 실력을 말해주는 것도 아니라 큰 의미가 없다는게 평소의 제 생각이기도 합니다만, 막상 일을 하다보면 내가 잘 모르거나 생소한 용어가 나올때마다 비전공자라서 그런건 아닌가라는 생각을 떨쳐낼수 없더군요. 나름대로 컴퓨터 사이언스에 대한 기본적인 지식을 쌓는데 노력도 해보았지만 만족스럽다는 생각이 든적은 한번도 없었습니다. 어떤 문제에 봉착하게 되면, 내가 뭘 모르는지 조차도 모르는 상황이 생겨버려서 쉽게 포기해버리기도 하더라구요. 이건 아무래도 체계적이고 연쇄적인 학습이 이뤄지지 않는 탓이라 생각하고 스스로를 위로할 수 밖에 없었습니다. 이렇게 쉽게 떨어져나가지 않는 비전공자의 족쇄를 영원히 끊어버리기 위해 학위를 따기로 결심했었습니다. 하지만, 현실적으로 오프라인 대학을 선택하는건 무리였기에 온라인으로 학위 취득이 가능한 방법을 찾아보았죠. 결국 선택지는 사이버대학이냐 방송통신대학이냐 였습니다. \n\n우선 사이버대학의 장점이라면, 소속 학교의 시설을 이용할 수 있고 시험을 집에서 치르기 때문에 학위취득이 수월하다는 것입니다. 하지만 사립이라 학비가 비싸고 학위취득이 수월하다보니 평소에는 공부에 소홀하게 되어 실력향상에 큰 도움이 안된다는 단점이 있죠. 반면에, 방송통신대학은 시험장에서 시험을 보고, 학기당 학교에 나가야하는 출석수업이 며칠 포함되기 때문에 직장인들에게는 조금 부담스럽다는 단점이 있지만, 그만큼 노력에 따라 점수를 얻을 수 있고 실력향상에도 어느정도 도움이 된다는 장점이 있죠. 그리고 무엇보다 학비가 저렴한편입니다. 저는 학위도 중요했지만, 실제로 공부를 하고 싶다는 생각이 강했기에 사이버대학이 아닌 방송통신대학을 선택했습니다. 방송통신대학은 보통 '방통대', '방송대' 등으로 불리곤 합니다(이하 방송대). 인터넷에 떠도는 여러 글이나 커뮤니티를 살펴보면, 방송대를 다닐까 고민하셨던 분들이나 직접 다녀본 사람들이 방송대는 빡빡해서 졸업하기 어렵다고들 하더라구요. 그것도 정규 학기만에 졸업하기는 더더욱 어렵다고들 하죠. 보통 4년과정일때 5~7년 정도를 생각한다고 할 정도니까요. \n\n괜한 말들에 겁먹어 봤자 직접 겪어보지 않으면 모르는법. 과감하게 등록을 했습니다. 방송대를 다녀야겠다고 결심한 것이 재작년 여름이라 가을학기부터 다니기로 했답니다. 나중에 알게 된 사실이지만, 어느정도 수준 소득 아래의 연봉을 받고 계신 분들은 등록한 학기부터 국가장학금을 신청할 수 있답니다. 저는 그것도 모르고 입학금과 수업료를 내고 말았죠. 등록금이라 하기에는 너무 싼 40만원도 안하는 돈이긴 하지만, 나이가 있고 가족이 있는 사람들에게는 결코 쉽게 쓸 수 있는 돈은 아닙니다. 하지만, 첫 학기라 그랬을까요? 아니면 사이버대학에 비해서 3~4배 정도 저렴한 학비 때문이었을까요, 학교를 다시 다닌다는 마음에 선뜻 결제를 해버렸습니다. 당시 교재비까지 포함해도 대략 40만원 안팍이었던걸로 기억합니다. 등록하실때 반드시 주의할점은, 교재비는 결제하지 마시라는 겁니다. 교재비는 해당 학년의 학기의 모든 과목에 대한 교재비입니다. 만약에 미리 등록된 과목이 아닌 다른 학년이나 다른 학과의 수업을 들으려고 하면 미리 결제한 교재는 쓸모없게 되버리겠죠. 그래서 꼭 수강신청을 완료한 후에 자신이 등록한 과목의 교재를 사야합니다. \n\n방송통신대학의 강의는 이름 그대로 방송과 통신을 통해서 이뤄집니다. 가장 많이 이용하는 매체는 세가지 인데, 웹을 통한 강의, 스마트폰을 이용한 강의, 그리고 TV를 통한 강의가 있죠. 이 중 TV에서 나오는 강의는 그 수가 많지 않습니다. 그래서 대다수는 웹을 이용하게 되죠. 하지만, 눈 뜨기 무섭게 만원 지하철을 뚫고 회사에서 전쟁같은 하루를 보내는 직장인들에게 퇴근 후 웹을 이용한 강의를 듣는다는 것은 웬만한 의지를 가진 사람이 아닌 이상 힘들다고 생각합니다. 그래서 저는 지하철을 이용하기로 했습니다. 요즘에는 어딜가든 내 분신처럼 따라다니는 스마트폰이 있기 때문에 내가 어디에 있던지 스마트폰을 이용해서 강의를 들을 수 있습니다. 화면이 작아 조금 보기 힘들지도 모르겠습니다만, 5인치 정도 되는 크기의 스마트폰이라면 충분히 시청 가능하죠. 그 작은 화면으로 미드와 영화는 충분히 잘 보면서 강의는 화면이 작아서 못듣겠다는건 그냥 핑계꺼리일뿐이겠죠.\n\n지난 2년 동안 거의 모든 강의는 지하철을 타고 이동하면서 들었습니다. 출근할때 한개, 퇴근할때 한개 들으면(집이 좀 멀어야겠죠^^ 저는 인천에서 강남으로 출퇴근해서 충분히 가능했죠) 학기 중에 충분히 모든 강의를 듣고도 남습니다. 한 과목이 15강으로 이뤄져있고, 보통은 6과목(18학점)을 듣기 때문에 총 90개의 강의로 이뤄져있습니다. 하루에 2개씩 듣고 주중에만 듣는다고 가정하더라도 9주일이면 충분히 시청할 수 있습니다. 중간, 기말, 대체시험 등 시험기간을 제외하더라도 충분한 시간입니다. 결국 시간 없다는 말은 핑계에 불과하단 얘기죠. 혹시라도 일이 너무 많아 주말에도 철야를 해야할 정도의 회사라면 하루빨리 그만두는게 몸과 정신건강에 좋습니다.\n\n조금 자랑 섞인 말을 해보려고합니다. 저는 학사편입으로 3학년부터 시작했습니다. 매 학기마다 듣고 싶은 강의만 골라서 들었고, 다양한 교양수업과 타학과 전공수업(불문과, 미디어학과, 통계학과 등)도 수강하면서 나름대로 의미있는 강의를 들으려고 노력했습니다. 주어진대로만 수강하지 않고 저 자신의 취향과 의지가 들어가다보니 나름의 동기부여도 됐을뿐 아니라 듣고싶었던 과목을 듣는거라 학점을 취득하기도 훨씬 수월했습니다. 그 결과 3번의 학기(마지막은 아직 안나왔으니)동안 총 2번의 성적우수 장학금을 받게 되었습니다. 총 평점도 4.3 만점에 4.1이 넘는답니다.\n\n사실 방송통신대학에서 점수를 따는건 그리 어려운 일이 아닙니다. 전체 강의를 한번 다 듣고 난뒤에는 지금까지 쌓여있는 기출문제와 워크북의 문제만 풀어봐도 충분히 만점에 가까운 점수를 얻을 수 있습니다. 방송대에서 A 이상의 학점을 받으려면 90점 이상의 점수를 획득해야하는데, 물론 쉬운 일은 아닙니다. 하지만, 주어진 강의와 기출, 그리고 워크북만 잘 숙지한다면 그리 어렵지도 않습니다. 교수님들이나 조교들도 방송대 문제를 매년 새롭게 만들거나 하지는 않기 때문입니다. 하지만 과목이 신설됐거나 교수님이 바꼈을 때와 같이 상황이 바꼈을 때는 주의할 필요가 있습니다. 출제경향도 알 수 없을 뿐더러 참고할 사항이 없기 때문에 확실한 준비를 하기가 어렵습니다. 이럴때는 들었던 강의를 여러번 다시 돌려보거나, 교재 위주로 공부할 것을 추천 드립니다. 결국에는 강의하시는 교수님들도 자기가 말하지 않은 것에 대한 문제는 출제하지 않으시니까요.\n\n그리고 방송대에서 큰 문제중 하나는 바로 졸업논문이랍니다. 원격으로 강의를 수강하면서 논문이라뇨. 정말 청천벽력같은 일이었습니다. 시작도 안해보고 그 부담감 때문에 논문이 아닌 다른 방법이 없나 찾아보았습니다. 구하는자에게 길이 있다는 말이 딱 맞는것처럼 논문을 쓰지 않고 졸업할 수 있는 방법이 있더군요. 바로 자격증!!! 제가 다닌 컴퓨터과학과의 경우에는 정보처리기사와 전자계산기조직응용기사라는 이름도 거창하게 긴 두 개의 자격증을 취득하면 논문을 쓰지 않아도 되죠. 정보처리기사를 이전에 취득했기에 다행이다 싶던 찰나, 자세히 살펴보니 2005년부터는 재학중 취득한 자에게만 허용된다고 하더라구요. 그래서 울며겨자먹기로 듣도보도 못한 전자계산기조직응용기사라는 자격증에 대해 알아봤습니다. 뭐, 정보처리기사와 비슷하긴한데, 문제는 실기!!!! 직접 전자회로를 만들어서 제출하는게 실기!!! 이런....ㅠㅠ 그래도 방법이 있었으니, 실기(필답형 80 + 실기형 20)에서 60점을 받으면 합격인데, 필답형 80점중에 60점을 취득하면 실기형은 출석만해도 된다는 거!! 뭐 이런 자격증이 있나 싶었지만, 논문은 죽어도 쓰기 싫어서 한번 해보기로 했지요. 결과는 한번에 취득!!!\n\n아직 마지막 학기의 결과는 나오지 않았지만, 가채점 해본 결과 무난하게 졸업 가능할거라 생각합니다. 총 2년간 4학기를 다닌다는게 누가 볼 때는 쉬운 일이 아닐 수 있겠습니다만, 궁한 사람에게는 그리 어렵지 않는 길이기도 합니다. 남들이 무언가에 도전하고 내가 생각하기에는 정말 어렵게 보이는 일을 하고 있다고 해서 미리 겁먹을 필요는 없습니다. 무슨 일이든 막상 해보면 생각보다 어렵지 않고 정말로 절실히, 격렬하게 그 일이 되길 원한다면 주위의 모든 것들이 그 일이 되도록 도와줄 것이기 때문입니다. 방송대 2년은 학위보다는 도전의 시작이라는 느낌입니다. 이제 시작되었고 앞으로 살면서 또다시 수많은 도전에 직면할텐데 그때마다 좌절하지 않고 그 일들을 성공으로 바꿀 수 있는 밑거름이 된 2년이라 생각할랍니다.\n","source":"_posts/2015-06-29-remind-of-knou.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"난 2년동안 다녔던 방송통신대학에 대한 회고\"\ncategories: essay\ndate:   2015-06-29 23:30:00 +0900\n---\n\n저는 비전공자입니다. 그래서인지 소프트웨어 개발일을 하면서 늘 비전공자 딱지를 달고 일을 해왔던거 같습니다. 사실 학위라는게 그 사람의 실력을 말해주는 것도 아니라 큰 의미가 없다는게 평소의 제 생각이기도 합니다만, 막상 일을 하다보면 내가 잘 모르거나 생소한 용어가 나올때마다 비전공자라서 그런건 아닌가라는 생각을 떨쳐낼수 없더군요. 나름대로 컴퓨터 사이언스에 대한 기본적인 지식을 쌓는데 노력도 해보았지만 만족스럽다는 생각이 든적은 한번도 없었습니다. 어떤 문제에 봉착하게 되면, 내가 뭘 모르는지 조차도 모르는 상황이 생겨버려서 쉽게 포기해버리기도 하더라구요. 이건 아무래도 체계적이고 연쇄적인 학습이 이뤄지지 않는 탓이라 생각하고 스스로를 위로할 수 밖에 없었습니다. 이렇게 쉽게 떨어져나가지 않는 비전공자의 족쇄를 영원히 끊어버리기 위해 학위를 따기로 결심했었습니다. 하지만, 현실적으로 오프라인 대학을 선택하는건 무리였기에 온라인으로 학위 취득이 가능한 방법을 찾아보았죠. 결국 선택지는 사이버대학이냐 방송통신대학이냐 였습니다. \n\n우선 사이버대학의 장점이라면, 소속 학교의 시설을 이용할 수 있고 시험을 집에서 치르기 때문에 학위취득이 수월하다는 것입니다. 하지만 사립이라 학비가 비싸고 학위취득이 수월하다보니 평소에는 공부에 소홀하게 되어 실력향상에 큰 도움이 안된다는 단점이 있죠. 반면에, 방송통신대학은 시험장에서 시험을 보고, 학기당 학교에 나가야하는 출석수업이 며칠 포함되기 때문에 직장인들에게는 조금 부담스럽다는 단점이 있지만, 그만큼 노력에 따라 점수를 얻을 수 있고 실력향상에도 어느정도 도움이 된다는 장점이 있죠. 그리고 무엇보다 학비가 저렴한편입니다. 저는 학위도 중요했지만, 실제로 공부를 하고 싶다는 생각이 강했기에 사이버대학이 아닌 방송통신대학을 선택했습니다. 방송통신대학은 보통 '방통대', '방송대' 등으로 불리곤 합니다(이하 방송대). 인터넷에 떠도는 여러 글이나 커뮤니티를 살펴보면, 방송대를 다닐까 고민하셨던 분들이나 직접 다녀본 사람들이 방송대는 빡빡해서 졸업하기 어렵다고들 하더라구요. 그것도 정규 학기만에 졸업하기는 더더욱 어렵다고들 하죠. 보통 4년과정일때 5~7년 정도를 생각한다고 할 정도니까요. \n\n괜한 말들에 겁먹어 봤자 직접 겪어보지 않으면 모르는법. 과감하게 등록을 했습니다. 방송대를 다녀야겠다고 결심한 것이 재작년 여름이라 가을학기부터 다니기로 했답니다. 나중에 알게 된 사실이지만, 어느정도 수준 소득 아래의 연봉을 받고 계신 분들은 등록한 학기부터 국가장학금을 신청할 수 있답니다. 저는 그것도 모르고 입학금과 수업료를 내고 말았죠. 등록금이라 하기에는 너무 싼 40만원도 안하는 돈이긴 하지만, 나이가 있고 가족이 있는 사람들에게는 결코 쉽게 쓸 수 있는 돈은 아닙니다. 하지만, 첫 학기라 그랬을까요? 아니면 사이버대학에 비해서 3~4배 정도 저렴한 학비 때문이었을까요, 학교를 다시 다닌다는 마음에 선뜻 결제를 해버렸습니다. 당시 교재비까지 포함해도 대략 40만원 안팍이었던걸로 기억합니다. 등록하실때 반드시 주의할점은, 교재비는 결제하지 마시라는 겁니다. 교재비는 해당 학년의 학기의 모든 과목에 대한 교재비입니다. 만약에 미리 등록된 과목이 아닌 다른 학년이나 다른 학과의 수업을 들으려고 하면 미리 결제한 교재는 쓸모없게 되버리겠죠. 그래서 꼭 수강신청을 완료한 후에 자신이 등록한 과목의 교재를 사야합니다. \n\n방송통신대학의 강의는 이름 그대로 방송과 통신을 통해서 이뤄집니다. 가장 많이 이용하는 매체는 세가지 인데, 웹을 통한 강의, 스마트폰을 이용한 강의, 그리고 TV를 통한 강의가 있죠. 이 중 TV에서 나오는 강의는 그 수가 많지 않습니다. 그래서 대다수는 웹을 이용하게 되죠. 하지만, 눈 뜨기 무섭게 만원 지하철을 뚫고 회사에서 전쟁같은 하루를 보내는 직장인들에게 퇴근 후 웹을 이용한 강의를 듣는다는 것은 웬만한 의지를 가진 사람이 아닌 이상 힘들다고 생각합니다. 그래서 저는 지하철을 이용하기로 했습니다. 요즘에는 어딜가든 내 분신처럼 따라다니는 스마트폰이 있기 때문에 내가 어디에 있던지 스마트폰을 이용해서 강의를 들을 수 있습니다. 화면이 작아 조금 보기 힘들지도 모르겠습니다만, 5인치 정도 되는 크기의 스마트폰이라면 충분히 시청 가능하죠. 그 작은 화면으로 미드와 영화는 충분히 잘 보면서 강의는 화면이 작아서 못듣겠다는건 그냥 핑계꺼리일뿐이겠죠.\n\n지난 2년 동안 거의 모든 강의는 지하철을 타고 이동하면서 들었습니다. 출근할때 한개, 퇴근할때 한개 들으면(집이 좀 멀어야겠죠^^ 저는 인천에서 강남으로 출퇴근해서 충분히 가능했죠) 학기 중에 충분히 모든 강의를 듣고도 남습니다. 한 과목이 15강으로 이뤄져있고, 보통은 6과목(18학점)을 듣기 때문에 총 90개의 강의로 이뤄져있습니다. 하루에 2개씩 듣고 주중에만 듣는다고 가정하더라도 9주일이면 충분히 시청할 수 있습니다. 중간, 기말, 대체시험 등 시험기간을 제외하더라도 충분한 시간입니다. 결국 시간 없다는 말은 핑계에 불과하단 얘기죠. 혹시라도 일이 너무 많아 주말에도 철야를 해야할 정도의 회사라면 하루빨리 그만두는게 몸과 정신건강에 좋습니다.\n\n조금 자랑 섞인 말을 해보려고합니다. 저는 학사편입으로 3학년부터 시작했습니다. 매 학기마다 듣고 싶은 강의만 골라서 들었고, 다양한 교양수업과 타학과 전공수업(불문과, 미디어학과, 통계학과 등)도 수강하면서 나름대로 의미있는 강의를 들으려고 노력했습니다. 주어진대로만 수강하지 않고 저 자신의 취향과 의지가 들어가다보니 나름의 동기부여도 됐을뿐 아니라 듣고싶었던 과목을 듣는거라 학점을 취득하기도 훨씬 수월했습니다. 그 결과 3번의 학기(마지막은 아직 안나왔으니)동안 총 2번의 성적우수 장학금을 받게 되었습니다. 총 평점도 4.3 만점에 4.1이 넘는답니다.\n\n사실 방송통신대학에서 점수를 따는건 그리 어려운 일이 아닙니다. 전체 강의를 한번 다 듣고 난뒤에는 지금까지 쌓여있는 기출문제와 워크북의 문제만 풀어봐도 충분히 만점에 가까운 점수를 얻을 수 있습니다. 방송대에서 A 이상의 학점을 받으려면 90점 이상의 점수를 획득해야하는데, 물론 쉬운 일은 아닙니다. 하지만, 주어진 강의와 기출, 그리고 워크북만 잘 숙지한다면 그리 어렵지도 않습니다. 교수님들이나 조교들도 방송대 문제를 매년 새롭게 만들거나 하지는 않기 때문입니다. 하지만 과목이 신설됐거나 교수님이 바꼈을 때와 같이 상황이 바꼈을 때는 주의할 필요가 있습니다. 출제경향도 알 수 없을 뿐더러 참고할 사항이 없기 때문에 확실한 준비를 하기가 어렵습니다. 이럴때는 들었던 강의를 여러번 다시 돌려보거나, 교재 위주로 공부할 것을 추천 드립니다. 결국에는 강의하시는 교수님들도 자기가 말하지 않은 것에 대한 문제는 출제하지 않으시니까요.\n\n그리고 방송대에서 큰 문제중 하나는 바로 졸업논문이랍니다. 원격으로 강의를 수강하면서 논문이라뇨. 정말 청천벽력같은 일이었습니다. 시작도 안해보고 그 부담감 때문에 논문이 아닌 다른 방법이 없나 찾아보았습니다. 구하는자에게 길이 있다는 말이 딱 맞는것처럼 논문을 쓰지 않고 졸업할 수 있는 방법이 있더군요. 바로 자격증!!! 제가 다닌 컴퓨터과학과의 경우에는 정보처리기사와 전자계산기조직응용기사라는 이름도 거창하게 긴 두 개의 자격증을 취득하면 논문을 쓰지 않아도 되죠. 정보처리기사를 이전에 취득했기에 다행이다 싶던 찰나, 자세히 살펴보니 2005년부터는 재학중 취득한 자에게만 허용된다고 하더라구요. 그래서 울며겨자먹기로 듣도보도 못한 전자계산기조직응용기사라는 자격증에 대해 알아봤습니다. 뭐, 정보처리기사와 비슷하긴한데, 문제는 실기!!!! 직접 전자회로를 만들어서 제출하는게 실기!!! 이런....ㅠㅠ 그래도 방법이 있었으니, 실기(필답형 80 + 실기형 20)에서 60점을 받으면 합격인데, 필답형 80점중에 60점을 취득하면 실기형은 출석만해도 된다는 거!! 뭐 이런 자격증이 있나 싶었지만, 논문은 죽어도 쓰기 싫어서 한번 해보기로 했지요. 결과는 한번에 취득!!!\n\n아직 마지막 학기의 결과는 나오지 않았지만, 가채점 해본 결과 무난하게 졸업 가능할거라 생각합니다. 총 2년간 4학기를 다닌다는게 누가 볼 때는 쉬운 일이 아닐 수 있겠습니다만, 궁한 사람에게는 그리 어렵지 않는 길이기도 합니다. 남들이 무언가에 도전하고 내가 생각하기에는 정말 어렵게 보이는 일을 하고 있다고 해서 미리 겁먹을 필요는 없습니다. 무슨 일이든 막상 해보면 생각보다 어렵지 않고 정말로 절실히, 격렬하게 그 일이 되길 원한다면 주위의 모든 것들이 그 일이 되도록 도와줄 것이기 때문입니다. 방송대 2년은 학위보다는 도전의 시작이라는 느낌입니다. 이제 시작되었고 앞으로 살면서 또다시 수많은 도전에 직면할텐데 그때마다 좌절하지 않고 그 일들을 성공으로 바꿀 수 있는 밑거름이 된 2년이라 생각할랍니다.\n","slug":"2015-06-29-remind-of-knou","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv6v0015wxt4nvj5qcxg","content":"<p>저는 비전공자입니다. 그래서인지 소프트웨어 개발일을 하면서 늘 비전공자 딱지를 달고 일을 해왔던거 같습니다. 사실 학위라는게 그 사람의 실력을 말해주는 것도 아니라 큰 의미가 없다는게 평소의 제 생각이기도 합니다만, 막상 일을 하다보면 내가 잘 모르거나 생소한 용어가 나올때마다 비전공자라서 그런건 아닌가라는 생각을 떨쳐낼수 없더군요. 나름대로 컴퓨터 사이언스에 대한 기본적인 지식을 쌓는데 노력도 해보았지만 만족스럽다는 생각이 든적은 한번도 없었습니다. 어떤 문제에 봉착하게 되면, 내가 뭘 모르는지 조차도 모르는 상황이 생겨버려서 쉽게 포기해버리기도 하더라구요. 이건 아무래도 체계적이고 연쇄적인 학습이 이뤄지지 않는 탓이라 생각하고 스스로를 위로할 수 밖에 없었습니다. 이렇게 쉽게 떨어져나가지 않는 비전공자의 족쇄를 영원히 끊어버리기 위해 학위를 따기로 결심했었습니다. 하지만, 현실적으로 오프라인 대학을 선택하는건 무리였기에 온라인으로 학위 취득이 가능한 방법을 찾아보았죠. 결국 선택지는 사이버대학이냐 방송통신대학이냐 였습니다.</p><p>우선 사이버대학의 장점이라면, 소속 학교의 시설을 이용할 수 있고 시험을 집에서 치르기 때문에 학위취득이 수월하다는 것입니다. 하지만 사립이라 학비가 비싸고 학위취득이 수월하다보니 평소에는 공부에 소홀하게 되어 실력향상에 큰 도움이 안된다는 단점이 있죠. 반면에, 방송통신대학은 시험장에서 시험을 보고, 학기당 학교에 나가야하는 출석수업이 며칠 포함되기 때문에 직장인들에게는 조금 부담스럽다는 단점이 있지만, 그만큼 노력에 따라 점수를 얻을 수 있고 실력향상에도 어느정도 도움이 된다는 장점이 있죠. 그리고 무엇보다 학비가 저렴한편입니다. 저는 학위도 중요했지만, 실제로 공부를 하고 싶다는 생각이 강했기에 사이버대학이 아닌 방송통신대학을 선택했습니다. 방송통신대학은 보통 ‘방통대’, ‘방송대’ 등으로 불리곤 합니다(이하 방송대). 인터넷에 떠도는 여러 글이나 커뮤니티를 살펴보면, 방송대를 다닐까 고민하셨던 분들이나 직접 다녀본 사람들이 방송대는 빡빡해서 졸업하기 어렵다고들 하더라구요. 그것도 정규 학기만에 졸업하기는 더더욱 어렵다고들 하죠. 보통 4년과정일때 5~7년 정도를 생각한다고 할 정도니까요.</p><p>괜한 말들에 겁먹어 봤자 직접 겪어보지 않으면 모르는법. 과감하게 등록을 했습니다. 방송대를 다녀야겠다고 결심한 것이 재작년 여름이라 가을학기부터 다니기로 했답니다. 나중에 알게 된 사실이지만, 어느정도 수준 소득 아래의 연봉을 받고 계신 분들은 등록한 학기부터 국가장학금을 신청할 수 있답니다. 저는 그것도 모르고 입학금과 수업료를 내고 말았죠. 등록금이라 하기에는 너무 싼 40만원도 안하는 돈이긴 하지만, 나이가 있고 가족이 있는 사람들에게는 결코 쉽게 쓸 수 있는 돈은 아닙니다. 하지만, 첫 학기라 그랬을까요? 아니면 사이버대학에 비해서 3~4배 정도 저렴한 학비 때문이었을까요, 학교를 다시 다닌다는 마음에 선뜻 결제를 해버렸습니다. 당시 교재비까지 포함해도 대략 40만원 안팍이었던걸로 기억합니다. 등록하실때 반드시 주의할점은, 교재비는 결제하지 마시라는 겁니다. 교재비는 해당 학년의 학기의 모든 과목에 대한 교재비입니다. 만약에 미리 등록된 과목이 아닌 다른 학년이나 다른 학과의 수업을 들으려고 하면 미리 결제한 교재는 쓸모없게 되버리겠죠. 그래서 꼭 수강신청을 완료한 후에 자신이 등록한 과목의 교재를 사야합니다.</p><p>방송통신대학의 강의는 이름 그대로 방송과 통신을 통해서 이뤄집니다. 가장 많이 이용하는 매체는 세가지 인데, 웹을 통한 강의, 스마트폰을 이용한 강의, 그리고 TV를 통한 강의가 있죠. 이 중 TV에서 나오는 강의는 그 수가 많지 않습니다. 그래서 대다수는 웹을 이용하게 되죠. 하지만, 눈 뜨기 무섭게 만원 지하철을 뚫고 회사에서 전쟁같은 하루를 보내는 직장인들에게 퇴근 후 웹을 이용한 강의를 듣는다는 것은 웬만한 의지를 가진 사람이 아닌 이상 힘들다고 생각합니다. 그래서 저는 지하철을 이용하기로 했습니다. 요즘에는 어딜가든 내 분신처럼 따라다니는 스마트폰이 있기 때문에 내가 어디에 있던지 스마트폰을 이용해서 강의를 들을 수 있습니다. 화면이 작아 조금 보기 힘들지도 모르겠습니다만, 5인치 정도 되는 크기의 스마트폰이라면 충분히 시청 가능하죠. 그 작은 화면으로 미드와 영화는 충분히 잘 보면서 강의는 화면이 작아서 못듣겠다는건 그냥 핑계꺼리일뿐이겠죠.</p><p>지난 2년 동안 거의 모든 강의는 지하철을 타고 이동하면서 들었습니다. 출근할때 한개, 퇴근할때 한개 들으면(집이 좀 멀어야겠죠^^ 저는 인천에서 강남으로 출퇴근해서 충분히 가능했죠) 학기 중에 충분히 모든 강의를 듣고도 남습니다. 한 과목이 15강으로 이뤄져있고, 보통은 6과목(18학점)을 듣기 때문에 총 90개의 강의로 이뤄져있습니다. 하루에 2개씩 듣고 주중에만 듣는다고 가정하더라도 9주일이면 충분히 시청할 수 있습니다. 중간, 기말, 대체시험 등 시험기간을 제외하더라도 충분한 시간입니다. 결국 시간 없다는 말은 핑계에 불과하단 얘기죠. 혹시라도 일이 너무 많아 주말에도 철야를 해야할 정도의 회사라면 하루빨리 그만두는게 몸과 정신건강에 좋습니다.</p><p>조금 자랑 섞인 말을 해보려고합니다. 저는 학사편입으로 3학년부터 시작했습니다. 매 학기마다 듣고 싶은 강의만 골라서 들었고, 다양한 교양수업과 타학과 전공수업(불문과, 미디어학과, 통계학과 등)도 수강하면서 나름대로 의미있는 강의를 들으려고 노력했습니다. 주어진대로만 수강하지 않고 저 자신의 취향과 의지가 들어가다보니 나름의 동기부여도 됐을뿐 아니라 듣고싶었던 과목을 듣는거라 학점을 취득하기도 훨씬 수월했습니다. 그 결과 3번의 학기(마지막은 아직 안나왔으니)동안 총 2번의 성적우수 장학금을 받게 되었습니다. 총 평점도 4.3 만점에 4.1이 넘는답니다.</p><p>사실 방송통신대학에서 점수를 따는건 그리 어려운 일이 아닙니다. 전체 강의를 한번 다 듣고 난뒤에는 지금까지 쌓여있는 기출문제와 워크북의 문제만 풀어봐도 충분히 만점에 가까운 점수를 얻을 수 있습니다. 방송대에서 A 이상의 학점을 받으려면 90점 이상의 점수를 획득해야하는데, 물론 쉬운 일은 아닙니다. 하지만, 주어진 강의와 기출, 그리고 워크북만 잘 숙지한다면 그리 어렵지도 않습니다. 교수님들이나 조교들도 방송대 문제를 매년 새롭게 만들거나 하지는 않기 때문입니다. 하지만 과목이 신설됐거나 교수님이 바꼈을 때와 같이 상황이 바꼈을 때는 주의할 필요가 있습니다. 출제경향도 알 수 없을 뿐더러 참고할 사항이 없기 때문에 확실한 준비를 하기가 어렵습니다. 이럴때는 들었던 강의를 여러번 다시 돌려보거나, 교재 위주로 공부할 것을 추천 드립니다. 결국에는 강의하시는 교수님들도 자기가 말하지 않은 것에 대한 문제는 출제하지 않으시니까요.</p><p>그리고 방송대에서 큰 문제중 하나는 바로 졸업논문이랍니다. 원격으로 강의를 수강하면서 논문이라뇨. 정말 청천벽력같은 일이었습니다. 시작도 안해보고 그 부담감 때문에 논문이 아닌 다른 방법이 없나 찾아보았습니다. 구하는자에게 길이 있다는 말이 딱 맞는것처럼 논문을 쓰지 않고 졸업할 수 있는 방법이 있더군요. 바로 자격증!!! 제가 다닌 컴퓨터과학과의 경우에는 정보처리기사와 전자계산기조직응용기사라는 이름도 거창하게 긴 두 개의 자격증을 취득하면 논문을 쓰지 않아도 되죠. 정보처리기사를 이전에 취득했기에 다행이다 싶던 찰나, 자세히 살펴보니 2005년부터는 재학중 취득한 자에게만 허용된다고 하더라구요. 그래서 울며겨자먹기로 듣도보도 못한 전자계산기조직응용기사라는 자격증에 대해 알아봤습니다. 뭐, 정보처리기사와 비슷하긴한데, 문제는 실기!!!! 직접 전자회로를 만들어서 제출하는게 실기!!! 이런….ㅠㅠ 그래도 방법이 있었으니, 실기(필답형 80 + 실기형 20)에서 60점을 받으면 합격인데, 필답형 80점중에 60점을 취득하면 실기형은 출석만해도 된다는 거!! 뭐 이런 자격증이 있나 싶었지만, 논문은 죽어도 쓰기 싫어서 한번 해보기로 했지요. 결과는 한번에 취득!!!</p><p>아직 마지막 학기의 결과는 나오지 않았지만, 가채점 해본 결과 무난하게 졸업 가능할거라 생각합니다. 총 2년간 4학기를 다닌다는게 누가 볼 때는 쉬운 일이 아닐 수 있겠습니다만, 궁한 사람에게는 그리 어렵지 않는 길이기도 합니다. 남들이 무언가에 도전하고 내가 생각하기에는 정말 어렵게 보이는 일을 하고 있다고 해서 미리 겁먹을 필요는 없습니다. 무슨 일이든 막상 해보면 생각보다 어렵지 않고 정말로 절실히, 격렬하게 그 일이 되길 원한다면 주위의 모든 것들이 그 일이 되도록 도와줄 것이기 때문입니다. 방송대 2년은 학위보다는 도전의 시작이라는 느낌입니다. 이제 시작되었고 앞으로 살면서 또다시 수많은 도전에 직면할텐데 그때마다 좌절하지 않고 그 일들을 성공으로 바꿀 수 있는 밑거름이 된 2년이라 생각할랍니다.</p>","excerpt":"","more":"<p>저는 비전공자입니다. 그래서인지 소프트웨어 개발일을 하면서 늘 비전공자 딱지를 달고 일을 해왔던거 같습니다. 사실 학위라는게 그 사람의 실력을 말해주는 것도 아니라 큰 의미가 없다는게 평소의 제 생각이기도 합니다만, 막상 일을 하다보면 내가 잘 모르거나 생소한 용어가 나올때마다 비전공자라서 그런건 아닌가라는 생각을 떨쳐낼수 없더군요. 나름대로 컴퓨터 사이언스에 대한 기본적인 지식을 쌓는데 노력도 해보았지만 만족스럽다는 생각이 든적은 한번도 없었습니다. 어떤 문제에 봉착하게 되면, 내가 뭘 모르는지 조차도 모르는 상황이 생겨버려서 쉽게 포기해버리기도 하더라구요. 이건 아무래도 체계적이고 연쇄적인 학습이 이뤄지지 않는 탓이라 생각하고 스스로를 위로할 수 밖에 없었습니다. 이렇게 쉽게 떨어져나가지 않는 비전공자의 족쇄를 영원히 끊어버리기 위해 학위를 따기로 결심했었습니다. 하지만, 현실적으로 오프라인 대학을 선택하는건 무리였기에 온라인으로 학위 취득이 가능한 방법을 찾아보았죠. 결국 선택지는 사이버대학이냐 방송통신대학이냐 였습니다.</p><p>우선 사이버대학의 장점이라면, 소속 학교의 시설을 이용할 수 있고 시험을 집에서 치르기 때문에 학위취득이 수월하다는 것입니다. 하지만 사립이라 학비가 비싸고 학위취득이 수월하다보니 평소에는 공부에 소홀하게 되어 실력향상에 큰 도움이 안된다는 단점이 있죠. 반면에, 방송통신대학은 시험장에서 시험을 보고, 학기당 학교에 나가야하는 출석수업이 며칠 포함되기 때문에 직장인들에게는 조금 부담스럽다는 단점이 있지만, 그만큼 노력에 따라 점수를 얻을 수 있고 실력향상에도 어느정도 도움이 된다는 장점이 있죠. 그리고 무엇보다 학비가 저렴한편입니다. 저는 학위도 중요했지만, 실제로 공부를 하고 싶다는 생각이 강했기에 사이버대학이 아닌 방송통신대학을 선택했습니다. 방송통신대학은 보통 ‘방통대’, ‘방송대’ 등으로 불리곤 합니다(이하 방송대). 인터넷에 떠도는 여러 글이나 커뮤니티를 살펴보면, 방송대를 다닐까 고민하셨던 분들이나 직접 다녀본 사람들이 방송대는 빡빡해서 졸업하기 어렵다고들 하더라구요. 그것도 정규 학기만에 졸업하기는 더더욱 어렵다고들 하죠. 보통 4년과정일때 5~7년 정도를 생각한다고 할 정도니까요.</p><p>괜한 말들에 겁먹어 봤자 직접 겪어보지 않으면 모르는법. 과감하게 등록을 했습니다. 방송대를 다녀야겠다고 결심한 것이 재작년 여름이라 가을학기부터 다니기로 했답니다. 나중에 알게 된 사실이지만, 어느정도 수준 소득 아래의 연봉을 받고 계신 분들은 등록한 학기부터 국가장학금을 신청할 수 있답니다. 저는 그것도 모르고 입학금과 수업료를 내고 말았죠. 등록금이라 하기에는 너무 싼 40만원도 안하는 돈이긴 하지만, 나이가 있고 가족이 있는 사람들에게는 결코 쉽게 쓸 수 있는 돈은 아닙니다. 하지만, 첫 학기라 그랬을까요? 아니면 사이버대학에 비해서 3~4배 정도 저렴한 학비 때문이었을까요, 학교를 다시 다닌다는 마음에 선뜻 결제를 해버렸습니다. 당시 교재비까지 포함해도 대략 40만원 안팍이었던걸로 기억합니다. 등록하실때 반드시 주의할점은, 교재비는 결제하지 마시라는 겁니다. 교재비는 해당 학년의 학기의 모든 과목에 대한 교재비입니다. 만약에 미리 등록된 과목이 아닌 다른 학년이나 다른 학과의 수업을 들으려고 하면 미리 결제한 교재는 쓸모없게 되버리겠죠. 그래서 꼭 수강신청을 완료한 후에 자신이 등록한 과목의 교재를 사야합니다.</p><p>방송통신대학의 강의는 이름 그대로 방송과 통신을 통해서 이뤄집니다. 가장 많이 이용하는 매체는 세가지 인데, 웹을 통한 강의, 스마트폰을 이용한 강의, 그리고 TV를 통한 강의가 있죠. 이 중 TV에서 나오는 강의는 그 수가 많지 않습니다. 그래서 대다수는 웹을 이용하게 되죠. 하지만, 눈 뜨기 무섭게 만원 지하철을 뚫고 회사에서 전쟁같은 하루를 보내는 직장인들에게 퇴근 후 웹을 이용한 강의를 듣는다는 것은 웬만한 의지를 가진 사람이 아닌 이상 힘들다고 생각합니다. 그래서 저는 지하철을 이용하기로 했습니다. 요즘에는 어딜가든 내 분신처럼 따라다니는 스마트폰이 있기 때문에 내가 어디에 있던지 스마트폰을 이용해서 강의를 들을 수 있습니다. 화면이 작아 조금 보기 힘들지도 모르겠습니다만, 5인치 정도 되는 크기의 스마트폰이라면 충분히 시청 가능하죠. 그 작은 화면으로 미드와 영화는 충분히 잘 보면서 강의는 화면이 작아서 못듣겠다는건 그냥 핑계꺼리일뿐이겠죠.</p><p>지난 2년 동안 거의 모든 강의는 지하철을 타고 이동하면서 들었습니다. 출근할때 한개, 퇴근할때 한개 들으면(집이 좀 멀어야겠죠^^ 저는 인천에서 강남으로 출퇴근해서 충분히 가능했죠) 학기 중에 충분히 모든 강의를 듣고도 남습니다. 한 과목이 15강으로 이뤄져있고, 보통은 6과목(18학점)을 듣기 때문에 총 90개의 강의로 이뤄져있습니다. 하루에 2개씩 듣고 주중에만 듣는다고 가정하더라도 9주일이면 충분히 시청할 수 있습니다. 중간, 기말, 대체시험 등 시험기간을 제외하더라도 충분한 시간입니다. 결국 시간 없다는 말은 핑계에 불과하단 얘기죠. 혹시라도 일이 너무 많아 주말에도 철야를 해야할 정도의 회사라면 하루빨리 그만두는게 몸과 정신건강에 좋습니다.</p><p>조금 자랑 섞인 말을 해보려고합니다. 저는 학사편입으로 3학년부터 시작했습니다. 매 학기마다 듣고 싶은 강의만 골라서 들었고, 다양한 교양수업과 타학과 전공수업(불문과, 미디어학과, 통계학과 등)도 수강하면서 나름대로 의미있는 강의를 들으려고 노력했습니다. 주어진대로만 수강하지 않고 저 자신의 취향과 의지가 들어가다보니 나름의 동기부여도 됐을뿐 아니라 듣고싶었던 과목을 듣는거라 학점을 취득하기도 훨씬 수월했습니다. 그 결과 3번의 학기(마지막은 아직 안나왔으니)동안 총 2번의 성적우수 장학금을 받게 되었습니다. 총 평점도 4.3 만점에 4.1이 넘는답니다.</p><p>사실 방송통신대학에서 점수를 따는건 그리 어려운 일이 아닙니다. 전체 강의를 한번 다 듣고 난뒤에는 지금까지 쌓여있는 기출문제와 워크북의 문제만 풀어봐도 충분히 만점에 가까운 점수를 얻을 수 있습니다. 방송대에서 A 이상의 학점을 받으려면 90점 이상의 점수를 획득해야하는데, 물론 쉬운 일은 아닙니다. 하지만, 주어진 강의와 기출, 그리고 워크북만 잘 숙지한다면 그리 어렵지도 않습니다. 교수님들이나 조교들도 방송대 문제를 매년 새롭게 만들거나 하지는 않기 때문입니다. 하지만 과목이 신설됐거나 교수님이 바꼈을 때와 같이 상황이 바꼈을 때는 주의할 필요가 있습니다. 출제경향도 알 수 없을 뿐더러 참고할 사항이 없기 때문에 확실한 준비를 하기가 어렵습니다. 이럴때는 들었던 강의를 여러번 다시 돌려보거나, 교재 위주로 공부할 것을 추천 드립니다. 결국에는 강의하시는 교수님들도 자기가 말하지 않은 것에 대한 문제는 출제하지 않으시니까요.</p><p>그리고 방송대에서 큰 문제중 하나는 바로 졸업논문이랍니다. 원격으로 강의를 수강하면서 논문이라뇨. 정말 청천벽력같은 일이었습니다. 시작도 안해보고 그 부담감 때문에 논문이 아닌 다른 방법이 없나 찾아보았습니다. 구하는자에게 길이 있다는 말이 딱 맞는것처럼 논문을 쓰지 않고 졸업할 수 있는 방법이 있더군요. 바로 자격증!!! 제가 다닌 컴퓨터과학과의 경우에는 정보처리기사와 전자계산기조직응용기사라는 이름도 거창하게 긴 두 개의 자격증을 취득하면 논문을 쓰지 않아도 되죠. 정보처리기사를 이전에 취득했기에 다행이다 싶던 찰나, 자세히 살펴보니 2005년부터는 재학중 취득한 자에게만 허용된다고 하더라구요. 그래서 울며겨자먹기로 듣도보도 못한 전자계산기조직응용기사라는 자격증에 대해 알아봤습니다. 뭐, 정보처리기사와 비슷하긴한데, 문제는 실기!!!! 직접 전자회로를 만들어서 제출하는게 실기!!! 이런….ㅠㅠ 그래도 방법이 있었으니, 실기(필답형 80 + 실기형 20)에서 60점을 받으면 합격인데, 필답형 80점중에 60점을 취득하면 실기형은 출석만해도 된다는 거!! 뭐 이런 자격증이 있나 싶었지만, 논문은 죽어도 쓰기 싫어서 한번 해보기로 했지요. 결과는 한번에 취득!!!</p><p>아직 마지막 학기의 결과는 나오지 않았지만, 가채점 해본 결과 무난하게 졸업 가능할거라 생각합니다. 총 2년간 4학기를 다닌다는게 누가 볼 때는 쉬운 일이 아닐 수 있겠습니다만, 궁한 사람에게는 그리 어렵지 않는 길이기도 합니다. 남들이 무언가에 도전하고 내가 생각하기에는 정말 어렵게 보이는 일을 하고 있다고 해서 미리 겁먹을 필요는 없습니다. 무슨 일이든 막상 해보면 생각보다 어렵지 않고 정말로 절실히, 격렬하게 그 일이 되길 원한다면 주위의 모든 것들이 그 일이 되도록 도와줄 것이기 때문입니다. 방송대 2년은 학위보다는 도전의 시작이라는 느낌입니다. 이제 시작되었고 앞으로 살면서 또다시 수많은 도전에 직면할텐데 그때마다 좌절하지 않고 그 일들을 성공으로 바꿀 수 있는 밑거름이 된 2년이라 생각할랍니다.</p>"},{"title":"[django] 장고 트랜잭션 활용","date":"2016-01-16T14:31:45.000Z","_content":"최근에 python + django로 프로젝트를 진행하고 있습니다. 두달전부터 시작했으니 아직은 python, django 모두 초보라 할 수 있겠죠. 프로젝트를 같이 진행하는 동료들도 저 처럼 거의 저와 비슷한 상황입니다. 그러다보니 프로젝트를 진행하면서 막히는 부분이 생길때마다 검색을 해보거나 파이썬 콘솔을 이용하여 검증, 또는 소스를 뜯어보며 작동원리를 파악하곤 합니다. 이 삽질과도 같은 수많은 과정들이 한순간에 끝나버리는게 아쉬워 블로그에 남겨보기로 결정했습니다. 시간이 남아돌아 글을 쓰는것은 아니지만, 글을 쓰는 행위는 어렴풋이 이해하고 있는 것들을 확실히 나의 지식으로 만드는 최고의 방법이라 생각하기에 시간을 쪼개서 지속해 나갈 생각입니다. 여러가지 부분을 다루겠지만, 체계 따위는 없습니다. 그때 그때 떠오르는 것, 또는 프로젝트 진행중에 특정부분이 막혀 정리가 필요한 시점에는 그 부분을 다루려고 합니다.\n\n첫번째는 트랜잭션(transaction)입니다. 트랜잭션이 뭐냐고 물었을때 대부분의 프로그래머가 잘 알고 있을거라 생각합니다. 간단히 말해 작업 단위라 할 수 있는데, 여러개의 프로세스가 묶여져 마치 하나처럼 동작하는 방식이라 할 수 있겠습니다. 그렇기 때문에 성공 아니면 실패 두가지 결과밖에 존재하지 않겠죠. 좀더 개발적(?)인 언어로는 이렇게 말할수도 있습니다. 데이터베이스를 저장하고 수정하는 여러 작업을 하나의 쿼리로 처리할 수 없기 때문에 여러개의 쿼리로 나눠서 실행해야 하는데, 그 결과의 원자성을 보장해주기 위해 동일한 DB connection 객체를 사용하는 기술이라 할 수 있습니다. 자세한 내용은 직접 검색해 보시기 바랍니다. \n\n\n> *django는 1.8.5 버전을 사용하였고, python은 3.4.3 버전을 사용하였습니다.*\n\n\n### 1. 데코레이터(decorator)를 이용한 python + django 트랜잭션 \n\ndjango에서 트랜잭션을 이용하는 가장 쉬운 방법으로 데코레이터를 이용하는 방법입니다.\n데코레이터를 이용하게 되면, 메서드 안에는 코드를 삽입할 필요가 없습니다. \n\"@transaction.atomic\" 이라는 데코레이터를 붙여주기만 하면 끝입니다.\ndjango에서 기본적으로 제공해주는 데코레이터이므로, 따로 모듈을 설치해줄 필요도 없습니다.\n\n가장 간단하게 atomic(원자성)한 트랜잭션을 처리하기 위한 손쉬운 방법이죠.\n\n```\nfrom django.db import transaction\n\n@transaction.atomic\ndef transaction_test1(arg1, arg2):\n    # start transaction\n    a.save()\n    \n    b.save()\n    # end transaction\n```\n\n\n### 2. with 명령어를 이용한 트랜잭션\n\n메서드 전체가 아닌 메서드의 일부분만 트랜잭션으로 묶어줄 필요가 있을 때 사용합니다.\n트랜잭션으로 묶일 부분을 직접 지정해줘야 하는 불편함(?)이 있지만, 데코레이터와 마찬가지로 비교적 간단하게 처리가 가능합니다.\n\n```\nfrom django.db import transaction\n\ndef transaction_test2(arg1, arg2):\n    \n    a.save()    # 항상 save 처리됨, 예외가 발생할 경우 에러 발생\n    \n    with transaction.atomic():\n        # start transaction\n        b.save()\n\n        c.save()\n        # end transaction\n```\n\n\n### 3. savepoint를 직접 지정해 주는 트랜잭션\n \n1번과 2번의 방법의 경우, 메서드 내에서(트랜잭션으로 묶여져있는) exception이 발생하더라도 저절로 롤백이 되기 때문에 예외처리를 따로 해 줄 필요는 없습니다. \n하지만, 3번의 경우에는 savepoint 및 cummit 지점을 직접 지정해 주기 때문에 예외처리 또한 별도로 처리되어야 합니다.\n\n```\nfrom django.db import transaction\n\ndef transaction_test3(arg1, arg2):\n\n    a.save()\n\n    sid = transaction.savepoint()\n    # start transaction\n    try:\n\n        b.save()\n        \n        c.save()\n\n        transaction.savepoint_commit(sid)\n        # end transaction\n    except Exception\n        # 트랜잭션 내에서 에러 발생시 롤백처리\n        transaction.savepoint_rollback(sid)\n```\n\n\n위의 세가지가 django에서 트랜잭션을 처리하는 방법입니다. 간단한 트랜잭션 함수를 호출할 때는 위의 세가지 중에 알맞은 방법을 선택해서 처리하면 되겠습니다. 좀 더 복잡한 상황을 한번 살펴보도록 하죠.\n \n```\nfrom django.db import transaction\n\ndef method1():\n    \n    with transaction.atomic():\n\n        # 첫번째 트랜잭션 메서드\n        first_transaction()\n        \n        # 두번째 트랜잭션 메서드\n        second_transaction()\n        \n\n@transaction.atomic\ndef first_transaction():\n    \n    a.update()\n    \n    b.update()\n\n\n@transaction.atomic\ndef second_transaction():\n    \n    c.update()\n    \n    d.update()\n```\n\n\n위의 경우에는 트랜잭션 메서드 두개를 묶어서 또다른 트랜잭션을 구성하였습니다.\n각각의 메서드는 독자적읜 트랜잭션이기 때문에 각 메서드 내에서 에러가 발생하더라도 데이터의 원자성은 유지될 것입니다. \n문제는 first_transaction() 메서드는 아무 문제 없이 commit 되었는데, second_transaction() 메서드에서 예외가 발생했을 때입니다.\n\n이렇게 되면, 첫번째 트랜잭션만 처리가 되고 두번째는 롤백이 됩니다. \n의도된 로직이면 아무 문제 없겠지만, 두 트랜잭션 메서드가 하나의 트랜잭션으로 묶여 있어야 하는 상황이라면 엄청난 문제가 발생할 수도 있습니다. \n데이터의 원자성을 유지하기 위해서는 first_transaction()과 second_transaction()을 묶어주는 또다른 트랜잭션을 만들어 줘야 합니다. 위에서는 with transaction.atomic(): 으로 묶어 줬지만, 데코레이터를 써도 상관은 없습니다. 다만, 가장 상위의 메서드가 django의 view에 해당하는 경우가 많기 때문에 불필요한 부분까지 같이 묶어주고 싶지 않아서 with 구문을 이용한 것입니다.\n\n\n### 결론:\n> - django 트랜잭션은 쉽다.\n> - 트랜잭션을 겹쳐서 사용할 경우, 주의해서 사용해야 한다. (반드시 테스트 해볼것!!) \n","source":"_posts/2016-01-16-django-migration.md","raw":"---\ntitle: \"[django] 장고 트랜잭션 활용\"\ndate: 2016-01-16 23:31:45\ntags:\n- python\n- django\n- transaction\n---\n최근에 python + django로 프로젝트를 진행하고 있습니다. 두달전부터 시작했으니 아직은 python, django 모두 초보라 할 수 있겠죠. 프로젝트를 같이 진행하는 동료들도 저 처럼 거의 저와 비슷한 상황입니다. 그러다보니 프로젝트를 진행하면서 막히는 부분이 생길때마다 검색을 해보거나 파이썬 콘솔을 이용하여 검증, 또는 소스를 뜯어보며 작동원리를 파악하곤 합니다. 이 삽질과도 같은 수많은 과정들이 한순간에 끝나버리는게 아쉬워 블로그에 남겨보기로 결정했습니다. 시간이 남아돌아 글을 쓰는것은 아니지만, 글을 쓰는 행위는 어렴풋이 이해하고 있는 것들을 확실히 나의 지식으로 만드는 최고의 방법이라 생각하기에 시간을 쪼개서 지속해 나갈 생각입니다. 여러가지 부분을 다루겠지만, 체계 따위는 없습니다. 그때 그때 떠오르는 것, 또는 프로젝트 진행중에 특정부분이 막혀 정리가 필요한 시점에는 그 부분을 다루려고 합니다.\n\n첫번째는 트랜잭션(transaction)입니다. 트랜잭션이 뭐냐고 물었을때 대부분의 프로그래머가 잘 알고 있을거라 생각합니다. 간단히 말해 작업 단위라 할 수 있는데, 여러개의 프로세스가 묶여져 마치 하나처럼 동작하는 방식이라 할 수 있겠습니다. 그렇기 때문에 성공 아니면 실패 두가지 결과밖에 존재하지 않겠죠. 좀더 개발적(?)인 언어로는 이렇게 말할수도 있습니다. 데이터베이스를 저장하고 수정하는 여러 작업을 하나의 쿼리로 처리할 수 없기 때문에 여러개의 쿼리로 나눠서 실행해야 하는데, 그 결과의 원자성을 보장해주기 위해 동일한 DB connection 객체를 사용하는 기술이라 할 수 있습니다. 자세한 내용은 직접 검색해 보시기 바랍니다. \n\n\n> *django는 1.8.5 버전을 사용하였고, python은 3.4.3 버전을 사용하였습니다.*\n\n\n### 1. 데코레이터(decorator)를 이용한 python + django 트랜잭션 \n\ndjango에서 트랜잭션을 이용하는 가장 쉬운 방법으로 데코레이터를 이용하는 방법입니다.\n데코레이터를 이용하게 되면, 메서드 안에는 코드를 삽입할 필요가 없습니다. \n\"@transaction.atomic\" 이라는 데코레이터를 붙여주기만 하면 끝입니다.\ndjango에서 기본적으로 제공해주는 데코레이터이므로, 따로 모듈을 설치해줄 필요도 없습니다.\n\n가장 간단하게 atomic(원자성)한 트랜잭션을 처리하기 위한 손쉬운 방법이죠.\n\n```\nfrom django.db import transaction\n\n@transaction.atomic\ndef transaction_test1(arg1, arg2):\n    # start transaction\n    a.save()\n    \n    b.save()\n    # end transaction\n```\n\n\n### 2. with 명령어를 이용한 트랜잭션\n\n메서드 전체가 아닌 메서드의 일부분만 트랜잭션으로 묶어줄 필요가 있을 때 사용합니다.\n트랜잭션으로 묶일 부분을 직접 지정해줘야 하는 불편함(?)이 있지만, 데코레이터와 마찬가지로 비교적 간단하게 처리가 가능합니다.\n\n```\nfrom django.db import transaction\n\ndef transaction_test2(arg1, arg2):\n    \n    a.save()    # 항상 save 처리됨, 예외가 발생할 경우 에러 발생\n    \n    with transaction.atomic():\n        # start transaction\n        b.save()\n\n        c.save()\n        # end transaction\n```\n\n\n### 3. savepoint를 직접 지정해 주는 트랜잭션\n \n1번과 2번의 방법의 경우, 메서드 내에서(트랜잭션으로 묶여져있는) exception이 발생하더라도 저절로 롤백이 되기 때문에 예외처리를 따로 해 줄 필요는 없습니다. \n하지만, 3번의 경우에는 savepoint 및 cummit 지점을 직접 지정해 주기 때문에 예외처리 또한 별도로 처리되어야 합니다.\n\n```\nfrom django.db import transaction\n\ndef transaction_test3(arg1, arg2):\n\n    a.save()\n\n    sid = transaction.savepoint()\n    # start transaction\n    try:\n\n        b.save()\n        \n        c.save()\n\n        transaction.savepoint_commit(sid)\n        # end transaction\n    except Exception\n        # 트랜잭션 내에서 에러 발생시 롤백처리\n        transaction.savepoint_rollback(sid)\n```\n\n\n위의 세가지가 django에서 트랜잭션을 처리하는 방법입니다. 간단한 트랜잭션 함수를 호출할 때는 위의 세가지 중에 알맞은 방법을 선택해서 처리하면 되겠습니다. 좀 더 복잡한 상황을 한번 살펴보도록 하죠.\n \n```\nfrom django.db import transaction\n\ndef method1():\n    \n    with transaction.atomic():\n\n        # 첫번째 트랜잭션 메서드\n        first_transaction()\n        \n        # 두번째 트랜잭션 메서드\n        second_transaction()\n        \n\n@transaction.atomic\ndef first_transaction():\n    \n    a.update()\n    \n    b.update()\n\n\n@transaction.atomic\ndef second_transaction():\n    \n    c.update()\n    \n    d.update()\n```\n\n\n위의 경우에는 트랜잭션 메서드 두개를 묶어서 또다른 트랜잭션을 구성하였습니다.\n각각의 메서드는 독자적읜 트랜잭션이기 때문에 각 메서드 내에서 에러가 발생하더라도 데이터의 원자성은 유지될 것입니다. \n문제는 first_transaction() 메서드는 아무 문제 없이 commit 되었는데, second_transaction() 메서드에서 예외가 발생했을 때입니다.\n\n이렇게 되면, 첫번째 트랜잭션만 처리가 되고 두번째는 롤백이 됩니다. \n의도된 로직이면 아무 문제 없겠지만, 두 트랜잭션 메서드가 하나의 트랜잭션으로 묶여 있어야 하는 상황이라면 엄청난 문제가 발생할 수도 있습니다. \n데이터의 원자성을 유지하기 위해서는 first_transaction()과 second_transaction()을 묶어주는 또다른 트랜잭션을 만들어 줘야 합니다. 위에서는 with transaction.atomic(): 으로 묶어 줬지만, 데코레이터를 써도 상관은 없습니다. 다만, 가장 상위의 메서드가 django의 view에 해당하는 경우가 많기 때문에 불필요한 부분까지 같이 묶어주고 싶지 않아서 with 구문을 이용한 것입니다.\n\n\n### 결론:\n> - django 트랜잭션은 쉽다.\n> - 트랜잭션을 겹쳐서 사용할 경우, 주의해서 사용해야 한다. (반드시 테스트 해볼것!!) \n","slug":"2016-01-16-django-migration","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv6x0018wxt410l95ji8","content":"<p>최근에 python + django로 프로젝트를 진행하고 있습니다. 두달전부터 시작했으니 아직은 python, django 모두 초보라 할 수 있겠죠. 프로젝트를 같이 진행하는 동료들도 저 처럼 거의 저와 비슷한 상황입니다. 그러다보니 프로젝트를 진행하면서 막히는 부분이 생길때마다 검색을 해보거나 파이썬 콘솔을 이용하여 검증, 또는 소스를 뜯어보며 작동원리를 파악하곤 합니다. 이 삽질과도 같은 수많은 과정들이 한순간에 끝나버리는게 아쉬워 블로그에 남겨보기로 결정했습니다. 시간이 남아돌아 글을 쓰는것은 아니지만, 글을 쓰는 행위는 어렴풋이 이해하고 있는 것들을 확실히 나의 지식으로 만드는 최고의 방법이라 생각하기에 시간을 쪼개서 지속해 나갈 생각입니다. 여러가지 부분을 다루겠지만, 체계 따위는 없습니다. 그때 그때 떠오르는 것, 또는 프로젝트 진행중에 특정부분이 막혀 정리가 필요한 시점에는 그 부분을 다루려고 합니다.</p><p>첫번째는 트랜잭션(transaction)입니다. 트랜잭션이 뭐냐고 물었을때 대부분의 프로그래머가 잘 알고 있을거라 생각합니다. 간단히 말해 작업 단위라 할 수 있는데, 여러개의 프로세스가 묶여져 마치 하나처럼 동작하는 방식이라 할 수 있겠습니다. 그렇기 때문에 성공 아니면 실패 두가지 결과밖에 존재하지 않겠죠. 좀더 개발적(?)인 언어로는 이렇게 말할수도 있습니다. 데이터베이스를 저장하고 수정하는 여러 작업을 하나의 쿼리로 처리할 수 없기 때문에 여러개의 쿼리로 나눠서 실행해야 하는데, 그 결과의 원자성을 보장해주기 위해 동일한 DB connection 객체를 사용하는 기술이라 할 수 있습니다. 자세한 내용은 직접 검색해 보시기 바랍니다.</p><blockquote><p><em>django는 1.8.5 버전을 사용하였고, python은 3.4.3 버전을 사용하였습니다.</em></p></blockquote><h3 id=\"1-데코레이터-decorator-를-이용한-python-django-트랜잭션\"><a href=\"#1-데코레이터-decorator-를-이용한-python-django-트랜잭션\" class=\"headerlink\" title=\"1. 데코레이터(decorator)를 이용한 python + django 트랜잭션\"></a>1. 데코레이터(decorator)를 이용한 python + django 트랜잭션</h3><p>django에서 트랜잭션을 이용하는 가장 쉬운 방법으로 데코레이터를 이용하는 방법입니다.<br>데코레이터를 이용하게 되면, 메서드 안에는 코드를 삽입할 필요가 없습니다.<br>“@transaction.atomic” 이라는 데코레이터를 붙여주기만 하면 끝입니다.<br>django에서 기본적으로 제공해주는 데코레이터이므로, 따로 모듈을 설치해줄 필요도 없습니다.</p><p>가장 간단하게 atomic(원자성)한 트랜잭션을 처리하기 위한 손쉬운 방법이죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test1</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># start transaction</span></div><div class=\"line\">    a.save()</div><div class=\"line\">    </div><div class=\"line\">    b.save()</div><div class=\"line\">    <span class=\"comment\"># end transaction</span></div></pre></td></tr></table></figure><h3 id=\"2-with-명령어를-이용한-트랜잭션\"><a href=\"#2-with-명령어를-이용한-트랜잭션\" class=\"headerlink\" title=\"2. with 명령어를 이용한 트랜잭션\"></a>2. with 명령어를 이용한 트랜잭션</h3><p>메서드 전체가 아닌 메서드의 일부분만 트랜잭션으로 묶어줄 필요가 있을 때 사용합니다.<br>트랜잭션으로 묶일 부분을 직접 지정해줘야 하는 불편함(?)이 있지만, 데코레이터와 마찬가지로 비교적 간단하게 처리가 가능합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test2</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    a.save()    <span class=\"comment\"># 항상 save 처리됨, 예외가 발생할 경우 에러 발생</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</div><div class=\"line\">        <span class=\"comment\"># start transaction</span></div><div class=\"line\">        b.save()</div><div class=\"line\"></div><div class=\"line\">        c.save()</div><div class=\"line\">        <span class=\"comment\"># end transaction</span></div></pre></td></tr></table></figure><h3 id=\"3-savepoint를-직접-지정해-주는-트랜잭션\"><a href=\"#3-savepoint를-직접-지정해-주는-트랜잭션\" class=\"headerlink\" title=\"3. savepoint를 직접 지정해 주는 트랜잭션\"></a>3. savepoint를 직접 지정해 주는 트랜잭션</h3><p>1번과 2번의 방법의 경우, 메서드 내에서(트랜잭션으로 묶여져있는) exception이 발생하더라도 저절로 롤백이 되기 때문에 예외처리를 따로 해 줄 필요는 없습니다.<br>하지만, 3번의 경우에는 savepoint 및 cummit 지점을 직접 지정해 주기 때문에 예외처리 또한 별도로 처리되어야 합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test3</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    a.save()</div><div class=\"line\"></div><div class=\"line\">    sid = transaction.savepoint()</div><div class=\"line\">    <span class=\"comment\"># start transaction</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">        b.save()</div><div class=\"line\">        </div><div class=\"line\">        c.save()</div><div class=\"line\"></div><div class=\"line\">        transaction.savepoint_commit(sid)</div><div class=\"line\">        <span class=\"comment\"># end transaction</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception</div><div class=\"line\">        <span class=\"comment\"># 트랜잭션 내에서 에러 발생시 롤백처리</span></div><div class=\"line\">        transaction.savepoint_rollback(sid)</div></pre></td></tr></table></figure><p>위의 세가지가 django에서 트랜잭션을 처리하는 방법입니다. 간단한 트랜잭션 함수를 호출할 때는 위의 세가지 중에 알맞은 방법을 선택해서 처리하면 되겠습니다. 좀 더 복잡한 상황을 한번 살펴보도록 하죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 첫번째 트랜잭션 메서드</span></div><div class=\"line\">        first_transaction()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 두번째 트랜잭션 메서드</span></div><div class=\"line\">        second_transaction()</div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first_transaction</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    a.update()</div><div class=\"line\">    </div><div class=\"line\">    b.update()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">second_transaction</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    c.update()</div><div class=\"line\">    </div><div class=\"line\">    d.update()</div></pre></td></tr></table></figure><p>위의 경우에는 트랜잭션 메서드 두개를 묶어서 또다른 트랜잭션을 구성하였습니다.<br>각각의 메서드는 독자적읜 트랜잭션이기 때문에 각 메서드 내에서 에러가 발생하더라도 데이터의 원자성은 유지될 것입니다.<br>문제는 first_transaction() 메서드는 아무 문제 없이 commit 되었는데, second_transaction() 메서드에서 예외가 발생했을 때입니다.</p><p>이렇게 되면, 첫번째 트랜잭션만 처리가 되고 두번째는 롤백이 됩니다.<br>의도된 로직이면 아무 문제 없겠지만, 두 트랜잭션 메서드가 하나의 트랜잭션으로 묶여 있어야 하는 상황이라면 엄청난 문제가 발생할 수도 있습니다.<br>데이터의 원자성을 유지하기 위해서는 first_transaction()과 second_transaction()을 묶어주는 또다른 트랜잭션을 만들어 줘야 합니다. 위에서는 with transaction.atomic(): 으로 묶어 줬지만, 데코레이터를 써도 상관은 없습니다. 다만, 가장 상위의 메서드가 django의 view에 해당하는 경우가 많기 때문에 불필요한 부분까지 같이 묶어주고 싶지 않아서 with 구문을 이용한 것입니다.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론:\"></a>결론:</h3><blockquote><ul><li>django 트랜잭션은 쉽다.</li><li>트랜잭션을 겹쳐서 사용할 경우, 주의해서 사용해야 한다. (반드시 테스트 해볼것!!)</li></ul></blockquote>","excerpt":"","more":"<p>최근에 python + django로 프로젝트를 진행하고 있습니다. 두달전부터 시작했으니 아직은 python, django 모두 초보라 할 수 있겠죠. 프로젝트를 같이 진행하는 동료들도 저 처럼 거의 저와 비슷한 상황입니다. 그러다보니 프로젝트를 진행하면서 막히는 부분이 생길때마다 검색을 해보거나 파이썬 콘솔을 이용하여 검증, 또는 소스를 뜯어보며 작동원리를 파악하곤 합니다. 이 삽질과도 같은 수많은 과정들이 한순간에 끝나버리는게 아쉬워 블로그에 남겨보기로 결정했습니다. 시간이 남아돌아 글을 쓰는것은 아니지만, 글을 쓰는 행위는 어렴풋이 이해하고 있는 것들을 확실히 나의 지식으로 만드는 최고의 방법이라 생각하기에 시간을 쪼개서 지속해 나갈 생각입니다. 여러가지 부분을 다루겠지만, 체계 따위는 없습니다. 그때 그때 떠오르는 것, 또는 프로젝트 진행중에 특정부분이 막혀 정리가 필요한 시점에는 그 부분을 다루려고 합니다.</p><p>첫번째는 트랜잭션(transaction)입니다. 트랜잭션이 뭐냐고 물었을때 대부분의 프로그래머가 잘 알고 있을거라 생각합니다. 간단히 말해 작업 단위라 할 수 있는데, 여러개의 프로세스가 묶여져 마치 하나처럼 동작하는 방식이라 할 수 있겠습니다. 그렇기 때문에 성공 아니면 실패 두가지 결과밖에 존재하지 않겠죠. 좀더 개발적(?)인 언어로는 이렇게 말할수도 있습니다. 데이터베이스를 저장하고 수정하는 여러 작업을 하나의 쿼리로 처리할 수 없기 때문에 여러개의 쿼리로 나눠서 실행해야 하는데, 그 결과의 원자성을 보장해주기 위해 동일한 DB connection 객체를 사용하는 기술이라 할 수 있습니다. 자세한 내용은 직접 검색해 보시기 바랍니다.</p><blockquote><p><em>django는 1.8.5 버전을 사용하였고, python은 3.4.3 버전을 사용하였습니다.</em></p></blockquote><h3 id=\"1-데코레이터-decorator-를-이용한-python-django-트랜잭션\"><a href=\"#1-데코레이터-decorator-를-이용한-python-django-트랜잭션\" class=\"headerlink\" title=\"1. 데코레이터(decorator)를 이용한 python + django 트랜잭션\"></a>1. 데코레이터(decorator)를 이용한 python + django 트랜잭션</h3><p>django에서 트랜잭션을 이용하는 가장 쉬운 방법으로 데코레이터를 이용하는 방법입니다.<br>데코레이터를 이용하게 되면, 메서드 안에는 코드를 삽입할 필요가 없습니다.<br>“@transaction.atomic” 이라는 데코레이터를 붙여주기만 하면 끝입니다.<br>django에서 기본적으로 제공해주는 데코레이터이므로, 따로 모듈을 설치해줄 필요도 없습니다.</p><p>가장 간단하게 atomic(원자성)한 트랜잭션을 처리하기 위한 손쉬운 방법이죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test1</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># start transaction</span></div><div class=\"line\">    a.save()</div><div class=\"line\">    </div><div class=\"line\">    b.save()</div><div class=\"line\">    <span class=\"comment\"># end transaction</span></div></pre></td></tr></table></figure><h3 id=\"2-with-명령어를-이용한-트랜잭션\"><a href=\"#2-with-명령어를-이용한-트랜잭션\" class=\"headerlink\" title=\"2. with 명령어를 이용한 트랜잭션\"></a>2. with 명령어를 이용한 트랜잭션</h3><p>메서드 전체가 아닌 메서드의 일부분만 트랜잭션으로 묶어줄 필요가 있을 때 사용합니다.<br>트랜잭션으로 묶일 부분을 직접 지정해줘야 하는 불편함(?)이 있지만, 데코레이터와 마찬가지로 비교적 간단하게 처리가 가능합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test2</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    a.save()    <span class=\"comment\"># 항상 save 처리됨, 예외가 발생할 경우 에러 발생</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</div><div class=\"line\">        <span class=\"comment\"># start transaction</span></div><div class=\"line\">        b.save()</div><div class=\"line\"></div><div class=\"line\">        c.save()</div><div class=\"line\">        <span class=\"comment\"># end transaction</span></div></pre></td></tr></table></figure><h3 id=\"3-savepoint를-직접-지정해-주는-트랜잭션\"><a href=\"#3-savepoint를-직접-지정해-주는-트랜잭션\" class=\"headerlink\" title=\"3. savepoint를 직접 지정해 주는 트랜잭션\"></a>3. savepoint를 직접 지정해 주는 트랜잭션</h3><p>1번과 2번의 방법의 경우, 메서드 내에서(트랜잭션으로 묶여져있는) exception이 발생하더라도 저절로 롤백이 되기 때문에 예외처리를 따로 해 줄 필요는 없습니다.<br>하지만, 3번의 경우에는 savepoint 및 cummit 지점을 직접 지정해 주기 때문에 예외처리 또한 별도로 처리되어야 합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transaction_test3</span><span class=\"params\">(arg1, arg2)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    a.save()</div><div class=\"line\"></div><div class=\"line\">    sid = transaction.savepoint()</div><div class=\"line\">    <span class=\"comment\"># start transaction</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">        b.save()</div><div class=\"line\">        </div><div class=\"line\">        c.save()</div><div class=\"line\"></div><div class=\"line\">        transaction.savepoint_commit(sid)</div><div class=\"line\">        <span class=\"comment\"># end transaction</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception</div><div class=\"line\">        <span class=\"comment\"># 트랜잭션 내에서 에러 발생시 롤백처리</span></div><div class=\"line\">        transaction.savepoint_rollback(sid)</div></pre></td></tr></table></figure><p>위의 세가지가 django에서 트랜잭션을 처리하는 방법입니다. 간단한 트랜잭션 함수를 호출할 때는 위의 세가지 중에 알맞은 방법을 선택해서 처리하면 되겠습니다. 좀 더 복잡한 상황을 한번 살펴보도록 하죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 첫번째 트랜잭션 메서드</span></div><div class=\"line\">        first_transaction()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 두번째 트랜잭션 메서드</span></div><div class=\"line\">        second_transaction()</div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first_transaction</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    a.update()</div><div class=\"line\">    </div><div class=\"line\">    b.update()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@transaction.atomic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">second_transaction</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    c.update()</div><div class=\"line\">    </div><div class=\"line\">    d.update()</div></pre></td></tr></table></figure><p>위의 경우에는 트랜잭션 메서드 두개를 묶어서 또다른 트랜잭션을 구성하였습니다.<br>각각의 메서드는 독자적읜 트랜잭션이기 때문에 각 메서드 내에서 에러가 발생하더라도 데이터의 원자성은 유지될 것입니다.<br>문제는 first_transaction() 메서드는 아무 문제 없이 commit 되었는데, second_transaction() 메서드에서 예외가 발생했을 때입니다.</p><p>이렇게 되면, 첫번째 트랜잭션만 처리가 되고 두번째는 롤백이 됩니다.<br>의도된 로직이면 아무 문제 없겠지만, 두 트랜잭션 메서드가 하나의 트랜잭션으로 묶여 있어야 하는 상황이라면 엄청난 문제가 발생할 수도 있습니다.<br>데이터의 원자성을 유지하기 위해서는 first_transaction()과 second_transaction()을 묶어주는 또다른 트랜잭션을 만들어 줘야 합니다. 위에서는 with transaction.atomic(): 으로 묶어 줬지만, 데코레이터를 써도 상관은 없습니다. 다만, 가장 상위의 메서드가 django의 view에 해당하는 경우가 많기 때문에 불필요한 부분까지 같이 묶어주고 싶지 않아서 with 구문을 이용한 것입니다.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론:\"></a>결론:</h3><blockquote><ul><li>django 트랜잭션은 쉽다.</li><li>트랜잭션을 겹쳐서 사용할 경우, 주의해서 사용해야 한다. (반드시 테스트 해볼것!!)</li></ul></blockquote>"},{"title":"얕은 복사(shallow copy) vs 깊은 복사(deep copy)","date":"2016-01-20T14:31:45.000Z","_content":"이번에는 객체의 복사에 대해서 알아보려고 합니다. 객체의 복사는 크게 얉은 복사(shallow copy)와 깊은 복사(deep copy)로 나뉩니다. 얼핏 들으면 단어 자체의 의미가 모호하게 느껴질 수도 있습니다만, 사실은 크게 어려운 개념은 아닙니다. 하지만 주의해서 사용하지 않으면 크나큰 문제를 야기할 수도 있습니다. 이미 잘 알고 있다 하더라도 확실히 짚고 넘어 간다는 생각으로 다시한번 정리해 보시면 좋을것 같네요\n\n\n### 1. 단순 객체복제\n\n변수만 복사하다 보니 바라보는 객체는 당연히 동일하겠죠.\n즉, 두개의 변수 중 하나만 변경되어도 나머지 하나도 동일하게 수정되는 현상이 발생하게 됩니다.\n\n```\na = [1, 2, 3, 4]\nb = a     # shallow copy\nprint(b)    # [1, 2, 3, 4]\nb[2] = 100   # b의 item 변경\nprint(b)    # [1, 2, 100, 4]\nprint(a)    # [1, 2, 100, 4], a의 item도 수정됨!!\n```\n\n\n리스트를 만들어(파이썬에서 대괄호'[ ]'는 list) 1에서 4까지 네개의 숫자를 넣고 a에 할당했습니다.\n그러면 a는 리스트 객체의 주소를 바라보는 변수가 되는 것이죠.\n그런뒤 a를 b에 할당해 주었습니다. 그러면 b는 a와 같은 객체의 주소를 바라보게 됩니다.\n\n문제는 a 또는 b를 수정하게 되면 문제가 발생합니다.\n위에서 처럼 b의 세번째(2) 값을 3에서 100으로 바꿔주게 되면, 당연히 b는 [1, 2, 100, 4] 처럼 출력됩니다.\n그런데 변경되지 않을 거라고 예상했던 a 또한 b와 같이 [1, 2, 100, 4] 로 수정되어버렸습니다.\n이는 a와 b가 동일한 객체를 참조하기 때문에 발생하는 문제입니다.\n\n한가지 주의할 점은 위의 경우처럼 복사된 참조 변수를 수정했을때,\n처음에 할당한 참조 변수의 값 역시 똑같이 수정되는 것은 리스트와 같은 변경가능(mutable) 객체일 때만 해당한다는 것입니다.\n숫자나 문자열과 같은 불변의(immutable) 객체일때는 위의 경우가 해당되지 않습니다.\n\n``` \na = 10\nb = a     \nprint(b)    # 10 출력력\nb = \"abc\"  \nprint(b)    # abc 출력\nprint(a)    # 10 출력\n```\n\n\n위와 같은 결과가 나타나는 이유는, 불변의 객체이기 때문입니다.\n말장난 하는것 같아 보이지만, 불변의 객체란 값이 바뀌지 않는 객체를 뜻하죠.\n그렇기 때문에 참조변수를 수정한다는 것은 같은 주소의 값(value)이 바뀌는 것이 아니라 그 변수에 새로운 객체가 할당되는 것을 뜻합니다.\n\n\n### 2. 얉은 복사(shallow copy)\n\n얉은 복사의 경우는 어떨까요? 단순 복사와 어떤 차이가 있을까요?\n단순 복제와 얉은 복사의 차이점은 복합객체(리스트)는 별도로 생성하지만 그 안에 들어가는 내용은 원래와 같은 객체 객체라는 점입니다. \n예제로 살펴보면 아래와 같습니다.\n\n```\nimport copy\n\na = [1, [1, 2, 3]]\nb = copy.copy(a)    # shallow copy 발생     \nprint(b)    # [1, [1, 2, 3]] 출력\nb[0] = 100  \nprint(b)    # [100, [1, 2, 3]] 출력, \nprint(a)    # [1, [1, 2, 3]] 출력, shallow copy 가 발생해 복사된 리스트는 별도의 객체이므로 item을 수정하면 복사본만 수정된다. (immutable 객체의 경우)\n\nc = copy.copy(a)\nc[1].append(4)    # 리스트의 두번째 item(내부리스트)에 4를 추가\nprint(c)    # [1, [1, 2, 3, 4]] 출력\nprint(a)    # [1, [1, 2, 3, 4]] 출력, a가 c와 똑같이 수정된 이유는 리스트의 item 내부의 객체는 동일한 객체이므로 mutable한 리스트를 수정할때는 둘다 값이 변경됨\n```\n\n\n주석에서 잘 설명하고 있지만, 리스트 내에 리스트가 있는 경우에 얉은 복사(b = copy.copy(a))가 이뤄지더라도 리스트 내의 내부 리스트까지 별도의 객체로 복사가 되는것은 아닙니다.\n \n위의 예제에서 b에서 첫번째 요소(숫자)를 변경하였을때 a가 변경되지 않은 것은 그 요소가 immutable 하기 때문입니다. \nimmutable 하다는 것은, 요소가 수정되는 것이 아니라 그저 다른 값으로 대체된다고 볼 수 있죠. \n그렇기 때문에 b에서 변경된 요소가 a에는 반영되어 있지 않은 것이죠.(두 리스트는 다른 객체이므로..)\n \n그러나 c의 경우는 좀 다릅니다.\na를 복사하여(c = copy.copy(a)) c를 만듭니다.\n그리고 c의 두번째 요소(리스트)에 새로운 값을 추가합니다.\n출력해보면 a와 b의 경우처럼 c에 값을 수정했을때 a는 수정되지 않을거라 기대되지만, 실제는 그렇지 않습니다.\nc의 내부리스트를 수정하게 되면 a의 내부리스트 또한 바뀌게 되는데요.\n그 이유는 a와 c의 내부리스트는 같은 객체를 참조하기 때문입니다. \nb의 경우에도 같은 객체라 말할 수도 있지만, 이 둘의 중요한 차이는 그 객체가 mutable하냐 immutable하냐의 차이입니다.\nmutable 한 경우에는 값이 수정될수 있지만, immutable 한 경우에는 값이 수정되는 것이 아니라 아예 새로운 객체로 변경되는 것이죠. \n그래서 위와 같은 차이가 나타나게 되는 것입니다.  \n\n\n### 3. 깊은 복사(deep copy)\n\nmutable한 내부객체(내부리스트)의 문제를 해결하기 위해서는 얉은 복사가 아닌 깊은 복사(deep copy)를 해야 합니다.\n\n얉은 복사가 복합객체(리스트)만 복사되고 그 안의 내용은 동일한 객체를 참조한다면, \n깊은 복사의 경우에는 복합객체를 새롭게 생성하고 그 안의 내용까지 재귀적으로 새롭게 생성하게 됩니다.\n\n그래서 깊은 복사를 하게 되면, 처음에 만들었던 객체와 복사된 객체가 전혀 달라지기 때문에 어느 한쪽을 수정한다고 해서 다른 한쪽이 영향 받는 일은 없게되겠죠.\n\n파이썬에서는 copy모듈의 deepcopy()라는 메서드를 통해 깊은 복사를 손쉽게 구현할 수 있습니다.\n\n```\nimport copy\n\na = [1, [1, 2, 3]]\nb = copy.deepcopy(a)    # deep copy 실행     \nprint(b)    # [1, [1, 2, 3]] 출력\nb[0] = 100\nb[1].append(4)  \nprint(b)    # [100, [1, 2, 3, 4]] 출력\nprint(a)    # [1, [1, 2, 3]] 출력\n```\n\n### 정리해보면,\n> 1. 단순복제는 완전히 동일한 객체, \n> 2. 얉은복사(shallow copy)는 복합객체(껍데기)만 복사, 그 내용은 동일한 객체\n> 3. 깊은복사(deep copy)는 복합객체 복사 + 그 내용도 재귀적으로 복사\n\n","source":"_posts/2016-01-20-shallow-copy-deep-copy.md","raw":"---\ntitle: \"얕은 복사(shallow copy) vs 깊은 복사(deep copy)\"\ndate: 2016-01-20 23:31:45\ntags:\n- python\n- deep copy\n---\n이번에는 객체의 복사에 대해서 알아보려고 합니다. 객체의 복사는 크게 얉은 복사(shallow copy)와 깊은 복사(deep copy)로 나뉩니다. 얼핏 들으면 단어 자체의 의미가 모호하게 느껴질 수도 있습니다만, 사실은 크게 어려운 개념은 아닙니다. 하지만 주의해서 사용하지 않으면 크나큰 문제를 야기할 수도 있습니다. 이미 잘 알고 있다 하더라도 확실히 짚고 넘어 간다는 생각으로 다시한번 정리해 보시면 좋을것 같네요\n\n\n### 1. 단순 객체복제\n\n변수만 복사하다 보니 바라보는 객체는 당연히 동일하겠죠.\n즉, 두개의 변수 중 하나만 변경되어도 나머지 하나도 동일하게 수정되는 현상이 발생하게 됩니다.\n\n```\na = [1, 2, 3, 4]\nb = a     # shallow copy\nprint(b)    # [1, 2, 3, 4]\nb[2] = 100   # b의 item 변경\nprint(b)    # [1, 2, 100, 4]\nprint(a)    # [1, 2, 100, 4], a의 item도 수정됨!!\n```\n\n\n리스트를 만들어(파이썬에서 대괄호'[ ]'는 list) 1에서 4까지 네개의 숫자를 넣고 a에 할당했습니다.\n그러면 a는 리스트 객체의 주소를 바라보는 변수가 되는 것이죠.\n그런뒤 a를 b에 할당해 주었습니다. 그러면 b는 a와 같은 객체의 주소를 바라보게 됩니다.\n\n문제는 a 또는 b를 수정하게 되면 문제가 발생합니다.\n위에서 처럼 b의 세번째(2) 값을 3에서 100으로 바꿔주게 되면, 당연히 b는 [1, 2, 100, 4] 처럼 출력됩니다.\n그런데 변경되지 않을 거라고 예상했던 a 또한 b와 같이 [1, 2, 100, 4] 로 수정되어버렸습니다.\n이는 a와 b가 동일한 객체를 참조하기 때문에 발생하는 문제입니다.\n\n한가지 주의할 점은 위의 경우처럼 복사된 참조 변수를 수정했을때,\n처음에 할당한 참조 변수의 값 역시 똑같이 수정되는 것은 리스트와 같은 변경가능(mutable) 객체일 때만 해당한다는 것입니다.\n숫자나 문자열과 같은 불변의(immutable) 객체일때는 위의 경우가 해당되지 않습니다.\n\n``` \na = 10\nb = a     \nprint(b)    # 10 출력력\nb = \"abc\"  \nprint(b)    # abc 출력\nprint(a)    # 10 출력\n```\n\n\n위와 같은 결과가 나타나는 이유는, 불변의 객체이기 때문입니다.\n말장난 하는것 같아 보이지만, 불변의 객체란 값이 바뀌지 않는 객체를 뜻하죠.\n그렇기 때문에 참조변수를 수정한다는 것은 같은 주소의 값(value)이 바뀌는 것이 아니라 그 변수에 새로운 객체가 할당되는 것을 뜻합니다.\n\n\n### 2. 얉은 복사(shallow copy)\n\n얉은 복사의 경우는 어떨까요? 단순 복사와 어떤 차이가 있을까요?\n단순 복제와 얉은 복사의 차이점은 복합객체(리스트)는 별도로 생성하지만 그 안에 들어가는 내용은 원래와 같은 객체 객체라는 점입니다. \n예제로 살펴보면 아래와 같습니다.\n\n```\nimport copy\n\na = [1, [1, 2, 3]]\nb = copy.copy(a)    # shallow copy 발생     \nprint(b)    # [1, [1, 2, 3]] 출력\nb[0] = 100  \nprint(b)    # [100, [1, 2, 3]] 출력, \nprint(a)    # [1, [1, 2, 3]] 출력, shallow copy 가 발생해 복사된 리스트는 별도의 객체이므로 item을 수정하면 복사본만 수정된다. (immutable 객체의 경우)\n\nc = copy.copy(a)\nc[1].append(4)    # 리스트의 두번째 item(내부리스트)에 4를 추가\nprint(c)    # [1, [1, 2, 3, 4]] 출력\nprint(a)    # [1, [1, 2, 3, 4]] 출력, a가 c와 똑같이 수정된 이유는 리스트의 item 내부의 객체는 동일한 객체이므로 mutable한 리스트를 수정할때는 둘다 값이 변경됨\n```\n\n\n주석에서 잘 설명하고 있지만, 리스트 내에 리스트가 있는 경우에 얉은 복사(b = copy.copy(a))가 이뤄지더라도 리스트 내의 내부 리스트까지 별도의 객체로 복사가 되는것은 아닙니다.\n \n위의 예제에서 b에서 첫번째 요소(숫자)를 변경하였을때 a가 변경되지 않은 것은 그 요소가 immutable 하기 때문입니다. \nimmutable 하다는 것은, 요소가 수정되는 것이 아니라 그저 다른 값으로 대체된다고 볼 수 있죠. \n그렇기 때문에 b에서 변경된 요소가 a에는 반영되어 있지 않은 것이죠.(두 리스트는 다른 객체이므로..)\n \n그러나 c의 경우는 좀 다릅니다.\na를 복사하여(c = copy.copy(a)) c를 만듭니다.\n그리고 c의 두번째 요소(리스트)에 새로운 값을 추가합니다.\n출력해보면 a와 b의 경우처럼 c에 값을 수정했을때 a는 수정되지 않을거라 기대되지만, 실제는 그렇지 않습니다.\nc의 내부리스트를 수정하게 되면 a의 내부리스트 또한 바뀌게 되는데요.\n그 이유는 a와 c의 내부리스트는 같은 객체를 참조하기 때문입니다. \nb의 경우에도 같은 객체라 말할 수도 있지만, 이 둘의 중요한 차이는 그 객체가 mutable하냐 immutable하냐의 차이입니다.\nmutable 한 경우에는 값이 수정될수 있지만, immutable 한 경우에는 값이 수정되는 것이 아니라 아예 새로운 객체로 변경되는 것이죠. \n그래서 위와 같은 차이가 나타나게 되는 것입니다.  \n\n\n### 3. 깊은 복사(deep copy)\n\nmutable한 내부객체(내부리스트)의 문제를 해결하기 위해서는 얉은 복사가 아닌 깊은 복사(deep copy)를 해야 합니다.\n\n얉은 복사가 복합객체(리스트)만 복사되고 그 안의 내용은 동일한 객체를 참조한다면, \n깊은 복사의 경우에는 복합객체를 새롭게 생성하고 그 안의 내용까지 재귀적으로 새롭게 생성하게 됩니다.\n\n그래서 깊은 복사를 하게 되면, 처음에 만들었던 객체와 복사된 객체가 전혀 달라지기 때문에 어느 한쪽을 수정한다고 해서 다른 한쪽이 영향 받는 일은 없게되겠죠.\n\n파이썬에서는 copy모듈의 deepcopy()라는 메서드를 통해 깊은 복사를 손쉽게 구현할 수 있습니다.\n\n```\nimport copy\n\na = [1, [1, 2, 3]]\nb = copy.deepcopy(a)    # deep copy 실행     \nprint(b)    # [1, [1, 2, 3]] 출력\nb[0] = 100\nb[1].append(4)  \nprint(b)    # [100, [1, 2, 3, 4]] 출력\nprint(a)    # [1, [1, 2, 3]] 출력\n```\n\n### 정리해보면,\n> 1. 단순복제는 완전히 동일한 객체, \n> 2. 얉은복사(shallow copy)는 복합객체(껍데기)만 복사, 그 내용은 동일한 객체\n> 3. 깊은복사(deep copy)는 복합객체 복사 + 그 내용도 재귀적으로 복사\n\n","slug":"2016-01-20-shallow-copy-deep-copy","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv70001awxt4v7yw4m2j","content":"<p>이번에는 객체의 복사에 대해서 알아보려고 합니다. 객체의 복사는 크게 얉은 복사(shallow copy)와 깊은 복사(deep copy)로 나뉩니다. 얼핏 들으면 단어 자체의 의미가 모호하게 느껴질 수도 있습니다만, 사실은 크게 어려운 개념은 아닙니다. 하지만 주의해서 사용하지 않으면 크나큰 문제를 야기할 수도 있습니다. 이미 잘 알고 있다 하더라도 확실히 짚고 넘어 간다는 생각으로 다시한번 정리해 보시면 좋을것 같네요</p><h3 id=\"1-단순-객체복제\"><a href=\"#1-단순-객체복제\" class=\"headerlink\" title=\"1. 단순 객체복제\"></a>1. 단순 객체복제</h3><p>변수만 복사하다 보니 바라보는 객체는 당연히 동일하겠죠.<br>즉, 두개의 변수 중 하나만 변경되어도 나머지 하나도 동일하게 수정되는 현상이 발생하게 됩니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">b = a     # shallow copy</div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">b[<span class=\"number\">2</span>] = <span class=\"number\">100</span>   # b의 item 변경</div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>]</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>], a의 item도 수정됨!!</div></pre></td></tr></table></figure><p>리스트를 만들어(파이썬에서 대괄호’[ ]’는 list) 1에서 4까지 네개의 숫자를 넣고 a에 할당했습니다.<br>그러면 a는 리스트 객체의 주소를 바라보는 변수가 되는 것이죠.<br>그런뒤 a를 b에 할당해 주었습니다. 그러면 b는 a와 같은 객체의 주소를 바라보게 됩니다.</p><p>문제는 a 또는 b를 수정하게 되면 문제가 발생합니다.<br>위에서 처럼 b의 세번째(2) 값을 3에서 100으로 바꿔주게 되면, 당연히 b는 [1, 2, 100, 4] 처럼 출력됩니다.<br>그런데 변경되지 않을 거라고 예상했던 a 또한 b와 같이 [1, 2, 100, 4] 로 수정되어버렸습니다.<br>이는 a와 b가 동일한 객체를 참조하기 때문에 발생하는 문제입니다.</p><p>한가지 주의할 점은 위의 경우처럼 복사된 참조 변수를 수정했을때,<br>처음에 할당한 참조 변수의 값 역시 똑같이 수정되는 것은 리스트와 같은 변경가능(mutable) 객체일 때만 해당한다는 것입니다.<br>숫자나 문자열과 같은 불변의(immutable) 객체일때는 위의 경우가 해당되지 않습니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">b </span>= a     </div><div class=\"line\">print(<span class=\"keyword\">b) </span>   <span class=\"comment\"># 10 출력력</span></div><div class=\"line\"><span class=\"keyword\">b </span>= <span class=\"string\">\"abc\"</span>  </div><div class=\"line\">print(<span class=\"keyword\">b) </span>   <span class=\"comment\"># abc 출력</span></div><div class=\"line\">print(a)    <span class=\"comment\"># 10 출력</span></div></pre></td></tr></table></figure><p>위와 같은 결과가 나타나는 이유는, 불변의 객체이기 때문입니다.<br>말장난 하는것 같아 보이지만, 불변의 객체란 값이 바뀌지 않는 객체를 뜻하죠.<br>그렇기 때문에 참조변수를 수정한다는 것은 같은 주소의 값(value)이 바뀌는 것이 아니라 그 변수에 새로운 객체가 할당되는 것을 뜻합니다.</p><h3 id=\"2-얉은-복사-shallow-copy\"><a href=\"#2-얉은-복사-shallow-copy\" class=\"headerlink\" title=\"2. 얉은 복사(shallow copy)\"></a>2. 얉은 복사(shallow copy)</h3><p>얉은 복사의 경우는 어떨까요? 단순 복사와 어떤 차이가 있을까요?<br>단순 복제와 얉은 복사의 차이점은 복합객체(리스트)는 별도로 생성하지만 그 안에 들어가는 내용은 원래와 같은 객체 객체라는 점입니다.<br>예제로 살펴보면 아래와 같습니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import copy</div><div class=\"line\"></div><div class=\"line\">a = [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]]</div><div class=\"line\">b = copy.copy(a)    # shallow copy 발생     </div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">100</span>  </div><div class=\"line\">print(b)    # [<span class=\"number\">100</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력, </div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력, shallow copy 가 발생해 복사된 리스트는 별도의 객체이므로 item을 수정하면 복사본만 수정된다. (immutable 객체의 경우)</div><div class=\"line\"></div><div class=\"line\">c = copy.copy(a)</div><div class=\"line\">c[<span class=\"number\">1</span>].append(<span class=\"number\">4</span>)    # 리스트의 두번째 item(내부리스트)에 <span class=\"number\">4</span>를 추가</div><div class=\"line\">print(c)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력, a가 c와 똑같이 수정된 이유는 리스트의 item 내부의 객체는 동일한 객체이므로 mutable한 리스트를 수정할때는 둘다 값이 변경됨</div></pre></td></tr></table></figure><p>주석에서 잘 설명하고 있지만, 리스트 내에 리스트가 있는 경우에 얉은 복사(b = copy.copy(a))가 이뤄지더라도 리스트 내의 내부 리스트까지 별도의 객체로 복사가 되는것은 아닙니다.</p><p>위의 예제에서 b에서 첫번째 요소(숫자)를 변경하였을때 a가 변경되지 않은 것은 그 요소가 immutable 하기 때문입니다.<br>immutable 하다는 것은, 요소가 수정되는 것이 아니라 그저 다른 값으로 대체된다고 볼 수 있죠.<br>그렇기 때문에 b에서 변경된 요소가 a에는 반영되어 있지 않은 것이죠.(두 리스트는 다른 객체이므로..)</p><p>그러나 c의 경우는 좀 다릅니다.<br>a를 복사하여(c = copy.copy(a)) c를 만듭니다.<br>그리고 c의 두번째 요소(리스트)에 새로운 값을 추가합니다.<br>출력해보면 a와 b의 경우처럼 c에 값을 수정했을때 a는 수정되지 않을거라 기대되지만, 실제는 그렇지 않습니다.<br>c의 내부리스트를 수정하게 되면 a의 내부리스트 또한 바뀌게 되는데요.<br>그 이유는 a와 c의 내부리스트는 같은 객체를 참조하기 때문입니다.<br>b의 경우에도 같은 객체라 말할 수도 있지만, 이 둘의 중요한 차이는 그 객체가 mutable하냐 immutable하냐의 차이입니다.<br>mutable 한 경우에는 값이 수정될수 있지만, immutable 한 경우에는 값이 수정되는 것이 아니라 아예 새로운 객체로 변경되는 것이죠.<br>그래서 위와 같은 차이가 나타나게 되는 것입니다.</p><h3 id=\"3-깊은-복사-deep-copy\"><a href=\"#3-깊은-복사-deep-copy\" class=\"headerlink\" title=\"3. 깊은 복사(deep copy)\"></a>3. 깊은 복사(deep copy)</h3><p>mutable한 내부객체(내부리스트)의 문제를 해결하기 위해서는 얉은 복사가 아닌 깊은 복사(deep copy)를 해야 합니다.</p><p>얉은 복사가 복합객체(리스트)만 복사되고 그 안의 내용은 동일한 객체를 참조한다면,<br>깊은 복사의 경우에는 복합객체를 새롭게 생성하고 그 안의 내용까지 재귀적으로 새롭게 생성하게 됩니다.</p><p>그래서 깊은 복사를 하게 되면, 처음에 만들었던 객체와 복사된 객체가 전혀 달라지기 때문에 어느 한쪽을 수정한다고 해서 다른 한쪽이 영향 받는 일은 없게되겠죠.</p><p>파이썬에서는 copy모듈의 deepcopy()라는 메서드를 통해 깊은 복사를 손쉽게 구현할 수 있습니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import copy</div><div class=\"line\"></div><div class=\"line\">a = [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]]</div><div class=\"line\">b = copy.deepcopy(a)    # deep copy 실행     </div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">100</span></div><div class=\"line\">b[<span class=\"number\">1</span>].append(<span class=\"number\">4</span>)  </div><div class=\"line\">print(b)    # [<span class=\"number\">100</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div></pre></td></tr></table></figure><h3 id=\"정리해보면\"><a href=\"#정리해보면\" class=\"headerlink\" title=\"정리해보면,\"></a>정리해보면,</h3><blockquote><ol><li>단순복제는 완전히 동일한 객체,</li><li>얉은복사(shallow copy)는 복합객체(껍데기)만 복사, 그 내용은 동일한 객체</li><li>깊은복사(deep copy)는 복합객체 복사 + 그 내용도 재귀적으로 복사</li></ol></blockquote>","excerpt":"","more":"<p>이번에는 객체의 복사에 대해서 알아보려고 합니다. 객체의 복사는 크게 얉은 복사(shallow copy)와 깊은 복사(deep copy)로 나뉩니다. 얼핏 들으면 단어 자체의 의미가 모호하게 느껴질 수도 있습니다만, 사실은 크게 어려운 개념은 아닙니다. 하지만 주의해서 사용하지 않으면 크나큰 문제를 야기할 수도 있습니다. 이미 잘 알고 있다 하더라도 확실히 짚고 넘어 간다는 생각으로 다시한번 정리해 보시면 좋을것 같네요</p><h3 id=\"1-단순-객체복제\"><a href=\"#1-단순-객체복제\" class=\"headerlink\" title=\"1. 단순 객체복제\"></a>1. 단순 객체복제</h3><p>변수만 복사하다 보니 바라보는 객체는 당연히 동일하겠죠.<br>즉, 두개의 변수 중 하나만 변경되어도 나머지 하나도 동일하게 수정되는 현상이 발생하게 됩니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">b = a     # shallow copy</div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">b[<span class=\"number\">2</span>] = <span class=\"number\">100</span>   # b의 item 변경</div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>]</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>], a의 item도 수정됨!!</div></pre></td></tr></table></figure><p>리스트를 만들어(파이썬에서 대괄호’[ ]’는 list) 1에서 4까지 네개의 숫자를 넣고 a에 할당했습니다.<br>그러면 a는 리스트 객체의 주소를 바라보는 변수가 되는 것이죠.<br>그런뒤 a를 b에 할당해 주었습니다. 그러면 b는 a와 같은 객체의 주소를 바라보게 됩니다.</p><p>문제는 a 또는 b를 수정하게 되면 문제가 발생합니다.<br>위에서 처럼 b의 세번째(2) 값을 3에서 100으로 바꿔주게 되면, 당연히 b는 [1, 2, 100, 4] 처럼 출력됩니다.<br>그런데 변경되지 않을 거라고 예상했던 a 또한 b와 같이 [1, 2, 100, 4] 로 수정되어버렸습니다.<br>이는 a와 b가 동일한 객체를 참조하기 때문에 발생하는 문제입니다.</p><p>한가지 주의할 점은 위의 경우처럼 복사된 참조 변수를 수정했을때,<br>처음에 할당한 참조 변수의 값 역시 똑같이 수정되는 것은 리스트와 같은 변경가능(mutable) 객체일 때만 해당한다는 것입니다.<br>숫자나 문자열과 같은 불변의(immutable) 객체일때는 위의 경우가 해당되지 않습니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">b </span>= a     </div><div class=\"line\">print(<span class=\"keyword\">b) </span>   <span class=\"comment\"># 10 출력력</span></div><div class=\"line\"><span class=\"keyword\">b </span>= <span class=\"string\">\"abc\"</span>  </div><div class=\"line\">print(<span class=\"keyword\">b) </span>   <span class=\"comment\"># abc 출력</span></div><div class=\"line\">print(a)    <span class=\"comment\"># 10 출력</span></div></pre></td></tr></table></figure><p>위와 같은 결과가 나타나는 이유는, 불변의 객체이기 때문입니다.<br>말장난 하는것 같아 보이지만, 불변의 객체란 값이 바뀌지 않는 객체를 뜻하죠.<br>그렇기 때문에 참조변수를 수정한다는 것은 같은 주소의 값(value)이 바뀌는 것이 아니라 그 변수에 새로운 객체가 할당되는 것을 뜻합니다.</p><h3 id=\"2-얉은-복사-shallow-copy\"><a href=\"#2-얉은-복사-shallow-copy\" class=\"headerlink\" title=\"2. 얉은 복사(shallow copy)\"></a>2. 얉은 복사(shallow copy)</h3><p>얉은 복사의 경우는 어떨까요? 단순 복사와 어떤 차이가 있을까요?<br>단순 복제와 얉은 복사의 차이점은 복합객체(리스트)는 별도로 생성하지만 그 안에 들어가는 내용은 원래와 같은 객체 객체라는 점입니다.<br>예제로 살펴보면 아래와 같습니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import copy</div><div class=\"line\"></div><div class=\"line\">a = [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]]</div><div class=\"line\">b = copy.copy(a)    # shallow copy 발생     </div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">100</span>  </div><div class=\"line\">print(b)    # [<span class=\"number\">100</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력, </div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력, shallow copy 가 발생해 복사된 리스트는 별도의 객체이므로 item을 수정하면 복사본만 수정된다. (immutable 객체의 경우)</div><div class=\"line\"></div><div class=\"line\">c = copy.copy(a)</div><div class=\"line\">c[<span class=\"number\">1</span>].append(<span class=\"number\">4</span>)    # 리스트의 두번째 item(내부리스트)에 <span class=\"number\">4</span>를 추가</div><div class=\"line\">print(c)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력, a가 c와 똑같이 수정된 이유는 리스트의 item 내부의 객체는 동일한 객체이므로 mutable한 리스트를 수정할때는 둘다 값이 변경됨</div></pre></td></tr></table></figure><p>주석에서 잘 설명하고 있지만, 리스트 내에 리스트가 있는 경우에 얉은 복사(b = copy.copy(a))가 이뤄지더라도 리스트 내의 내부 리스트까지 별도의 객체로 복사가 되는것은 아닙니다.</p><p>위의 예제에서 b에서 첫번째 요소(숫자)를 변경하였을때 a가 변경되지 않은 것은 그 요소가 immutable 하기 때문입니다.<br>immutable 하다는 것은, 요소가 수정되는 것이 아니라 그저 다른 값으로 대체된다고 볼 수 있죠.<br>그렇기 때문에 b에서 변경된 요소가 a에는 반영되어 있지 않은 것이죠.(두 리스트는 다른 객체이므로..)</p><p>그러나 c의 경우는 좀 다릅니다.<br>a를 복사하여(c = copy.copy(a)) c를 만듭니다.<br>그리고 c의 두번째 요소(리스트)에 새로운 값을 추가합니다.<br>출력해보면 a와 b의 경우처럼 c에 값을 수정했을때 a는 수정되지 않을거라 기대되지만, 실제는 그렇지 않습니다.<br>c의 내부리스트를 수정하게 되면 a의 내부리스트 또한 바뀌게 되는데요.<br>그 이유는 a와 c의 내부리스트는 같은 객체를 참조하기 때문입니다.<br>b의 경우에도 같은 객체라 말할 수도 있지만, 이 둘의 중요한 차이는 그 객체가 mutable하냐 immutable하냐의 차이입니다.<br>mutable 한 경우에는 값이 수정될수 있지만, immutable 한 경우에는 값이 수정되는 것이 아니라 아예 새로운 객체로 변경되는 것이죠.<br>그래서 위와 같은 차이가 나타나게 되는 것입니다.</p><h3 id=\"3-깊은-복사-deep-copy\"><a href=\"#3-깊은-복사-deep-copy\" class=\"headerlink\" title=\"3. 깊은 복사(deep copy)\"></a>3. 깊은 복사(deep copy)</h3><p>mutable한 내부객체(내부리스트)의 문제를 해결하기 위해서는 얉은 복사가 아닌 깊은 복사(deep copy)를 해야 합니다.</p><p>얉은 복사가 복합객체(리스트)만 복사되고 그 안의 내용은 동일한 객체를 참조한다면,<br>깊은 복사의 경우에는 복합객체를 새롭게 생성하고 그 안의 내용까지 재귀적으로 새롭게 생성하게 됩니다.</p><p>그래서 깊은 복사를 하게 되면, 처음에 만들었던 객체와 복사된 객체가 전혀 달라지기 때문에 어느 한쪽을 수정한다고 해서 다른 한쪽이 영향 받는 일은 없게되겠죠.</p><p>파이썬에서는 copy모듈의 deepcopy()라는 메서드를 통해 깊은 복사를 손쉽게 구현할 수 있습니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import copy</div><div class=\"line\"></div><div class=\"line\">a = [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]]</div><div class=\"line\">b = copy.deepcopy(a)    # deep copy 실행     </div><div class=\"line\">print(b)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"number\">100</span></div><div class=\"line\">b[<span class=\"number\">1</span>].append(<span class=\"number\">4</span>)  </div><div class=\"line\">print(b)    # [<span class=\"number\">100</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]] 출력</div><div class=\"line\">print(a)    # [<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]] 출력</div></pre></td></tr></table></figure><h3 id=\"정리해보면\"><a href=\"#정리해보면\" class=\"headerlink\" title=\"정리해보면,\"></a>정리해보면,</h3><blockquote><ol><li>단순복제는 완전히 동일한 객체,</li><li>얉은복사(shallow copy)는 복합객체(껍데기)만 복사, 그 내용은 동일한 객체</li><li>깊은복사(deep copy)는 복합객체 복사 + 그 내용도 재귀적으로 복사</li></ol></blockquote>"},{"title":"파이썬 3항 연산자 비교","date":"2016-01-22T14:31:45.000Z","_content":"\n여느 언어에나 코드 량을 줄이기 위한 다양한 기법들이 존재합니다.\n그 중에서 대표적인 것 중 하나인 3항 연사자를 파이썬에서도 사용가능 합니다. 파이썬 언어의 장점 중에 하나가 타 언어에 비해 훨씬 적은 분량으로 똑같은 코드를 작성할 수 있는 것이기에, 3항 연산자가 있는건 당연하다 할 수 있습니다.\n3항연산자는 일반적으로 아래와 같이 사용됩니다. (C, Java 등)\n\n```\nresult = condition ? when True : when False;\n```\n\n그런데, python의 경우에는 위처럼 보통의 경우와 3항 연산자가 조금 다릅니다. \n다르기만 할뿐 아니라 3항 연산자를 처리하는 방법이 한 가지가 아니라 두 가지나 있습니다.\n예전에는 파이썬에서도 한 가지 방법(and와 or)만 있었습니다만, 파이썬 2.5버전부터 새로운 방법(if와 else)이 나왔습니다.\n한가지 형태의 연산만 있으면 될텐데 굳이 새로운 방법을 만든 이유는 뭘까요?\n우선 첫번째 방법 부터 살펴보도록 하죠.\n\n\n### 1. and와 or를 이용한 3항 연산자\n\n```\n# result = condition and when True or when False;\na = 10\nb = 20\nresult = a == b and a-b or a+b    # 결과는 a+b = 30\n```\n\n\n삼항 연산자의 condition이 True면 and 뒤의 연산이 return 되고, condition이 False면 or 뒤의 연산이 return 됩니다.\nC나 Java에서 사용하는 방식과 동일한 형태이지만, 단지 '?'가 'and'가 되고, ':'가 'or'가 되는 것입니다.\n이것이 가능한 이유는 그다지 어렵지 않게 이해할 수 있습니다. \n\n파이썬에서 a and b or c라는 연산이 있습니다.\n이 연산을 조금 변형시키면 (a and b) or c로 바꿀 수 있겠습니다.\n그런뒤 파이썬 인터프리터가 실행되면, 인터프리터는 우선 (a and b)의 a를 확인합니다.\na가 True면 b를 확인하고, a가 False면 (a and b)가 False가 되므로 바로 c를 확인하게 됩니다.\n만약 a가 True 일때 b가 True면 c는 확인할 필요가 없으므로 b가 리턴됩니다.\n반대로 a가 False면, 바로 c를 확인합니다. 이때, c가 True든 False든간에 그 결과값을 무조건 return 하기 때문에 a 가 False일때는 c가 리턴된다는 것이죠.\n이해가 가실지 모르겠네요(설명이...ㅠㅠ). 파이썬 콘솔로 직접 이것저것 해보시다 보면 아마 이해될거라 생각합니다.\n\n그런데 위 설명을 잘 뜯어보면 어딘가 문제가 있습니다. \n어떤 문제인지 확인하기 위해 아래 예제를 살펴보겠습니다.\n\n```\na = 10\nb = 10\nresult = a == b and a-b or a+b    # 결과는 a+b = 20 ???????\n```\n\n\na가 10이고 b가 10일때 a == b 는 True가 되므로 result는 당연히 a-b = 10이 되야 하는데, 결과는 a+b = 20 이 되었습니다.\n왜 그런걸까요? 3항 연산자 공식에 문제는 없어 보이는데 말이죠.\n\n문제는 a and b or c 에서 b가 0일때 발생합니다. \n무슨말이냐면, 컴퓨터 과학에서 0이라는 것은 False를 의미하기도 하죠. 그래서 a가 True라고 해도 b가 0이 되면 False로 인지되기 때문에 결국에는 C를 리턴하게 되는 것입니다.\n왜 이런 문제가 발생하도록 3항 연산자를 만들었는지 모르겠습니다만, 아마도 이 문제를 보완하기 위해서 파이썬 2.5버전부터 if와 else 를 사용한 3항 연산자를 새로 만들게 된것 같습니다.\n\n\n### 2. if와 else를 이용한 3항 연산자\n\n```\n# result = when True if condition else when False;\na = 10\nb = 20\nresult = (a-b) if a == b else (a+b)    # 결과는 a+b = 30\n```\n\n\nif문을 이용한 3항 연산자는 파이썬 언어의 특징을 잘 보여줍니다.\n결과가 먼저 나와 있고, 그 뒤에 조건(condition)이 있습니다. \n만약 이 조건이 참이면 그대로 맨처음 연산을 리턴하고, 거짓이면 마지막 else 뒤의 연산을 리턴하게 됩니다.\n이해하기 어렵지는 않습니다만, 처음 파이썬을 접한 사람들에게는 조금 생소한 코드 형태일 수도 있는데요.\n일반적으로 사용하는 3항 연산자와 구조가 달라서 그럴지도 모릅니다. \n하지만 파이썬에 익숙해지다 보면, 금방 익숙해 질 수 있습니다. \n\n이러한 형태의 코드는 for 문을 사용하여 list를 만들때도 비슷하게 적용할 수 있는데요.\n\n```\nlist = [ idx for idx in range(10)]\n# list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n\n루프의 결과를 맨앞에 나열하고 그 뒤에 조건이나 for 문을 나열하여 여러 줄로 만들어야 할 코드를 한줄로 만들어 버렸습니다.\n보통 다른 언어에서는 두줄내지 세줄은 할애해야 할텐데 파이썬에서는 단 1줄로 쉽게 처리할 수 있습니다. \n아마 이러한 코드가 파이썬이 추구하는 형태의 코드 스타일이 아닐까 생각합니다.\n이 외에도 튜플을 만들때나 두 변수간의 값을 교환할 때도 다른 언어와는 다르게 훨씬 간단하게 처리할 수 있습니다(직접 찾아보시길).\n\n\n### 결론 : \n> and와 or를 이용한 3항연산자는 가급적 지양하고, if와 else를 이용한 3항 연산자에 익숙해지자!","source":"_posts/2016-01-22-python-conditional-ternary-operator.md","raw":"---\ntitle: \"파이썬 3항 연산자 비교\"\ndate: 2016-01-22 23:31:45\ntags:\n- python\n- conditional ternary operator\n- 3항 연산자\n---\n\n여느 언어에나 코드 량을 줄이기 위한 다양한 기법들이 존재합니다.\n그 중에서 대표적인 것 중 하나인 3항 연사자를 파이썬에서도 사용가능 합니다. 파이썬 언어의 장점 중에 하나가 타 언어에 비해 훨씬 적은 분량으로 똑같은 코드를 작성할 수 있는 것이기에, 3항 연산자가 있는건 당연하다 할 수 있습니다.\n3항연산자는 일반적으로 아래와 같이 사용됩니다. (C, Java 등)\n\n```\nresult = condition ? when True : when False;\n```\n\n그런데, python의 경우에는 위처럼 보통의 경우와 3항 연산자가 조금 다릅니다. \n다르기만 할뿐 아니라 3항 연산자를 처리하는 방법이 한 가지가 아니라 두 가지나 있습니다.\n예전에는 파이썬에서도 한 가지 방법(and와 or)만 있었습니다만, 파이썬 2.5버전부터 새로운 방법(if와 else)이 나왔습니다.\n한가지 형태의 연산만 있으면 될텐데 굳이 새로운 방법을 만든 이유는 뭘까요?\n우선 첫번째 방법 부터 살펴보도록 하죠.\n\n\n### 1. and와 or를 이용한 3항 연산자\n\n```\n# result = condition and when True or when False;\na = 10\nb = 20\nresult = a == b and a-b or a+b    # 결과는 a+b = 30\n```\n\n\n삼항 연산자의 condition이 True면 and 뒤의 연산이 return 되고, condition이 False면 or 뒤의 연산이 return 됩니다.\nC나 Java에서 사용하는 방식과 동일한 형태이지만, 단지 '?'가 'and'가 되고, ':'가 'or'가 되는 것입니다.\n이것이 가능한 이유는 그다지 어렵지 않게 이해할 수 있습니다. \n\n파이썬에서 a and b or c라는 연산이 있습니다.\n이 연산을 조금 변형시키면 (a and b) or c로 바꿀 수 있겠습니다.\n그런뒤 파이썬 인터프리터가 실행되면, 인터프리터는 우선 (a and b)의 a를 확인합니다.\na가 True면 b를 확인하고, a가 False면 (a and b)가 False가 되므로 바로 c를 확인하게 됩니다.\n만약 a가 True 일때 b가 True면 c는 확인할 필요가 없으므로 b가 리턴됩니다.\n반대로 a가 False면, 바로 c를 확인합니다. 이때, c가 True든 False든간에 그 결과값을 무조건 return 하기 때문에 a 가 False일때는 c가 리턴된다는 것이죠.\n이해가 가실지 모르겠네요(설명이...ㅠㅠ). 파이썬 콘솔로 직접 이것저것 해보시다 보면 아마 이해될거라 생각합니다.\n\n그런데 위 설명을 잘 뜯어보면 어딘가 문제가 있습니다. \n어떤 문제인지 확인하기 위해 아래 예제를 살펴보겠습니다.\n\n```\na = 10\nb = 10\nresult = a == b and a-b or a+b    # 결과는 a+b = 20 ???????\n```\n\n\na가 10이고 b가 10일때 a == b 는 True가 되므로 result는 당연히 a-b = 10이 되야 하는데, 결과는 a+b = 20 이 되었습니다.\n왜 그런걸까요? 3항 연산자 공식에 문제는 없어 보이는데 말이죠.\n\n문제는 a and b or c 에서 b가 0일때 발생합니다. \n무슨말이냐면, 컴퓨터 과학에서 0이라는 것은 False를 의미하기도 하죠. 그래서 a가 True라고 해도 b가 0이 되면 False로 인지되기 때문에 결국에는 C를 리턴하게 되는 것입니다.\n왜 이런 문제가 발생하도록 3항 연산자를 만들었는지 모르겠습니다만, 아마도 이 문제를 보완하기 위해서 파이썬 2.5버전부터 if와 else 를 사용한 3항 연산자를 새로 만들게 된것 같습니다.\n\n\n### 2. if와 else를 이용한 3항 연산자\n\n```\n# result = when True if condition else when False;\na = 10\nb = 20\nresult = (a-b) if a == b else (a+b)    # 결과는 a+b = 30\n```\n\n\nif문을 이용한 3항 연산자는 파이썬 언어의 특징을 잘 보여줍니다.\n결과가 먼저 나와 있고, 그 뒤에 조건(condition)이 있습니다. \n만약 이 조건이 참이면 그대로 맨처음 연산을 리턴하고, 거짓이면 마지막 else 뒤의 연산을 리턴하게 됩니다.\n이해하기 어렵지는 않습니다만, 처음 파이썬을 접한 사람들에게는 조금 생소한 코드 형태일 수도 있는데요.\n일반적으로 사용하는 3항 연산자와 구조가 달라서 그럴지도 모릅니다. \n하지만 파이썬에 익숙해지다 보면, 금방 익숙해 질 수 있습니다. \n\n이러한 형태의 코드는 for 문을 사용하여 list를 만들때도 비슷하게 적용할 수 있는데요.\n\n```\nlist = [ idx for idx in range(10)]\n# list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n\n루프의 결과를 맨앞에 나열하고 그 뒤에 조건이나 for 문을 나열하여 여러 줄로 만들어야 할 코드를 한줄로 만들어 버렸습니다.\n보통 다른 언어에서는 두줄내지 세줄은 할애해야 할텐데 파이썬에서는 단 1줄로 쉽게 처리할 수 있습니다. \n아마 이러한 코드가 파이썬이 추구하는 형태의 코드 스타일이 아닐까 생각합니다.\n이 외에도 튜플을 만들때나 두 변수간의 값을 교환할 때도 다른 언어와는 다르게 훨씬 간단하게 처리할 수 있습니다(직접 찾아보시길).\n\n\n### 결론 : \n> and와 or를 이용한 3항연산자는 가급적 지양하고, if와 else를 이용한 3항 연산자에 익숙해지자!","slug":"2016-01-22-python-conditional-ternary-operator","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv71001dwxt4yjo5tfg0","content":"<p>여느 언어에나 코드 량을 줄이기 위한 다양한 기법들이 존재합니다.<br>그 중에서 대표적인 것 중 하나인 3항 연사자를 파이썬에서도 사용가능 합니다. 파이썬 언어의 장점 중에 하나가 타 언어에 비해 훨씬 적은 분량으로 똑같은 코드를 작성할 수 있는 것이기에, 3항 연산자가 있는건 당연하다 할 수 있습니다.<br>3항연산자는 일반적으로 아래와 같이 사용됩니다. (C, Java 등)</p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = condition ? <span class=\"keyword\">when</span> <span class=\"literal\">True</span> : <span class=\"type\">when</span> <span class=\"literal\">False</span>;</div></pre></td></tr></table></figure><p>그런데, python의 경우에는 위처럼 보통의 경우와 3항 연산자가 조금 다릅니다.<br>다르기만 할뿐 아니라 3항 연산자를 처리하는 방법이 한 가지가 아니라 두 가지나 있습니다.<br>예전에는 파이썬에서도 한 가지 방법(and와 or)만 있었습니다만, 파이썬 2.5버전부터 새로운 방법(if와 else)이 나왔습니다.<br>한가지 형태의 연산만 있으면 될텐데 굳이 새로운 방법을 만든 이유는 뭘까요?<br>우선 첫번째 방법 부터 살펴보도록 하죠.</p><h3 id=\"1-and와-or를-이용한-3항-연산자\"><a href=\"#1-and와-or를-이용한-3항-연산자\" class=\"headerlink\" title=\"1. and와 or를 이용한 3항 연산자\"></a>1. and와 or를 이용한 3항 연산자</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># result = condition and when True or when False;</span></div><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">result</span> = <span class=\"keyword\">a</span> == b <span class=\"keyword\">and</span> <span class=\"keyword\">a</span>-b <span class=\"keyword\">or</span> <span class=\"keyword\">a</span>+b    <span class=\"comment\"># 결과는 a+b = 30</span></div></pre></td></tr></table></figure><p>삼항 연산자의 condition이 True면 and 뒤의 연산이 return 되고, condition이 False면 or 뒤의 연산이 return 됩니다.<br>C나 Java에서 사용하는 방식과 동일한 형태이지만, 단지 ‘?’가 ‘and’가 되고, ‘:’가 ‘or’가 되는 것입니다.<br>이것이 가능한 이유는 그다지 어렵지 않게 이해할 수 있습니다.</p><p>파이썬에서 a and b or c라는 연산이 있습니다.<br>이 연산을 조금 변형시키면 (a and b) or c로 바꿀 수 있겠습니다.<br>그런뒤 파이썬 인터프리터가 실행되면, 인터프리터는 우선 (a and b)의 a를 확인합니다.<br>a가 True면 b를 확인하고, a가 False면 (a and b)가 False가 되므로 바로 c를 확인하게 됩니다.<br>만약 a가 True 일때 b가 True면 c는 확인할 필요가 없으므로 b가 리턴됩니다.<br>반대로 a가 False면, 바로 c를 확인합니다. 이때, c가 True든 False든간에 그 결과값을 무조건 return 하기 때문에 a 가 False일때는 c가 리턴된다는 것이죠.<br>이해가 가실지 모르겠네요(설명이…ㅠㅠ). 파이썬 콘솔로 직접 이것저것 해보시다 보면 아마 이해될거라 생각합니다.</p><p>그런데 위 설명을 잘 뜯어보면 어딘가 문제가 있습니다.<br>어떤 문제인지 확인하기 위해 아래 예제를 살펴보겠습니다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">result</span> = <span class=\"keyword\">a</span> == b <span class=\"keyword\">and</span> <span class=\"keyword\">a</span>-b <span class=\"keyword\">or</span> <span class=\"keyword\">a</span>+b    <span class=\"comment\"># 결과는 a+b = 20 ???????</span></div></pre></td></tr></table></figure><p>a가 10이고 b가 10일때 a == b 는 True가 되므로 result는 당연히 a-b = 10이 되야 하는데, 결과는 a+b = 20 이 되었습니다.<br>왜 그런걸까요? 3항 연산자 공식에 문제는 없어 보이는데 말이죠.</p><p>문제는 a and b or c 에서 b가 0일때 발생합니다.<br>무슨말이냐면, 컴퓨터 과학에서 0이라는 것은 False를 의미하기도 하죠. 그래서 a가 True라고 해도 b가 0이 되면 False로 인지되기 때문에 결국에는 C를 리턴하게 되는 것입니다.<br>왜 이런 문제가 발생하도록 3항 연산자를 만들었는지 모르겠습니다만, 아마도 이 문제를 보완하기 위해서 파이썬 2.5버전부터 if와 else 를 사용한 3항 연산자를 새로 만들게 된것 같습니다.</p><h3 id=\"2-if와-else를-이용한-3항-연산자\"><a href=\"#2-if와-else를-이용한-3항-연산자\" class=\"headerlink\" title=\"2. if와 else를 이용한 3항 연산자\"></a>2. if와 else를 이용한 3항 연산자</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># result = when True if condition else when False;</span></div><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">result</span> = (<span class=\"keyword\">a</span>-b) <span class=\"keyword\">if</span> <span class=\"keyword\">a</span> == b <span class=\"keyword\">else</span> (<span class=\"keyword\">a</span>+b)    <span class=\"comment\"># 결과는 a+b = 30</span></div></pre></td></tr></table></figure><p>if문을 이용한 3항 연산자는 파이썬 언어의 특징을 잘 보여줍니다.<br>결과가 먼저 나와 있고, 그 뒤에 조건(condition)이 있습니다.<br>만약 이 조건이 참이면 그대로 맨처음 연산을 리턴하고, 거짓이면 마지막 else 뒤의 연산을 리턴하게 됩니다.<br>이해하기 어렵지는 않습니다만, 처음 파이썬을 접한 사람들에게는 조금 생소한 코드 형태일 수도 있는데요.<br>일반적으로 사용하는 3항 연산자와 구조가 달라서 그럴지도 모릅니다.<br>하지만 파이썬에 익숙해지다 보면, 금방 익숙해 질 수 있습니다.</p><p>이러한 형태의 코드는 for 문을 사용하여 list를 만들때도 비슷하게 적용할 수 있는데요.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">list</span> = [ idx for idx in range(<span class=\"number\">10</span>)]</div><div class=\"line\"># <span class=\"type\">list</span> = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure><p>루프의 결과를 맨앞에 나열하고 그 뒤에 조건이나 for 문을 나열하여 여러 줄로 만들어야 할 코드를 한줄로 만들어 버렸습니다.<br>보통 다른 언어에서는 두줄내지 세줄은 할애해야 할텐데 파이썬에서는 단 1줄로 쉽게 처리할 수 있습니다.<br>아마 이러한 코드가 파이썬이 추구하는 형태의 코드 스타일이 아닐까 생각합니다.<br>이 외에도 튜플을 만들때나 두 변수간의 값을 교환할 때도 다른 언어와는 다르게 훨씬 간단하게 처리할 수 있습니다(직접 찾아보시길).</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론 :\"></a>결론 :</h3><blockquote><p>and와 or를 이용한 3항연산자는 가급적 지양하고, if와 else를 이용한 3항 연산자에 익숙해지자!</p></blockquote>","excerpt":"","more":"<p>여느 언어에나 코드 량을 줄이기 위한 다양한 기법들이 존재합니다.<br>그 중에서 대표적인 것 중 하나인 3항 연사자를 파이썬에서도 사용가능 합니다. 파이썬 언어의 장점 중에 하나가 타 언어에 비해 훨씬 적은 분량으로 똑같은 코드를 작성할 수 있는 것이기에, 3항 연산자가 있는건 당연하다 할 수 있습니다.<br>3항연산자는 일반적으로 아래와 같이 사용됩니다. (C, Java 등)</p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = condition ? <span class=\"keyword\">when</span> <span class=\"literal\">True</span> : <span class=\"type\">when</span> <span class=\"literal\">False</span>;</div></pre></td></tr></table></figure><p>그런데, python의 경우에는 위처럼 보통의 경우와 3항 연산자가 조금 다릅니다.<br>다르기만 할뿐 아니라 3항 연산자를 처리하는 방법이 한 가지가 아니라 두 가지나 있습니다.<br>예전에는 파이썬에서도 한 가지 방법(and와 or)만 있었습니다만, 파이썬 2.5버전부터 새로운 방법(if와 else)이 나왔습니다.<br>한가지 형태의 연산만 있으면 될텐데 굳이 새로운 방법을 만든 이유는 뭘까요?<br>우선 첫번째 방법 부터 살펴보도록 하죠.</p><h3 id=\"1-and와-or를-이용한-3항-연산자\"><a href=\"#1-and와-or를-이용한-3항-연산자\" class=\"headerlink\" title=\"1. and와 or를 이용한 3항 연산자\"></a>1. and와 or를 이용한 3항 연산자</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># result = condition and when True or when False;</span></div><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">result</span> = <span class=\"keyword\">a</span> == b <span class=\"keyword\">and</span> <span class=\"keyword\">a</span>-b <span class=\"keyword\">or</span> <span class=\"keyword\">a</span>+b    <span class=\"comment\"># 결과는 a+b = 30</span></div></pre></td></tr></table></figure><p>삼항 연산자의 condition이 True면 and 뒤의 연산이 return 되고, condition이 False면 or 뒤의 연산이 return 됩니다.<br>C나 Java에서 사용하는 방식과 동일한 형태이지만, 단지 ‘?’가 ‘and’가 되고, ‘:’가 ‘or’가 되는 것입니다.<br>이것이 가능한 이유는 그다지 어렵지 않게 이해할 수 있습니다.</p><p>파이썬에서 a and b or c라는 연산이 있습니다.<br>이 연산을 조금 변형시키면 (a and b) or c로 바꿀 수 있겠습니다.<br>그런뒤 파이썬 인터프리터가 실행되면, 인터프리터는 우선 (a and b)의 a를 확인합니다.<br>a가 True면 b를 확인하고, a가 False면 (a and b)가 False가 되므로 바로 c를 확인하게 됩니다.<br>만약 a가 True 일때 b가 True면 c는 확인할 필요가 없으므로 b가 리턴됩니다.<br>반대로 a가 False면, 바로 c를 확인합니다. 이때, c가 True든 False든간에 그 결과값을 무조건 return 하기 때문에 a 가 False일때는 c가 리턴된다는 것이죠.<br>이해가 가실지 모르겠네요(설명이…ㅠㅠ). 파이썬 콘솔로 직접 이것저것 해보시다 보면 아마 이해될거라 생각합니다.</p><p>그런데 위 설명을 잘 뜯어보면 어딘가 문제가 있습니다.<br>어떤 문제인지 확인하기 위해 아래 예제를 살펴보겠습니다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">result</span> = <span class=\"keyword\">a</span> == b <span class=\"keyword\">and</span> <span class=\"keyword\">a</span>-b <span class=\"keyword\">or</span> <span class=\"keyword\">a</span>+b    <span class=\"comment\"># 결과는 a+b = 20 ???????</span></div></pre></td></tr></table></figure><p>a가 10이고 b가 10일때 a == b 는 True가 되므로 result는 당연히 a-b = 10이 되야 하는데, 결과는 a+b = 20 이 되었습니다.<br>왜 그런걸까요? 3항 연산자 공식에 문제는 없어 보이는데 말이죠.</p><p>문제는 a and b or c 에서 b가 0일때 발생합니다.<br>무슨말이냐면, 컴퓨터 과학에서 0이라는 것은 False를 의미하기도 하죠. 그래서 a가 True라고 해도 b가 0이 되면 False로 인지되기 때문에 결국에는 C를 리턴하게 되는 것입니다.<br>왜 이런 문제가 발생하도록 3항 연산자를 만들었는지 모르겠습니다만, 아마도 이 문제를 보완하기 위해서 파이썬 2.5버전부터 if와 else 를 사용한 3항 연산자를 새로 만들게 된것 같습니다.</p><h3 id=\"2-if와-else를-이용한-3항-연산자\"><a href=\"#2-if와-else를-이용한-3항-연산자\" class=\"headerlink\" title=\"2. if와 else를 이용한 3항 연산자\"></a>2. if와 else를 이용한 3항 연산자</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># result = when True if condition else when False;</span></div><div class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"built_in\">result</span> = (<span class=\"keyword\">a</span>-b) <span class=\"keyword\">if</span> <span class=\"keyword\">a</span> == b <span class=\"keyword\">else</span> (<span class=\"keyword\">a</span>+b)    <span class=\"comment\"># 결과는 a+b = 30</span></div></pre></td></tr></table></figure><p>if문을 이용한 3항 연산자는 파이썬 언어의 특징을 잘 보여줍니다.<br>결과가 먼저 나와 있고, 그 뒤에 조건(condition)이 있습니다.<br>만약 이 조건이 참이면 그대로 맨처음 연산을 리턴하고, 거짓이면 마지막 else 뒤의 연산을 리턴하게 됩니다.<br>이해하기 어렵지는 않습니다만, 처음 파이썬을 접한 사람들에게는 조금 생소한 코드 형태일 수도 있는데요.<br>일반적으로 사용하는 3항 연산자와 구조가 달라서 그럴지도 모릅니다.<br>하지만 파이썬에 익숙해지다 보면, 금방 익숙해 질 수 있습니다.</p><p>이러한 형태의 코드는 for 문을 사용하여 list를 만들때도 비슷하게 적용할 수 있는데요.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">list</span> = [ idx for idx in range(<span class=\"number\">10</span>)]</div><div class=\"line\"># <span class=\"type\">list</span> = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure><p>루프의 결과를 맨앞에 나열하고 그 뒤에 조건이나 for 문을 나열하여 여러 줄로 만들어야 할 코드를 한줄로 만들어 버렸습니다.<br>보통 다른 언어에서는 두줄내지 세줄은 할애해야 할텐데 파이썬에서는 단 1줄로 쉽게 처리할 수 있습니다.<br>아마 이러한 코드가 파이썬이 추구하는 형태의 코드 스타일이 아닐까 생각합니다.<br>이 외에도 튜플을 만들때나 두 변수간의 값을 교환할 때도 다른 언어와는 다르게 훨씬 간단하게 처리할 수 있습니다(직접 찾아보시길).</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론 :\"></a>결론 :</h3><blockquote><p>and와 or를 이용한 3항연산자는 가급적 지양하고, if와 else를 이용한 3항 연산자에 익숙해지자!</p></blockquote>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 1","date":"2016-07-25T15:43:50.000Z","_content":"## 1.1 Programming Paradigms\n세 가지 프로그래밍 언어 패러다임\n* Inperative Programming Language (절차지향 프로그래밍 언어)\n* Functional Programming Language (함수형 프로그래밍 언어)\n* Logical Programming Language (논리형 프로그래밍 언어)\n\n튜터는 OOP는 세가지 언어에 직교하는 성질을 가지고 있기 때문에 새로운 패러다임이라 할 수 없다고 생각함\n절차적 프로그램은 폰 노이만 구조랑 비슷함\n절차적 프로그램은 규모가 커졌을 경우 word by word로 처리되는 문제 때문에 폰 노이만처럼 병목현상이 발생할 수 있다.\n그래서 collections, 다항식, strings 등과 같이 고수준의 추상화를 정의하는 진화된 다른 방법(theory)이 필요\n\n### What is Theory?\n* one or more data types\n* operations on thes types\n* laws that describe the relationships between values and operations\n즉, 여러개의 데이터 타입과 연산과 그 관계에 대한 규칙의 정의라 할 수 있다.\n\n절차적 언어는 함수나 특정 코드에 의해 상태값이 바뀔 수 있기 때문에 theory가 손상될수 있다. 이러한 문제를 해결하기 위해 함수형 언어가 등장하였다. 함수형 언어는 아래와 같은 특징을 가진다.\n\n* concentrate on defining theories for operators expressed as functions\n* avoid mutations\n* have powerful ways to abstract and compose functions\n\n\n## 1.2 Elements of Programming\n\n* call by value : 인자가 먼저 평가되는 방식\n* call by name : 인자가 나중에 평가 되는 방식 \n```\nsumOfSquares(3, 2+2)\n\nsumOfSquares(3, 4) // call by value\nsumOfSquares(3, 2+2) // call by name\n```\n위와 같은 함수가 있을때, 2+2가 먼저 계산되어 인자가 4로 evaluation 된 후 reduce 되면 call by value, 2+2가 이름(name) 그대로 reduce 되면 call by name이라 할 수 있다. call by value의 장점은 모든 함수의 인자가 한번만 해석된다는 것이다. 반면에 call by name has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body.\n\n다음의 예를 보면 이해가 간다.\n\n```\ncall by name \ntest(3+4,2*4)\n// (3+4) * (3+4)\n// 7 * (3+4)\n// 7 * 7\n// 49\n\ncall by value\ntest(3+4,2*4)\n// test(7,2*4)\n// test(7,8)\n// 7 * 7\n// 49\n```\n\n\n## 1.3 Evaluation Strategies and Termination\n\n```\ndef first(x: Int, y: Int) = x\nfirst(1, loop)\n```\nfirst 함수를 호출하게 되면 CBN같은 경우는 인자를 해석하지 않고 바로 1을 출력하겠지만, CBV인 경우에는 loop 인자를 해석하기 위해서 무한루프에 빠지게 된다.\n\n* 스칼라는 기본적으로 CBV를 사용\n* 함수 파라미터가 =>로 시작하면 CBN 사용\n\n\n## 1.4 Conditionals and Value Definitions\n\n```\ndef loop: Boolean = loop\ndef x = loop \nval x = loop // infinite loop\n```\ndef는 우측의 loop가 해석되지 않는다. 반면에 val(value)는 우측의 코드를 해석하기 때문에 위와 같은 코드의 경우 무한루프에 빠지게 된다.\n\n```\nand(x,y) == x && y\ndef and(x: Boolean, y: Boolean)\n  if (x) y else false\n// and(x, loop)와 같은 문제가 발생할 수 있으므로, 아래와 같이 변경\ndef and(x: Boolean, y: => Boolean)\n  if (x) y else false\n```  \n> 그런데 왜 y만 CBN으로 변경해 줬을까? and(loop, b)하면 어떻게될까?\n\n\n## 1.5 Example: square roots with Newton's method\n\n뉴튼 메소드를 이용해서 제곱근을 구하는 예제를 작성해본다.\n\n> 한가지 주의할점은 스칼라에서 recursive(재귀) 함수인 경우에는 반드시 return 타입을 정해주어야 한다.\n\n```\ndef abs(x: Double) = if (x < 0) -x else x\n\ndef sqrtIter(guess: Double, x: Double): Double = \n  if (isGoodEnough(guess, x)) guess\n  else sqrtIter(improve(guess, x), x)\n\ndef isGoodEnough(guess: Double, x: Double) = \n  abs(guess * guess - x) / x < 0.001\n\ndef improve(guess: Double, x: Double) = \n  (guess + x / guess) / 2\n\ndef sqrt(x: Double) = sqrtIter(1.0, x)\n\nsqrt(2) // res1: Double = 1.4142156862745097\n```\n\n\n## 1.6 Bolcks and Lexical Scope\n\nblock을 잘 이용하면 불필요한 인자값을 호출하는 메서드에 넘길 필요가 없다.\n\n```\ndef abs(x: Double) = if (x < 0) -x else x\n\ndef sqrt(x: Double) = {\n  def sqrtIter(guess: Double): Double =\n    if (isGoodEnough(guess)) guess\n    else sqrtIter(improve(guess))\n\n  def isGoodEnough(guess: Double) =\n    abs(guess * guess - x) / x < 0.001\n\n  def improve(guess: Double) =\n    (guess + x / guess) / 2\n\n  sqrtIter(1.0)\n}\n\nsqrt(2) // 동일한 결과값\n```\n\n위의 예제를 보면, sqrt(x)에서 호출된 이후 내부적으로 sqrIter, isGoodEnough, improve를 호출하는데 모두 x 파라미터를 인자값으로 전달해준다. x 파라미터는 각 함수에서 불변하는 값이므로 위 세함수를 sqrt 함수의 내부함수로 재작성 한뒤 블록으로 감싸주면 x 파라미터는 블록 범위내에서 동일하게 적용되는 값이 되므로 각 함수에서 파라미터를 제거할 수 있다.\n\n### 세미콜론 문제\n스칼라에서 세미콜론은 optional\n그래서 아래와 같은 코드가 작성되면 한 줄로 인식되어야 할 코드를 스칼라 인터프리터가 두줄로 인식해버리는 문제가 있다. \n\n```\nsomeLongExpression\n+ someOtherExpression\n```\n해결 방법은 두가지가 있는데, 첫째는 괄호로 묶어주는 방법이고 두번째는 '+' 기호를 윗줄의 끝에 기입해주는 방법이다(아직 문장이 안끝났다는 표시). \n\n```\n// solution 1\n(someLongExpression\n+ someOtherExpression)\n\n// solution 2\nsomeLongExpression +\nsomeOtherExpression\n```\n\n\n## 1.7 Tail Recursion\n\n```\ndef gcd(x: Int, y: Int): Int =\n  if (y == 0) x else gcd(y, x % y)\n\ndef factorial(n: Int): Long =\n  if (n == 0) 1 else n * factorial(n-1)\n\n// 강의와 조금 다름\ndef fac_tail_recursive(n: Int): Int = {\n  def loop(r: Int, i: Int): Int =\n    if (n == i) r*i\n    else\n      loop(r*i, i+1)\n  loop(1, 1)\n}\n```\ngcd 함수의 계산과정을 살펴보면, gcd 함수 자체가 다시 불리는 형태로 진행한다. 반면에 fatorial 함수는 4 * 3 * factorial(2)와 같이 계속해서 길어지므로, 저장해야 할 지역변수가 늘어나 stack frame을 재사용할 수 없다. 그래서 factorial을 fac_tail_recursive 함수처럼 함수 자신이 마지막으로 호출되는 형태로 변경해줄 필요가있다. 이를 Tail Recursion이라 부른다.\n","source":"_posts/2016-07-26-functional-programming-in-scala-week1.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 1\"\ncategories: programming\ndate:   2016-07-26 00:43:50 +0900\ntags:\n- scala\n- coursera\n---\n## 1.1 Programming Paradigms\n세 가지 프로그래밍 언어 패러다임\n* Inperative Programming Language (절차지향 프로그래밍 언어)\n* Functional Programming Language (함수형 프로그래밍 언어)\n* Logical Programming Language (논리형 프로그래밍 언어)\n\n튜터는 OOP는 세가지 언어에 직교하는 성질을 가지고 있기 때문에 새로운 패러다임이라 할 수 없다고 생각함\n절차적 프로그램은 폰 노이만 구조랑 비슷함\n절차적 프로그램은 규모가 커졌을 경우 word by word로 처리되는 문제 때문에 폰 노이만처럼 병목현상이 발생할 수 있다.\n그래서 collections, 다항식, strings 등과 같이 고수준의 추상화를 정의하는 진화된 다른 방법(theory)이 필요\n\n### What is Theory?\n* one or more data types\n* operations on thes types\n* laws that describe the relationships between values and operations\n즉, 여러개의 데이터 타입과 연산과 그 관계에 대한 규칙의 정의라 할 수 있다.\n\n절차적 언어는 함수나 특정 코드에 의해 상태값이 바뀔 수 있기 때문에 theory가 손상될수 있다. 이러한 문제를 해결하기 위해 함수형 언어가 등장하였다. 함수형 언어는 아래와 같은 특징을 가진다.\n\n* concentrate on defining theories for operators expressed as functions\n* avoid mutations\n* have powerful ways to abstract and compose functions\n\n\n## 1.2 Elements of Programming\n\n* call by value : 인자가 먼저 평가되는 방식\n* call by name : 인자가 나중에 평가 되는 방식 \n```\nsumOfSquares(3, 2+2)\n\nsumOfSquares(3, 4) // call by value\nsumOfSquares(3, 2+2) // call by name\n```\n위와 같은 함수가 있을때, 2+2가 먼저 계산되어 인자가 4로 evaluation 된 후 reduce 되면 call by value, 2+2가 이름(name) 그대로 reduce 되면 call by name이라 할 수 있다. call by value의 장점은 모든 함수의 인자가 한번만 해석된다는 것이다. 반면에 call by name has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body.\n\n다음의 예를 보면 이해가 간다.\n\n```\ncall by name \ntest(3+4,2*4)\n// (3+4) * (3+4)\n// 7 * (3+4)\n// 7 * 7\n// 49\n\ncall by value\ntest(3+4,2*4)\n// test(7,2*4)\n// test(7,8)\n// 7 * 7\n// 49\n```\n\n\n## 1.3 Evaluation Strategies and Termination\n\n```\ndef first(x: Int, y: Int) = x\nfirst(1, loop)\n```\nfirst 함수를 호출하게 되면 CBN같은 경우는 인자를 해석하지 않고 바로 1을 출력하겠지만, CBV인 경우에는 loop 인자를 해석하기 위해서 무한루프에 빠지게 된다.\n\n* 스칼라는 기본적으로 CBV를 사용\n* 함수 파라미터가 =>로 시작하면 CBN 사용\n\n\n## 1.4 Conditionals and Value Definitions\n\n```\ndef loop: Boolean = loop\ndef x = loop \nval x = loop // infinite loop\n```\ndef는 우측의 loop가 해석되지 않는다. 반면에 val(value)는 우측의 코드를 해석하기 때문에 위와 같은 코드의 경우 무한루프에 빠지게 된다.\n\n```\nand(x,y) == x && y\ndef and(x: Boolean, y: Boolean)\n  if (x) y else false\n// and(x, loop)와 같은 문제가 발생할 수 있으므로, 아래와 같이 변경\ndef and(x: Boolean, y: => Boolean)\n  if (x) y else false\n```  \n> 그런데 왜 y만 CBN으로 변경해 줬을까? and(loop, b)하면 어떻게될까?\n\n\n## 1.5 Example: square roots with Newton's method\n\n뉴튼 메소드를 이용해서 제곱근을 구하는 예제를 작성해본다.\n\n> 한가지 주의할점은 스칼라에서 recursive(재귀) 함수인 경우에는 반드시 return 타입을 정해주어야 한다.\n\n```\ndef abs(x: Double) = if (x < 0) -x else x\n\ndef sqrtIter(guess: Double, x: Double): Double = \n  if (isGoodEnough(guess, x)) guess\n  else sqrtIter(improve(guess, x), x)\n\ndef isGoodEnough(guess: Double, x: Double) = \n  abs(guess * guess - x) / x < 0.001\n\ndef improve(guess: Double, x: Double) = \n  (guess + x / guess) / 2\n\ndef sqrt(x: Double) = sqrtIter(1.0, x)\n\nsqrt(2) // res1: Double = 1.4142156862745097\n```\n\n\n## 1.6 Bolcks and Lexical Scope\n\nblock을 잘 이용하면 불필요한 인자값을 호출하는 메서드에 넘길 필요가 없다.\n\n```\ndef abs(x: Double) = if (x < 0) -x else x\n\ndef sqrt(x: Double) = {\n  def sqrtIter(guess: Double): Double =\n    if (isGoodEnough(guess)) guess\n    else sqrtIter(improve(guess))\n\n  def isGoodEnough(guess: Double) =\n    abs(guess * guess - x) / x < 0.001\n\n  def improve(guess: Double) =\n    (guess + x / guess) / 2\n\n  sqrtIter(1.0)\n}\n\nsqrt(2) // 동일한 결과값\n```\n\n위의 예제를 보면, sqrt(x)에서 호출된 이후 내부적으로 sqrIter, isGoodEnough, improve를 호출하는데 모두 x 파라미터를 인자값으로 전달해준다. x 파라미터는 각 함수에서 불변하는 값이므로 위 세함수를 sqrt 함수의 내부함수로 재작성 한뒤 블록으로 감싸주면 x 파라미터는 블록 범위내에서 동일하게 적용되는 값이 되므로 각 함수에서 파라미터를 제거할 수 있다.\n\n### 세미콜론 문제\n스칼라에서 세미콜론은 optional\n그래서 아래와 같은 코드가 작성되면 한 줄로 인식되어야 할 코드를 스칼라 인터프리터가 두줄로 인식해버리는 문제가 있다. \n\n```\nsomeLongExpression\n+ someOtherExpression\n```\n해결 방법은 두가지가 있는데, 첫째는 괄호로 묶어주는 방법이고 두번째는 '+' 기호를 윗줄의 끝에 기입해주는 방법이다(아직 문장이 안끝났다는 표시). \n\n```\n// solution 1\n(someLongExpression\n+ someOtherExpression)\n\n// solution 2\nsomeLongExpression +\nsomeOtherExpression\n```\n\n\n## 1.7 Tail Recursion\n\n```\ndef gcd(x: Int, y: Int): Int =\n  if (y == 0) x else gcd(y, x % y)\n\ndef factorial(n: Int): Long =\n  if (n == 0) 1 else n * factorial(n-1)\n\n// 강의와 조금 다름\ndef fac_tail_recursive(n: Int): Int = {\n  def loop(r: Int, i: Int): Int =\n    if (n == i) r*i\n    else\n      loop(r*i, i+1)\n  loop(1, 1)\n}\n```\ngcd 함수의 계산과정을 살펴보면, gcd 함수 자체가 다시 불리는 형태로 진행한다. 반면에 fatorial 함수는 4 * 3 * factorial(2)와 같이 계속해서 길어지므로, 저장해야 할 지역변수가 늘어나 stack frame을 재사용할 수 없다. 그래서 factorial을 fac_tail_recursive 함수처럼 함수 자신이 마지막으로 호출되는 형태로 변경해줄 필요가있다. 이를 Tail Recursion이라 부른다.\n","slug":"2016-07-26-functional-programming-in-scala-week1","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv72001fwxt46t7rv5t3","content":"<h2 id=\"1-1-Programming-Paradigms\"><a href=\"#1-1-Programming-Paradigms\" class=\"headerlink\" title=\"1.1 Programming Paradigms\"></a>1.1 Programming Paradigms</h2><p>세 가지 프로그래밍 언어 패러다임</p><ul><li>Inperative Programming Language (절차지향 프로그래밍 언어)</li><li>Functional Programming Language (함수형 프로그래밍 언어)</li><li>Logical Programming Language (논리형 프로그래밍 언어)</li></ul><p>튜터는 OOP는 세가지 언어에 직교하는 성질을 가지고 있기 때문에 새로운 패러다임이라 할 수 없다고 생각함<br>절차적 프로그램은 폰 노이만 구조랑 비슷함<br>절차적 프로그램은 규모가 커졌을 경우 word by word로 처리되는 문제 때문에 폰 노이만처럼 병목현상이 발생할 수 있다.<br>그래서 collections, 다항식, strings 등과 같이 고수준의 추상화를 정의하는 진화된 다른 방법(theory)이 필요</p><h3 id=\"What-is-Theory\"><a href=\"#What-is-Theory\" class=\"headerlink\" title=\"What is Theory?\"></a>What is Theory?</h3><ul><li>one or more data types</li><li>operations on thes types</li><li>laws that describe the relationships between values and operations<br>즉, 여러개의 데이터 타입과 연산과 그 관계에 대한 규칙의 정의라 할 수 있다.</li></ul><p>절차적 언어는 함수나 특정 코드에 의해 상태값이 바뀔 수 있기 때문에 theory가 손상될수 있다. 이러한 문제를 해결하기 위해 함수형 언어가 등장하였다. 함수형 언어는 아래와 같은 특징을 가진다.</p><ul><li>concentrate on defining theories for operators expressed as functions</li><li>avoid mutations</li><li>have powerful ways to abstract and compose functions</li></ul><h2 id=\"1-2-Elements-of-Programming\"><a href=\"#1-2-Elements-of-Programming\" class=\"headerlink\" title=\"1.2 Elements of Programming\"></a>1.2 Elements of Programming</h2><ul><li>call by value : 인자가 먼저 평가되는 방식</li><li>call by name : 인자가 나중에 평가 되는 방식<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">2</span>+<span class=\"number\">2</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span> <span class=\"comment\">// call by value</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">2</span>+<span class=\"number\">2</span>)</span></span> <span class=\"comment\">// call by name</span></div></pre></td></tr></table></figure></li></ul><p>위와 같은 함수가 있을때, 2+2가 먼저 계산되어 인자가 4로 evaluation 된 후 reduce 되면 call by value, 2+2가 이름(name) 그대로 reduce 되면 call by name이라 할 수 있다. call by value의 장점은 모든 함수의 인자가 한번만 해석된다는 것이다. 반면에 call by name has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body.</p><p>다음의 예를 보면 이해가 간다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">call by name </div><div class=\"line\">test(<span class=\"number\">3</span>+<span class=\"number\">4</span>,<span class=\"number\">2</span>*<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"comment\">// (3+4) * (3+4)</span></div><div class=\"line\"><span class=\"comment\">// 7 * (3+4)</span></div><div class=\"line\"><span class=\"comment\">// 7 * 7</span></div><div class=\"line\"><span class=\"comment\">// 49</span></div><div class=\"line\"></div><div class=\"line\">call by value</div><div class=\"line\">test(<span class=\"number\">3</span>+<span class=\"number\">4</span>,<span class=\"number\">2</span>*<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"comment\">// test(7,2*4)</span></div><div class=\"line\"><span class=\"comment\">// test(7,8)</span></div><div class=\"line\"><span class=\"comment\">// 7 * 7</span></div><div class=\"line\"><span class=\"comment\">// 49</span></div></pre></td></tr></table></figure><h2 id=\"1-3-Evaluation-Strategies-and-Termination\"><a href=\"#1-3-Evaluation-Strategies-and-Termination\" class=\"headerlink\" title=\"1.3 Evaluation Strategies and Termination\"></a>1.3 Evaluation Strategies and Termination</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first</span><span class=\"params\">(<span class=\"symbol\">x:</span> Int, <span class=\"symbol\">y:</span> Int)</span></span> = x</div><div class=\"line\">first(<span class=\"number\">1</span>, loop)</div></pre></td></tr></table></figure><p>first 함수를 호출하게 되면 CBN같은 경우는 인자를 해석하지 않고 바로 1을 출력하겠지만, CBV인 경우에는 loop 인자를 해석하기 위해서 무한루프에 빠지게 된다.</p><ul><li>스칼라는 기본적으로 CBV를 사용</li><li>함수 파라미터가 =&gt;로 시작하면 CBN 사용</li></ul><h2 id=\"1-4-Conditionals-and-Value-Definitions\"><a href=\"#1-4-Conditionals-and-Value-Definitions\" class=\"headerlink\" title=\"1.4 Conditionals and Value Definitions\"></a>1.4 Conditionals and Value Definitions</h2><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span></span>: Boolean = loop</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span> </span>= loop </div><div class=\"line\">val x = loop <span class=\"comment\">// infinite loop</span></div></pre></td></tr></table></figure><p>def는 우측의 loop가 해석되지 않는다. 반면에 val(value)는 우측의 코드를 해석하기 때문에 위와 같은 코드의 경우 무한루프에 빠지게 된다.</p><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">and</span>(x,y) == x &amp;&amp; y</div><div class=\"line\">def <span class=\"keyword\">and</span>(x: <span class=\"built_in\">Boolean</span>, y: <span class=\"built_in\">Boolean</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (x) y <span class=\"keyword\">else</span> <span class=\"literal\">false</span></div><div class=\"line\">// <span class=\"keyword\">and</span>(x, <span class=\"keyword\">loop</span>)와 같은 문제가 발생할 수 있으므로, 아래와 같이 변경</div><div class=\"line\">def <span class=\"keyword\">and</span>(x: <span class=\"built_in\">Boolean</span>, y: =&gt; <span class=\"built_in\">Boolean</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (x) y <span class=\"keyword\">else</span> <span class=\"literal\">false</span></div><div class=\"line\">```  </div><div class=\"line\">&gt; 그런데 왜 y만 CBN으로 변경해 줬을까? <span class=\"keyword\">and</span>(<span class=\"keyword\">loop</span>, b)하면 어떻게될까?</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## <span class=\"number\">1.5</span> Example: square roots <span class=\"keyword\">with</span> Newton<span class=\"symbol\">'s</span> method</div><div class=\"line\"></div><div class=\"line\">뉴튼 메소드를 이용해서 제곱근을 구하는 예제를 작성해본다.</div><div class=\"line\"></div><div class=\"line\">&gt; 한가지 주의할점은 스칼라에서 recursive(재귀) 함수인 경우에는 반드시 <span class=\"keyword\">return</span> 타입을 정해주어야 한다.</div></pre></td></tr></table></figure><p>def abs(x: Double) = if (x &lt; 0) -x else x</p><p>def sqrtIter(guess: Double, x: Double): Double =<br>if (isGoodEnough(guess, x)) guess<br>else sqrtIter(improve(guess, x), x)</p><p>def isGoodEnough(guess: Double, x: Double) =<br>abs(guess * guess - x) / x &lt; 0.001</p><p>def improve(guess: Double, x: Double) =<br>(guess + x / guess) / 2</p><p>def sqrt(x: Double) = sqrtIter(1.0, x)</p><p>sqrt(2) // res1: Double = 1.4142156862745097<br></p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"armasm\">## <span class=\"number\">1</span>.<span class=\"number\">6</span> <span class=\"keyword\">Bolcks </span><span class=\"keyword\">and </span>Lexical Scope</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">block을 </span>잘 이용하면 불필요한 인자값을 호출하는 메서드에 넘길 필요가 없다.</div></pre></td></tr></table></figure><p></p><p>def abs(x: Double) = if (x &lt; 0) -x else x</p><p>def sqrt(x: Double) = {<br>def sqrtIter(guess: Double): Double =<br>if (isGoodEnough(guess)) guess<br>else sqrtIter(improve(guess))</p><p>def isGoodEnough(guess: Double) =<br>abs(guess * guess - x) / x &lt; 0.001</p><p>def improve(guess: Double) =<br>(guess + x / guess) / 2</p><p>sqrtIter(1.0)<br>}</p><p>sqrt(2) // 동일한 결과값<br></p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">위의 예제를 보면, sqrt(<span class=\"keyword\">x</span>)에서 호출된 이후 내부적으로 sqrIter, isGoodEnough, improve를 호출하는데 모두 <span class=\"keyword\">x</span> 파라미터를 인자값으로 전달해준다. <span class=\"keyword\">x</span> 파라미터는 각 함수에서 불변하는 값이므로 위 세함수를 sqrt 함수의 내부함수로 재작성 한뒤 블록으로 감싸주면 <span class=\"keyword\">x</span> 파라미터는 블록 범위내에서 동일하게 적용되는 값이 되므로 각 함수에서 파라미터를 제거할 수 있다.</div><div class=\"line\"></div><div class=\"line\">### 세미콜론 문제</div><div class=\"line\">스칼라에서 세미콜론은 optional</div><div class=\"line\">그래서 아래와 같은 코드가 작성되면 한 줄로 인식되어야 할 코드를 스칼라 인터프리터가 두줄로 인식해버리는 문제가 있다.</div></pre></td></tr></table></figure><p></p><p>someLongExpression</p><ul><li>someOtherExpression<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">해결 방법은 두가지가 있는데, 첫째는 괄호로 묶어주는 방법이고 두번째는 <span class=\"string\">'+'</span> 기호를 윗줄의 끝에 기입해주는 방법이다<span class=\"comment\">(아직 문장이 안끝났다는 표시)</span>.</div></pre></td></tr></table></figure></li></ul><p>// solution 1<br>(someLongExpression</p><ul><li>someOtherExpression)</li></ul><p>// solution 2<br>someLongExpression +<br>someOtherExpression<br></p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"clean\">## <span class=\"number\">1.7</span> Tail Recursion</span></div></pre></td></tr></table></figure><p></p><p>def gcd(x: Int, y: Int): Int =<br>if (y == 0) x else gcd(y, x % y)</p><p>def factorial(n: Int): Long =<br>if (n == 0) 1 else n * factorial(n-1)</p><p>// 강의와 조금 다름<br>def fac_tail_recursive(n: Int): Int = {<br>def loop(r: Int, i: Int): Int =<br>if (n == i) r<em>i<br>else<br>loop(r</em>i, i+1)<br>loop(1, 1)<br>}<br>```<br>gcd 함수의 계산과정을 살펴보면, gcd 함수 자체가 다시 불리는 형태로 진행한다. 반면에 fatorial 함수는 4 <em>3 </em>factorial(2)와 같이 계속해서 길어지므로, 저장해야 할 지역변수가 늘어나 stack frame을 재사용할 수 없다. 그래서 factorial을 fac_tail_recursive 함수처럼 함수 자신이 마지막으로 호출되는 형태로 변경해줄 필요가있다. 이를 Tail Recursion이라 부른다.</p>","excerpt":"","more":"<h2 id=\"1-1-Programming-Paradigms\"><a href=\"#1-1-Programming-Paradigms\" class=\"headerlink\" title=\"1.1 Programming Paradigms\"></a>1.1 Programming Paradigms</h2><p>세 가지 프로그래밍 언어 패러다임</p><ul><li>Inperative Programming Language (절차지향 프로그래밍 언어)</li><li>Functional Programming Language (함수형 프로그래밍 언어)</li><li>Logical Programming Language (논리형 프로그래밍 언어)</li></ul><p>튜터는 OOP는 세가지 언어에 직교하는 성질을 가지고 있기 때문에 새로운 패러다임이라 할 수 없다고 생각함<br>절차적 프로그램은 폰 노이만 구조랑 비슷함<br>절차적 프로그램은 규모가 커졌을 경우 word by word로 처리되는 문제 때문에 폰 노이만처럼 병목현상이 발생할 수 있다.<br>그래서 collections, 다항식, strings 등과 같이 고수준의 추상화를 정의하는 진화된 다른 방법(theory)이 필요</p><h3 id=\"What-is-Theory\"><a href=\"#What-is-Theory\" class=\"headerlink\" title=\"What is Theory?\"></a>What is Theory?</h3><ul><li>one or more data types</li><li>operations on thes types</li><li>laws that describe the relationships between values and operations<br>즉, 여러개의 데이터 타입과 연산과 그 관계에 대한 규칙의 정의라 할 수 있다.</li></ul><p>절차적 언어는 함수나 특정 코드에 의해 상태값이 바뀔 수 있기 때문에 theory가 손상될수 있다. 이러한 문제를 해결하기 위해 함수형 언어가 등장하였다. 함수형 언어는 아래와 같은 특징을 가진다.</p><ul><li>concentrate on defining theories for operators expressed as functions</li><li>avoid mutations</li><li>have powerful ways to abstract and compose functions</li></ul><h2 id=\"1-2-Elements-of-Programming\"><a href=\"#1-2-Elements-of-Programming\" class=\"headerlink\" title=\"1.2 Elements of Programming\"></a>1.2 Elements of Programming</h2><ul><li>call by value : 인자가 먼저 평가되는 방식</li><li>call by name : 인자가 나중에 평가 되는 방식<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">2</span>+<span class=\"number\">2</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span> <span class=\"comment\">// call by value</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">sumOfSquares</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">2</span>+<span class=\"number\">2</span>)</span></span> <span class=\"comment\">// call by name</span></div></pre></td></tr></table></figure></li></ul><p>위와 같은 함수가 있을때, 2+2가 먼저 계산되어 인자가 4로 evaluation 된 후 reduce 되면 call by value, 2+2가 이름(name) 그대로 reduce 되면 call by name이라 할 수 있다. call by value의 장점은 모든 함수의 인자가 한번만 해석된다는 것이다. 반면에 call by name has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body.</p><p>다음의 예를 보면 이해가 간다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">call by name </div><div class=\"line\">test(<span class=\"number\">3</span>+<span class=\"number\">4</span>,<span class=\"number\">2</span>*<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"comment\">// (3+4) * (3+4)</span></div><div class=\"line\"><span class=\"comment\">// 7 * (3+4)</span></div><div class=\"line\"><span class=\"comment\">// 7 * 7</span></div><div class=\"line\"><span class=\"comment\">// 49</span></div><div class=\"line\"></div><div class=\"line\">call by value</div><div class=\"line\">test(<span class=\"number\">3</span>+<span class=\"number\">4</span>,<span class=\"number\">2</span>*<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"comment\">// test(7,2*4)</span></div><div class=\"line\"><span class=\"comment\">// test(7,8)</span></div><div class=\"line\"><span class=\"comment\">// 7 * 7</span></div><div class=\"line\"><span class=\"comment\">// 49</span></div></pre></td></tr></table></figure><h2 id=\"1-3-Evaluation-Strategies-and-Termination\"><a href=\"#1-3-Evaluation-Strategies-and-Termination\" class=\"headerlink\" title=\"1.3 Evaluation Strategies and Termination\"></a>1.3 Evaluation Strategies and Termination</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first</span><span class=\"params\">(<span class=\"symbol\">x:</span> Int, <span class=\"symbol\">y:</span> Int)</span></span> = x</div><div class=\"line\">first(<span class=\"number\">1</span>, loop)</div></pre></td></tr></table></figure><p>first 함수를 호출하게 되면 CBN같은 경우는 인자를 해석하지 않고 바로 1을 출력하겠지만, CBV인 경우에는 loop 인자를 해석하기 위해서 무한루프에 빠지게 된다.</p><ul><li>스칼라는 기본적으로 CBV를 사용</li><li>함수 파라미터가 =&gt;로 시작하면 CBN 사용</li></ul><h2 id=\"1-4-Conditionals-and-Value-Definitions\"><a href=\"#1-4-Conditionals-and-Value-Definitions\" class=\"headerlink\" title=\"1.4 Conditionals and Value Definitions\"></a>1.4 Conditionals and Value Definitions</h2><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span></span>: Boolean = loop</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span> </span>= loop </div><div class=\"line\">val x = loop <span class=\"comment\">// infinite loop</span></div></pre></td></tr></table></figure><p>def는 우측의 loop가 해석되지 않는다. 반면에 val(value)는 우측의 코드를 해석하기 때문에 위와 같은 코드의 경우 무한루프에 빠지게 된다.</p><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">and</span>(x,y) == x &amp;&amp; y</div><div class=\"line\">def <span class=\"keyword\">and</span>(x: <span class=\"built_in\">Boolean</span>, y: <span class=\"built_in\">Boolean</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (x) y <span class=\"keyword\">else</span> <span class=\"literal\">false</span></div><div class=\"line\">// <span class=\"keyword\">and</span>(x, <span class=\"keyword\">loop</span>)와 같은 문제가 발생할 수 있으므로, 아래와 같이 변경</div><div class=\"line\">def <span class=\"keyword\">and</span>(x: <span class=\"built_in\">Boolean</span>, y: =&gt; <span class=\"built_in\">Boolean</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (x) y <span class=\"keyword\">else</span> <span class=\"literal\">false</span></div><div class=\"line\">```  </div><div class=\"line\">&gt; 그런데 왜 y만 CBN으로 변경해 줬을까? <span class=\"keyword\">and</span>(<span class=\"keyword\">loop</span>, b)하면 어떻게될까?</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## <span class=\"number\">1.5</span> Example: square roots <span class=\"keyword\">with</span> Newton<span class=\"symbol\">'s</span> method</div><div class=\"line\"></div><div class=\"line\">뉴튼 메소드를 이용해서 제곱근을 구하는 예제를 작성해본다.</div><div class=\"line\"></div><div class=\"line\">&gt; 한가지 주의할점은 스칼라에서 recursive(재귀) 함수인 경우에는 반드시 <span class=\"keyword\">return</span> 타입을 정해주어야 한다.</div></pre></td></tr></table></figure><p>def abs(x: Double) = if (x &lt; 0) -x else x</p><p>def sqrtIter(guess: Double, x: Double): Double =<br>if (isGoodEnough(guess, x)) guess<br>else sqrtIter(improve(guess, x), x)</p><p>def isGoodEnough(guess: Double, x: Double) =<br>abs(guess * guess - x) / x &lt; 0.001</p><p>def improve(guess: Double, x: Double) =<br>(guess + x / guess) / 2</p><p>def sqrt(x: Double) = sqrtIter(1.0, x)</p><p>sqrt(2) // res1: Double = 1.4142156862745097<br></p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"armasm\">## <span class=\"number\">1</span>.<span class=\"number\">6</span> <span class=\"keyword\">Bolcks </span><span class=\"keyword\">and </span>Lexical Scope</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">block을 </span>잘 이용하면 불필요한 인자값을 호출하는 메서드에 넘길 필요가 없다.</div></pre></td></tr></table></figure><p></p><p>def abs(x: Double) = if (x &lt; 0) -x else x</p><p>def sqrt(x: Double) = {<br>def sqrtIter(guess: Double): Double =<br>if (isGoodEnough(guess)) guess<br>else sqrtIter(improve(guess))</p><p>def isGoodEnough(guess: Double) =<br>abs(guess * guess - x) / x &lt; 0.001</p><p>def improve(guess: Double) =<br>(guess + x / guess) / 2</p><p>sqrtIter(1.0)<br>}</p><p>sqrt(2) // 동일한 결과값<br></p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">위의 예제를 보면, sqrt(<span class=\"keyword\">x</span>)에서 호출된 이후 내부적으로 sqrIter, isGoodEnough, improve를 호출하는데 모두 <span class=\"keyword\">x</span> 파라미터를 인자값으로 전달해준다. <span class=\"keyword\">x</span> 파라미터는 각 함수에서 불변하는 값이므로 위 세함수를 sqrt 함수의 내부함수로 재작성 한뒤 블록으로 감싸주면 <span class=\"keyword\">x</span> 파라미터는 블록 범위내에서 동일하게 적용되는 값이 되므로 각 함수에서 파라미터를 제거할 수 있다.</div><div class=\"line\"></div><div class=\"line\">### 세미콜론 문제</div><div class=\"line\">스칼라에서 세미콜론은 optional</div><div class=\"line\">그래서 아래와 같은 코드가 작성되면 한 줄로 인식되어야 할 코드를 스칼라 인터프리터가 두줄로 인식해버리는 문제가 있다.</div></pre></td></tr></table></figure><p></p><p>someLongExpression</p><ul><li>someOtherExpression<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">해결 방법은 두가지가 있는데, 첫째는 괄호로 묶어주는 방법이고 두번째는 <span class=\"string\">'+'</span> 기호를 윗줄의 끝에 기입해주는 방법이다<span class=\"comment\">(아직 문장이 안끝났다는 표시)</span>.</div></pre></td></tr></table></figure></li></ul><p>// solution 1<br>(someLongExpression</p><ul><li>someOtherExpression)</li></ul><p>// solution 2<br>someLongExpression +<br>someOtherExpression<br></p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"clean\">## <span class=\"number\">1.7</span> Tail Recursion</span></div></pre></td></tr></table></figure><p></p><p>def gcd(x: Int, y: Int): Int =<br>if (y == 0) x else gcd(y, x % y)</p><p>def factorial(n: Int): Long =<br>if (n == 0) 1 else n * factorial(n-1)</p><p>// 강의와 조금 다름<br>def fac_tail_recursive(n: Int): Int = {<br>def loop(r: Int, i: Int): Int =<br>if (n == i) r<em>i<br>else<br>loop(r</em>i, i+1)<br>loop(1, 1)<br>}<br>```<br>gcd 함수의 계산과정을 살펴보면, gcd 함수 자체가 다시 불리는 형태로 진행한다. 반면에 fatorial 함수는 4 <em>3 </em>factorial(2)와 같이 계속해서 길어지므로, 저장해야 할 지역변수가 늘어나 stack frame을 재사용할 수 없다. 그래서 factorial을 fac_tail_recursive 함수처럼 함수 자신이 마지막으로 호출되는 형태로 변경해줄 필요가있다. 이를 Tail Recursion이라 부른다.</p>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 2","date":"2016-07-26T14:25:50.000Z","_content":"## 2.1 Higher-Order Functions\n함수형 언어에서는 function이 first-class value이다. 이 말은 특정 함수가 다른 함수의 파라미터나 결과로써 return 될 수 있다는 것이다(higher order functions).\n\n```\ndef sum(f: Int => Int, a: Int, b: Int): Int = \n  if (a > b) 0\n  else f(a) + sum(f, a+1, b) \n\ndef sumInts(a: Int, b: Int)       = sum(id, a, b)\ndef sumCubes(a: Int, b: Int)      = sum(cube, a, b)\ndef sumFactorials(a: Int, b: Int) = sum(fact, a, b)\n\ndef id(x: Int): Int = x\ndef cube(x: Int): Int = x * x * x\ndef fact(x: Int): Int = if (x == 0) 1 else x * fact(x -1)\n```\nsum() 함수의 첫번째 파라미터로 f라는 임의의 함수가 들어가 있다.\n이는 Int 파라미터를 받아서 Int 타입을 리턴하는 함수라면 이 파라미터 위치에 적합하다라는 뜻이다. 즉, 어떠한 함수가 됐든간에 저 유형만 유지하면 된다. 재사용 가능하다는 말이다. 실제로 sumInts(), sumCubes(), sumFactorials() 함수는 모두 sum()함수를 호출한다. sum()함수의 첫번째 파라미터는 각각 id(), cube(), fact()함수를 호출하게 되는데 세 함수 모두 파라미터와 리턴 타입이 Int이므로 sum()함수의 파라미터로 적합하다.\n\n### 익명함수\n\n```\n(x: Int, y:Int) => x + y\n```\n익명함수는 보통 함수를 선언하는 방식과는 달리 이름이 없다.\n대신 파라미터 타입과 body만 존재한다. \n\n```\ndef sumCubes(a: Int, b: Int) = sum(x => x * x * x, a, b)\n```\n위에서 보았던 sumCubes의 익명함수 버전이다.\ncube() 함수가 재사용되지 않는다고 가정한다면 매우 심플하기 때문에 따로 함수를 선언하기 보다는 sum() 파라미터에 익명함수로 직접 선언할수 있다.\n\n```\n// linear recursion, a와 b의 차이가 커지면 stackOverFlow 익셉션이 발생할 수 있다.\ndef sum(f: Int => Int, a: Int, b: Int): Int = \n  if (a > b) 0\n  else f(a) + sum(f, a+1, b) \n\n// tail-recursive version\ndef sum(f: Int => Int, a: Int, b: Int): Int = {\n  def loop(a: Int, acc: Int): Int = {\n    if(a > b) acc\n    else loop(a+1, f(a)+acc)\n  }\n  loop(a, 0)  \n}\n```\n\n## 2.2 Currying\n\n```\ndef sumInts(a: Int, b: Int)       = sum(x => x, a, b)\ndef sumCubes(a: Int, b: Int)      = sum(x => x*x*x, a, b)\ndef sumFactorials(a: Int, b: Int) = sum(fact, a, b)\n```\n위의 함수들에서 a, b 파라미터는 sumInts(), sum()에서 반복된다. 이를 제거하여 함수를 더 간소하게 만드는 방법은 무엇일까?\n우선 아래의 함수를 살펴보자.\n\n```\ndef sum(f: Int => Int): (Int, Int) => Int = {\n  def sumF(a: Int, b: Int): Int = {\n    if (a > b) 0\n    else f(a) + sumF(a+1, b)\n  }\n  sumF\n}\n```\n기존에 봤던 sum() 함수와 조금 다르게 생겼다. 우선 sum() 함수의 파라미터가 f() 하나로 줄었고, sum() 함수는 (Int, Int) => Int 와 같은 타입의 익명함수를 리턴하고 있다.\nsumF를 호출하는 부분이 조금 이해하기 어려운데, 위의 내부함수 sumF()를 자세히 보면 익명함수를 설명했을 때의 형태와 같다는 것을 알 수 있다.\n\n```\n(x: Int, y: Int): Int => x * y\n// 이 익명함수는 아래와 같이 표현가능하다.\ndef f(x: Int): Int = x * y; f\n```\n\n위에서 썼던 sumInts(), sumCubes(), sumFactorials() 함수들을 가져오자. 조금 다르다. sum() 함수의 파라미터가 f 하나로 줄면서 아래의 각 함수들도 sum() 호출부의 인자가 익명함수 하나만 남았다.\n\n```\ndef sumInts(a: Int, b: Int) = sum(x => x)\ndef sumCubes(a: Int, b: Int) = sum(x => x*x*x)\ndef sumFactorials(a: Int, b: Int) = sum(fact)\n```\n이제 sum() 함수는 함수를 리턴하고 있으므로, sumCubes(1, 10)를 호출하면\n\n```\nsumCubes(1, 10)\n// res0: (Int, Int) => Int = <function2>\n```\n이는 또한 이렇게 바꿔 쓸수 있다.\n\n```\nsum (cube) (1, 10) // multiple parameters\n(sum (cube)) (1, 10)  \n```\n위의 multiple parameters를 적용하면 sum() 함수를 더 짧게 작성할 수 있다.\n\n```\ndef sum(f: Int => Int)(a: Int, b: Int): Int =\n  if (a > b) 0 else f(a) + sum(f)(a+1, b)\n```\n여러개의 파라미터 list를 가진 함수 f에서 파라미터list의 개수가 1보다 큰 경우 마지막 파라미터 list를 f 함수에서 제거하면 이 마지막 파라미터 list를 파라미터로 가지는 또다른 함수 g를 만들 수 있다. 물론 이 g 함수는 f 함수의 리턴함수가 된다. 식으로 나타내면 다음과 같다. 참고로 각각의 식은 모두 동일하다\n\n```\ndef f(arg1)(arg2)(arg3)(arg4) = E\ndef f(arg1)(arg2)(arg3) = {def g(arg4) = E;g} // arg4를 이용해 g함수 생성\ndef f(arg1)(arg2)(arg3) = (arg4 => E) // g를 익명함수로 변경\ndef f = (arg1 => (arg2 => (arg3 => (arg4 => E)))) // 파라미터를 하나씩 우측으로 전달함\n```\n이와같은 형태의 함수정의를 curring 이라 부른다. \n\n### Excercise\n\n_Write a product function that calculates the product of the values of a function for the points on a given interval_\n\n```\ndef product(f: Int => Int)(a: Int, b: Int): Int = {\n  if (a > b) 1 else f(a) * product (f)(a+1, b)\n}\nproduct(x => x*x)(3,4)\n```\n\n_Write factorial in terms of product._\n\n```\ndef fact(n: Int): Int = product(x => x)(1, n)\nfact(4)\n```\n\n_Can you write a more general funciton, which generalizes both sum and product?_\n\n```\ndef mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int): Int = {\n  if (a > b) zero\n  else combine(f(a), mapReduce(f, combine, zero)(a+1, b))\n}\n\ndef productForMapReduce(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x*y, 1)(a, b)\nproductForMapReduce(x => x*x)(3, 4)\n```\n\n## 2.3 Example: Finding Fixed Point\n부동점 구하기, Fixed Point라 함은 어떤 함수에서 고정적인 값을 갖는 point를 말한다. 다음의 함수에서 2는 부동점(고정점)이다.\n기하학적으로(?) 함수 f의 부동점은 y = x 와 주어진 함수와의 교점이다. 즉, x와 f(x) 값이 동일한 값을 뜻한다.\n\n```\nf(x) = x^2 -3x + 4\n// 2 = 4 - 6 + 4\n// 2 = 2, 부동점\n```\n\n어떤 함수에 대해서 부동점을 구하는 함수 fixedPoint는 아래와 같다.\n\n```\nobject ex {\n  val tolerance = 0.0001\n  def isCloseEnough(x: Double, y: Double) =\n    abs((x - y) / x) / x < tolerance\n\n  def fixedPoint(f: Double => Double)(firstGuess: Double) = {\n    def iterate(guess: Double): Double = {\n      println(\"guess = \" + guess)\n      val next = f(guess)\n      if (isCloseEnough(guess, next)) next\n      else iterate(next)\n    }\n    iterate(firstGuess)\n  }\n  fixedPoint(x => 1 + x/2)(1)\n\n  def sqrt(x: Double) = fixedPoint(y => x / y)(1)\n  sqrt(2)\n}\n```\nfixedPoint를 응용해보면, 첫번째 인자인 f 함수에 어떤 수식을 넣어 반복적으로 적용하면서 고정값을 찾아 가는 과정에 맞게 넣을 수 있겠다.\n마지막에 있는 것은 sqrt를 구하는 함수는 바로 위에서 말한 반복을 통한 고정값 추론에 적합하다. \nsqrt y를 구하려면 y * y = x가 되기 때문에 함수 y = x / y를 fixedPoint 함수에 반복적으로 적용하다보면 고정값 sqrt의 근사치를 구할 수 있다. \n하지만, 실제로 위와같이 y => x / y를 fixedPoint의 함수 인자로 넣게 되면, 원하는 값을 얻지 못한다.\n왜냐하면, guess 값이 너무 심하게 변하기 때문에 발생하는 문제다. fixedPoint 의 내부함수 iterate는 guess와 next가 교차하는 구조인데, 처음 sqrt(2)에서 2는 x이다.\n그리고 y는 firstGuess 인 1이되는데, 이 두 값이 f(x) = x / y에 대입되면, f(x)는 2가 된다. 다시 y가 2가 되고 x가 2이므로 iterate 함수를 한번 돌면 y는 1이된다.\n즉, 1,2,1,2 반복하기 때문에 무한루프에 빠지게 된다.\n이를 해결하기 위해서는 연속하는 두개의 값 즉 1과 2의 평균값(1.5)를 구함으로써 해결할 수 있다.\n\n```\ny => x / y\n// 아래와 같이 바꿔 쓴다.\ny => (y + x/y) / 2 \n\n// 코드에 적용해보면\ndef sqrt(x: Double) = fixedPoint(y => (y + x / y) / 2)\n```\n위와 같이 평균을 내어서 안정화 시키는 기법을 AverageDamp라고 한다.\n\n## 2.4 Scala Syntax Summary\n강의 참고\n\n## 2.5 Functions and Data\n유리수의 여러가지 연산을 바탕으로 함수를 만드는 방법과 데이터를 캡슐화하기 위해 클래스를 사용하는 방법을 알아 본다.\n\n\n```\n// class\nclass Rational(x: Int, y: Int) {\n  def numer = x\n  def denom = y\n\n  def add(that: Rational) =\n    new Rational(\n      numer * that.denom + that.numer * denom,\n      denom * that.denom)\n}\n\n// object\nval x = new Rational(1, 2)\nx.numer  // 1\ny.denom  // 2\n```\n위에서 Rational 클래스를 정의하였다. 클래스를 정의하면 두가지 요소가 정의되는데, 첫번째는 Rational이라는 type이 만들어진다는 것이고, 두번째는 x와 y를 인자로 가지는 Rational이라는 생성자가 만들어진다는 것이다.\nobject를 만드는 법은 Java의 object 만드는 법과 동일하게 new 키워드를 사용해서 만들 수 있다.\n\n### Method\n스칼라에서 함수(funciton)과 메소드(method)는 다른 의미로 사용되는데, 일반적으로 함수는 독립적인 객체로서 클래스처럼 인스턴스화 가능한 형태로 동작하는 반면, 메소드는 클래스내에 속하는 멤버로써 클래스 내의 데이터를 연산하는 역할을 한다. 실제 컴파일 해보면 차이를 알 수 있는데, 함수같은 경우에는 클래스로 변경되어 있지만(내부 함수인 경우에는 내부 클래스로 컴파일), 메소드는 컴파일 내에 멤버로만 존재하기 때문에 별도의 class로 컴파일 되지 않는다. \n\n### Exerxise\n1. In your worksheet, add a method neg to class Rational that is used like this:  x.neg\n\n2. Add a method sub to subtract two rational numbers.\n\n3. With the values of x, y, z as given in the previous slide, what is the result of x - y - z\n\n```\nclass Rational(x: Int, y: Int) {\n  def numer = x\n  def denom = y\n\n  def add(that: Rational) =\n    new Rational(\n      numer * that.denom + denom * that.numer,\n      denom * that.denom)\n\n  def neg: Rational = new Rational(numer * -1, denom)\n  def sub(that: Rational): Rational = add(that.neg)\n  override def toString = numer + \"/\" + denom\n}\n\nval x = new Rational(1, 3)\nval y = new Rational(5, 7)\nval z = new Rational(3, 2)\n\nx.sub(y).sub(z) // res0: Rational = -79/42\n```\n\n## 2.6 More Fun With Rationals\n2.5에서 구현한 Rational 클래스는 분모와 분자를 나누어진 형태로 출력하지 않는 문제가 있다. 그래서 이전에 사용했었던 최대 공약수를 구하는 함수인 gcd를 메서드 형태로 Rational 클래스에 추가해준다.\n그리고 클래스의 인수인 x와 y에 두 변수의 gcd 값을 나누어준다.\n\n```\nclass Rational(x: Int, y: Int) {\n  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)\n  \n  // ex 1) g를 재사용하는 방법\n  private val g = gcd(x, y)\n  def numer = x / g \n  def denom = y / g\n\n  // ex 2) numer와 denom이 자주 호출되지 않을때는 gcd를 직접 넣어줌\n  def numer = x / gcd(x, y)\n  def denom = y / gcd(x, y)\n\n  // ex3) 이 두 변수는 한번만 연산하도록 하기 위해 메서드를 value로 변경, numer와 denom이 자주 call 되는 경우에 적합 \n  val numer = x / gcd(x, y)\n  val denom = y / gcd(x, y)\n\n  ...\n}\n```\n\n### this\nthis 키워드는 java와 동일하게 사용된다. this는 현재 메소드가 실행되고있는 object를 말한다. second 생성자를 만들때에도\n\n```\ndef this(x: Int) = this(x, 1)\n```\n과 같이 사용한다.\n\n### require 키워드\nrequire 키워드를 사용하면 클래스의 인자값 등에 대한 제약을 만들 수 있다. 아래의 클래스가 있는 상태에서 만약에 new Rational(1, 0)과 같은 instance를 생성하게 되면 예외가 발생하게 된다. require와 같이 객체가 생성될때 강제로 호출하는 역할을 하는 함수를 predefined funciton 이라고 한다.\n\n```\nclass Rational(x: Int, y: Int) {\n  require(y != 0, \" denominator must be positive\")  \n  ...\n}\n```\n\n\n## 2.7 Evaluation and Operators\n클래스와 메소드의 evalutaion 과정\n\n```\nclass C(x1, ..., xm) {... def f(y1, ..., yn) = b ...}\nnew C(v1, ..., vm).f(w1, ..., wn)\n\n// substitution\n[w1/y1, ... wn/yn][v1/x1, ..., vm/xm][new C(v1, ..., vm)/this]b\n```\n과정을 간단히 요약하면\n\n1. f 메서드의 formal parameters(y1, ..., yn)이 arguments(w1, ..., wn)으로 치환\n2. 클래스의 formal parameters(x1, ..., xm)이 arguments(v1, ..., vm)으로 치환\n3. self reference this가 new C(v1, ..., vm)으로 치환\n\n만약 f 함수 내부에서 this 가 사용된다고 가정한다면, 이 this는 이미 new C(v1, ..., vm)으로 치환된 value 이므로, 해당 object 자체를 참조하는 값이 된다. \n\n### Operators\n일반적인 언어에서는 r.add(s)와 같은 함수가 호출될때 자연수인 경우에는 r + s와 같이 바꿔 쓸 수 있지만, 유리수의 경우에는 불가하다.\n하지만 스칼라에서는 오퍼레이터 기호를 함수 이름으로 사용가능하다.\n\n* step 1 : r.add(s) ==> r add s\n* step 2 : def + (that: Rational) = { ... }\n\n하지만 위와 같이 함수 이름을 오퍼레이터로 사용하게 되면, 우선순위 문제가 발생할 수 있다. \n그래서 스칼라에서는 precedence rules을 별도로 만들어 두었다.\n우선순위는 아래가 제일 높고 위로 갈수록 낮아진다.\n\n```\n(all letters)\n|\n^\n&\n< >\n= !\n:\n+ -\n* / %\n(all other special characters)\n```\n","source":"_posts/2016-07-26-functional-programming-in-scala-week2.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 2\"\ncategories: programming\ndate:   2016-07-26 23:25:50 +0900\ntags:\n- scala\n- coursera\n---\n## 2.1 Higher-Order Functions\n함수형 언어에서는 function이 first-class value이다. 이 말은 특정 함수가 다른 함수의 파라미터나 결과로써 return 될 수 있다는 것이다(higher order functions).\n\n```\ndef sum(f: Int => Int, a: Int, b: Int): Int = \n  if (a > b) 0\n  else f(a) + sum(f, a+1, b) \n\ndef sumInts(a: Int, b: Int)       = sum(id, a, b)\ndef sumCubes(a: Int, b: Int)      = sum(cube, a, b)\ndef sumFactorials(a: Int, b: Int) = sum(fact, a, b)\n\ndef id(x: Int): Int = x\ndef cube(x: Int): Int = x * x * x\ndef fact(x: Int): Int = if (x == 0) 1 else x * fact(x -1)\n```\nsum() 함수의 첫번째 파라미터로 f라는 임의의 함수가 들어가 있다.\n이는 Int 파라미터를 받아서 Int 타입을 리턴하는 함수라면 이 파라미터 위치에 적합하다라는 뜻이다. 즉, 어떠한 함수가 됐든간에 저 유형만 유지하면 된다. 재사용 가능하다는 말이다. 실제로 sumInts(), sumCubes(), sumFactorials() 함수는 모두 sum()함수를 호출한다. sum()함수의 첫번째 파라미터는 각각 id(), cube(), fact()함수를 호출하게 되는데 세 함수 모두 파라미터와 리턴 타입이 Int이므로 sum()함수의 파라미터로 적합하다.\n\n### 익명함수\n\n```\n(x: Int, y:Int) => x + y\n```\n익명함수는 보통 함수를 선언하는 방식과는 달리 이름이 없다.\n대신 파라미터 타입과 body만 존재한다. \n\n```\ndef sumCubes(a: Int, b: Int) = sum(x => x * x * x, a, b)\n```\n위에서 보았던 sumCubes의 익명함수 버전이다.\ncube() 함수가 재사용되지 않는다고 가정한다면 매우 심플하기 때문에 따로 함수를 선언하기 보다는 sum() 파라미터에 익명함수로 직접 선언할수 있다.\n\n```\n// linear recursion, a와 b의 차이가 커지면 stackOverFlow 익셉션이 발생할 수 있다.\ndef sum(f: Int => Int, a: Int, b: Int): Int = \n  if (a > b) 0\n  else f(a) + sum(f, a+1, b) \n\n// tail-recursive version\ndef sum(f: Int => Int, a: Int, b: Int): Int = {\n  def loop(a: Int, acc: Int): Int = {\n    if(a > b) acc\n    else loop(a+1, f(a)+acc)\n  }\n  loop(a, 0)  \n}\n```\n\n## 2.2 Currying\n\n```\ndef sumInts(a: Int, b: Int)       = sum(x => x, a, b)\ndef sumCubes(a: Int, b: Int)      = sum(x => x*x*x, a, b)\ndef sumFactorials(a: Int, b: Int) = sum(fact, a, b)\n```\n위의 함수들에서 a, b 파라미터는 sumInts(), sum()에서 반복된다. 이를 제거하여 함수를 더 간소하게 만드는 방법은 무엇일까?\n우선 아래의 함수를 살펴보자.\n\n```\ndef sum(f: Int => Int): (Int, Int) => Int = {\n  def sumF(a: Int, b: Int): Int = {\n    if (a > b) 0\n    else f(a) + sumF(a+1, b)\n  }\n  sumF\n}\n```\n기존에 봤던 sum() 함수와 조금 다르게 생겼다. 우선 sum() 함수의 파라미터가 f() 하나로 줄었고, sum() 함수는 (Int, Int) => Int 와 같은 타입의 익명함수를 리턴하고 있다.\nsumF를 호출하는 부분이 조금 이해하기 어려운데, 위의 내부함수 sumF()를 자세히 보면 익명함수를 설명했을 때의 형태와 같다는 것을 알 수 있다.\n\n```\n(x: Int, y: Int): Int => x * y\n// 이 익명함수는 아래와 같이 표현가능하다.\ndef f(x: Int): Int = x * y; f\n```\n\n위에서 썼던 sumInts(), sumCubes(), sumFactorials() 함수들을 가져오자. 조금 다르다. sum() 함수의 파라미터가 f 하나로 줄면서 아래의 각 함수들도 sum() 호출부의 인자가 익명함수 하나만 남았다.\n\n```\ndef sumInts(a: Int, b: Int) = sum(x => x)\ndef sumCubes(a: Int, b: Int) = sum(x => x*x*x)\ndef sumFactorials(a: Int, b: Int) = sum(fact)\n```\n이제 sum() 함수는 함수를 리턴하고 있으므로, sumCubes(1, 10)를 호출하면\n\n```\nsumCubes(1, 10)\n// res0: (Int, Int) => Int = <function2>\n```\n이는 또한 이렇게 바꿔 쓸수 있다.\n\n```\nsum (cube) (1, 10) // multiple parameters\n(sum (cube)) (1, 10)  \n```\n위의 multiple parameters를 적용하면 sum() 함수를 더 짧게 작성할 수 있다.\n\n```\ndef sum(f: Int => Int)(a: Int, b: Int): Int =\n  if (a > b) 0 else f(a) + sum(f)(a+1, b)\n```\n여러개의 파라미터 list를 가진 함수 f에서 파라미터list의 개수가 1보다 큰 경우 마지막 파라미터 list를 f 함수에서 제거하면 이 마지막 파라미터 list를 파라미터로 가지는 또다른 함수 g를 만들 수 있다. 물론 이 g 함수는 f 함수의 리턴함수가 된다. 식으로 나타내면 다음과 같다. 참고로 각각의 식은 모두 동일하다\n\n```\ndef f(arg1)(arg2)(arg3)(arg4) = E\ndef f(arg1)(arg2)(arg3) = {def g(arg4) = E;g} // arg4를 이용해 g함수 생성\ndef f(arg1)(arg2)(arg3) = (arg4 => E) // g를 익명함수로 변경\ndef f = (arg1 => (arg2 => (arg3 => (arg4 => E)))) // 파라미터를 하나씩 우측으로 전달함\n```\n이와같은 형태의 함수정의를 curring 이라 부른다. \n\n### Excercise\n\n_Write a product function that calculates the product of the values of a function for the points on a given interval_\n\n```\ndef product(f: Int => Int)(a: Int, b: Int): Int = {\n  if (a > b) 1 else f(a) * product (f)(a+1, b)\n}\nproduct(x => x*x)(3,4)\n```\n\n_Write factorial in terms of product._\n\n```\ndef fact(n: Int): Int = product(x => x)(1, n)\nfact(4)\n```\n\n_Can you write a more general funciton, which generalizes both sum and product?_\n\n```\ndef mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int): Int = {\n  if (a > b) zero\n  else combine(f(a), mapReduce(f, combine, zero)(a+1, b))\n}\n\ndef productForMapReduce(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x*y, 1)(a, b)\nproductForMapReduce(x => x*x)(3, 4)\n```\n\n## 2.3 Example: Finding Fixed Point\n부동점 구하기, Fixed Point라 함은 어떤 함수에서 고정적인 값을 갖는 point를 말한다. 다음의 함수에서 2는 부동점(고정점)이다.\n기하학적으로(?) 함수 f의 부동점은 y = x 와 주어진 함수와의 교점이다. 즉, x와 f(x) 값이 동일한 값을 뜻한다.\n\n```\nf(x) = x^2 -3x + 4\n// 2 = 4 - 6 + 4\n// 2 = 2, 부동점\n```\n\n어떤 함수에 대해서 부동점을 구하는 함수 fixedPoint는 아래와 같다.\n\n```\nobject ex {\n  val tolerance = 0.0001\n  def isCloseEnough(x: Double, y: Double) =\n    abs((x - y) / x) / x < tolerance\n\n  def fixedPoint(f: Double => Double)(firstGuess: Double) = {\n    def iterate(guess: Double): Double = {\n      println(\"guess = \" + guess)\n      val next = f(guess)\n      if (isCloseEnough(guess, next)) next\n      else iterate(next)\n    }\n    iterate(firstGuess)\n  }\n  fixedPoint(x => 1 + x/2)(1)\n\n  def sqrt(x: Double) = fixedPoint(y => x / y)(1)\n  sqrt(2)\n}\n```\nfixedPoint를 응용해보면, 첫번째 인자인 f 함수에 어떤 수식을 넣어 반복적으로 적용하면서 고정값을 찾아 가는 과정에 맞게 넣을 수 있겠다.\n마지막에 있는 것은 sqrt를 구하는 함수는 바로 위에서 말한 반복을 통한 고정값 추론에 적합하다. \nsqrt y를 구하려면 y * y = x가 되기 때문에 함수 y = x / y를 fixedPoint 함수에 반복적으로 적용하다보면 고정값 sqrt의 근사치를 구할 수 있다. \n하지만, 실제로 위와같이 y => x / y를 fixedPoint의 함수 인자로 넣게 되면, 원하는 값을 얻지 못한다.\n왜냐하면, guess 값이 너무 심하게 변하기 때문에 발생하는 문제다. fixedPoint 의 내부함수 iterate는 guess와 next가 교차하는 구조인데, 처음 sqrt(2)에서 2는 x이다.\n그리고 y는 firstGuess 인 1이되는데, 이 두 값이 f(x) = x / y에 대입되면, f(x)는 2가 된다. 다시 y가 2가 되고 x가 2이므로 iterate 함수를 한번 돌면 y는 1이된다.\n즉, 1,2,1,2 반복하기 때문에 무한루프에 빠지게 된다.\n이를 해결하기 위해서는 연속하는 두개의 값 즉 1과 2의 평균값(1.5)를 구함으로써 해결할 수 있다.\n\n```\ny => x / y\n// 아래와 같이 바꿔 쓴다.\ny => (y + x/y) / 2 \n\n// 코드에 적용해보면\ndef sqrt(x: Double) = fixedPoint(y => (y + x / y) / 2)\n```\n위와 같이 평균을 내어서 안정화 시키는 기법을 AverageDamp라고 한다.\n\n## 2.4 Scala Syntax Summary\n강의 참고\n\n## 2.5 Functions and Data\n유리수의 여러가지 연산을 바탕으로 함수를 만드는 방법과 데이터를 캡슐화하기 위해 클래스를 사용하는 방법을 알아 본다.\n\n\n```\n// class\nclass Rational(x: Int, y: Int) {\n  def numer = x\n  def denom = y\n\n  def add(that: Rational) =\n    new Rational(\n      numer * that.denom + that.numer * denom,\n      denom * that.denom)\n}\n\n// object\nval x = new Rational(1, 2)\nx.numer  // 1\ny.denom  // 2\n```\n위에서 Rational 클래스를 정의하였다. 클래스를 정의하면 두가지 요소가 정의되는데, 첫번째는 Rational이라는 type이 만들어진다는 것이고, 두번째는 x와 y를 인자로 가지는 Rational이라는 생성자가 만들어진다는 것이다.\nobject를 만드는 법은 Java의 object 만드는 법과 동일하게 new 키워드를 사용해서 만들 수 있다.\n\n### Method\n스칼라에서 함수(funciton)과 메소드(method)는 다른 의미로 사용되는데, 일반적으로 함수는 독립적인 객체로서 클래스처럼 인스턴스화 가능한 형태로 동작하는 반면, 메소드는 클래스내에 속하는 멤버로써 클래스 내의 데이터를 연산하는 역할을 한다. 실제 컴파일 해보면 차이를 알 수 있는데, 함수같은 경우에는 클래스로 변경되어 있지만(내부 함수인 경우에는 내부 클래스로 컴파일), 메소드는 컴파일 내에 멤버로만 존재하기 때문에 별도의 class로 컴파일 되지 않는다. \n\n### Exerxise\n1. In your worksheet, add a method neg to class Rational that is used like this:  x.neg\n\n2. Add a method sub to subtract two rational numbers.\n\n3. With the values of x, y, z as given in the previous slide, what is the result of x - y - z\n\n```\nclass Rational(x: Int, y: Int) {\n  def numer = x\n  def denom = y\n\n  def add(that: Rational) =\n    new Rational(\n      numer * that.denom + denom * that.numer,\n      denom * that.denom)\n\n  def neg: Rational = new Rational(numer * -1, denom)\n  def sub(that: Rational): Rational = add(that.neg)\n  override def toString = numer + \"/\" + denom\n}\n\nval x = new Rational(1, 3)\nval y = new Rational(5, 7)\nval z = new Rational(3, 2)\n\nx.sub(y).sub(z) // res0: Rational = -79/42\n```\n\n## 2.6 More Fun With Rationals\n2.5에서 구현한 Rational 클래스는 분모와 분자를 나누어진 형태로 출력하지 않는 문제가 있다. 그래서 이전에 사용했었던 최대 공약수를 구하는 함수인 gcd를 메서드 형태로 Rational 클래스에 추가해준다.\n그리고 클래스의 인수인 x와 y에 두 변수의 gcd 값을 나누어준다.\n\n```\nclass Rational(x: Int, y: Int) {\n  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)\n  \n  // ex 1) g를 재사용하는 방법\n  private val g = gcd(x, y)\n  def numer = x / g \n  def denom = y / g\n\n  // ex 2) numer와 denom이 자주 호출되지 않을때는 gcd를 직접 넣어줌\n  def numer = x / gcd(x, y)\n  def denom = y / gcd(x, y)\n\n  // ex3) 이 두 변수는 한번만 연산하도록 하기 위해 메서드를 value로 변경, numer와 denom이 자주 call 되는 경우에 적합 \n  val numer = x / gcd(x, y)\n  val denom = y / gcd(x, y)\n\n  ...\n}\n```\n\n### this\nthis 키워드는 java와 동일하게 사용된다. this는 현재 메소드가 실행되고있는 object를 말한다. second 생성자를 만들때에도\n\n```\ndef this(x: Int) = this(x, 1)\n```\n과 같이 사용한다.\n\n### require 키워드\nrequire 키워드를 사용하면 클래스의 인자값 등에 대한 제약을 만들 수 있다. 아래의 클래스가 있는 상태에서 만약에 new Rational(1, 0)과 같은 instance를 생성하게 되면 예외가 발생하게 된다. require와 같이 객체가 생성될때 강제로 호출하는 역할을 하는 함수를 predefined funciton 이라고 한다.\n\n```\nclass Rational(x: Int, y: Int) {\n  require(y != 0, \" denominator must be positive\")  \n  ...\n}\n```\n\n\n## 2.7 Evaluation and Operators\n클래스와 메소드의 evalutaion 과정\n\n```\nclass C(x1, ..., xm) {... def f(y1, ..., yn) = b ...}\nnew C(v1, ..., vm).f(w1, ..., wn)\n\n// substitution\n[w1/y1, ... wn/yn][v1/x1, ..., vm/xm][new C(v1, ..., vm)/this]b\n```\n과정을 간단히 요약하면\n\n1. f 메서드의 formal parameters(y1, ..., yn)이 arguments(w1, ..., wn)으로 치환\n2. 클래스의 formal parameters(x1, ..., xm)이 arguments(v1, ..., vm)으로 치환\n3. self reference this가 new C(v1, ..., vm)으로 치환\n\n만약 f 함수 내부에서 this 가 사용된다고 가정한다면, 이 this는 이미 new C(v1, ..., vm)으로 치환된 value 이므로, 해당 object 자체를 참조하는 값이 된다. \n\n### Operators\n일반적인 언어에서는 r.add(s)와 같은 함수가 호출될때 자연수인 경우에는 r + s와 같이 바꿔 쓸 수 있지만, 유리수의 경우에는 불가하다.\n하지만 스칼라에서는 오퍼레이터 기호를 함수 이름으로 사용가능하다.\n\n* step 1 : r.add(s) ==> r add s\n* step 2 : def + (that: Rational) = { ... }\n\n하지만 위와 같이 함수 이름을 오퍼레이터로 사용하게 되면, 우선순위 문제가 발생할 수 있다. \n그래서 스칼라에서는 precedence rules을 별도로 만들어 두었다.\n우선순위는 아래가 제일 높고 위로 갈수록 낮아진다.\n\n```\n(all letters)\n|\n^\n&\n< >\n= !\n:\n+ -\n* / %\n(all other special characters)\n```\n","slug":"2016-07-26-functional-programming-in-scala-week2","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv74001iwxt47o0835vw","content":"<h2 id=\"2-1-Higher-Order-Functions\"><a href=\"#2-1-Higher-Order-Functions\" class=\"headerlink\" title=\"2.1 Higher-Order Functions\"></a>2.1 Higher-Order Functions</h2><p>함수형 언어에서는 function이 first-class value이다. 이 말은 특정 함수가 다른 함수의 파라미터나 결과로써 return 될 수 있다는 것이다(higher order functions).</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = </div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">else</span> f(a) + sum(f, a+<span class=\"number\">1</span>, b) </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">def</span> sumInts(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>)       = sum(id, a, b)</div><div class=\"line\"><span class=\"keyword\">def</span> sumCubes(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>)      = sum(cube, a, b)</div><div class=\"line\"><span class=\"keyword\">def</span> sumFactorials(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>) = sum(fact, a, b)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">def</span> id(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x</div><div class=\"line\"><span class=\"keyword\">def</span> cube(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x * x * x</div><div class=\"line\"><span class=\"keyword\">def</span> fact(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> x * fact(x -<span class=\"number\">1</span>)</div></pre></td></tr></table></figure><p>sum() 함수의 첫번째 파라미터로 f라는 임의의 함수가 들어가 있다.<br>이는 Int 파라미터를 받아서 Int 타입을 리턴하는 함수라면 이 파라미터 위치에 적합하다라는 뜻이다. 즉, 어떠한 함수가 됐든간에 저 유형만 유지하면 된다. 재사용 가능하다는 말이다. 실제로 sumInts(), sumCubes(), sumFactorials() 함수는 모두 sum()함수를 호출한다. sum()함수의 첫번째 파라미터는 각각 id(), cube(), fact()함수를 호출하게 되는데 세 함수 모두 파라미터와 리턴 타입이 Int이므로 sum()함수의 파라미터로 적합하다.</p><h3 id=\"익명함수\"><a href=\"#익명함수\" class=\"headerlink\" title=\"익명함수\"></a>익명함수</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">x</span>: Int, y<span class=\"symbol\">:Int</span>) =&gt; x + y</div></pre></td></tr></table></figure><p>익명함수는 보통 함수를 선언하는 방식과는 달리 이름이 없다.<br>대신 파라미터 타입과 body만 존재한다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x * x * x, a, b)</div></pre></td></tr></table></figure><p>위에서 보았던 sumCubes의 익명함수 버전이다.<br>cube() 함수가 재사용되지 않는다고 가정한다면 매우 심플하기 때문에 따로 함수를 선언하기 보다는 sum() 파라미터에 익명함수로 직접 선언할수 있다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// linear recursion, a와 b의 차이가 커지면 stackOverFlow 익셉션이 발생할 수 있다.</span></div><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = </div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">else</span> f(a) + sum(f, a+<span class=\"number\">1</span>, b) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// tail-recursive version</span></div><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> loop(a: <span class=\"keyword\">Int</span>, acc: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) acc</div><div class=\"line\">    <span class=\"keyword\">else</span> loop(a+<span class=\"number\">1</span>, f(a)+acc)</div><div class=\"line\">  &#125;</div><div class=\"line\">  loop(a, <span class=\"number\">0</span>)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"2-2-Currying\"><a href=\"#2-2-Currying\" class=\"headerlink\" title=\"2.2 Currying\"></a>2.2 Currying</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumInts(<span class=\"name\">a</span>: Int, b: Int)       = sum(<span class=\"name\">x</span> =&gt; x, a, b)</div><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int)      = sum(<span class=\"name\">x</span> =&gt; x*x*x, a, b)</div><div class=\"line\">def sumFactorials(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">fact</span>, a, b)</div></pre></td></tr></table></figure><p>위의 함수들에서 a, b 파라미터는 sumInts(), sum()에서 반복된다. 이를 제거하여 함수를 더 간소하게 만드는 방법은 무엇일까?<br>우선 아래의 함수를 살펴보자.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>): (<span class=\"keyword\">Int</span>, <span class=\"keyword\">Int</span>) =&gt; <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> sumF(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">else</span> f(a) + sumF(a+<span class=\"number\">1</span>, b)</div><div class=\"line\">  &#125;</div><div class=\"line\">  sumF</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기존에 봤던 sum() 함수와 조금 다르게 생겼다. 우선 sum() 함수의 파라미터가 f() 하나로 줄었고, sum() 함수는 (Int, Int) =&gt; Int 와 같은 타입의 익명함수를 리턴하고 있다.<br>sumF를 호출하는 부분이 조금 이해하기 어려운데, 위의 내부함수 sumF()를 자세히 보면 익명함수를 설명했을 때의 형태와 같다는 것을 알 수 있다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(x: <span class=\"keyword\">Int</span>, y: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> =&gt; x * y</div><div class=\"line\"><span class=\"comment\">// 이 익명함수는 아래와 같이 표현가능하다.</span></div><div class=\"line\"><span class=\"keyword\">def</span> f(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x * y; f</div></pre></td></tr></table></figure><p>위에서 썼던 sumInts(), sumCubes(), sumFactorials() 함수들을 가져오자. 조금 다르다. sum() 함수의 파라미터가 f 하나로 줄면서 아래의 각 함수들도 sum() 호출부의 인자가 익명함수 하나만 남았다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumInts(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x)</div><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x*x*x)</div><div class=\"line\">def sumFactorials(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">fact</span>)</div></pre></td></tr></table></figure><p>이제 sum() 함수는 함수를 리턴하고 있으므로, sumCubes(1, 10)를 호출하면</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">sumCubes</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span></span></div><div class=\"line\"><span class=\"comment\">// res0: (Int, Int) =&gt; Int = &lt;function2&gt;</span></div></pre></td></tr></table></figure><p>이는 또한 이렇게 바꿔 쓸수 있다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum (<span class=\"name\">cube</span>) (<span class=\"number\">1</span>, <span class=\"number\">10</span>) // multiple parameters</div><div class=\"line\">(<span class=\"name\">sum</span> (<span class=\"name\">cube</span>)) (<span class=\"number\">1</span>, <span class=\"number\">10</span>)</div></pre></td></tr></table></figure><p>위의 multiple parameters를 적용하면 sum() 함수를 더 짧게 작성할 수 있다.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">sum</span>(f: <span class=\"built_in\">Int</span> =&gt; <span class=\"built_in\">Int</span>)(a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span>): <span class=\"built_in\">Int</span> =</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span> <span class=\"keyword\">else</span> f(a) + <span class=\"built_in\">sum</span>(f)(a+<span class=\"number\">1</span>, b)</div></pre></td></tr></table></figure><p>여러개의 파라미터 list를 가진 함수 f에서 파라미터list의 개수가 1보다 큰 경우 마지막 파라미터 list를 f 함수에서 제거하면 이 마지막 파라미터 list를 파라미터로 가지는 또다른 함수 g를 만들 수 있다. 물론 이 g 함수는 f 함수의 리턴함수가 된다. 식으로 나타내면 다음과 같다. 참고로 각각의 식은 모두 동일하다</p><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3)(arg4) = E</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3) = &#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span></span>(arg4) = E;g&#125; <span class=\"comment\">// arg4를 이용해 g함수 생성</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3) = (arg4 =&gt; E) <span class=\"comment\">// g를 익명함수로 변경</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> </span>= (arg1 =&gt; (arg2 =&gt; (arg3 =&gt; (arg4 =&gt; E)))) <span class=\"comment\">// 파라미터를 하나씩 우측으로 전달함</span></div></pre></td></tr></table></figure><p>이와같은 형태의 함수정의를 curring 이라 부른다.</p><h3 id=\"Excercise\"><a href=\"#Excercise\" class=\"headerlink\" title=\"Excercise\"></a>Excercise</h3><p><em>Write a product function that calculates the product of the values of a function for the points on a given interval</em></p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">product</span>(f: <span class=\"built_in\">Int</span> =&gt; <span class=\"built_in\">Int</span>)(a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span>): <span class=\"built_in\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">1</span> <span class=\"keyword\">else</span> f(a) * <span class=\"built_in\">product</span> (f)(a+<span class=\"number\">1</span>, b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">product</span>(x =&gt; x*x)(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div></pre></td></tr></table></figure><p><em>Write factorial in terms of product.</em></p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">fact</span>(<span class=\"symbol\">n:</span> <span class=\"built_in\">Int</span>)<span class=\"symbol\">:</span> <span class=\"built_in\">Int</span> = <span class=\"built_in\">product</span>(x =&gt; x)(<span class=\"number\">1</span>, <span class=\"built_in\">n</span>)</div><div class=\"line\"><span class=\"built_in\">fact</span>(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure><p><em>Can you write a more general funciton, which generalizes both sum and product?</em></p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def mapReduce(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, combine: (<span class=\"keyword\">Int</span>, <span class=\"keyword\">Int</span>) =&gt; <span class=\"keyword\">Int</span>, zero: <span class=\"keyword\">Int</span>)(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) zero</div><div class=\"line\">  <span class=\"keyword\">else</span> combine(f(a), mapReduce(f, combine, zero)(a+<span class=\"number\">1</span>, b))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def productForMapReduce(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>)(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = mapReduce(f, (x, y) =&gt; x*y, <span class=\"number\">1</span>)(a, b)</div><div class=\"line\">productForMapReduce(x =&gt; x*x)(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</div></pre></td></tr></table></figure><h2 id=\"2-3-Example-Finding-Fixed-Point\"><a href=\"#2-3-Example-Finding-Fixed-Point\" class=\"headerlink\" title=\"2.3 Example: Finding Fixed Point\"></a>2.3 Example: Finding Fixed Point</h2><p>부동점 구하기, Fixed Point라 함은 어떤 함수에서 고정적인 값을 갖는 point를 말한다. 다음의 함수에서 2는 부동점(고정점)이다.<br>기하학적으로(?) 함수 f의 부동점은 y = x 와 주어진 함수와의 교점이다. 즉, x와 f(x) 값이 동일한 값을 뜻한다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = x^<span class=\"number\">2</span> <span class=\"number\">-3</span>x + <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">// 2 = 4 - 6 + 4</span></div><div class=\"line\"><span class=\"comment\">// 2 = 2, 부동점</span></div></pre></td></tr></table></figure><p>어떤 함수에 대해서 부동점을 구하는 함수 fixedPoint는 아래와 같다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">object ex &#123;</div><div class=\"line\">  val tolerance = <span class=\"number\">0</span>.<span class=\"number\">0001</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isCloseEnough</span><span class=\"params\">(<span class=\"symbol\">x:</span> Double, <span class=\"symbol\">y:</span> Double)</span></span> =</div><div class=\"line\">    abs((x - y) / x) / x &lt; tolerance</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedPoint</span><span class=\"params\">(<span class=\"symbol\">f:</span> Double =&gt; Double)</span></span>(<span class=\"symbol\">firstGuess:</span> Double) = &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iterate</span><span class=\"params\">(<span class=\"symbol\">guess:</span> Double)</span></span>: Double = &#123;</div><div class=\"line\">      println(<span class=\"string\">\"guess = \"</span> + guess)</div><div class=\"line\">      val <span class=\"keyword\">next</span> = f(guess)</div><div class=\"line\">      <span class=\"keyword\">if</span> (isCloseEnough(guess, <span class=\"keyword\">next</span>)) <span class=\"keyword\">next</span></div><div class=\"line\">      <span class=\"keyword\">else</span> iterate(<span class=\"keyword\">next</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    iterate(firstGuess)</div><div class=\"line\">  &#125;</div><div class=\"line\">  fixedPoint(x =&gt; <span class=\"number\">1</span> + x/<span class=\"number\">2</span>)(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sqrt</span><span class=\"params\">(<span class=\"symbol\">x:</span> Double)</span></span> = fixedPoint(y =&gt; x / y)(<span class=\"number\">1</span>)</div><div class=\"line\">  sqrt(<span class=\"number\">2</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>fixedPoint를 응용해보면, 첫번째 인자인 f 함수에 어떤 수식을 넣어 반복적으로 적용하면서 고정값을 찾아 가는 과정에 맞게 넣을 수 있겠다.<br>마지막에 있는 것은 sqrt를 구하는 함수는 바로 위에서 말한 반복을 통한 고정값 추론에 적합하다.<br>sqrt y를 구하려면 y * y = x가 되기 때문에 함수 y = x / y를 fixedPoint 함수에 반복적으로 적용하다보면 고정값 sqrt의 근사치를 구할 수 있다.<br>하지만, 실제로 위와같이 y =&gt; x / y를 fixedPoint의 함수 인자로 넣게 되면, 원하는 값을 얻지 못한다.<br>왜냐하면, guess 값이 너무 심하게 변하기 때문에 발생하는 문제다. fixedPoint 의 내부함수 iterate는 guess와 next가 교차하는 구조인데, 처음 sqrt(2)에서 2는 x이다.<br>그리고 y는 firstGuess 인 1이되는데, 이 두 값이 f(x) = x / y에 대입되면, f(x)는 2가 된다. 다시 y가 2가 되고 x가 2이므로 iterate 함수를 한번 돌면 y는 1이된다.<br>즉, 1,2,1,2 반복하기 때문에 무한루프에 빠지게 된다.<br>이를 해결하기 위해서는 연속하는 두개의 값 즉 1과 2의 평균값(1.5)를 구함으로써 해결할 수 있다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">y =&gt; x / y</div><div class=\"line\"><span class=\"comment\">// 아래와 같이 바꿔 쓴다.</span></div><div class=\"line\">y =&gt; (y + x<span class=\"regexp\">/y) /</span> <span class=\"number\">2</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 코드에 적용해보면</span></div><div class=\"line\"><span class=\"keyword\">def</span> sqrt(<span class=\"string\">x:</span> Double) = fixedPoint(y =&gt; (y + x <span class=\"regexp\">/ y) /</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure><p>위와 같이 평균을 내어서 안정화 시키는 기법을 AverageDamp라고 한다.</p><h2 id=\"2-4-Scala-Syntax-Summary\"><a href=\"#2-4-Scala-Syntax-Summary\" class=\"headerlink\" title=\"2.4 Scala Syntax Summary\"></a>2.4 Scala Syntax Summary</h2><p>강의 참고</p><h2 id=\"2-5-Functions-and-Data\"><a href=\"#2-5-Functions-and-Data\" class=\"headerlink\" title=\"2.5 Functions and Data\"></a>2.5 Functions and Data</h2><p>유리수의 여러가지 연산을 바탕으로 함수를 만드는 방법과 데이터를 캡슐화하기 위해 클래스를 사용하는 방법을 알아 본다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// class</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(that: <span class=\"type\">Rational</span>) =</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(</div><div class=\"line\">      numer * that.denom + that.numer * denom,</div><div class=\"line\">      denom * that.denom)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">x.numer  <span class=\"comment\">// 1</span></div><div class=\"line\">y.denom  <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure><p>위에서 Rational 클래스를 정의하였다. 클래스를 정의하면 두가지 요소가 정의되는데, 첫번째는 Rational이라는 type이 만들어진다는 것이고, 두번째는 x와 y를 인자로 가지는 Rational이라는 생성자가 만들어진다는 것이다.<br>object를 만드는 법은 Java의 object 만드는 법과 동일하게 new 키워드를 사용해서 만들 수 있다.</p><h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><p>스칼라에서 함수(funciton)과 메소드(method)는 다른 의미로 사용되는데, 일반적으로 함수는 독립적인 객체로서 클래스처럼 인스턴스화 가능한 형태로 동작하는 반면, 메소드는 클래스내에 속하는 멤버로써 클래스 내의 데이터를 연산하는 역할을 한다. 실제 컴파일 해보면 차이를 알 수 있는데, 함수같은 경우에는 클래스로 변경되어 있지만(내부 함수인 경우에는 내부 클래스로 컴파일), 메소드는 컴파일 내에 멤버로만 존재하기 때문에 별도의 class로 컴파일 되지 않는다.</p><h3 id=\"Exerxise\"><a href=\"#Exerxise\" class=\"headerlink\" title=\"Exerxise\"></a>Exerxise</h3><ol><li><p>In your worksheet, add a method neg to class Rational that is used like this: x.neg</p></li><li><p>Add a method sub to subtract two rational numbers.</p></li><li><p>With the values of x, y, z as given in the previous slide, what is the result of x - y - z</p></li></ol><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(that: <span class=\"type\">Rational</span>) =</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(</div><div class=\"line\">      numer * that.denom + denom * that.numer,</div><div class=\"line\">      denom * that.denom)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">neg</span></span>: <span class=\"type\">Rational</span> = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(numer * <span class=\"number\">-1</span>, denom)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span></span>(that: <span class=\"type\">Rational</span>): <span class=\"type\">Rational</span> = add(that.neg)</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= numer + <span class=\"string\">\"/\"</span> + denom</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">5</span>, <span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> z = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">x.sub(y).sub(z) <span class=\"comment\">// res0: Rational = -79/42</span></div></pre></td></tr></table></figure><h2 id=\"2-6-More-Fun-With-Rationals\"><a href=\"#2-6-More-Fun-With-Rationals\" class=\"headerlink\" title=\"2.6 More Fun With Rationals\"></a>2.6 More Fun With Rationals</h2><p>2.5에서 구현한 Rational 클래스는 분모와 분자를 나누어진 형태로 출력하지 않는 문제가 있다. 그래서 이전에 사용했었던 최대 공약수를 구하는 함수인 gcd를 메서드 형태로 Rational 클래스에 추가해준다.<br>그리고 클래스의 인수인 x와 y에 두 변수의 gcd 값을 나누어준다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span></span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>): <span class=\"type\">Int</span> = <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) a <span class=\"keyword\">else</span> gcd(b, a % b)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// ex 1) g를 재사용하는 방법</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> g = gcd(x, y)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x / g </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y / g</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ex 2) numer와 denom이 자주 호출되지 않을때는 gcd를 직접 넣어줌</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x / gcd(x, y)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y / gcd(x, y)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ex3) 이 두 변수는 한번만 연산하도록 하기 위해 메서드를 value로 변경, numer와 denom이 자주 call 되는 경우에 적합 </span></div><div class=\"line\">  <span class=\"keyword\">val</span> numer = x / gcd(x, y)</div><div class=\"line\">  <span class=\"keyword\">val</span> denom = y / gcd(x, y)</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this 키워드는 java와 동일하게 사용된다. this는 현재 메소드가 실행되고있는 object를 말한다. second 생성자를 만들때에도</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">this</span>(x: <span class=\"built_in\">Int</span>) = <span class=\"keyword\">this</span>(x, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure><p>과 같이 사용한다.</p><h3 id=\"require-키워드\"><a href=\"#require-키워드\" class=\"headerlink\" title=\"require 키워드\"></a>require 키워드</h3><p>require 키워드를 사용하면 클래스의 인자값 등에 대한 제약을 만들 수 있다. 아래의 클래스가 있는 상태에서 만약에 new Rational(1, 0)과 같은 instance를 생성하게 되면 예외가 발생하게 된다. require와 같이 객체가 생성될때 강제로 호출하는 역할을 하는 함수를 predefined funciton 이라고 한다.</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span></span>(x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">  require(y != <span class=\"number\">0</span>, <span class=\"string\">\" denominator must be positive\"</span>)  </div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"2-7-Evaluation-and-Operators\"><a href=\"#2-7-Evaluation-and-Operators\" class=\"headerlink\" title=\"2.7 Evaluation and Operators\"></a>2.7 Evaluation and Operators</h2><p>클래스와 메소드의 evalutaion 과정</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">class C(x1, <span class=\"params\">...</span>, xm) &#123;<span class=\"params\">...</span> def f(y1, <span class=\"params\">...</span>, yn) = b <span class=\"params\">...</span>&#125;</div><div class=\"line\"><span class=\"literal\">new</span> C(v1, <span class=\"params\">...</span>, vm).f(w1, <span class=\"params\">...</span>, wn)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// substitution</span></div><div class=\"line\"><span class=\"meta\">[</span>w1/y1, <span class=\"params\">...</span> wn/yn<span class=\"meta\">]</span><span class=\"meta\">[</span>v1/x1, <span class=\"params\">...</span>, vm/xm<span class=\"meta\">]</span><span class=\"meta\">[</span><span class=\"literal\">new</span> C(v1, <span class=\"params\">...</span>, vm)/this<span class=\"meta\">]</span>b</div></pre></td></tr></table></figure><p>과정을 간단히 요약하면</p><ol><li>f 메서드의 formal parameters(y1, …, yn)이 arguments(w1, …, wn)으로 치환</li><li>클래스의 formal parameters(x1, …, xm)이 arguments(v1, …, vm)으로 치환</li><li>self reference this가 new C(v1, …, vm)으로 치환</li></ol><p>만약 f 함수 내부에서 this 가 사용된다고 가정한다면, 이 this는 이미 new C(v1, …, vm)으로 치환된 value 이므로, 해당 object 자체를 참조하는 값이 된다.</p><h3 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h3><p>일반적인 언어에서는 r.add(s)와 같은 함수가 호출될때 자연수인 경우에는 r + s와 같이 바꿔 쓸 수 있지만, 유리수의 경우에는 불가하다.<br>하지만 스칼라에서는 오퍼레이터 기호를 함수 이름으로 사용가능하다.</p><ul><li>step 1 : r.add(s) ==&gt; r add s</li><li>step 2 : def + (that: Rational) = { … }</li></ul><p>하지만 위와 같이 함수 이름을 오퍼레이터로 사용하게 되면, 우선순위 문제가 발생할 수 있다.<br>그래서 스칼라에서는 precedence rules을 별도로 만들어 두었다.<br>우선순위는 아래가 제일 높고 위로 갈수록 낮아진다.</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(all letters)</div><div class=\"line\">|</div><div class=\"line\">^</div><div class=\"line\">&amp;</div><div class=\"line\">&lt; &gt;</div><div class=\"line\"><span class=\"section\">= !</span></div><div class=\"line\">:</div><div class=\"line\">+ -</div><div class=\"line\"><span class=\"bullet\">* </span>/ %</div><div class=\"line\">(all other special characters)</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"2-1-Higher-Order-Functions\"><a href=\"#2-1-Higher-Order-Functions\" class=\"headerlink\" title=\"2.1 Higher-Order Functions\"></a>2.1 Higher-Order Functions</h2><p>함수형 언어에서는 function이 first-class value이다. 이 말은 특정 함수가 다른 함수의 파라미터나 결과로써 return 될 수 있다는 것이다(higher order functions).</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = </div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">else</span> f(a) + sum(f, a+<span class=\"number\">1</span>, b) </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">def</span> sumInts(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>)       = sum(id, a, b)</div><div class=\"line\"><span class=\"keyword\">def</span> sumCubes(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>)      = sum(cube, a, b)</div><div class=\"line\"><span class=\"keyword\">def</span> sumFactorials(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>) = sum(fact, a, b)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">def</span> id(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x</div><div class=\"line\"><span class=\"keyword\">def</span> cube(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x * x * x</div><div class=\"line\"><span class=\"keyword\">def</span> fact(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> x * fact(x -<span class=\"number\">1</span>)</div></pre></td></tr></table></figure><p>sum() 함수의 첫번째 파라미터로 f라는 임의의 함수가 들어가 있다.<br>이는 Int 파라미터를 받아서 Int 타입을 리턴하는 함수라면 이 파라미터 위치에 적합하다라는 뜻이다. 즉, 어떠한 함수가 됐든간에 저 유형만 유지하면 된다. 재사용 가능하다는 말이다. 실제로 sumInts(), sumCubes(), sumFactorials() 함수는 모두 sum()함수를 호출한다. sum()함수의 첫번째 파라미터는 각각 id(), cube(), fact()함수를 호출하게 되는데 세 함수 모두 파라미터와 리턴 타입이 Int이므로 sum()함수의 파라미터로 적합하다.</p><h3 id=\"익명함수\"><a href=\"#익명함수\" class=\"headerlink\" title=\"익명함수\"></a>익명함수</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">x</span>: Int, y<span class=\"symbol\">:Int</span>) =&gt; x + y</div></pre></td></tr></table></figure><p>익명함수는 보통 함수를 선언하는 방식과는 달리 이름이 없다.<br>대신 파라미터 타입과 body만 존재한다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x * x * x, a, b)</div></pre></td></tr></table></figure><p>위에서 보았던 sumCubes의 익명함수 버전이다.<br>cube() 함수가 재사용되지 않는다고 가정한다면 매우 심플하기 때문에 따로 함수를 선언하기 보다는 sum() 파라미터에 익명함수로 직접 선언할수 있다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// linear recursion, a와 b의 차이가 커지면 stackOverFlow 익셉션이 발생할 수 있다.</span></div><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = </div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">else</span> f(a) + sum(f, a+<span class=\"number\">1</span>, b) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// tail-recursive version</span></div><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> loop(a: <span class=\"keyword\">Int</span>, acc: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) acc</div><div class=\"line\">    <span class=\"keyword\">else</span> loop(a+<span class=\"number\">1</span>, f(a)+acc)</div><div class=\"line\">  &#125;</div><div class=\"line\">  loop(a, <span class=\"number\">0</span>)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"2-2-Currying\"><a href=\"#2-2-Currying\" class=\"headerlink\" title=\"2.2 Currying\"></a>2.2 Currying</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumInts(<span class=\"name\">a</span>: Int, b: Int)       = sum(<span class=\"name\">x</span> =&gt; x, a, b)</div><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int)      = sum(<span class=\"name\">x</span> =&gt; x*x*x, a, b)</div><div class=\"line\">def sumFactorials(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">fact</span>, a, b)</div></pre></td></tr></table></figure><p>위의 함수들에서 a, b 파라미터는 sumInts(), sum()에서 반복된다. 이를 제거하여 함수를 더 간소하게 만드는 방법은 무엇일까?<br>우선 아래의 함수를 살펴보자.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> sum(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>): (<span class=\"keyword\">Int</span>, <span class=\"keyword\">Int</span>) =&gt; <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> sumF(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">else</span> f(a) + sumF(a+<span class=\"number\">1</span>, b)</div><div class=\"line\">  &#125;</div><div class=\"line\">  sumF</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기존에 봤던 sum() 함수와 조금 다르게 생겼다. 우선 sum() 함수의 파라미터가 f() 하나로 줄었고, sum() 함수는 (Int, Int) =&gt; Int 와 같은 타입의 익명함수를 리턴하고 있다.<br>sumF를 호출하는 부분이 조금 이해하기 어려운데, 위의 내부함수 sumF()를 자세히 보면 익명함수를 설명했을 때의 형태와 같다는 것을 알 수 있다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(x: <span class=\"keyword\">Int</span>, y: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> =&gt; x * y</div><div class=\"line\"><span class=\"comment\">// 이 익명함수는 아래와 같이 표현가능하다.</span></div><div class=\"line\"><span class=\"keyword\">def</span> f(x: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = x * y; f</div></pre></td></tr></table></figure><p>위에서 썼던 sumInts(), sumCubes(), sumFactorials() 함수들을 가져오자. 조금 다르다. sum() 함수의 파라미터가 f 하나로 줄면서 아래의 각 함수들도 sum() 호출부의 인자가 익명함수 하나만 남았다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sumInts(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x)</div><div class=\"line\">def sumCubes(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">x</span> =&gt; x*x*x)</div><div class=\"line\">def sumFactorials(<span class=\"name\">a</span>: Int, b: Int) = sum(<span class=\"name\">fact</span>)</div></pre></td></tr></table></figure><p>이제 sum() 함수는 함수를 리턴하고 있으므로, sumCubes(1, 10)를 호출하면</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">sumCubes</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span></span></div><div class=\"line\"><span class=\"comment\">// res0: (Int, Int) =&gt; Int = &lt;function2&gt;</span></div></pre></td></tr></table></figure><p>이는 또한 이렇게 바꿔 쓸수 있다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum (<span class=\"name\">cube</span>) (<span class=\"number\">1</span>, <span class=\"number\">10</span>) // multiple parameters</div><div class=\"line\">(<span class=\"name\">sum</span> (<span class=\"name\">cube</span>)) (<span class=\"number\">1</span>, <span class=\"number\">10</span>)</div></pre></td></tr></table></figure><p>위의 multiple parameters를 적용하면 sum() 함수를 더 짧게 작성할 수 있다.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">sum</span>(f: <span class=\"built_in\">Int</span> =&gt; <span class=\"built_in\">Int</span>)(a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span>): <span class=\"built_in\">Int</span> =</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">0</span> <span class=\"keyword\">else</span> f(a) + <span class=\"built_in\">sum</span>(f)(a+<span class=\"number\">1</span>, b)</div></pre></td></tr></table></figure><p>여러개의 파라미터 list를 가진 함수 f에서 파라미터list의 개수가 1보다 큰 경우 마지막 파라미터 list를 f 함수에서 제거하면 이 마지막 파라미터 list를 파라미터로 가지는 또다른 함수 g를 만들 수 있다. 물론 이 g 함수는 f 함수의 리턴함수가 된다. 식으로 나타내면 다음과 같다. 참고로 각각의 식은 모두 동일하다</p><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3)(arg4) = E</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3) = &#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span></span>(arg4) = E;g&#125; <span class=\"comment\">// arg4를 이용해 g함수 생성</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(arg1)(arg2)(arg3) = (arg4 =&gt; E) <span class=\"comment\">// g를 익명함수로 변경</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> </span>= (arg1 =&gt; (arg2 =&gt; (arg3 =&gt; (arg4 =&gt; E)))) <span class=\"comment\">// 파라미터를 하나씩 우측으로 전달함</span></div></pre></td></tr></table></figure><p>이와같은 형태의 함수정의를 curring 이라 부른다.</p><h3 id=\"Excercise\"><a href=\"#Excercise\" class=\"headerlink\" title=\"Excercise\"></a>Excercise</h3><p><em>Write a product function that calculates the product of the values of a function for the points on a given interval</em></p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">product</span>(f: <span class=\"built_in\">Int</span> =&gt; <span class=\"built_in\">Int</span>)(a: <span class=\"built_in\">Int</span>, b: <span class=\"built_in\">Int</span>): <span class=\"built_in\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) <span class=\"number\">1</span> <span class=\"keyword\">else</span> f(a) * <span class=\"built_in\">product</span> (f)(a+<span class=\"number\">1</span>, b)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">product</span>(x =&gt; x*x)(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div></pre></td></tr></table></figure><p><em>Write factorial in terms of product.</em></p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">fact</span>(<span class=\"symbol\">n:</span> <span class=\"built_in\">Int</span>)<span class=\"symbol\">:</span> <span class=\"built_in\">Int</span> = <span class=\"built_in\">product</span>(x =&gt; x)(<span class=\"number\">1</span>, <span class=\"built_in\">n</span>)</div><div class=\"line\"><span class=\"built_in\">fact</span>(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure><p><em>Can you write a more general funciton, which generalizes both sum and product?</em></p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def mapReduce(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>, combine: (<span class=\"keyword\">Int</span>, <span class=\"keyword\">Int</span>) =&gt; <span class=\"keyword\">Int</span>, zero: <span class=\"keyword\">Int</span>)(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) zero</div><div class=\"line\">  <span class=\"keyword\">else</span> combine(f(a), mapReduce(f, combine, zero)(a+<span class=\"number\">1</span>, b))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def productForMapReduce(f: <span class=\"keyword\">Int</span> =&gt; <span class=\"keyword\">Int</span>)(a: <span class=\"keyword\">Int</span>, b: <span class=\"keyword\">Int</span>): <span class=\"keyword\">Int</span> = mapReduce(f, (x, y) =&gt; x*y, <span class=\"number\">1</span>)(a, b)</div><div class=\"line\">productForMapReduce(x =&gt; x*x)(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</div></pre></td></tr></table></figure><h2 id=\"2-3-Example-Finding-Fixed-Point\"><a href=\"#2-3-Example-Finding-Fixed-Point\" class=\"headerlink\" title=\"2.3 Example: Finding Fixed Point\"></a>2.3 Example: Finding Fixed Point</h2><p>부동점 구하기, Fixed Point라 함은 어떤 함수에서 고정적인 값을 갖는 point를 말한다. 다음의 함수에서 2는 부동점(고정점)이다.<br>기하학적으로(?) 함수 f의 부동점은 y = x 와 주어진 함수와의 교점이다. 즉, x와 f(x) 값이 동일한 값을 뜻한다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = x^<span class=\"number\">2</span> <span class=\"number\">-3</span>x + <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">// 2 = 4 - 6 + 4</span></div><div class=\"line\"><span class=\"comment\">// 2 = 2, 부동점</span></div></pre></td></tr></table></figure><p>어떤 함수에 대해서 부동점을 구하는 함수 fixedPoint는 아래와 같다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">object ex &#123;</div><div class=\"line\">  val tolerance = <span class=\"number\">0</span>.<span class=\"number\">0001</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isCloseEnough</span><span class=\"params\">(<span class=\"symbol\">x:</span> Double, <span class=\"symbol\">y:</span> Double)</span></span> =</div><div class=\"line\">    abs((x - y) / x) / x &lt; tolerance</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedPoint</span><span class=\"params\">(<span class=\"symbol\">f:</span> Double =&gt; Double)</span></span>(<span class=\"symbol\">firstGuess:</span> Double) = &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iterate</span><span class=\"params\">(<span class=\"symbol\">guess:</span> Double)</span></span>: Double = &#123;</div><div class=\"line\">      println(<span class=\"string\">\"guess = \"</span> + guess)</div><div class=\"line\">      val <span class=\"keyword\">next</span> = f(guess)</div><div class=\"line\">      <span class=\"keyword\">if</span> (isCloseEnough(guess, <span class=\"keyword\">next</span>)) <span class=\"keyword\">next</span></div><div class=\"line\">      <span class=\"keyword\">else</span> iterate(<span class=\"keyword\">next</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    iterate(firstGuess)</div><div class=\"line\">  &#125;</div><div class=\"line\">  fixedPoint(x =&gt; <span class=\"number\">1</span> + x/<span class=\"number\">2</span>)(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sqrt</span><span class=\"params\">(<span class=\"symbol\">x:</span> Double)</span></span> = fixedPoint(y =&gt; x / y)(<span class=\"number\">1</span>)</div><div class=\"line\">  sqrt(<span class=\"number\">2</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>fixedPoint를 응용해보면, 첫번째 인자인 f 함수에 어떤 수식을 넣어 반복적으로 적용하면서 고정값을 찾아 가는 과정에 맞게 넣을 수 있겠다.<br>마지막에 있는 것은 sqrt를 구하는 함수는 바로 위에서 말한 반복을 통한 고정값 추론에 적합하다.<br>sqrt y를 구하려면 y * y = x가 되기 때문에 함수 y = x / y를 fixedPoint 함수에 반복적으로 적용하다보면 고정값 sqrt의 근사치를 구할 수 있다.<br>하지만, 실제로 위와같이 y =&gt; x / y를 fixedPoint의 함수 인자로 넣게 되면, 원하는 값을 얻지 못한다.<br>왜냐하면, guess 값이 너무 심하게 변하기 때문에 발생하는 문제다. fixedPoint 의 내부함수 iterate는 guess와 next가 교차하는 구조인데, 처음 sqrt(2)에서 2는 x이다.<br>그리고 y는 firstGuess 인 1이되는데, 이 두 값이 f(x) = x / y에 대입되면, f(x)는 2가 된다. 다시 y가 2가 되고 x가 2이므로 iterate 함수를 한번 돌면 y는 1이된다.<br>즉, 1,2,1,2 반복하기 때문에 무한루프에 빠지게 된다.<br>이를 해결하기 위해서는 연속하는 두개의 값 즉 1과 2의 평균값(1.5)를 구함으로써 해결할 수 있다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">y =&gt; x / y</div><div class=\"line\"><span class=\"comment\">// 아래와 같이 바꿔 쓴다.</span></div><div class=\"line\">y =&gt; (y + x<span class=\"regexp\">/y) /</span> <span class=\"number\">2</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 코드에 적용해보면</span></div><div class=\"line\"><span class=\"keyword\">def</span> sqrt(<span class=\"string\">x:</span> Double) = fixedPoint(y =&gt; (y + x <span class=\"regexp\">/ y) /</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure><p>위와 같이 평균을 내어서 안정화 시키는 기법을 AverageDamp라고 한다.</p><h2 id=\"2-4-Scala-Syntax-Summary\"><a href=\"#2-4-Scala-Syntax-Summary\" class=\"headerlink\" title=\"2.4 Scala Syntax Summary\"></a>2.4 Scala Syntax Summary</h2><p>강의 참고</p><h2 id=\"2-5-Functions-and-Data\"><a href=\"#2-5-Functions-and-Data\" class=\"headerlink\" title=\"2.5 Functions and Data\"></a>2.5 Functions and Data</h2><p>유리수의 여러가지 연산을 바탕으로 함수를 만드는 방법과 데이터를 캡슐화하기 위해 클래스를 사용하는 방법을 알아 본다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// class</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(that: <span class=\"type\">Rational</span>) =</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(</div><div class=\"line\">      numer * that.denom + that.numer * denom,</div><div class=\"line\">      denom * that.denom)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">x.numer  <span class=\"comment\">// 1</span></div><div class=\"line\">y.denom  <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure><p>위에서 Rational 클래스를 정의하였다. 클래스를 정의하면 두가지 요소가 정의되는데, 첫번째는 Rational이라는 type이 만들어진다는 것이고, 두번째는 x와 y를 인자로 가지는 Rational이라는 생성자가 만들어진다는 것이다.<br>object를 만드는 법은 Java의 object 만드는 법과 동일하게 new 키워드를 사용해서 만들 수 있다.</p><h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><p>스칼라에서 함수(funciton)과 메소드(method)는 다른 의미로 사용되는데, 일반적으로 함수는 독립적인 객체로서 클래스처럼 인스턴스화 가능한 형태로 동작하는 반면, 메소드는 클래스내에 속하는 멤버로써 클래스 내의 데이터를 연산하는 역할을 한다. 실제 컴파일 해보면 차이를 알 수 있는데, 함수같은 경우에는 클래스로 변경되어 있지만(내부 함수인 경우에는 내부 클래스로 컴파일), 메소드는 컴파일 내에 멤버로만 존재하기 때문에 별도의 class로 컴파일 되지 않는다.</p><h3 id=\"Exerxise\"><a href=\"#Exerxise\" class=\"headerlink\" title=\"Exerxise\"></a>Exerxise</h3><ol><li><p>In your worksheet, add a method neg to class Rational that is used like this: x.neg</p></li><li><p>Add a method sub to subtract two rational numbers.</p></li><li><p>With the values of x, y, z as given in the previous slide, what is the result of x - y - z</p></li></ol><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(that: <span class=\"type\">Rational</span>) =</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(</div><div class=\"line\">      numer * that.denom + denom * that.numer,</div><div class=\"line\">      denom * that.denom)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">neg</span></span>: <span class=\"type\">Rational</span> = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(numer * <span class=\"number\">-1</span>, denom)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span></span>(that: <span class=\"type\">Rational</span>): <span class=\"type\">Rational</span> = add(that.neg)</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= numer + <span class=\"string\">\"/\"</span> + denom</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">5</span>, <span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> z = <span class=\"keyword\">new</span> <span class=\"type\">Rational</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">x.sub(y).sub(z) <span class=\"comment\">// res0: Rational = -79/42</span></div></pre></td></tr></table></figure><h2 id=\"2-6-More-Fun-With-Rationals\"><a href=\"#2-6-More-Fun-With-Rationals\" class=\"headerlink\" title=\"2.6 More Fun With Rationals\"></a>2.6 More Fun With Rationals</h2><p>2.5에서 구현한 Rational 클래스는 분모와 분자를 나누어진 형태로 출력하지 않는 문제가 있다. 그래서 이전에 사용했었던 최대 공약수를 구하는 함수인 gcd를 메서드 형태로 Rational 클래스에 추가해준다.<br>그리고 클래스의 인수인 x와 y에 두 변수의 gcd 값을 나누어준다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span></span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>): <span class=\"type\">Int</span> = <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) a <span class=\"keyword\">else</span> gcd(b, a % b)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// ex 1) g를 재사용하는 방법</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> g = gcd(x, y)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x / g </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y / g</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ex 2) numer와 denom이 자주 호출되지 않을때는 gcd를 직접 넣어줌</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numer</span> </span>= x / gcd(x, y)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">denom</span> </span>= y / gcd(x, y)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ex3) 이 두 변수는 한번만 연산하도록 하기 위해 메서드를 value로 변경, numer와 denom이 자주 call 되는 경우에 적합 </span></div><div class=\"line\">  <span class=\"keyword\">val</span> numer = x / gcd(x, y)</div><div class=\"line\">  <span class=\"keyword\">val</span> denom = y / gcd(x, y)</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this 키워드는 java와 동일하게 사용된다. this는 현재 메소드가 실행되고있는 object를 말한다. second 생성자를 만들때에도</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">this</span>(x: <span class=\"built_in\">Int</span>) = <span class=\"keyword\">this</span>(x, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure><p>과 같이 사용한다.</p><h3 id=\"require-키워드\"><a href=\"#require-키워드\" class=\"headerlink\" title=\"require 키워드\"></a>require 키워드</h3><p>require 키워드를 사용하면 클래스의 인자값 등에 대한 제약을 만들 수 있다. 아래의 클래스가 있는 상태에서 만약에 new Rational(1, 0)과 같은 instance를 생성하게 되면 예외가 발생하게 된다. require와 같이 객체가 생성될때 강제로 호출하는 역할을 하는 함수를 predefined funciton 이라고 한다.</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rational</span></span>(x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">  require(y != <span class=\"number\">0</span>, <span class=\"string\">\" denominator must be positive\"</span>)  </div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"2-7-Evaluation-and-Operators\"><a href=\"#2-7-Evaluation-and-Operators\" class=\"headerlink\" title=\"2.7 Evaluation and Operators\"></a>2.7 Evaluation and Operators</h2><p>클래스와 메소드의 evalutaion 과정</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">class C(x1, <span class=\"params\">...</span>, xm) &#123;<span class=\"params\">...</span> def f(y1, <span class=\"params\">...</span>, yn) = b <span class=\"params\">...</span>&#125;</div><div class=\"line\"><span class=\"literal\">new</span> C(v1, <span class=\"params\">...</span>, vm).f(w1, <span class=\"params\">...</span>, wn)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// substitution</span></div><div class=\"line\"><span class=\"meta\">[</span>w1/y1, <span class=\"params\">...</span> wn/yn<span class=\"meta\">]</span><span class=\"meta\">[</span>v1/x1, <span class=\"params\">...</span>, vm/xm<span class=\"meta\">]</span><span class=\"meta\">[</span><span class=\"literal\">new</span> C(v1, <span class=\"params\">...</span>, vm)/this<span class=\"meta\">]</span>b</div></pre></td></tr></table></figure><p>과정을 간단히 요약하면</p><ol><li>f 메서드의 formal parameters(y1, …, yn)이 arguments(w1, …, wn)으로 치환</li><li>클래스의 formal parameters(x1, …, xm)이 arguments(v1, …, vm)으로 치환</li><li>self reference this가 new C(v1, …, vm)으로 치환</li></ol><p>만약 f 함수 내부에서 this 가 사용된다고 가정한다면, 이 this는 이미 new C(v1, …, vm)으로 치환된 value 이므로, 해당 object 자체를 참조하는 값이 된다.</p><h3 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h3><p>일반적인 언어에서는 r.add(s)와 같은 함수가 호출될때 자연수인 경우에는 r + s와 같이 바꿔 쓸 수 있지만, 유리수의 경우에는 불가하다.<br>하지만 스칼라에서는 오퍼레이터 기호를 함수 이름으로 사용가능하다.</p><ul><li>step 1 : r.add(s) ==&gt; r add s</li><li>step 2 : def + (that: Rational) = { … }</li></ul><p>하지만 위와 같이 함수 이름을 오퍼레이터로 사용하게 되면, 우선순위 문제가 발생할 수 있다.<br>그래서 스칼라에서는 precedence rules을 별도로 만들어 두었다.<br>우선순위는 아래가 제일 높고 위로 갈수록 낮아진다.</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(all letters)</div><div class=\"line\">|</div><div class=\"line\">^</div><div class=\"line\">&amp;</div><div class=\"line\">&lt; &gt;</div><div class=\"line\"><span class=\"section\">= !</span></div><div class=\"line\">:</div><div class=\"line\">+ -</div><div class=\"line\"><span class=\"bullet\">* </span>/ %</div><div class=\"line\">(all other special characters)</div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 4","date":"2016-07-26T14:27:50.000Z","_content":"## 4.1 Objects Everywhere\n\n> 퓨어 object-oriented 언어란 모든 value가 object라는 말인데, 그렇다면 스칼라가 퓨어 object-oriented language인가?\n\n스칼라의 모든 값은 object로 표현되기 때문에 퓨어하다 할 수 있다. 예로 scala.Boolean 대신 커스텀으로 Boolean 클래스를 정의한다(자바의 래핑클래스(Integer 등)처럼)\n\nBoolean 클래스에서는 실제 스칼라 Boolean으로 사용할 수 있었던 연산을 모두 재정의해준다. \nifThenElse는 if(cond) f1 else f2과 같다(여기서 f1, f2는 ifThenElse의 파라미터)\n아래는 '<' 함수를 정의한 예제이다.\n\n```\nclaass Boolean {\n  ...\n  def < (x: Boolean): Boolean = ifThenElse(false, x)\n }\n```\n\n\n## 4.2 Functions as Objects\n스칼라에서는 function values는 오브젝트로 취급된다. 사실 function type A => B는 scala.Function1[A, B]의 축약 형태와 같다고 할수 있다.\n\n```\npackage scala\ntrait Function1[A, B] {\n  def aaply(x: A): B\n}\n```\n즉, 함수는 apply 메소드를 가진 오브젝트와 같다.\n익명함수의 경우에는 다음과 같이 확장될 수 있다.\n\n```\n(x: Int) => x * x\n\n// is expanded to\n{ class AnonFun extends Function1[Int, Int] {\n  def apply(x: Int) = x * x\n  }\n  new AnonFun\n}\n\n// shorter\nnew FUnctino1[Int, Int] {\n  def apply(x: Int) = x * x\n}\n```\n그러니까 실제로 f(a, b) 라는 함수를 call 했을 때, f.apply(a, b)가 불리는 것과 같다는 말이다.\n예를 들면,\n\n```\nval f = (x: Int) => x * x\nf(7)\n\nval f = new Function[Int. Int] {\n  def apply(x: Int) = x * x\n}\nf.apply(7)\n```\n위에서 본것처럼 apply 메소드는 오브젝트 안에 있을 때 오브젝트 이름 그대로 호출할 수 있다. 지난번에 봤던 List를 예로 들어보면 아래와 같다.\n\n```\ntrait List[T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nclass Nil[T] extends List[T] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n\n// List()\nobject List {\n  def apply[T]: List[T] = new Nil\n  def apply[T](x: T): List[T] = new Cons(x, new Nil)\n  def apply[T](x1: T, x2: T): List[T] = new Cons(x1, new Cons(x2, new Nil))\n  \n  // objectd 이름 그대로 호출 가능, 파라미터가 맞는 apply 메소드를 알아서 찾아감\n  val a = List()\n  val b = List(1)\n  val c = List(2, 3)\n} \n```\n\n## 4.3 Subtyping and Generics\n\n스칼라 언어에서 다형성을 표현하는 두가지 방법은 subtyping과 generic 이다.\n\n### Type Bounds\n> takes an IntSet\n> returns the IntSet itself if all this elements are positive\n> throws an exception otherwise\n\n위의 세가지 조건을 충족시킬 수 있는 함수를 생각해보자.\n\n```\ndef assertAllPos(s: IntSet): IntSet\n```\n대부분의 경우는 위의 함수로 충분하지만 정확히 하자면 다음과 같이 쓸수 있다.\n\n```\ndef assertAllPos[S <: IntSet](r: S): S = ...\n```\n\"S <: IntSet\"을 type parameter S의 upper bound라고 한다. 이것은 S가 반드시 IntSet의 subType(또는 자신)이어야 한다는 말과 같다. \n반대로 \"S :> T\"는 S가 T의 superType이거나 T가 S의 subType이라는 말이다. 이를 lower Bounds 라고 한다.\n\n```\n[S >: NonEmpty]\n```\n위에서 말했듯이 위의 의미는 S가 NonEmpty 클래스의 supertype인데, S는 NonEmpty의 모든 base 클래스(자신 포함)가 해당된다. 여기서 S는 NonEmpty, IntSet, AnyRef, Any가 될 수 있다.\n\n마지막은 Mixed Bound\n\n```\n[S >: NonEmpty <: IntSet]\n```\n이것의 의미는 S가 NonEmtpy와 IntSet 타입 사이의 모든 타입이 될 수 있다는 말과 같다.\n\n### Covariance\n서브클래스의 인스턴스 컬렉션을 상위클래스의 컬렉션으로 보내는 것을 Covariance(공변성)라고 한다. 왜냐하면 subtyping 관계가 컬렉션에서도 그대로 적용되었기 때문이다.\n\n```\nNonEmpty <: IntSet\n// 위가 성립된다면 아래도 성립\nList[NonEmpty] <: List[IntSet]\n```\n\n### Arrays in Scala\n\n```\nT[]     // Java\nArray[T]  // Scala\n\n// Covariance에 의해 아래가 성립\nNonEmpty[] <: IntSet[]        // Java\nArray[NonEmpty] <: Array[IntSet]  // Scala\n```\n\n자바의 Array Typing에는 타입과 관련된 아래의 문제가 있다.\n\n```\nNonEmpty[] a = new NonEmpty[]{new NonEmpty(1, Empty, Empty)}\nIntSet[] b = a\nb[0] = Empty\nNonEmpty s = a[0]\n```\n\na는 NonEmpty 타입의 Array를 가리키는 포인터이다. 두번째 줄에서 IntSet Array b 에 a를 대입하였다. b가 실제로 카리키는 대상은 NonEmpty List지만, covariance 규칙에 의해 상위 타입의 컬렉션이 하위 타입의 컬렉션을 대신할 수 있다. 세번째 줄에서 b의 첫번째 item에 Empty 클래스를 대입하였다. 마지막으로 a의 첫번째 item을 NonEmpty 타입의 s에 대입하였다. b와 a 는 실제로 가리키는 대상이 같기 때문에 세번째 줄에서 b[0]에 들어간 Empty는 a[0]에서도 동일하게 작동한다. 그런데 마지막 줄에서 Empty 타입의 item 을 NonEmpty 타입에 할당하기 때문에 런타임 에러가 발생한다.\n\n### Liskov Substitution Principle\n> If A <: B, then everything one can to do with a value of type B one should also be able to do with a value of type A\n리스코프 치환원칙은 타입 A와 B가 있을때 하나의 타입이 다른 하나의 서브타입이 될 수 있는 조건에 대해 말해준다.\n\n```\n// in scala\nval a: Array[NonEmpty] = Array(new NonEmpty(1, Empty, Empty))\nval b: Array[IntSet] = a\nb(0) = Empty\nval s: NonEmpty = a(0)\n```\n\n스칼라의 경우에는 두번째 줄에서 컴파일 에러가 난다. 그 이유는 스칼라의 Array는 covariant하지 않기 때문이다. (NonEmpty )\n\n```\nNonEmpty <: IntSet\nnot Array[NonEmpty] <: Array[IntSet]\n```\n\n## 4.4 Variance\n\n스칼라에서 List는 covariant, Array는 성립하지 않는다. 그 이유는 list의 경우에는 immutable한 컬렉션이고, Array는 mutable 하기 때문이다. 보통 mutation을 허용하는 타입은 covariant하지 않다.\n\nC[T]에서 A <: B인 경우 다음이 성립한다.\nB가 A의 수퍼타입이면서 C[B]가 C[A]의 수퍼타입인 경우에는 covariant, C[A]가 C[B]의 수퍼타입이면 contravariant\n\n* C[A] <: C[B] 이면 C는 covariant (class C[+A])\n* C[A] >: C[B] 이면 C는 contravariant (class C[-A])\n* C[A]와 C[B] 둘다 다른것의 서브타입이 아니면 C는 nonvariant (class C[A])\n\n다음의 두 타입중 어떤 타입이 수퍼타입이고, 어떤 타입이 서브타입인가?\n함수의 파라미터가 더 구체적인(서브타입) 타입이 들어 갔을때는 반드시 그 타입으로 인자가 넘어와야한다. type B를 보면 파라미터 타입이 IntSet의 서브타입인 NonEmpty이므로 인자가 반드시 NonEmpty 타입이어야 한다. 반면에 type A를 보면, 파라미터 타입이 IntSet이라 NonEmpty 포함 IntSet의 모든 서브타입이 들어 올 수 있다. 리턴타입은 NonEmpty이므로 IntSet이라 할 수 있다. 즉, A는 B의 규칙을 만족시킨다. 게다가 A는 파라미터에 추가로 Empty 같은 타입이 들어 올 수 있으므로, A가 B보다 더 확장된 형태이다. \n그러므로, B가 A의 수퍼타입이다. 함수의 파라미터는 contravariant하고 함수의 리턴값은 covariant 하기 때문에 A <: B가 참이다.\n\n```\ntype A = IntSet => NonEmpty\ntype B = NonEmpty => IntSet\n```\n\n위의 내용을 요약하면 아래와 같다. \n\n```\nIf A2 <: A1 and B1 <: B2, then\n  A1 => B1  <:  A2 => B2\n```\n\n> Functions are contravariant in their argument type(s) and covariant in their result type.\n\n### Variance Checks\n위에서 Array는 mutable한 속성 때문에 covariant하지 못하다는 문제를 살펴봤었다. mutable한 속성이라는 것은 update 가능하다는 말과 같은데, Array 클래스에서 update 함수의 파라미터의 타입이 어떤 문제를 가지고 있는지 살펴보자. 앞서서 covariant 타입은 함수의 result 타입에만 나타날 수 있다고 말했다.\n\n```\nclass Array[+T] {\n  def update(x: T) ...\n}\n```\n\n그런데 위의 Array 클래스의 update 함수를 보면, covariant 타입 T가 파라미터에 쓰여졌기 때문에 Array는 covariant 하지 못\n한 컨테이너라 할 수 있겠다.\n\n그래서 앞서서 보았던(4.2) Function1은 사실 아래와 같은 형태이다.\n\n```\npackage scala\ntrait Function1[-T, +U] {\n  def apply(x: T): U\n} \n```\n\n그렇다면 List의 경우는 어떨까?\nNil, Cons 클래스의 경우로 살펴보자.\n\n```\npackage week4\n\ntrait List[+T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nobject Nil extends List[Nothing] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n\n// val x의 return 타입이 List[Nothing]을 상속받는 Nil object 이므로,\n// covariant 규칙에 의해 List[String]으로 리턴 타입을 지정할 수 있다.\n// List[Nothing] <: List[String]\nobject test {\n  val x: List[String] = Nil\n}\n```\n\nNil이 List[Nothing]을 상속하게 만들면 모든 리스트의 서브타입이 된다. 그리고 trait List[T]를 trait List[+T]로 바꿔서 covariant하게 만들어 준다. val x: List[String] = Nil을 입력하게 되면, Nil이 List[Nothing]을 상속받으므로 covariant하게 바뀐 List 속성에 의해서 Nothing 보다 상위 클래스인 String 타입으로 리턴 할 수 있게 되었다.\n\nList 클래스에 다음과 같은 prepend 메서드를 추가해보자.\n\n```\ndef prepend(elem: T): List[T] = new Cons(eleml, this)\n```\n\n컴파일 에러가 난다. 그 이유는 타입 T가 covariant하기 때문에 파라미터에 사용하면 안된다. prepend 메서드가 새로운 리스트를 생성함해도 불구하고 문제가 생기는 이유는 prepend 메서드에 elem의 타입이 T이기 때문이다. 타입 T가 covariant하다면 반드시 result type에만 사용해야 한다.\n\n\n### Prepend Violates LSP\nprepend 메서드가 왜 Liskov Substitution Principle을 위반했는지 알아보자\nxs의 타입이 List[IntSet]인 경우에는 문제가 없다.\n\n```\nxs.prepend(Empty)\n```\n\n하지만 ys의 타입이 List[NonEmpty]라고 했을 때는 문제가 있다.\n\n```\nys.prepend(Empty)\n```\n\nNonEmpty 타입이 들어와야 할 자리에 Empty 타입이 들어왔으므로 타입에러가 발생한다. 그래서 이 경우에는 List[NonEmpty]는 List[IntSet]의 서브타입이 될 수 없다.\n\n하지만 prepend 메서드는 immutable list에 실제로 존재한다. 어떻게 이게 가능할까? 답은 lower bound에 있다. U >: T는 U가 T의 부모 타입이라는 말이다. 이렇게 되면, elem이 T보다 상위 타입이 오더라도 문제가 되지 않는다.\n\n```\ndef prepend[U >: T](elem: U): List[U] = new Cons(elem, list)\n```\n\n\n## 4.5 Decomposition\n\n다음과 같은 class 구조가 있다고 하자\n\n```\ntrait Expr {\n  // classification\n  def isNumber: Boolean\n  def isSum: Boolean\n  // accessor\n  def numValue: Int\n  def leftOp: Expr\n  def rightOp: Expr\n}\n\nclass Number(n: Int) extends Expr {\n  def isNumber: Boolean = true\n  def isSum: Boolean = false\n  def numValue: Int = n\n  def leftOp: Expr = throw new Error(\"Number.leftOp\")\n  def rightOp: Expr = throw new Error(\"Number.rightOp\")\n}\n\nclass Sum(e1: Expr, e2: Expr) extends Expr {\n  def isNumber: Boolean = false\n  def isSum: Boolean = true\n  def numValue: Int = throw new Error(\"Sum.numValue\")\n  def rightOp: Expr = e1\n  def leftOp: Expr = e2\n}\n```\n\n무척 쓸모 없어 보이는 메서드들이 여럿 보인다. 일단은 더 나은 코드를 설명하기 위한 단계이므로 참고 살펴보자.\n그리고 위의 클래스 구조를 evaluation하는 간단한 인터프리터 함수인 eval이 다음과 같다\n\n```\ndef eval(e: Expr): Int = {\n  if (e.isNumber) e.numValue\n  else if (e.isSum) eval(e.leftOp) + eval(e.rightOp)\n  else throw new Error(\"Unknown expression \" + e)\n}\n```\n이때 다음과 같은 코드가 있다면, 우선 eval 함수가 실행되면서 e가 어떤 타입인지 찾기 위해 classification method인 isSum으로 Sum 타입인지 찾을 것이다. 그리고 그 안의 두 인자가 각각 Number 이므로 또다시 eval 함수 내에서 isNumber에 의해 Number 타입인지 찾을 수 있을 것이다. 뭔가 비효율적으로 보인다.\n\n```\neval(Sum(Number(1), Number(2))) = 3\n```\n\n여기서 만약에 아래와 같은 두개의 클래스가 추가 된다면 어떨까?\n\n```\nclass Prod(e1: Expr, e2: Expr) extends Expr   // e1 * e2\nclass Var(x: String) extends Expr         // Variable 'x'\n```\n\n위의 두 클래스는 Number나 Sum과 마찬가지로 Expr을 상속받으므로 trait Expr의 메서드를 모두 구현해야한다. 그리고 isNum, isSum 과 같은 클래스 타입을 찾기 위한 메서드를 2개(isVar, isProd)더 추가해야 할 것이다. 또 var 값을 가져오기 위한 name 메서드도 추가되서 총 3개가 추가된다. 위의 구조에서만 15개의 메서드가 있는데, 단 2개의 클래스만 추가하더라도 더 필요한 메서드가 25개(Expr에 3개, Number에 3개, Sum에 3개, 그리고 새로운 클래스에 각각 8개)나 된다. 이건좀 아닌거 같다.\n\n메서드를 좀 줄여보자\n자바에서 사용하는 type test, type cast 메서드를 이용한다.\n\n```\nScala           Java\nx.isInstanceOf[T]     x instanceof T    // type test\nx.asInstanceOf[T]     (T) x       // type cast\n```\n\n평가함수인 eval을 조금 고쳐보자.\n\n```\ndef eval(e: Expr): Int = {\n  if (e.isInstanceOf[Number])\n    e.asInstanceOf[Number].numValue\n  else if (e.isInstanceOf[Sum])\n    eval(e.asInstanceOf[Sum].leftOp) + eval(e.asInstanceOf[Sum].rightOp)\n  else throw new Error(\"Unknown expression \" + e)\n}\n```\n\n자바에서 사용하는 타입 test 함수인 instanceof와 타입 캐스팅 하는 방법을 적용하였다. 스칼라에서는 각각의 방법을 함수로 만들어 두었다. 이 방법을 사용하면 위에서 보았던 classification 메서드(isNum, inSum)를 사용할 필요가 없다. 대신에 타입 체크 및 캐스팅 함수가 low-level 함수이기 때문에 불안정한다는 단점이 있다. \n\nObject-Oriented Decomposition을 이용한 또다른 해법을 살펴보자\n\n```\ntrait Expr {\n  def eval: Int\n}\n\nclass Number(n: Int) extends Expr {\n  def eval: Int = n\n}\n\nclass Sum(e1: Expr, e2: Expr) extends Expr {\n  def eval: Int = e1.eval + e2.eval\n}\n```\n\n각각의 클래스에 eval 함수를 구현하였다. 각 클래스에 맞게 구현되기 때문에 accessor 함수들도 불필요하다. 이제 많이 깔끔해졌다. 하지만 문제는 여전히 있다. rait에 하나의 메서드가 추가된다면, 나머지 클래스에 모두 구현해야한다는 점이다. 또다른 문제가 있다.\n\n```\na * b + a * c = a * (b + 3)\n```\n\n위와 같이 축약하기 어렵다. 왜냐하면 이것은 non-local simplification이기 때문이다. 이것은 single object의 메서드로 캡슐화 할 수 없다. sub-tree를 모두 테스트하고 접근해야하는 문제가 있다. \n\n\n## 4.6 Pattern Matching\n이전챕터에서 Decomposition을 시도한 몇가지 방법은 아래와 같다.\n\n* Classification and access methods: quadratic explosion\n* Type tests and casts: unsafe, low-level\n* Object-oriented decomposition: does not always work, need to touch all classes to add a new method.\n\nclassification과 accessor 의 주 목적은 아래와 같다.\n* Which subclass was used?\n* What were the arguments of the constructor?\n\n보통 사용되는 new Sum(e1, e2)와 같은 형태의 생성자를 스칼라는 case class라는 문법을 통해서 자동으로 Pattern Matching 시켜준다. \n\n```\n// 두개의 case class\ntrait Expr\ncase class Number(n: Int) extends Expr\ncase class Sum(e1: \nExpr, e2: Expr) extends Expr\n\n// 실제 apply 메서드의 형태\n// Number(1), Sum(2, 3)과 같이 호출될꺼다\nobject Number {\n  def apply(n: Int) = new Number(n)\n}\nobject Sum {\n  def apply(e1: Expr, e2: Expr) = new Sum(e1, e2)\n} \n\n// eval 함수를 이용해서 패턴매칭, \n// 파라미터 e가 Number냐 Sum이냐에 따라서 자동으로 선택되어 처리\ndef eval(e: Expr): Int = e match {\n  case Number(n) => n\n  case Sum(e1, e2) => eval(e1) + eval(e2)\n}\n```\n\n### Match Syntax rules\n* match is followed by a sequence of cases, pat => expr.\n* Each case associates an expression expr with a pattern pat.\n* A matchError exception is thrown if no pattern matches the value of the selector.\n\n패턴은 Number, Sum과 같은 contructor로 만들어지며, 인자(variables)는 반드시 소문자로 시작해야한다. 그리고 한 pattern 안에 같은 파라미터 문자를 쓰면 안된다. 상수는 null, true, false를 제외하고는 반드시 대문자로 시작해야한다. 마지막으로 wildcard pattern인 '_'은 해당 파라미터를 신경쓰지 않겠다는 것이다. 대체로 해당 case에서 사용되지 않는 파라미터에 '_'를 사용한다.\n\neval 함수를 trait Expr에 넣어보자.\n\n```\ntrait Expr {\n  def eval: Int = this match {\n    case Number(n) => n\n    case Sum(e1, e2) => e1.eval + e2.eval\n  }\n}\n```\n\n\n\n\n\n## 4.7 Lists\n\n가장 기본적인 리스트 형태는 아래와 같이 정의할 수 있다.\n\n```\n// List(X1, ..., Xn)\nval fruit: List[String] = List(\"Apples\", \"oranges\", \"pears\")\nval nums: List[Int] = List(1, 2, 3, 4)\nval diag3: List[List[Int]] = List(List(1, 0, 0), List(0, 1, 0), List(0, 0, 1))\nval empty: List[Nothing] = List()\n```\n\n스칼라에서 List와 Array는 중요한 두가지 차이가 있다.\n* List are immutable - the elements of a list cannot be changed\n* Lists are recursive, while arrays are flat\n\n또한 스칼라에서는 construction operation인 ::(cons라 부름, 지난주의 prepend 함수랑 동일하다)를 이용하여 좀더 간단하게 리스트를 만들 수 있다. cons는 right-associative 연산이기 때문에 우측에서부터 왼쪽으로 하나씩 붙여 나간다는 생각으로 사용하면 된다. 위의 리스트 들을 cons를 이용해서 작성해보면 다음과 같다.\n\n```\nfruit = \"apples\" :: (\"oranges\" :: (\"pears\" :: Nil))\nfruit = \"apples\" :: \"oranges\" :: \"pears\" :: Nil\n\nnums = 1 :: (2 :: (3 :: (4 :: Nil)))\nnums = 1 :: 2 :: 3 :: 4 :: Nil\n\nempty = Nil\n```\n\nright-associative 연산이기 때문에 실제 컴파일러는 위의 연산(nums)을 다음과 같이 해석한다.\n\n```\nnums = 1 :: 2 :: 3 :: 4 :: Nil\nNils.::(4).::(3).::(2).::(1)\n```\n\n### sorting Lists\n\n재귀를 이용한 Insertion Sort\n\n```\ndef isort(xs: List[Int]): List[Int] = {\n  xs match {\n    case Nil => List()\n    case y :: ys => insert(y, isort(ys))\n  }\n}\n\ndef insert(x: Int, xs: List[Int]): List[Int] = {\n  xs match {\n    case Nil => List(x)\n    case y :: ys => {\n      if (x < y)  x :: xs\n      else y :: insert(x, ys)\n    }\n  }\n}\n```\n","source":"_posts/2016-07-26-functional-programming-in-scala-week4.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 4\"\ncategories: programming\ndate:   2016-07-26 23:27:50 +0900\ntags:\n- scala\n- coursera\n---\n## 4.1 Objects Everywhere\n\n> 퓨어 object-oriented 언어란 모든 value가 object라는 말인데, 그렇다면 스칼라가 퓨어 object-oriented language인가?\n\n스칼라의 모든 값은 object로 표현되기 때문에 퓨어하다 할 수 있다. 예로 scala.Boolean 대신 커스텀으로 Boolean 클래스를 정의한다(자바의 래핑클래스(Integer 등)처럼)\n\nBoolean 클래스에서는 실제 스칼라 Boolean으로 사용할 수 있었던 연산을 모두 재정의해준다. \nifThenElse는 if(cond) f1 else f2과 같다(여기서 f1, f2는 ifThenElse의 파라미터)\n아래는 '<' 함수를 정의한 예제이다.\n\n```\nclaass Boolean {\n  ...\n  def < (x: Boolean): Boolean = ifThenElse(false, x)\n }\n```\n\n\n## 4.2 Functions as Objects\n스칼라에서는 function values는 오브젝트로 취급된다. 사실 function type A => B는 scala.Function1[A, B]의 축약 형태와 같다고 할수 있다.\n\n```\npackage scala\ntrait Function1[A, B] {\n  def aaply(x: A): B\n}\n```\n즉, 함수는 apply 메소드를 가진 오브젝트와 같다.\n익명함수의 경우에는 다음과 같이 확장될 수 있다.\n\n```\n(x: Int) => x * x\n\n// is expanded to\n{ class AnonFun extends Function1[Int, Int] {\n  def apply(x: Int) = x * x\n  }\n  new AnonFun\n}\n\n// shorter\nnew FUnctino1[Int, Int] {\n  def apply(x: Int) = x * x\n}\n```\n그러니까 실제로 f(a, b) 라는 함수를 call 했을 때, f.apply(a, b)가 불리는 것과 같다는 말이다.\n예를 들면,\n\n```\nval f = (x: Int) => x * x\nf(7)\n\nval f = new Function[Int. Int] {\n  def apply(x: Int) = x * x\n}\nf.apply(7)\n```\n위에서 본것처럼 apply 메소드는 오브젝트 안에 있을 때 오브젝트 이름 그대로 호출할 수 있다. 지난번에 봤던 List를 예로 들어보면 아래와 같다.\n\n```\ntrait List[T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nclass Nil[T] extends List[T] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n\n// List()\nobject List {\n  def apply[T]: List[T] = new Nil\n  def apply[T](x: T): List[T] = new Cons(x, new Nil)\n  def apply[T](x1: T, x2: T): List[T] = new Cons(x1, new Cons(x2, new Nil))\n  \n  // objectd 이름 그대로 호출 가능, 파라미터가 맞는 apply 메소드를 알아서 찾아감\n  val a = List()\n  val b = List(1)\n  val c = List(2, 3)\n} \n```\n\n## 4.3 Subtyping and Generics\n\n스칼라 언어에서 다형성을 표현하는 두가지 방법은 subtyping과 generic 이다.\n\n### Type Bounds\n> takes an IntSet\n> returns the IntSet itself if all this elements are positive\n> throws an exception otherwise\n\n위의 세가지 조건을 충족시킬 수 있는 함수를 생각해보자.\n\n```\ndef assertAllPos(s: IntSet): IntSet\n```\n대부분의 경우는 위의 함수로 충분하지만 정확히 하자면 다음과 같이 쓸수 있다.\n\n```\ndef assertAllPos[S <: IntSet](r: S): S = ...\n```\n\"S <: IntSet\"을 type parameter S의 upper bound라고 한다. 이것은 S가 반드시 IntSet의 subType(또는 자신)이어야 한다는 말과 같다. \n반대로 \"S :> T\"는 S가 T의 superType이거나 T가 S의 subType이라는 말이다. 이를 lower Bounds 라고 한다.\n\n```\n[S >: NonEmpty]\n```\n위에서 말했듯이 위의 의미는 S가 NonEmpty 클래스의 supertype인데, S는 NonEmpty의 모든 base 클래스(자신 포함)가 해당된다. 여기서 S는 NonEmpty, IntSet, AnyRef, Any가 될 수 있다.\n\n마지막은 Mixed Bound\n\n```\n[S >: NonEmpty <: IntSet]\n```\n이것의 의미는 S가 NonEmtpy와 IntSet 타입 사이의 모든 타입이 될 수 있다는 말과 같다.\n\n### Covariance\n서브클래스의 인스턴스 컬렉션을 상위클래스의 컬렉션으로 보내는 것을 Covariance(공변성)라고 한다. 왜냐하면 subtyping 관계가 컬렉션에서도 그대로 적용되었기 때문이다.\n\n```\nNonEmpty <: IntSet\n// 위가 성립된다면 아래도 성립\nList[NonEmpty] <: List[IntSet]\n```\n\n### Arrays in Scala\n\n```\nT[]     // Java\nArray[T]  // Scala\n\n// Covariance에 의해 아래가 성립\nNonEmpty[] <: IntSet[]        // Java\nArray[NonEmpty] <: Array[IntSet]  // Scala\n```\n\n자바의 Array Typing에는 타입과 관련된 아래의 문제가 있다.\n\n```\nNonEmpty[] a = new NonEmpty[]{new NonEmpty(1, Empty, Empty)}\nIntSet[] b = a\nb[0] = Empty\nNonEmpty s = a[0]\n```\n\na는 NonEmpty 타입의 Array를 가리키는 포인터이다. 두번째 줄에서 IntSet Array b 에 a를 대입하였다. b가 실제로 카리키는 대상은 NonEmpty List지만, covariance 규칙에 의해 상위 타입의 컬렉션이 하위 타입의 컬렉션을 대신할 수 있다. 세번째 줄에서 b의 첫번째 item에 Empty 클래스를 대입하였다. 마지막으로 a의 첫번째 item을 NonEmpty 타입의 s에 대입하였다. b와 a 는 실제로 가리키는 대상이 같기 때문에 세번째 줄에서 b[0]에 들어간 Empty는 a[0]에서도 동일하게 작동한다. 그런데 마지막 줄에서 Empty 타입의 item 을 NonEmpty 타입에 할당하기 때문에 런타임 에러가 발생한다.\n\n### Liskov Substitution Principle\n> If A <: B, then everything one can to do with a value of type B one should also be able to do with a value of type A\n리스코프 치환원칙은 타입 A와 B가 있을때 하나의 타입이 다른 하나의 서브타입이 될 수 있는 조건에 대해 말해준다.\n\n```\n// in scala\nval a: Array[NonEmpty] = Array(new NonEmpty(1, Empty, Empty))\nval b: Array[IntSet] = a\nb(0) = Empty\nval s: NonEmpty = a(0)\n```\n\n스칼라의 경우에는 두번째 줄에서 컴파일 에러가 난다. 그 이유는 스칼라의 Array는 covariant하지 않기 때문이다. (NonEmpty )\n\n```\nNonEmpty <: IntSet\nnot Array[NonEmpty] <: Array[IntSet]\n```\n\n## 4.4 Variance\n\n스칼라에서 List는 covariant, Array는 성립하지 않는다. 그 이유는 list의 경우에는 immutable한 컬렉션이고, Array는 mutable 하기 때문이다. 보통 mutation을 허용하는 타입은 covariant하지 않다.\n\nC[T]에서 A <: B인 경우 다음이 성립한다.\nB가 A의 수퍼타입이면서 C[B]가 C[A]의 수퍼타입인 경우에는 covariant, C[A]가 C[B]의 수퍼타입이면 contravariant\n\n* C[A] <: C[B] 이면 C는 covariant (class C[+A])\n* C[A] >: C[B] 이면 C는 contravariant (class C[-A])\n* C[A]와 C[B] 둘다 다른것의 서브타입이 아니면 C는 nonvariant (class C[A])\n\n다음의 두 타입중 어떤 타입이 수퍼타입이고, 어떤 타입이 서브타입인가?\n함수의 파라미터가 더 구체적인(서브타입) 타입이 들어 갔을때는 반드시 그 타입으로 인자가 넘어와야한다. type B를 보면 파라미터 타입이 IntSet의 서브타입인 NonEmpty이므로 인자가 반드시 NonEmpty 타입이어야 한다. 반면에 type A를 보면, 파라미터 타입이 IntSet이라 NonEmpty 포함 IntSet의 모든 서브타입이 들어 올 수 있다. 리턴타입은 NonEmpty이므로 IntSet이라 할 수 있다. 즉, A는 B의 규칙을 만족시킨다. 게다가 A는 파라미터에 추가로 Empty 같은 타입이 들어 올 수 있으므로, A가 B보다 더 확장된 형태이다. \n그러므로, B가 A의 수퍼타입이다. 함수의 파라미터는 contravariant하고 함수의 리턴값은 covariant 하기 때문에 A <: B가 참이다.\n\n```\ntype A = IntSet => NonEmpty\ntype B = NonEmpty => IntSet\n```\n\n위의 내용을 요약하면 아래와 같다. \n\n```\nIf A2 <: A1 and B1 <: B2, then\n  A1 => B1  <:  A2 => B2\n```\n\n> Functions are contravariant in their argument type(s) and covariant in their result type.\n\n### Variance Checks\n위에서 Array는 mutable한 속성 때문에 covariant하지 못하다는 문제를 살펴봤었다. mutable한 속성이라는 것은 update 가능하다는 말과 같은데, Array 클래스에서 update 함수의 파라미터의 타입이 어떤 문제를 가지고 있는지 살펴보자. 앞서서 covariant 타입은 함수의 result 타입에만 나타날 수 있다고 말했다.\n\n```\nclass Array[+T] {\n  def update(x: T) ...\n}\n```\n\n그런데 위의 Array 클래스의 update 함수를 보면, covariant 타입 T가 파라미터에 쓰여졌기 때문에 Array는 covariant 하지 못\n한 컨테이너라 할 수 있겠다.\n\n그래서 앞서서 보았던(4.2) Function1은 사실 아래와 같은 형태이다.\n\n```\npackage scala\ntrait Function1[-T, +U] {\n  def apply(x: T): U\n} \n```\n\n그렇다면 List의 경우는 어떨까?\nNil, Cons 클래스의 경우로 살펴보자.\n\n```\npackage week4\n\ntrait List[+T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nobject Nil extends List[Nothing] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n\n// val x의 return 타입이 List[Nothing]을 상속받는 Nil object 이므로,\n// covariant 규칙에 의해 List[String]으로 리턴 타입을 지정할 수 있다.\n// List[Nothing] <: List[String]\nobject test {\n  val x: List[String] = Nil\n}\n```\n\nNil이 List[Nothing]을 상속하게 만들면 모든 리스트의 서브타입이 된다. 그리고 trait List[T]를 trait List[+T]로 바꿔서 covariant하게 만들어 준다. val x: List[String] = Nil을 입력하게 되면, Nil이 List[Nothing]을 상속받으므로 covariant하게 바뀐 List 속성에 의해서 Nothing 보다 상위 클래스인 String 타입으로 리턴 할 수 있게 되었다.\n\nList 클래스에 다음과 같은 prepend 메서드를 추가해보자.\n\n```\ndef prepend(elem: T): List[T] = new Cons(eleml, this)\n```\n\n컴파일 에러가 난다. 그 이유는 타입 T가 covariant하기 때문에 파라미터에 사용하면 안된다. prepend 메서드가 새로운 리스트를 생성함해도 불구하고 문제가 생기는 이유는 prepend 메서드에 elem의 타입이 T이기 때문이다. 타입 T가 covariant하다면 반드시 result type에만 사용해야 한다.\n\n\n### Prepend Violates LSP\nprepend 메서드가 왜 Liskov Substitution Principle을 위반했는지 알아보자\nxs의 타입이 List[IntSet]인 경우에는 문제가 없다.\n\n```\nxs.prepend(Empty)\n```\n\n하지만 ys의 타입이 List[NonEmpty]라고 했을 때는 문제가 있다.\n\n```\nys.prepend(Empty)\n```\n\nNonEmpty 타입이 들어와야 할 자리에 Empty 타입이 들어왔으므로 타입에러가 발생한다. 그래서 이 경우에는 List[NonEmpty]는 List[IntSet]의 서브타입이 될 수 없다.\n\n하지만 prepend 메서드는 immutable list에 실제로 존재한다. 어떻게 이게 가능할까? 답은 lower bound에 있다. U >: T는 U가 T의 부모 타입이라는 말이다. 이렇게 되면, elem이 T보다 상위 타입이 오더라도 문제가 되지 않는다.\n\n```\ndef prepend[U >: T](elem: U): List[U] = new Cons(elem, list)\n```\n\n\n## 4.5 Decomposition\n\n다음과 같은 class 구조가 있다고 하자\n\n```\ntrait Expr {\n  // classification\n  def isNumber: Boolean\n  def isSum: Boolean\n  // accessor\n  def numValue: Int\n  def leftOp: Expr\n  def rightOp: Expr\n}\n\nclass Number(n: Int) extends Expr {\n  def isNumber: Boolean = true\n  def isSum: Boolean = false\n  def numValue: Int = n\n  def leftOp: Expr = throw new Error(\"Number.leftOp\")\n  def rightOp: Expr = throw new Error(\"Number.rightOp\")\n}\n\nclass Sum(e1: Expr, e2: Expr) extends Expr {\n  def isNumber: Boolean = false\n  def isSum: Boolean = true\n  def numValue: Int = throw new Error(\"Sum.numValue\")\n  def rightOp: Expr = e1\n  def leftOp: Expr = e2\n}\n```\n\n무척 쓸모 없어 보이는 메서드들이 여럿 보인다. 일단은 더 나은 코드를 설명하기 위한 단계이므로 참고 살펴보자.\n그리고 위의 클래스 구조를 evaluation하는 간단한 인터프리터 함수인 eval이 다음과 같다\n\n```\ndef eval(e: Expr): Int = {\n  if (e.isNumber) e.numValue\n  else if (e.isSum) eval(e.leftOp) + eval(e.rightOp)\n  else throw new Error(\"Unknown expression \" + e)\n}\n```\n이때 다음과 같은 코드가 있다면, 우선 eval 함수가 실행되면서 e가 어떤 타입인지 찾기 위해 classification method인 isSum으로 Sum 타입인지 찾을 것이다. 그리고 그 안의 두 인자가 각각 Number 이므로 또다시 eval 함수 내에서 isNumber에 의해 Number 타입인지 찾을 수 있을 것이다. 뭔가 비효율적으로 보인다.\n\n```\neval(Sum(Number(1), Number(2))) = 3\n```\n\n여기서 만약에 아래와 같은 두개의 클래스가 추가 된다면 어떨까?\n\n```\nclass Prod(e1: Expr, e2: Expr) extends Expr   // e1 * e2\nclass Var(x: String) extends Expr         // Variable 'x'\n```\n\n위의 두 클래스는 Number나 Sum과 마찬가지로 Expr을 상속받으므로 trait Expr의 메서드를 모두 구현해야한다. 그리고 isNum, isSum 과 같은 클래스 타입을 찾기 위한 메서드를 2개(isVar, isProd)더 추가해야 할 것이다. 또 var 값을 가져오기 위한 name 메서드도 추가되서 총 3개가 추가된다. 위의 구조에서만 15개의 메서드가 있는데, 단 2개의 클래스만 추가하더라도 더 필요한 메서드가 25개(Expr에 3개, Number에 3개, Sum에 3개, 그리고 새로운 클래스에 각각 8개)나 된다. 이건좀 아닌거 같다.\n\n메서드를 좀 줄여보자\n자바에서 사용하는 type test, type cast 메서드를 이용한다.\n\n```\nScala           Java\nx.isInstanceOf[T]     x instanceof T    // type test\nx.asInstanceOf[T]     (T) x       // type cast\n```\n\n평가함수인 eval을 조금 고쳐보자.\n\n```\ndef eval(e: Expr): Int = {\n  if (e.isInstanceOf[Number])\n    e.asInstanceOf[Number].numValue\n  else if (e.isInstanceOf[Sum])\n    eval(e.asInstanceOf[Sum].leftOp) + eval(e.asInstanceOf[Sum].rightOp)\n  else throw new Error(\"Unknown expression \" + e)\n}\n```\n\n자바에서 사용하는 타입 test 함수인 instanceof와 타입 캐스팅 하는 방법을 적용하였다. 스칼라에서는 각각의 방법을 함수로 만들어 두었다. 이 방법을 사용하면 위에서 보았던 classification 메서드(isNum, inSum)를 사용할 필요가 없다. 대신에 타입 체크 및 캐스팅 함수가 low-level 함수이기 때문에 불안정한다는 단점이 있다. \n\nObject-Oriented Decomposition을 이용한 또다른 해법을 살펴보자\n\n```\ntrait Expr {\n  def eval: Int\n}\n\nclass Number(n: Int) extends Expr {\n  def eval: Int = n\n}\n\nclass Sum(e1: Expr, e2: Expr) extends Expr {\n  def eval: Int = e1.eval + e2.eval\n}\n```\n\n각각의 클래스에 eval 함수를 구현하였다. 각 클래스에 맞게 구현되기 때문에 accessor 함수들도 불필요하다. 이제 많이 깔끔해졌다. 하지만 문제는 여전히 있다. rait에 하나의 메서드가 추가된다면, 나머지 클래스에 모두 구현해야한다는 점이다. 또다른 문제가 있다.\n\n```\na * b + a * c = a * (b + 3)\n```\n\n위와 같이 축약하기 어렵다. 왜냐하면 이것은 non-local simplification이기 때문이다. 이것은 single object의 메서드로 캡슐화 할 수 없다. sub-tree를 모두 테스트하고 접근해야하는 문제가 있다. \n\n\n## 4.6 Pattern Matching\n이전챕터에서 Decomposition을 시도한 몇가지 방법은 아래와 같다.\n\n* Classification and access methods: quadratic explosion\n* Type tests and casts: unsafe, low-level\n* Object-oriented decomposition: does not always work, need to touch all classes to add a new method.\n\nclassification과 accessor 의 주 목적은 아래와 같다.\n* Which subclass was used?\n* What were the arguments of the constructor?\n\n보통 사용되는 new Sum(e1, e2)와 같은 형태의 생성자를 스칼라는 case class라는 문법을 통해서 자동으로 Pattern Matching 시켜준다. \n\n```\n// 두개의 case class\ntrait Expr\ncase class Number(n: Int) extends Expr\ncase class Sum(e1: \nExpr, e2: Expr) extends Expr\n\n// 실제 apply 메서드의 형태\n// Number(1), Sum(2, 3)과 같이 호출될꺼다\nobject Number {\n  def apply(n: Int) = new Number(n)\n}\nobject Sum {\n  def apply(e1: Expr, e2: Expr) = new Sum(e1, e2)\n} \n\n// eval 함수를 이용해서 패턴매칭, \n// 파라미터 e가 Number냐 Sum이냐에 따라서 자동으로 선택되어 처리\ndef eval(e: Expr): Int = e match {\n  case Number(n) => n\n  case Sum(e1, e2) => eval(e1) + eval(e2)\n}\n```\n\n### Match Syntax rules\n* match is followed by a sequence of cases, pat => expr.\n* Each case associates an expression expr with a pattern pat.\n* A matchError exception is thrown if no pattern matches the value of the selector.\n\n패턴은 Number, Sum과 같은 contructor로 만들어지며, 인자(variables)는 반드시 소문자로 시작해야한다. 그리고 한 pattern 안에 같은 파라미터 문자를 쓰면 안된다. 상수는 null, true, false를 제외하고는 반드시 대문자로 시작해야한다. 마지막으로 wildcard pattern인 '_'은 해당 파라미터를 신경쓰지 않겠다는 것이다. 대체로 해당 case에서 사용되지 않는 파라미터에 '_'를 사용한다.\n\neval 함수를 trait Expr에 넣어보자.\n\n```\ntrait Expr {\n  def eval: Int = this match {\n    case Number(n) => n\n    case Sum(e1, e2) => e1.eval + e2.eval\n  }\n}\n```\n\n\n\n\n\n## 4.7 Lists\n\n가장 기본적인 리스트 형태는 아래와 같이 정의할 수 있다.\n\n```\n// List(X1, ..., Xn)\nval fruit: List[String] = List(\"Apples\", \"oranges\", \"pears\")\nval nums: List[Int] = List(1, 2, 3, 4)\nval diag3: List[List[Int]] = List(List(1, 0, 0), List(0, 1, 0), List(0, 0, 1))\nval empty: List[Nothing] = List()\n```\n\n스칼라에서 List와 Array는 중요한 두가지 차이가 있다.\n* List are immutable - the elements of a list cannot be changed\n* Lists are recursive, while arrays are flat\n\n또한 스칼라에서는 construction operation인 ::(cons라 부름, 지난주의 prepend 함수랑 동일하다)를 이용하여 좀더 간단하게 리스트를 만들 수 있다. cons는 right-associative 연산이기 때문에 우측에서부터 왼쪽으로 하나씩 붙여 나간다는 생각으로 사용하면 된다. 위의 리스트 들을 cons를 이용해서 작성해보면 다음과 같다.\n\n```\nfruit = \"apples\" :: (\"oranges\" :: (\"pears\" :: Nil))\nfruit = \"apples\" :: \"oranges\" :: \"pears\" :: Nil\n\nnums = 1 :: (2 :: (3 :: (4 :: Nil)))\nnums = 1 :: 2 :: 3 :: 4 :: Nil\n\nempty = Nil\n```\n\nright-associative 연산이기 때문에 실제 컴파일러는 위의 연산(nums)을 다음과 같이 해석한다.\n\n```\nnums = 1 :: 2 :: 3 :: 4 :: Nil\nNils.::(4).::(3).::(2).::(1)\n```\n\n### sorting Lists\n\n재귀를 이용한 Insertion Sort\n\n```\ndef isort(xs: List[Int]): List[Int] = {\n  xs match {\n    case Nil => List()\n    case y :: ys => insert(y, isort(ys))\n  }\n}\n\ndef insert(x: Int, xs: List[Int]): List[Int] = {\n  xs match {\n    case Nil => List(x)\n    case y :: ys => {\n      if (x < y)  x :: xs\n      else y :: insert(x, ys)\n    }\n  }\n}\n```\n","slug":"2016-07-26-functional-programming-in-scala-week4","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv78001mwxt458ofss9n","content":"<h2 id=\"4-1-Objects-Everywhere\"><a href=\"#4-1-Objects-Everywhere\" class=\"headerlink\" title=\"4.1 Objects Everywhere\"></a>4.1 Objects Everywhere</h2><blockquote><p>퓨어 object-oriented 언어란 모든 value가 object라는 말인데, 그렇다면 스칼라가 퓨어 object-oriented language인가?</p></blockquote><p>스칼라의 모든 값은 object로 표현되기 때문에 퓨어하다 할 수 있다. 예로 scala.Boolean 대신 커스텀으로 Boolean 클래스를 정의한다(자바의 래핑클래스(Integer 등)처럼)</p><p>Boolean 클래스에서는 실제 스칼라 Boolean으로 사용할 수 있었던 연산을 모두 재정의해준다.<br>ifThenElse는 if(cond) f1 else f2과 같다(여기서 f1, f2는 ifThenElse의 파라미터)<br>아래는 ‘&lt;’ 함수를 정의한 예제이다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">claass <span class=\"keyword\">Boolean</span> &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">def</span> &lt; (x: <span class=\"keyword\">Boolean</span>): <span class=\"keyword\">Boolean</span> = ifThenElse(<span class=\"keyword\">false</span>, x)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><h2 id=\"4-2-Functions-as-Objects\"><a href=\"#4-2-Functions-as-Objects\" class=\"headerlink\" title=\"4.2 Functions as Objects\"></a>4.2 Functions as Objects</h2><p>스칼라에서는 function values는 오브젝트로 취급된다. 사실 function type A =&gt; B는 scala.Function1[A, B]의 축약 형태와 같다고 할수 있다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> scala</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Function1</span>[<span class=\"title\">A</span>, <span class=\"title\">B</span>] &#123;</span></div><div class=\"line\">  <span class=\"keyword\">def</span> aaply(<span class=\"string\">x:</span> A): B</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>즉, 함수는 apply 메소드를 가진 오브젝트와 같다.<br>익명함수의 경우에는 다음과 같이 확장될 수 있다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(x: <span class=\"type\">Int</span>) =&gt; x * x</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is expanded to</span></div><div class=\"line\">&#123; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonFun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Function1</span>[<span class=\"type\">Int</span>, <span class=\"type\">Int</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x: <span class=\"type\">Int</span>) = x * x</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">AnonFun</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// shorter</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"type\">FUnctino1</span>[<span class=\"type\">Int</span>, <span class=\"type\">Int</span>] &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x: <span class=\"type\">Int</span>) = x * x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그러니까 실제로 f(a, b) 라는 함수를 call 했을 때, f.apply(a, b)가 불리는 것과 같다는 말이다.<br>예를 들면,</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">val f = (x: <span class=\"built_in\">Int</span>) =&gt; x * x</div><div class=\"line\">f(<span class=\"number\">7</span>)</div><div class=\"line\"></div><div class=\"line\">val f = new <span class=\"function\"><span class=\"keyword\">Function</span></span>[<span class=\"built_in\">Int</span>. <span class=\"built_in\">Int</span>] &#123;</div><div class=\"line\">  def apply(x: <span class=\"built_in\">Int</span>) = x * x</div><div class=\"line\">&#125;</div><div class=\"line\">f.apply(<span class=\"number\">7</span>)</div></pre></td></tr></table></figure><p>위에서 본것처럼 apply 메소드는 오브젝트 안에 있을 때 오브젝트 이름 그대로 호출할 수 있다. 지난번에 봤던 List를 예로 들어보면 아래와 같다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nil</span>[<span class=\"type\">T</span>] <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// List()</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">List</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>]: <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Nil</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](x: <span class=\"type\">T</span>): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x, <span class=\"keyword\">new</span> <span class=\"type\">Nil</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](x1: <span class=\"type\">T</span>, x2: <span class=\"type\">T</span>): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x1, <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x2, <span class=\"keyword\">new</span> <span class=\"type\">Nil</span>))</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// objectd 이름 그대로 호출 가능, 파라미터가 맞는 apply 메소드를 알아서 찾아감</span></div><div class=\"line\">  <span class=\"keyword\">val</span> a = <span class=\"type\">List</span>()</div><div class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"type\">List</span>(<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">val</span> c = <span class=\"type\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"4-3-Subtyping-and-Generics\"><a href=\"#4-3-Subtyping-and-Generics\" class=\"headerlink\" title=\"4.3 Subtyping and Generics\"></a>4.3 Subtyping and Generics</h2><p>스칼라 언어에서 다형성을 표현하는 두가지 방법은 subtyping과 generic 이다.</p><h3 id=\"Type-Bounds\"><a href=\"#Type-Bounds\" class=\"headerlink\" title=\"Type Bounds\"></a>Type Bounds</h3><blockquote><p>takes an IntSet<br>returns the IntSet itself if all this elements are positive<br>throws an exception otherwise</p></blockquote><p>위의 세가지 조건을 충족시킬 수 있는 함수를 생각해보자.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">assertAllPos</span><span class=\"params\">(<span class=\"symbol\">s:</span> IntSet)</span></span>: IntSet</div></pre></td></tr></table></figure><p>대부분의 경우는 위의 함수로 충분하지만 정확히 하자면 다음과 같이 쓸수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def assertAllPos[<span class=\"string\">S &lt;: IntSet</span>](<span class=\"link\">r: S</span>): S = ...</div></pre></td></tr></table></figure><p>“S &lt;: IntSet”을 type parameter S의 upper bound라고 한다. 이것은 S가 반드시 IntSet의 subType(또는 자신)이어야 한다는 말과 같다.<br>반대로 “S :&gt; T”는 S가 T의 superType이거나 T가 S의 subType이라는 말이다. 이를 lower Bounds 라고 한다.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[S &gt;: NonEmpty]</div></pre></td></tr></table></figure><p>위에서 말했듯이 위의 의미는 S가 NonEmpty 클래스의 supertype인데, S는 NonEmpty의 모든 base 클래스(자신 포함)가 해당된다. 여기서 S는 NonEmpty, IntSet, AnyRef, Any가 될 수 있다.</p><p>마지막은 Mixed Bound</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[S &gt;: NonEmpty &lt;: IntSet]</div></pre></td></tr></table></figure><p>이것의 의미는 S가 NonEmtpy와 IntSet 타입 사이의 모든 타입이 될 수 있다는 말과 같다.</p><h3 id=\"Covariance\"><a href=\"#Covariance\" class=\"headerlink\" title=\"Covariance\"></a>Covariance</h3><p>서브클래스의 인스턴스 컬렉션을 상위클래스의 컬렉션으로 보내는 것을 Covariance(공변성)라고 한다. 왜냐하면 subtyping 관계가 컬렉션에서도 그대로 적용되었기 때문이다.</p><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty <span class=\"type\">&lt;:</span> <span class=\"built_in\">IntSet</span></div><div class=\"line\">// 위가 성립된다면 아래도 성립</div><div class=\"line\">List[NonEmpty] <span class=\"type\">&lt;:</span> List[<span class=\"built_in\">IntSet</span>]</div></pre></td></tr></table></figure><h3 id=\"Arrays-in-Scala\"><a href=\"#Arrays-in-Scala\" class=\"headerlink\" title=\"Arrays in Scala\"></a>Arrays in Scala</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">T[]     <span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"keyword\">Array</span>[T]  <span class=\"comment\">// Scala</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Covariance에 의해 아래가 성립</span></div><div class=\"line\">NonEmpty[] &lt;: IntSet[]        <span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"keyword\">Array</span>[NonEmpty] &lt;: <span class=\"keyword\">Array</span>[IntSet]  <span class=\"comment\">// Scala</span></div></pre></td></tr></table></figure><p>자바의 Array Typing에는 타입과 관련된 아래의 문제가 있다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty[] <span class=\"selector-tag\">a</span> = new NonEmpty[]&#123;new NonEmpty(<span class=\"number\">1</span>, Empty, Empty)&#125;</div><div class=\"line\">IntSet[] <span class=\"selector-tag\">b</span> = <span class=\"selector-tag\">a</span></div><div class=\"line\"><span class=\"selector-tag\">b</span>[<span class=\"number\">0</span>] = Empty</div><div class=\"line\">NonEmpty s = <span class=\"selector-tag\">a</span>[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure><p>a는 NonEmpty 타입의 Array를 가리키는 포인터이다. 두번째 줄에서 IntSet Array b 에 a를 대입하였다. b가 실제로 카리키는 대상은 NonEmpty List지만, covariance 규칙에 의해 상위 타입의 컬렉션이 하위 타입의 컬렉션을 대신할 수 있다. 세번째 줄에서 b의 첫번째 item에 Empty 클래스를 대입하였다. 마지막으로 a의 첫번째 item을 NonEmpty 타입의 s에 대입하였다. b와 a 는 실제로 가리키는 대상이 같기 때문에 세번째 줄에서 b[0]에 들어간 Empty는 a[0]에서도 동일하게 작동한다. 그런데 마지막 줄에서 Empty 타입의 item 을 NonEmpty 타입에 할당하기 때문에 런타임 에러가 발생한다.</p><h3 id=\"Liskov-Substitution-Principle\"><a href=\"#Liskov-Substitution-Principle\" class=\"headerlink\" title=\"Liskov Substitution Principle\"></a>Liskov Substitution Principle</h3><blockquote><p>If A &lt;: B, then everything one can to do with a value of type B one should also be able to do with a value of type A<br>리스코프 치환원칙은 타입 A와 B가 있을때 하나의 타입이 다른 하나의 서브타입이 될 수 있는 조건에 대해 말해준다.</p></blockquote><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in scala</span></div><div class=\"line\">val <span class=\"selector-tag\">a</span>: Array[NonEmpty] = Array(new NonEmpty(<span class=\"number\">1</span>, Empty, Empty))</div><div class=\"line\">val <span class=\"selector-tag\">b</span>: Array[IntSet] = <span class=\"selector-tag\">a</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span> = Empty</div><div class=\"line\">val s: NonEmpty = a(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>스칼라의 경우에는 두번째 줄에서 컴파일 에러가 난다. 그 이유는 스칼라의 Array는 covariant하지 않기 때문이다. (NonEmpty )</p><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty <span class=\"type\">&lt;:</span> <span class=\"built_in\">IntSet</span></div><div class=\"line\">not <span class=\"built_in\">Array</span>[NonEmpty] <span class=\"type\">&lt;:</span> <span class=\"built_in\">Array</span>[<span class=\"built_in\">IntSet</span>]</div></pre></td></tr></table></figure><h2 id=\"4-4-Variance\"><a href=\"#4-4-Variance\" class=\"headerlink\" title=\"4.4 Variance\"></a>4.4 Variance</h2><p>스칼라에서 List는 covariant, Array는 성립하지 않는다. 그 이유는 list의 경우에는 immutable한 컬렉션이고, Array는 mutable 하기 때문이다. 보통 mutation을 허용하는 타입은 covariant하지 않다.</p><p>C[T]에서 A &lt;: B인 경우 다음이 성립한다.<br>B가 A의 수퍼타입이면서 C[B]가 C[A]의 수퍼타입인 경우에는 covariant, C[A]가 C[B]의 수퍼타입이면 contravariant</p><ul><li>C[A] &lt;: C[B] 이면 C는 covariant (class C[+A])</li><li>C[A] &gt;: C[B] 이면 C는 contravariant (class C[-A])</li><li>C[A]와 C[B] 둘다 다른것의 서브타입이 아니면 C는 nonvariant (class C[A])</li></ul><p>다음의 두 타입중 어떤 타입이 수퍼타입이고, 어떤 타입이 서브타입인가?<br>함수의 파라미터가 더 구체적인(서브타입) 타입이 들어 갔을때는 반드시 그 타입으로 인자가 넘어와야한다. type B를 보면 파라미터 타입이 IntSet의 서브타입인 NonEmpty이므로 인자가 반드시 NonEmpty 타입이어야 한다. 반면에 type A를 보면, 파라미터 타입이 IntSet이라 NonEmpty 포함 IntSet의 모든 서브타입이 들어 올 수 있다. 리턴타입은 NonEmpty이므로 IntSet이라 할 수 있다. 즉, A는 B의 규칙을 만족시킨다. 게다가 A는 파라미터에 추가로 Empty 같은 타입이 들어 올 수 있으므로, A가 B보다 더 확장된 형태이다.<br>그러므로, B가 A의 수퍼타입이다. 함수의 파라미터는 contravariant하고 함수의 리턴값은 covariant 하기 때문에 A &lt;: B가 참이다.</p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">A </span>= IntSet =&gt; NonEmpty</div><div class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">B </span>= NonEmpty =&gt; IntSet</div></pre></td></tr></table></figure><p>위의 내용을 요약하면 아래와 같다.</p><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">If</span> <span class=\"built_in\">A2</span> &lt;: <span class=\"built_in\">A1</span> <span class=\"keyword\">and </span><span class=\"keyword\">B1 </span>&lt;: <span class=\"keyword\">B2, </span>then</div><div class=\"line\">  <span class=\"built_in\">A1</span> =&gt; <span class=\"keyword\">B1 </span> &lt;:  <span class=\"built_in\">A2</span> =&gt; <span class=\"keyword\">B2</span></div></pre></td></tr></table></figure><blockquote><p>Functions are contravariant in their argument type(s) and covariant in their result type.</p></blockquote><h3 id=\"Variance-Checks\"><a href=\"#Variance-Checks\" class=\"headerlink\" title=\"Variance Checks\"></a>Variance Checks</h3><p>위에서 Array는 mutable한 속성 때문에 covariant하지 못하다는 문제를 살펴봤었다. mutable한 속성이라는 것은 update 가능하다는 말과 같은데, Array 클래스에서 update 함수의 파라미터의 타입이 어떤 문제를 가지고 있는지 살펴보자. 앞서서 covariant 타입은 함수의 result 타입에만 나타날 수 있다고 말했다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>[+<span class=\"title\">T</span>] &#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"symbol\">x:</span> T)</span></span> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그런데 위의 Array 클래스의 update 함수를 보면, covariant 타입 T가 파라미터에 쓰여졌기 때문에 Array는 covariant 하지 못<br>한 컨테이너라 할 수 있겠다.</p><p>그래서 앞서서 보았던(4.2) Function1은 사실 아래와 같은 형태이다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> scala</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Function1</span>[-<span class=\"title\">T</span>, +<span class=\"title\">U</span>] &#123;</span></div><div class=\"line\">  <span class=\"keyword\">def</span> apply(<span class=\"string\">x:</span> T): U</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그렇다면 List의 경우는 어떨까?<br>Nil, Cons 클래스의 경우로 살펴보자.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> week4</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[+<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Nil</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">Nothing</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// val x의 return 타입이 List[Nothing]을 상속받는 Nil object 이므로,</span></div><div class=\"line\"><span class=\"comment\">// covariant 규칙에 의해 List[String]으로 리턴 타입을 지정할 수 있다.</span></div><div class=\"line\"><span class=\"comment\">// List[Nothing] &lt;: List[String]</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">test</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> x: <span class=\"type\">List</span>[<span class=\"type\">String</span>] = <span class=\"type\">Nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Nil이 List[Nothing]을 상속하게 만들면 모든 리스트의 서브타입이 된다. 그리고 trait List[T]를 trait List[+T]로 바꿔서 covariant하게 만들어 준다. val x: List[String] = Nil을 입력하게 되면, Nil이 List[Nothing]을 상속받으므로 covariant하게 바뀐 List 속성에 의해서 Nothing 보다 상위 클래스인 String 타입으로 리턴 할 수 있게 되었다.</p><p>List 클래스에 다음과 같은 prepend 메서드를 추가해보자.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> prepend(<span class=\"string\">elem:</span> T): List[T] = <span class=\"keyword\">new</span> Cons(eleml, <span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure><p>컴파일 에러가 난다. 그 이유는 타입 T가 covariant하기 때문에 파라미터에 사용하면 안된다. prepend 메서드가 새로운 리스트를 생성함해도 불구하고 문제가 생기는 이유는 prepend 메서드에 elem의 타입이 T이기 때문이다. 타입 T가 covariant하다면 반드시 result type에만 사용해야 한다.</p><h3 id=\"Prepend-Violates-LSP\"><a href=\"#Prepend-Violates-LSP\" class=\"headerlink\" title=\"Prepend Violates LSP\"></a>Prepend Violates LSP</h3><p>prepend 메서드가 왜 Liskov Substitution Principle을 위반했는지 알아보자<br>xs의 타입이 List[IntSet]인 경우에는 문제가 없다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">xs</span><span class=\"selector-class\">.prepend</span>(<span class=\"selector-tag\">Empty</span>)</div></pre></td></tr></table></figure><p>하지만 ys의 타입이 List[NonEmpty]라고 했을 때는 문제가 있다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ys</span><span class=\"selector-class\">.prepend</span>(<span class=\"selector-tag\">Empty</span>)</div></pre></td></tr></table></figure><p>NonEmpty 타입이 들어와야 할 자리에 Empty 타입이 들어왔으므로 타입에러가 발생한다. 그래서 이 경우에는 List[NonEmpty]는 List[IntSet]의 서브타입이 될 수 없다.</p><p>하지만 prepend 메서드는 immutable list에 실제로 존재한다. 어떻게 이게 가능할까? 답은 lower bound에 있다. U &gt;: T는 U가 T의 부모 타입이라는 말이다. 이렇게 되면, elem이 T보다 상위 타입이 오더라도 문제가 되지 않는다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def prepend[<span class=\"string\">U &gt;: T</span>](<span class=\"link\">elem: U</span>): List[U] = new Cons(elem, list)</div></pre></td></tr></table></figure><h2 id=\"4-5-Decomposition\"><a href=\"#4-5-Decomposition\" class=\"headerlink\" title=\"4.5 Decomposition\"></a>4.5 Decomposition</h2><p>다음과 같은 class 구조가 있다고 하자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// classification</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"comment\">// accessor</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span> = n</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Number.leftOp\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Number.rightOp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Sum.numValue\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span> = e1</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span> = e2</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>무척 쓸모 없어 보이는 메서드들이 여럿 보인다. 일단은 더 나은 코드를 설명하기 위한 단계이므로 참고 살펴보자.<br>그리고 위의 클래스 구조를 evaluation하는 간단한 인터프리터 함수인 eval이 다음과 같다</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">eval</span>(e: Expr): Int = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e.isNumber) e.numValue</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.isSum) <span class=\"built_in\">eval</span>(e.leftOp) + <span class=\"built_in\">eval</span>(e.rightOp)</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unknown expression \"</span> + e)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>이때 다음과 같은 코드가 있다면, 우선 eval 함수가 실행되면서 e가 어떤 타입인지 찾기 위해 classification method인 isSum으로 Sum 타입인지 찾을 것이다. 그리고 그 안의 두 인자가 각각 Number 이므로 또다시 eval 함수 내에서 isNumber에 의해 Number 타입인지 찾을 수 있을 것이다. 뭔가 비효율적으로 보인다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval(<span class=\"name\">Sum</span>(<span class=\"name\">Number</span>(<span class=\"number\">1</span>), Number(<span class=\"number\">2</span>))) = <span class=\"number\">3</span></div></pre></td></tr></table></figure><p>여기서 만약에 아래와 같은 두개의 클래스가 추가 된다면 어떨까?</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prod</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span>   <span class=\"title\">//</span> <span class=\"title\">e1</span> <span class=\"title\">*</span> <span class=\"title\">e2</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Var</span>(<span class=\"params\">x: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span>         <span class=\"title\">//</span> <span class=\"title\">Variable</span> '<span class=\"title\">x</span>'</span></div></pre></td></tr></table></figure><p>위의 두 클래스는 Number나 Sum과 마찬가지로 Expr을 상속받으므로 trait Expr의 메서드를 모두 구현해야한다. 그리고 isNum, isSum 과 같은 클래스 타입을 찾기 위한 메서드를 2개(isVar, isProd)더 추가해야 할 것이다. 또 var 값을 가져오기 위한 name 메서드도 추가되서 총 3개가 추가된다. 위의 구조에서만 15개의 메서드가 있는데, 단 2개의 클래스만 추가하더라도 더 필요한 메서드가 25개(Expr에 3개, Number에 3개, Sum에 3개, 그리고 새로운 클래스에 각각 8개)나 된다. 이건좀 아닌거 같다.</p><p>메서드를 좀 줄여보자<br>자바에서 사용하는 type test, type cast 메서드를 이용한다.</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scala           Java</div><div class=\"line\">x.isInstanceOf[<span class=\"built_in\">T</span>]     x instanceof <span class=\"built_in\">T</span>    // <span class=\"built_in\">type</span> test</div><div class=\"line\">x.asInstanceOf[<span class=\"built_in\">T</span>]     (<span class=\"built_in\">T</span>) x       // <span class=\"built_in\">type</span> cast</div></pre></td></tr></table></figure><p>평가함수인 eval을 조금 고쳐보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">eval</span>(e: Expr): Int = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e.isInstanceOf[<span class=\"built_in\">Number</span>])</div><div class=\"line\">    e.asInstanceOf[<span class=\"built_in\">Number</span>].numValue</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.isInstanceOf[Sum])</div><div class=\"line\">    <span class=\"built_in\">eval</span>(e.asInstanceOf[Sum].leftOp) + <span class=\"built_in\">eval</span>(e.asInstanceOf[Sum].rightOp)</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unknown expression \"</span> + e)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>자바에서 사용하는 타입 test 함수인 instanceof와 타입 캐스팅 하는 방법을 적용하였다. 스칼라에서는 각각의 방법을 함수로 만들어 두었다. 이 방법을 사용하면 위에서 보았던 classification 메서드(isNum, inSum)를 사용할 필요가 없다. 대신에 타입 체크 및 캐스팅 함수가 low-level 함수이기 때문에 불안정한다는 단점이 있다.</p><p>Object-Oriented Decomposition을 이용한 또다른 해법을 살펴보자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span> = n</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span> = e1.eval + e2.eval</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>각각의 클래스에 eval 함수를 구현하였다. 각 클래스에 맞게 구현되기 때문에 accessor 함수들도 불필요하다. 이제 많이 깔끔해졌다. 하지만 문제는 여전히 있다. rait에 하나의 메서드가 추가된다면, 나머지 클래스에 모두 구현해야한다는 점이다. 또다른 문제가 있다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span> * b + <span class=\"keyword\">a</span> * c = <span class=\"keyword\">a</span> * (b + <span class=\"number\">3</span>)</div></pre></td></tr></table></figure><p>위와 같이 축약하기 어렵다. 왜냐하면 이것은 non-local simplification이기 때문이다. 이것은 single object의 메서드로 캡슐화 할 수 없다. sub-tree를 모두 테스트하고 접근해야하는 문제가 있다.</p><h2 id=\"4-6-Pattern-Matching\"><a href=\"#4-6-Pattern-Matching\" class=\"headerlink\" title=\"4.6 Pattern Matching\"></a>4.6 Pattern Matching</h2><p>이전챕터에서 Decomposition을 시도한 몇가지 방법은 아래와 같다.</p><ul><li>Classification and access methods: quadratic explosion</li><li>Type tests and casts: unsafe, low-level</li><li>Object-oriented decomposition: does not always work, need to touch all classes to add a new method.</li></ul><p>classification과 accessor 의 주 목적은 아래와 같다.</p><ul><li>Which subclass was used?</li><li>What were the arguments of the constructor?</li></ul><p>보통 사용되는 new Sum(e1, e2)와 같은 형태의 생성자를 스칼라는 case class라는 문법을 통해서 자동으로 Pattern Matching 시켜준다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 두개의 case class</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: </span></span></div><div class=\"line\"><span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 실제 apply 메서드의 형태</span></div><div class=\"line\"><span class=\"comment\">// Number(1), Sum(2, 3)과 같이 호출될꺼다</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Number</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Number</span>(n)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Sum</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Sum</span>(e1, e2)</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// eval 함수를 이용해서 패턴매칭, </span></div><div class=\"line\"><span class=\"comment\">// 파라미터 e가 Number냐 Sum이냐에 따라서 자동으로 선택되어 처리</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>(e: <span class=\"type\">Expr</span>): <span class=\"type\">Int</span> = e <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Number</span>(n) =&gt; n</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Match-Syntax-rules\"><a href=\"#Match-Syntax-rules\" class=\"headerlink\" title=\"Match Syntax rules\"></a>Match Syntax rules</h3><ul><li>match is followed by a sequence of cases, pat =&gt; expr.</li><li>Each case associates an expression expr with a pattern pat.</li><li>A matchError exception is thrown if no pattern matches the value of the selector.</li></ul><p>패턴은 Number, Sum과 같은 contructor로 만들어지며, 인자(variables)는 반드시 소문자로 시작해야한다. 그리고 한 pattern 안에 같은 파라미터 문자를 쓰면 안된다. 상수는 null, true, false를 제외하고는 반드시 대문자로 시작해야한다. 마지막으로 wildcard pattern인 ‘<em>‘은 해당 파라미터를 신경쓰지 않겠다는 것이다. 대체로 해당 case에서 사용되지 않는 파라미터에 ‘</em>‘를 사용한다.</p><p>eval 함수를 trait Expr에 넣어보자.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Expr &#123;</div><div class=\"line\">  def <span class=\"keyword\">eval</span>: <span class=\"keyword\">Int</span> = this match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Number(n) =&gt; n</div><div class=\"line\">    <span class=\"keyword\">case</span> Sum(e1, e2) =&gt; e1.<span class=\"keyword\">eval</span> + e2.<span class=\"keyword\">eval</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"4-7-Lists\"><a href=\"#4-7-Lists\" class=\"headerlink\" title=\"4.7 Lists\"></a>4.7 Lists</h2><p>가장 기본적인 리스트 형태는 아래와 같이 정의할 수 있다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// List(X1, ..., Xn)</span></div><div class=\"line\">val fruit: <span class=\"keyword\">List</span>[String] = <span class=\"keyword\">List</span>(<span class=\"string\">\"Apples\"</span>, <span class=\"string\">\"oranges\"</span>, <span class=\"string\">\"pears\"</span>)</div><div class=\"line\">val nums: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</div><div class=\"line\">val diag3: <span class=\"keyword\">List</span>[<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]] = <span class=\"keyword\">List</span>(<span class=\"keyword\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"keyword\">List</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"keyword\">List</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">val <span class=\"keyword\">empty</span>: <span class=\"keyword\">List</span>[Nothing] = <span class=\"keyword\">List</span>()</div></pre></td></tr></table></figure><p>스칼라에서 List와 Array는 중요한 두가지 차이가 있다.</p><ul><li>List are immutable - the elements of a list cannot be changed</li><li>Lists are recursive, while arrays are flat</li></ul><p>또한 스칼라에서는 construction operation인 ::(cons라 부름, 지난주의 prepend 함수랑 동일하다)를 이용하여 좀더 간단하게 리스트를 만들 수 있다. cons는 right-associative 연산이기 때문에 우측에서부터 왼쪽으로 하나씩 붙여 나간다는 생각으로 사용하면 된다. 위의 리스트 들을 cons를 이용해서 작성해보면 다음과 같다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fruit = <span class=\"string\">\"apples\"</span> :: (<span class=\"string\">\"oranges\"</span> :: (<span class=\"string\">\"pears\"</span> :: Nil))</div><div class=\"line\">fruit = <span class=\"string\">\"apples\"</span> :: <span class=\"string\">\"oranges\"</span> :: <span class=\"string\">\"pears\"</span> :: Nil</div><div class=\"line\"></div><div class=\"line\">nums = <span class=\"number\">1</span> :: (<span class=\"number\">2</span> :: (<span class=\"number\">3</span> :: (<span class=\"number\">4</span> :: Nil)))</div><div class=\"line\">nums = <span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"number\">3</span> :: <span class=\"number\">4</span> :: Nil</div><div class=\"line\"></div><div class=\"line\">empty = Nil</div></pre></td></tr></table></figure><p>right-associative 연산이기 때문에 실제 컴파일러는 위의 연산(nums)을 다음과 같이 해석한다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums = <span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"number\">3</span> :: <span class=\"number\">4</span> :: Nil</div><div class=\"line\">Nils.::(<span class=\"number\">4</span>).::(<span class=\"number\">3</span>).::(<span class=\"number\">2</span>).::(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure><h3 id=\"sorting-Lists\"><a href=\"#sorting-Lists\" class=\"headerlink\" title=\"sorting Lists\"></a>sorting Lists</h3><p>재귀를 이용한 Insertion Sort</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">def isort(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  xs match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">List</span>()</div><div class=\"line\">    <span class=\"keyword\">case</span> y :: ys =&gt; insert(y, isort(ys))</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def insert(x: <span class=\"keyword\">Int</span>, xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  xs match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">List</span>(x)</div><div class=\"line\">    <span class=\"keyword\">case</span> y :: ys =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (x &lt; y)  x :: xs</div><div class=\"line\">      <span class=\"keyword\">else</span> y :: insert(x, ys)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"4-1-Objects-Everywhere\"><a href=\"#4-1-Objects-Everywhere\" class=\"headerlink\" title=\"4.1 Objects Everywhere\"></a>4.1 Objects Everywhere</h2><blockquote><p>퓨어 object-oriented 언어란 모든 value가 object라는 말인데, 그렇다면 스칼라가 퓨어 object-oriented language인가?</p></blockquote><p>스칼라의 모든 값은 object로 표현되기 때문에 퓨어하다 할 수 있다. 예로 scala.Boolean 대신 커스텀으로 Boolean 클래스를 정의한다(자바의 래핑클래스(Integer 등)처럼)</p><p>Boolean 클래스에서는 실제 스칼라 Boolean으로 사용할 수 있었던 연산을 모두 재정의해준다.<br>ifThenElse는 if(cond) f1 else f2과 같다(여기서 f1, f2는 ifThenElse의 파라미터)<br>아래는 ‘&lt;’ 함수를 정의한 예제이다.</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">claass <span class=\"keyword\">Boolean</span> &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">def</span> &lt; (x: <span class=\"keyword\">Boolean</span>): <span class=\"keyword\">Boolean</span> = ifThenElse(<span class=\"keyword\">false</span>, x)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><h2 id=\"4-2-Functions-as-Objects\"><a href=\"#4-2-Functions-as-Objects\" class=\"headerlink\" title=\"4.2 Functions as Objects\"></a>4.2 Functions as Objects</h2><p>스칼라에서는 function values는 오브젝트로 취급된다. 사실 function type A =&gt; B는 scala.Function1[A, B]의 축약 형태와 같다고 할수 있다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> scala</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Function1</span>[<span class=\"title\">A</span>, <span class=\"title\">B</span>] &#123;</span></div><div class=\"line\">  <span class=\"keyword\">def</span> aaply(<span class=\"string\">x:</span> A): B</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>즉, 함수는 apply 메소드를 가진 오브젝트와 같다.<br>익명함수의 경우에는 다음과 같이 확장될 수 있다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(x: <span class=\"type\">Int</span>) =&gt; x * x</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is expanded to</span></div><div class=\"line\">&#123; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonFun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Function1</span>[<span class=\"type\">Int</span>, <span class=\"type\">Int</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x: <span class=\"type\">Int</span>) = x * x</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">AnonFun</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// shorter</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"type\">FUnctino1</span>[<span class=\"type\">Int</span>, <span class=\"type\">Int</span>] &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x: <span class=\"type\">Int</span>) = x * x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그러니까 실제로 f(a, b) 라는 함수를 call 했을 때, f.apply(a, b)가 불리는 것과 같다는 말이다.<br>예를 들면,</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">val f = (x: <span class=\"built_in\">Int</span>) =&gt; x * x</div><div class=\"line\">f(<span class=\"number\">7</span>)</div><div class=\"line\"></div><div class=\"line\">val f = new <span class=\"function\"><span class=\"keyword\">Function</span></span>[<span class=\"built_in\">Int</span>. <span class=\"built_in\">Int</span>] &#123;</div><div class=\"line\">  def apply(x: <span class=\"built_in\">Int</span>) = x * x</div><div class=\"line\">&#125;</div><div class=\"line\">f.apply(<span class=\"number\">7</span>)</div></pre></td></tr></table></figure><p>위에서 본것처럼 apply 메소드는 오브젝트 안에 있을 때 오브젝트 이름 그대로 호출할 수 있다. 지난번에 봤던 List를 예로 들어보면 아래와 같다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nil</span>[<span class=\"type\">T</span>] <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// List()</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">List</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>]: <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Nil</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](x: <span class=\"type\">T</span>): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x, <span class=\"keyword\">new</span> <span class=\"type\">Nil</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](x1: <span class=\"type\">T</span>, x2: <span class=\"type\">T</span>): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x1, <span class=\"keyword\">new</span> <span class=\"type\">Cons</span>(x2, <span class=\"keyword\">new</span> <span class=\"type\">Nil</span>))</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// objectd 이름 그대로 호출 가능, 파라미터가 맞는 apply 메소드를 알아서 찾아감</span></div><div class=\"line\">  <span class=\"keyword\">val</span> a = <span class=\"type\">List</span>()</div><div class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"type\">List</span>(<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">val</span> c = <span class=\"type\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"4-3-Subtyping-and-Generics\"><a href=\"#4-3-Subtyping-and-Generics\" class=\"headerlink\" title=\"4.3 Subtyping and Generics\"></a>4.3 Subtyping and Generics</h2><p>스칼라 언어에서 다형성을 표현하는 두가지 방법은 subtyping과 generic 이다.</p><h3 id=\"Type-Bounds\"><a href=\"#Type-Bounds\" class=\"headerlink\" title=\"Type Bounds\"></a>Type Bounds</h3><blockquote><p>takes an IntSet<br>returns the IntSet itself if all this elements are positive<br>throws an exception otherwise</p></blockquote><p>위의 세가지 조건을 충족시킬 수 있는 함수를 생각해보자.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">assertAllPos</span><span class=\"params\">(<span class=\"symbol\">s:</span> IntSet)</span></span>: IntSet</div></pre></td></tr></table></figure><p>대부분의 경우는 위의 함수로 충분하지만 정확히 하자면 다음과 같이 쓸수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def assertAllPos[<span class=\"string\">S &lt;: IntSet</span>](<span class=\"link\">r: S</span>): S = ...</div></pre></td></tr></table></figure><p>“S &lt;: IntSet”을 type parameter S의 upper bound라고 한다. 이것은 S가 반드시 IntSet의 subType(또는 자신)이어야 한다는 말과 같다.<br>반대로 “S :&gt; T”는 S가 T의 superType이거나 T가 S의 subType이라는 말이다. 이를 lower Bounds 라고 한다.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[S &gt;: NonEmpty]</div></pre></td></tr></table></figure><p>위에서 말했듯이 위의 의미는 S가 NonEmpty 클래스의 supertype인데, S는 NonEmpty의 모든 base 클래스(자신 포함)가 해당된다. 여기서 S는 NonEmpty, IntSet, AnyRef, Any가 될 수 있다.</p><p>마지막은 Mixed Bound</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[S &gt;: NonEmpty &lt;: IntSet]</div></pre></td></tr></table></figure><p>이것의 의미는 S가 NonEmtpy와 IntSet 타입 사이의 모든 타입이 될 수 있다는 말과 같다.</p><h3 id=\"Covariance\"><a href=\"#Covariance\" class=\"headerlink\" title=\"Covariance\"></a>Covariance</h3><p>서브클래스의 인스턴스 컬렉션을 상위클래스의 컬렉션으로 보내는 것을 Covariance(공변성)라고 한다. 왜냐하면 subtyping 관계가 컬렉션에서도 그대로 적용되었기 때문이다.</p><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty <span class=\"type\">&lt;:</span> <span class=\"built_in\">IntSet</span></div><div class=\"line\">// 위가 성립된다면 아래도 성립</div><div class=\"line\">List[NonEmpty] <span class=\"type\">&lt;:</span> List[<span class=\"built_in\">IntSet</span>]</div></pre></td></tr></table></figure><h3 id=\"Arrays-in-Scala\"><a href=\"#Arrays-in-Scala\" class=\"headerlink\" title=\"Arrays in Scala\"></a>Arrays in Scala</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">T[]     <span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"keyword\">Array</span>[T]  <span class=\"comment\">// Scala</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Covariance에 의해 아래가 성립</span></div><div class=\"line\">NonEmpty[] &lt;: IntSet[]        <span class=\"comment\">// Java</span></div><div class=\"line\"><span class=\"keyword\">Array</span>[NonEmpty] &lt;: <span class=\"keyword\">Array</span>[IntSet]  <span class=\"comment\">// Scala</span></div></pre></td></tr></table></figure><p>자바의 Array Typing에는 타입과 관련된 아래의 문제가 있다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty[] <span class=\"selector-tag\">a</span> = new NonEmpty[]&#123;new NonEmpty(<span class=\"number\">1</span>, Empty, Empty)&#125;</div><div class=\"line\">IntSet[] <span class=\"selector-tag\">b</span> = <span class=\"selector-tag\">a</span></div><div class=\"line\"><span class=\"selector-tag\">b</span>[<span class=\"number\">0</span>] = Empty</div><div class=\"line\">NonEmpty s = <span class=\"selector-tag\">a</span>[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure><p>a는 NonEmpty 타입의 Array를 가리키는 포인터이다. 두번째 줄에서 IntSet Array b 에 a를 대입하였다. b가 실제로 카리키는 대상은 NonEmpty List지만, covariance 규칙에 의해 상위 타입의 컬렉션이 하위 타입의 컬렉션을 대신할 수 있다. 세번째 줄에서 b의 첫번째 item에 Empty 클래스를 대입하였다. 마지막으로 a의 첫번째 item을 NonEmpty 타입의 s에 대입하였다. b와 a 는 실제로 가리키는 대상이 같기 때문에 세번째 줄에서 b[0]에 들어간 Empty는 a[0]에서도 동일하게 작동한다. 그런데 마지막 줄에서 Empty 타입의 item 을 NonEmpty 타입에 할당하기 때문에 런타임 에러가 발생한다.</p><h3 id=\"Liskov-Substitution-Principle\"><a href=\"#Liskov-Substitution-Principle\" class=\"headerlink\" title=\"Liskov Substitution Principle\"></a>Liskov Substitution Principle</h3><blockquote><p>If A &lt;: B, then everything one can to do with a value of type B one should also be able to do with a value of type A<br>리스코프 치환원칙은 타입 A와 B가 있을때 하나의 타입이 다른 하나의 서브타입이 될 수 있는 조건에 대해 말해준다.</p></blockquote><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in scala</span></div><div class=\"line\">val <span class=\"selector-tag\">a</span>: Array[NonEmpty] = Array(new NonEmpty(<span class=\"number\">1</span>, Empty, Empty))</div><div class=\"line\">val <span class=\"selector-tag\">b</span>: Array[IntSet] = <span class=\"selector-tag\">a</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span> = Empty</div><div class=\"line\">val s: NonEmpty = a(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>스칼라의 경우에는 두번째 줄에서 컴파일 에러가 난다. 그 이유는 스칼라의 Array는 covariant하지 않기 때문이다. (NonEmpty )</p><figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NonEmpty <span class=\"type\">&lt;:</span> <span class=\"built_in\">IntSet</span></div><div class=\"line\">not <span class=\"built_in\">Array</span>[NonEmpty] <span class=\"type\">&lt;:</span> <span class=\"built_in\">Array</span>[<span class=\"built_in\">IntSet</span>]</div></pre></td></tr></table></figure><h2 id=\"4-4-Variance\"><a href=\"#4-4-Variance\" class=\"headerlink\" title=\"4.4 Variance\"></a>4.4 Variance</h2><p>스칼라에서 List는 covariant, Array는 성립하지 않는다. 그 이유는 list의 경우에는 immutable한 컬렉션이고, Array는 mutable 하기 때문이다. 보통 mutation을 허용하는 타입은 covariant하지 않다.</p><p>C[T]에서 A &lt;: B인 경우 다음이 성립한다.<br>B가 A의 수퍼타입이면서 C[B]가 C[A]의 수퍼타입인 경우에는 covariant, C[A]가 C[B]의 수퍼타입이면 contravariant</p><ul><li>C[A] &lt;: C[B] 이면 C는 covariant (class C[+A])</li><li>C[A] &gt;: C[B] 이면 C는 contravariant (class C[-A])</li><li>C[A]와 C[B] 둘다 다른것의 서브타입이 아니면 C는 nonvariant (class C[A])</li></ul><p>다음의 두 타입중 어떤 타입이 수퍼타입이고, 어떤 타입이 서브타입인가?<br>함수의 파라미터가 더 구체적인(서브타입) 타입이 들어 갔을때는 반드시 그 타입으로 인자가 넘어와야한다. type B를 보면 파라미터 타입이 IntSet의 서브타입인 NonEmpty이므로 인자가 반드시 NonEmpty 타입이어야 한다. 반면에 type A를 보면, 파라미터 타입이 IntSet이라 NonEmpty 포함 IntSet의 모든 서브타입이 들어 올 수 있다. 리턴타입은 NonEmpty이므로 IntSet이라 할 수 있다. 즉, A는 B의 규칙을 만족시킨다. 게다가 A는 파라미터에 추가로 Empty 같은 타입이 들어 올 수 있으므로, A가 B보다 더 확장된 형태이다.<br>그러므로, B가 A의 수퍼타입이다. 함수의 파라미터는 contravariant하고 함수의 리턴값은 covariant 하기 때문에 A &lt;: B가 참이다.</p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">A </span>= IntSet =&gt; NonEmpty</div><div class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">B </span>= NonEmpty =&gt; IntSet</div></pre></td></tr></table></figure><p>위의 내용을 요약하면 아래와 같다.</p><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">If</span> <span class=\"built_in\">A2</span> &lt;: <span class=\"built_in\">A1</span> <span class=\"keyword\">and </span><span class=\"keyword\">B1 </span>&lt;: <span class=\"keyword\">B2, </span>then</div><div class=\"line\">  <span class=\"built_in\">A1</span> =&gt; <span class=\"keyword\">B1 </span> &lt;:  <span class=\"built_in\">A2</span> =&gt; <span class=\"keyword\">B2</span></div></pre></td></tr></table></figure><blockquote><p>Functions are contravariant in their argument type(s) and covariant in their result type.</p></blockquote><h3 id=\"Variance-Checks\"><a href=\"#Variance-Checks\" class=\"headerlink\" title=\"Variance Checks\"></a>Variance Checks</h3><p>위에서 Array는 mutable한 속성 때문에 covariant하지 못하다는 문제를 살펴봤었다. mutable한 속성이라는 것은 update 가능하다는 말과 같은데, Array 클래스에서 update 함수의 파라미터의 타입이 어떤 문제를 가지고 있는지 살펴보자. 앞서서 covariant 타입은 함수의 result 타입에만 나타날 수 있다고 말했다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span>[+<span class=\"title\">T</span>] &#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"symbol\">x:</span> T)</span></span> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그런데 위의 Array 클래스의 update 함수를 보면, covariant 타입 T가 파라미터에 쓰여졌기 때문에 Array는 covariant 하지 못<br>한 컨테이너라 할 수 있겠다.</p><p>그래서 앞서서 보았던(4.2) Function1은 사실 아래와 같은 형태이다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> scala</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Function1</span>[-<span class=\"title\">T</span>, +<span class=\"title\">U</span>] &#123;</span></div><div class=\"line\">  <span class=\"keyword\">def</span> apply(<span class=\"string\">x:</span> T): U</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그렇다면 List의 경우는 어떨까?<br>Nil, Cons 클래스의 경우로 살펴보자.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> week4</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[+<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Nil</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">Nothing</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// val x의 return 타입이 List[Nothing]을 상속받는 Nil object 이므로,</span></div><div class=\"line\"><span class=\"comment\">// covariant 규칙에 의해 List[String]으로 리턴 타입을 지정할 수 있다.</span></div><div class=\"line\"><span class=\"comment\">// List[Nothing] &lt;: List[String]</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">test</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> x: <span class=\"type\">List</span>[<span class=\"type\">String</span>] = <span class=\"type\">Nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Nil이 List[Nothing]을 상속하게 만들면 모든 리스트의 서브타입이 된다. 그리고 trait List[T]를 trait List[+T]로 바꿔서 covariant하게 만들어 준다. val x: List[String] = Nil을 입력하게 되면, Nil이 List[Nothing]을 상속받으므로 covariant하게 바뀐 List 속성에 의해서 Nothing 보다 상위 클래스인 String 타입으로 리턴 할 수 있게 되었다.</p><p>List 클래스에 다음과 같은 prepend 메서드를 추가해보자.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> prepend(<span class=\"string\">elem:</span> T): List[T] = <span class=\"keyword\">new</span> Cons(eleml, <span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure><p>컴파일 에러가 난다. 그 이유는 타입 T가 covariant하기 때문에 파라미터에 사용하면 안된다. prepend 메서드가 새로운 리스트를 생성함해도 불구하고 문제가 생기는 이유는 prepend 메서드에 elem의 타입이 T이기 때문이다. 타입 T가 covariant하다면 반드시 result type에만 사용해야 한다.</p><h3 id=\"Prepend-Violates-LSP\"><a href=\"#Prepend-Violates-LSP\" class=\"headerlink\" title=\"Prepend Violates LSP\"></a>Prepend Violates LSP</h3><p>prepend 메서드가 왜 Liskov Substitution Principle을 위반했는지 알아보자<br>xs의 타입이 List[IntSet]인 경우에는 문제가 없다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">xs</span><span class=\"selector-class\">.prepend</span>(<span class=\"selector-tag\">Empty</span>)</div></pre></td></tr></table></figure><p>하지만 ys의 타입이 List[NonEmpty]라고 했을 때는 문제가 있다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ys</span><span class=\"selector-class\">.prepend</span>(<span class=\"selector-tag\">Empty</span>)</div></pre></td></tr></table></figure><p>NonEmpty 타입이 들어와야 할 자리에 Empty 타입이 들어왔으므로 타입에러가 발생한다. 그래서 이 경우에는 List[NonEmpty]는 List[IntSet]의 서브타입이 될 수 없다.</p><p>하지만 prepend 메서드는 immutable list에 실제로 존재한다. 어떻게 이게 가능할까? 답은 lower bound에 있다. U &gt;: T는 U가 T의 부모 타입이라는 말이다. 이렇게 되면, elem이 T보다 상위 타입이 오더라도 문제가 되지 않는다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def prepend[<span class=\"string\">U &gt;: T</span>](<span class=\"link\">elem: U</span>): List[U] = new Cons(elem, list)</div></pre></td></tr></table></figure><h2 id=\"4-5-Decomposition\"><a href=\"#4-5-Decomposition\" class=\"headerlink\" title=\"4.5 Decomposition\"></a>4.5 Decomposition</h2><p>다음과 같은 class 구조가 있다고 하자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// classification</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"comment\">// accessor</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span> = n</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Number.leftOp\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Number.rightOp\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNumber</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSum</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numValue</span></span>: <span class=\"type\">Int</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Error</span>(<span class=\"string\">\"Sum.numValue\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightOp</span></span>: <span class=\"type\">Expr</span> = e1</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leftOp</span></span>: <span class=\"type\">Expr</span> = e2</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>무척 쓸모 없어 보이는 메서드들이 여럿 보인다. 일단은 더 나은 코드를 설명하기 위한 단계이므로 참고 살펴보자.<br>그리고 위의 클래스 구조를 evaluation하는 간단한 인터프리터 함수인 eval이 다음과 같다</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">eval</span>(e: Expr): Int = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e.isNumber) e.numValue</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.isSum) <span class=\"built_in\">eval</span>(e.leftOp) + <span class=\"built_in\">eval</span>(e.rightOp)</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unknown expression \"</span> + e)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>이때 다음과 같은 코드가 있다면, 우선 eval 함수가 실행되면서 e가 어떤 타입인지 찾기 위해 classification method인 isSum으로 Sum 타입인지 찾을 것이다. 그리고 그 안의 두 인자가 각각 Number 이므로 또다시 eval 함수 내에서 isNumber에 의해 Number 타입인지 찾을 수 있을 것이다. 뭔가 비효율적으로 보인다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval(<span class=\"name\">Sum</span>(<span class=\"name\">Number</span>(<span class=\"number\">1</span>), Number(<span class=\"number\">2</span>))) = <span class=\"number\">3</span></div></pre></td></tr></table></figure><p>여기서 만약에 아래와 같은 두개의 클래스가 추가 된다면 어떨까?</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prod</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span>   <span class=\"title\">//</span> <span class=\"title\">e1</span> <span class=\"title\">*</span> <span class=\"title\">e2</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Var</span>(<span class=\"params\">x: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span>         <span class=\"title\">//</span> <span class=\"title\">Variable</span> '<span class=\"title\">x</span>'</span></div></pre></td></tr></table></figure><p>위의 두 클래스는 Number나 Sum과 마찬가지로 Expr을 상속받으므로 trait Expr의 메서드를 모두 구현해야한다. 그리고 isNum, isSum 과 같은 클래스 타입을 찾기 위한 메서드를 2개(isVar, isProd)더 추가해야 할 것이다. 또 var 값을 가져오기 위한 name 메서드도 추가되서 총 3개가 추가된다. 위의 구조에서만 15개의 메서드가 있는데, 단 2개의 클래스만 추가하더라도 더 필요한 메서드가 25개(Expr에 3개, Number에 3개, Sum에 3개, 그리고 새로운 클래스에 각각 8개)나 된다. 이건좀 아닌거 같다.</p><p>메서드를 좀 줄여보자<br>자바에서 사용하는 type test, type cast 메서드를 이용한다.</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scala           Java</div><div class=\"line\">x.isInstanceOf[<span class=\"built_in\">T</span>]     x instanceof <span class=\"built_in\">T</span>    // <span class=\"built_in\">type</span> test</div><div class=\"line\">x.asInstanceOf[<span class=\"built_in\">T</span>]     (<span class=\"built_in\">T</span>) x       // <span class=\"built_in\">type</span> cast</div></pre></td></tr></table></figure><p>평가함수인 eval을 조금 고쳐보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"built_in\">eval</span>(e: Expr): Int = &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e.isInstanceOf[<span class=\"built_in\">Number</span>])</div><div class=\"line\">    e.asInstanceOf[<span class=\"built_in\">Number</span>].numValue</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.isInstanceOf[Sum])</div><div class=\"line\">    <span class=\"built_in\">eval</span>(e.asInstanceOf[Sum].leftOp) + <span class=\"built_in\">eval</span>(e.asInstanceOf[Sum].rightOp)</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unknown expression \"</span> + e)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>자바에서 사용하는 타입 test 함수인 instanceof와 타입 캐스팅 하는 방법을 적용하였다. 스칼라에서는 각각의 방법을 함수로 만들어 두었다. 이 방법을 사용하면 위에서 보았던 classification 메서드(isNum, inSum)를 사용할 필요가 없다. 대신에 타입 체크 및 캐스팅 함수가 low-level 함수이기 때문에 불안정한다는 단점이 있다.</p><p>Object-Oriented Decomposition을 이용한 또다른 해법을 살펴보자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span> = n</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>: <span class=\"type\">Int</span> = e1.eval + e2.eval</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>각각의 클래스에 eval 함수를 구현하였다. 각 클래스에 맞게 구현되기 때문에 accessor 함수들도 불필요하다. 이제 많이 깔끔해졌다. 하지만 문제는 여전히 있다. rait에 하나의 메서드가 추가된다면, 나머지 클래스에 모두 구현해야한다는 점이다. 또다른 문제가 있다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span> * b + <span class=\"keyword\">a</span> * c = <span class=\"keyword\">a</span> * (b + <span class=\"number\">3</span>)</div></pre></td></tr></table></figure><p>위와 같이 축약하기 어렵다. 왜냐하면 이것은 non-local simplification이기 때문이다. 이것은 single object의 메서드로 캡슐화 할 수 없다. sub-tree를 모두 테스트하고 접근해야하는 문제가 있다.</p><h2 id=\"4-6-Pattern-Matching\"><a href=\"#4-6-Pattern-Matching\" class=\"headerlink\" title=\"4.6 Pattern Matching\"></a>4.6 Pattern Matching</h2><p>이전챕터에서 Decomposition을 시도한 몇가지 방법은 아래와 같다.</p><ul><li>Classification and access methods: quadratic explosion</li><li>Type tests and casts: unsafe, low-level</li><li>Object-oriented decomposition: does not always work, need to touch all classes to add a new method.</li></ul><p>classification과 accessor 의 주 목적은 아래와 같다.</p><ul><li>Which subclass was used?</li><li>What were the arguments of the constructor?</li></ul><p>보통 사용되는 new Sum(e1, e2)와 같은 형태의 생성자를 스칼라는 case class라는 문법을 통해서 자동으로 Pattern Matching 시켜준다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 두개의 case class</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span>(<span class=\"params\">n: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span>(<span class=\"params\">e1: </span></span></div><div class=\"line\"><span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span>) <span class=\"keyword\">extends</span> <span class=\"title\">Expr</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 실제 apply 메서드의 형태</span></div><div class=\"line\"><span class=\"comment\">// Number(1), Sum(2, 3)과 같이 호출될꺼다</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Number</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Number</span>(n)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Sum</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(e1: <span class=\"type\">Expr</span>, e2: <span class=\"type\">Expr</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Sum</span>(e1, e2)</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// eval 함수를 이용해서 패턴매칭, </span></div><div class=\"line\"><span class=\"comment\">// 파라미터 e가 Number냐 Sum이냐에 따라서 자동으로 선택되어 처리</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eval</span></span>(e: <span class=\"type\">Expr</span>): <span class=\"type\">Int</span> = e <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Number</span>(n) =&gt; n</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Match-Syntax-rules\"><a href=\"#Match-Syntax-rules\" class=\"headerlink\" title=\"Match Syntax rules\"></a>Match Syntax rules</h3><ul><li>match is followed by a sequence of cases, pat =&gt; expr.</li><li>Each case associates an expression expr with a pattern pat.</li><li>A matchError exception is thrown if no pattern matches the value of the selector.</li></ul><p>패턴은 Number, Sum과 같은 contructor로 만들어지며, 인자(variables)는 반드시 소문자로 시작해야한다. 그리고 한 pattern 안에 같은 파라미터 문자를 쓰면 안된다. 상수는 null, true, false를 제외하고는 반드시 대문자로 시작해야한다. 마지막으로 wildcard pattern인 ‘<em>‘은 해당 파라미터를 신경쓰지 않겠다는 것이다. 대체로 해당 case에서 사용되지 않는 파라미터에 ‘</em>‘를 사용한다.</p><p>eval 함수를 trait Expr에 넣어보자.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Expr &#123;</div><div class=\"line\">  def <span class=\"keyword\">eval</span>: <span class=\"keyword\">Int</span> = this match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Number(n) =&gt; n</div><div class=\"line\">    <span class=\"keyword\">case</span> Sum(e1, e2) =&gt; e1.<span class=\"keyword\">eval</span> + e2.<span class=\"keyword\">eval</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"4-7-Lists\"><a href=\"#4-7-Lists\" class=\"headerlink\" title=\"4.7 Lists\"></a>4.7 Lists</h2><p>가장 기본적인 리스트 형태는 아래와 같이 정의할 수 있다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// List(X1, ..., Xn)</span></div><div class=\"line\">val fruit: <span class=\"keyword\">List</span>[String] = <span class=\"keyword\">List</span>(<span class=\"string\">\"Apples\"</span>, <span class=\"string\">\"oranges\"</span>, <span class=\"string\">\"pears\"</span>)</div><div class=\"line\">val nums: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</div><div class=\"line\">val diag3: <span class=\"keyword\">List</span>[<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]] = <span class=\"keyword\">List</span>(<span class=\"keyword\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"keyword\">List</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"keyword\">List</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">val <span class=\"keyword\">empty</span>: <span class=\"keyword\">List</span>[Nothing] = <span class=\"keyword\">List</span>()</div></pre></td></tr></table></figure><p>스칼라에서 List와 Array는 중요한 두가지 차이가 있다.</p><ul><li>List are immutable - the elements of a list cannot be changed</li><li>Lists are recursive, while arrays are flat</li></ul><p>또한 스칼라에서는 construction operation인 ::(cons라 부름, 지난주의 prepend 함수랑 동일하다)를 이용하여 좀더 간단하게 리스트를 만들 수 있다. cons는 right-associative 연산이기 때문에 우측에서부터 왼쪽으로 하나씩 붙여 나간다는 생각으로 사용하면 된다. 위의 리스트 들을 cons를 이용해서 작성해보면 다음과 같다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fruit = <span class=\"string\">\"apples\"</span> :: (<span class=\"string\">\"oranges\"</span> :: (<span class=\"string\">\"pears\"</span> :: Nil))</div><div class=\"line\">fruit = <span class=\"string\">\"apples\"</span> :: <span class=\"string\">\"oranges\"</span> :: <span class=\"string\">\"pears\"</span> :: Nil</div><div class=\"line\"></div><div class=\"line\">nums = <span class=\"number\">1</span> :: (<span class=\"number\">2</span> :: (<span class=\"number\">3</span> :: (<span class=\"number\">4</span> :: Nil)))</div><div class=\"line\">nums = <span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"number\">3</span> :: <span class=\"number\">4</span> :: Nil</div><div class=\"line\"></div><div class=\"line\">empty = Nil</div></pre></td></tr></table></figure><p>right-associative 연산이기 때문에 실제 컴파일러는 위의 연산(nums)을 다음과 같이 해석한다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums = <span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"number\">3</span> :: <span class=\"number\">4</span> :: Nil</div><div class=\"line\">Nils.::(<span class=\"number\">4</span>).::(<span class=\"number\">3</span>).::(<span class=\"number\">2</span>).::(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure><h3 id=\"sorting-Lists\"><a href=\"#sorting-Lists\" class=\"headerlink\" title=\"sorting Lists\"></a>sorting Lists</h3><p>재귀를 이용한 Insertion Sort</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">def isort(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  xs match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">List</span>()</div><div class=\"line\">    <span class=\"keyword\">case</span> y :: ys =&gt; insert(y, isort(ys))</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def insert(x: <span class=\"keyword\">Int</span>, xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  xs match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">List</span>(x)</div><div class=\"line\">    <span class=\"keyword\">case</span> y :: ys =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (x &lt; y)  x :: xs</div><div class=\"line\">      <span class=\"keyword\">else</span> y :: insert(x, ys)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 3","date":"2016-07-26T14:26:50.000Z","_content":"\n## 3.1 Class Hierachies\n\n### abstract class (추상 클래스)\n추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).\n\n```\nabstract class IntSet {\n  def incl(x: Int): IntSet\n  def contains(x: Int): Boolean\n}\n\nclass Empty extends IntSet {\n  def incl(x: Int): IntSet = new NonEmpty(x, new Empty, new Empty)\n  def contains(x: Int): Boolean = false\n  override def toString = \".\"\n}\n\nclass NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {\n  def incl(x: Int): IntSet =\n    if (x < elem) new NonEmpty(elem, left incl x, right)\n    else if (x > elem) new NonEmpty(elem, left, right incl x)\n    else this\n\n  def contains(x: Int): Boolean =\n    if (x < elem) left contains x\n    else if (x > elem) right contains x\n    else true\n\n  override def toString = \"{\" + left + elem + right + \"}\"\n}\n\nval t1 = new NonEmpty(3, new Empty, new Empty)\n// t1: NonEmpty = {.3.}\nval t2 = t1 incl 4\n//t1: NonEmpty = {.3.}\n```\n위에서 IntSet은 Empty와 NonEmpty클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty와 NonEmpty 클래스에서 구현하게 된다.\n\n```\nabstract class Base {\n  def foo = 1\n  def bar: Int\n}\n\nclass Sub extends Base {\n  override def foo = 2\n  def bar = 3\n}\n```\nBase 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)\n자바같은 경우 메소드 오버라이드 할때는 별도의 modifier를 지정해주지 않는다. scala에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.\n\n### object\n여러개의 instance를 만들 필요 없는 클래스 같은 경우에는 간단히 object를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance를 만들 수 없고 단지 하나의 object로 작동한다(singleton object).\n오직 Empty 클래스에만 object를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object는 value라 했으므로, object가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.\nevaluation 측면에서 보자면, 위에서도 얘기 했듯이  object 자체는 이미 value기 때문에 아래와 같이 Empty로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.  \n\n### exercise - union 함수 구현\n\n```\nabstract class IntSet {\n  def incl(x: Int): IntSet\n  def contains(x: Int): Boolean\n  def union(other: IntSet): IntSet\n}\n\nobject Empty extends IntSet {\n  ...\n  def union(other: IntSet) = other\n}\n\nclass NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {\n  ...\n  def union(other: IntSet) =\n    ((left union right) union other) incl elem\n}\n```\n으아... 어렵다\n대략 짐작해보자면, (left union right) 부분이 실행되면 left가 현재 node가 되고 right가 other가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node가 나오게 되는데 leaf node의 left와 right는 모두 Empty이므로 결국 incl elem에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left의 elem을 떼다가 right 트리에 include를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree가 만들어진다.\n\n### 동적 바인딩\n메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.\n \n## 3.2 How Classes Are Organized\n\n### Package\n자바의 패키지 지정 방식과 같다. \n\n```\npackage progfun.examples\n\nobject Hello { ... }\n```\n위와 같은 패키지와 object가 있다면, progfun.examples.Hello와 같은 full qualified name으로 Hello 오브젝트에 접근 가능하다\n\n### import\n\n```\nimport week3.Rational           // imports just Rational\nimport week3.{Rational, Hello}  // imports both Rational and Hello\nimport week3._                  // import everything in package week3\n```\nimport 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object를 가져오기 위해 '_'를 이용할 수 있다.\n\n스칼라 프로그램에서 자동으로 import되는 패키지 또는 obejct\n All members of package scala\n All members of package java.lang\n All members of the singleton object scala.Predef\n\n```\nrequire       scala.Predef.require\nassert        scala.Predef.assert\n```\n\n### Traits\n스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.  \n\n```\ntrait Planar {\n  def height: Int\n  def width: Int\n  def surface = height  width\n}\n\nclass Square extends Shape with Planar with Movable ...\n```\n클래스와 오브젝트 traits 셋다 traits를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits가 자바의 interface와 비슷해보이지만 field를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait가 좀 더 유연하게 사용될 수 있다. 대신 traits는 파라미터를 가질 수 없다는 단점이 있다.\n\n### 스칼라 타입 클래스 구조 (Scala's Class Hierarchy)\n\n\n![스칼라 타입 클래스 구조](http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png)\n\n\n출처 : <http://docs.scala-lang.org/tutorials/tour/unified-types.html>\n\n#### Any\n* 모든 타입의 가장 상위 타입, '==', '!=', \n* 'equals', 'hashCode', 'toString'\n\n#### AnyRef\n* Any 클래스를 상속받는다. \n* 모든 레퍼런스 타입(ex. List, String)의 기본 타입이다. \n* java.lang.Object의 별칭이다.\n\n#### AnyVal\n* Any 클래스를 상속받는다.\n* 모든 primitive types(Int, Float, Char 등)의 베이스 타입이다\n\n#### Scala.Nothing\n* 모든 다른 AnyVal 타입의 subType이다. \n* 값을 가지지 않는다. \n* 함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing을 리턴할 수 있다.\n* 비어있는 collection을 요소 타입으로서 존재 (ex. Set[Nothing])\n\n### Null\n The type of null is Null, null의 타입은 Null이라는 말\n 모든 다른 AnyRef 타입의 subType이다.\n\n```\nval x = null          // x: Null\nval y: String = null  // y: String\nval z: Int = null     // error: type mismatch, 레퍼런스 타입만 적용\n```\n\n## 3.3 Polymorphism\n\n아래 두 Cons 클래스는 동일한 표현이다.\n클래스 파라미터에 value를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.\n\n```\nclass Cons(val head: Int, val tail: IntList) extends IntList { ... }  \n\n// 즉, _head, _tail 은 쓰지 않는 이름\nclass Cons(_head: Int, _tail: IntList) extends IntList {\n  val head = _head\n  val tail = _tail\n}\n```\nCons 클래스와 List trait를 generic하게 구현한다\n\n```\ntrait List[T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nclass Nil[T] extends List[T] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n```\n함수도 제네릭하게 구현할 수 있다.\n\n```\ndef singleton[T](elem: T) = new Cons(elem, new Nil[T])\n\nsingleton[Int](1)\nsingleton[Boolean](true)\n\n// 아래와 같이 호출가능\nsingleton(1)\nsingleton(true)\n```\n마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.\n\n### Polymorphism\n> Polymorphism means that a function type comes \"in many forms\".\n프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.\n\n### 다형성의 두가지 주요개념\n* subtyping : instance of a subclass can be passed to a base class\n* generics : instances of a function or class are created by type parameterization\n\n","source":"_posts/2016-07-26-functional-programming-in-scala-week3.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 3\"\ncategories: programming\ndate:   2016-07-26 23:26:50 +0900\ntags:\n- scala\n- coursera\n---\n\n## 3.1 Class Hierachies\n\n### abstract class (추상 클래스)\n추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).\n\n```\nabstract class IntSet {\n  def incl(x: Int): IntSet\n  def contains(x: Int): Boolean\n}\n\nclass Empty extends IntSet {\n  def incl(x: Int): IntSet = new NonEmpty(x, new Empty, new Empty)\n  def contains(x: Int): Boolean = false\n  override def toString = \".\"\n}\n\nclass NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {\n  def incl(x: Int): IntSet =\n    if (x < elem) new NonEmpty(elem, left incl x, right)\n    else if (x > elem) new NonEmpty(elem, left, right incl x)\n    else this\n\n  def contains(x: Int): Boolean =\n    if (x < elem) left contains x\n    else if (x > elem) right contains x\n    else true\n\n  override def toString = \"{\" + left + elem + right + \"}\"\n}\n\nval t1 = new NonEmpty(3, new Empty, new Empty)\n// t1: NonEmpty = {.3.}\nval t2 = t1 incl 4\n//t1: NonEmpty = {.3.}\n```\n위에서 IntSet은 Empty와 NonEmpty클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty와 NonEmpty 클래스에서 구현하게 된다.\n\n```\nabstract class Base {\n  def foo = 1\n  def bar: Int\n}\n\nclass Sub extends Base {\n  override def foo = 2\n  def bar = 3\n}\n```\nBase 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)\n자바같은 경우 메소드 오버라이드 할때는 별도의 modifier를 지정해주지 않는다. scala에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.\n\n### object\n여러개의 instance를 만들 필요 없는 클래스 같은 경우에는 간단히 object를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance를 만들 수 없고 단지 하나의 object로 작동한다(singleton object).\n오직 Empty 클래스에만 object를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object는 value라 했으므로, object가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.\nevaluation 측면에서 보자면, 위에서도 얘기 했듯이  object 자체는 이미 value기 때문에 아래와 같이 Empty로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.  \n\n### exercise - union 함수 구현\n\n```\nabstract class IntSet {\n  def incl(x: Int): IntSet\n  def contains(x: Int): Boolean\n  def union(other: IntSet): IntSet\n}\n\nobject Empty extends IntSet {\n  ...\n  def union(other: IntSet) = other\n}\n\nclass NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {\n  ...\n  def union(other: IntSet) =\n    ((left union right) union other) incl elem\n}\n```\n으아... 어렵다\n대략 짐작해보자면, (left union right) 부분이 실행되면 left가 현재 node가 되고 right가 other가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node가 나오게 되는데 leaf node의 left와 right는 모두 Empty이므로 결국 incl elem에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left의 elem을 떼다가 right 트리에 include를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree가 만들어진다.\n\n### 동적 바인딩\n메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.\n \n## 3.2 How Classes Are Organized\n\n### Package\n자바의 패키지 지정 방식과 같다. \n\n```\npackage progfun.examples\n\nobject Hello { ... }\n```\n위와 같은 패키지와 object가 있다면, progfun.examples.Hello와 같은 full qualified name으로 Hello 오브젝트에 접근 가능하다\n\n### import\n\n```\nimport week3.Rational           // imports just Rational\nimport week3.{Rational, Hello}  // imports both Rational and Hello\nimport week3._                  // import everything in package week3\n```\nimport 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object를 가져오기 위해 '_'를 이용할 수 있다.\n\n스칼라 프로그램에서 자동으로 import되는 패키지 또는 obejct\n All members of package scala\n All members of package java.lang\n All members of the singleton object scala.Predef\n\n```\nrequire       scala.Predef.require\nassert        scala.Predef.assert\n```\n\n### Traits\n스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.  \n\n```\ntrait Planar {\n  def height: Int\n  def width: Int\n  def surface = height  width\n}\n\nclass Square extends Shape with Planar with Movable ...\n```\n클래스와 오브젝트 traits 셋다 traits를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits가 자바의 interface와 비슷해보이지만 field를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait가 좀 더 유연하게 사용될 수 있다. 대신 traits는 파라미터를 가질 수 없다는 단점이 있다.\n\n### 스칼라 타입 클래스 구조 (Scala's Class Hierarchy)\n\n\n![스칼라 타입 클래스 구조](http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png)\n\n\n출처 : <http://docs.scala-lang.org/tutorials/tour/unified-types.html>\n\n#### Any\n* 모든 타입의 가장 상위 타입, '==', '!=', \n* 'equals', 'hashCode', 'toString'\n\n#### AnyRef\n* Any 클래스를 상속받는다. \n* 모든 레퍼런스 타입(ex. List, String)의 기본 타입이다. \n* java.lang.Object의 별칭이다.\n\n#### AnyVal\n* Any 클래스를 상속받는다.\n* 모든 primitive types(Int, Float, Char 등)의 베이스 타입이다\n\n#### Scala.Nothing\n* 모든 다른 AnyVal 타입의 subType이다. \n* 값을 가지지 않는다. \n* 함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing을 리턴할 수 있다.\n* 비어있는 collection을 요소 타입으로서 존재 (ex. Set[Nothing])\n\n### Null\n The type of null is Null, null의 타입은 Null이라는 말\n 모든 다른 AnyRef 타입의 subType이다.\n\n```\nval x = null          // x: Null\nval y: String = null  // y: String\nval z: Int = null     // error: type mismatch, 레퍼런스 타입만 적용\n```\n\n## 3.3 Polymorphism\n\n아래 두 Cons 클래스는 동일한 표현이다.\n클래스 파라미터에 value를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.\n\n```\nclass Cons(val head: Int, val tail: IntList) extends IntList { ... }  \n\n// 즉, _head, _tail 은 쓰지 않는 이름\nclass Cons(_head: Int, _tail: IntList) extends IntList {\n  val head = _head\n  val tail = _tail\n}\n```\nCons 클래스와 List trait를 generic하게 구현한다\n\n```\ntrait List[T] {\n  def isEmpty: Boolean\n  def head: T\n  def tail: List[T]\n}\n\nclass Cons[T](val head: T, val tail: List[T]) extends List[T] {\n  def isEmpty = false\n}\n\nclass Nil[T] extends List[T] {\n  def isEmpty: Boolean = true\n  def head: Nothing = throw new NoSuchElementException(\"Nil.head\")\n  def tail: Nothing = throw new NoSuchElementException(\"Nil.tail\")\n}\n```\n함수도 제네릭하게 구현할 수 있다.\n\n```\ndef singleton[T](elem: T) = new Cons(elem, new Nil[T])\n\nsingleton[Int](1)\nsingleton[Boolean](true)\n\n// 아래와 같이 호출가능\nsingleton(1)\nsingleton(true)\n```\n마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.\n\n### Polymorphism\n> Polymorphism means that a function type comes \"in many forms\".\n프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.\n\n### 다형성의 두가지 주요개념\n* subtyping : instance of a subclass can be passed to a base class\n* generics : instances of a function or class are created by type parameterization\n\n","slug":"2016-07-26-functional-programming-in-scala-week3","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7a001owxt48sg5cuqo","content":"<h2 id=\"3-1-Class-Hierachies\"><a href=\"#3-1-Class-Hierachies\" class=\"headerlink\" title=\"3.1 Class Hierachies\"></a>3.1 Class Hierachies</h2><h3 id=\"abstract-class-추상-클래스\"><a href=\"#abstract-class-추상-클래스\" class=\"headerlink\" title=\"abstract class (추상 클래스)\"></a>abstract class (추상 클래스)</h3><p>추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span> = <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(x, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"string\">\".\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonEmpty</span>(<span class=\"params\">elem: <span class=\"type\">Int</span>, left: <span class=\"type\">IntSet</span>, right: <span class=\"type\">IntSet</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span> =</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; elem) <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(elem, left incl x, right)</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; elem) <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(elem, left, right incl x)</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span> =</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; elem) left contains x</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; elem) right contains x</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"string\">\"&#123;\"</span> + left + elem + right + <span class=\"string\">\"&#125;\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> t1 = <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>)</div><div class=\"line\"><span class=\"comment\">// t1: NonEmpty = &#123;.3.&#125;</span></div><div class=\"line\"><span class=\"keyword\">val</span> t2 = t1 incl <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">//t1: NonEmpty = &#123;.3.&#125;</span></div></pre></td></tr></table></figure><p>위에서 IntSet은 Empty와 NonEmpty클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty와 NonEmpty 클래스에서 구현하게 된다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span> </span>= <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span> </span>= <span class=\"number\">2</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span> </span>= <span class=\"number\">3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Base 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)<br>자바같은 경우 메소드 오버라이드 할때는 별도의 modifier를 지정해주지 않는다. scala에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.</p><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><p>여러개의 instance를 만들 필요 없는 클래스 같은 경우에는 간단히 object를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance를 만들 수 없고 단지 하나의 object로 작동한다(singleton object).<br>오직 Empty 클래스에만 object를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object는 value라 했으므로, object가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.<br>evaluation 측면에서 보자면, 위에서도 얘기 했듯이 object 자체는 이미 value기 때문에 아래와 같이 Empty로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.</p><h3 id=\"exercise-union-함수-구현\"><a href=\"#exercise-union-함수-구현\" class=\"headerlink\" title=\"exercise - union 함수 구현\"></a>exercise - union 함수 구현</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Empty</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>) = other</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonEmpty</span>(<span class=\"params\">elem: <span class=\"type\">Int</span>, left: <span class=\"type\">IntSet</span>, right: <span class=\"type\">IntSet</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>) =</div><div class=\"line\">    ((left union right) union other) incl elem</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>으아… 어렵다<br>대략 짐작해보자면, (left union right) 부분이 실행되면 left가 현재 node가 되고 right가 other가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node가 나오게 되는데 leaf node의 left와 right는 모두 Empty이므로 결국 incl elem에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left의 elem을 떼다가 right 트리에 include를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree가 만들어진다.</p><h3 id=\"동적-바인딩\"><a href=\"#동적-바인딩\" class=\"headerlink\" title=\"동적 바인딩\"></a>동적 바인딩</h3><p>메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.</p><h2 id=\"3-2-How-Classes-Are-Organized\"><a href=\"#3-2-How-Classes-Are-Organized\" class=\"headerlink\" title=\"3.2 How Classes Are Organized\"></a>3.2 How Classes Are Organized</h2><h3 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h3><p>자바의 패키지 지정 방식과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">package progfun<span class=\"selector-class\">.examples</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">object</span> Hello &#123; ... &#125;</div></pre></td></tr></table></figure><p>위와 같은 패키지와 object가 있다면, progfun.examples.Hello와 같은 full qualified name으로 Hello 오브젝트에 접근 가능하다</p><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> week3.Rational           <span class=\"comment\">// imports just Rational</span></div><div class=\"line\"><span class=\"keyword\">import</span> week3.&#123;Rational, Hello&#125;  <span class=\"comment\">// imports both Rational and Hello</span></div><div class=\"line\"><span class=\"keyword\">import</span> week3._                  <span class=\"comment\">// import everything in package week3</span></div></pre></td></tr></table></figure><p>import 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object를 가져오기 위해 ‘_’를 이용할 수 있다.</p><p>스칼라 프로그램에서 자동으로 import되는 패키지 또는 obejct<br>All members of package scala<br>All members of package java.lang<br>All members of the singleton object scala.Predef</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require       scala<span class=\"selector-class\">.Predef</span><span class=\"selector-class\">.require</span></div><div class=\"line\">assert        scala<span class=\"selector-class\">.Predef</span><span class=\"selector-class\">.assert</span></div></pre></td></tr></table></figure><h3 id=\"Traits\"><a href=\"#Traits\" class=\"headerlink\" title=\"Traits\"></a>Traits</h3><p>스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Planar</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">height</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">surface</span> </span>= height  width</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> <span class=\"keyword\">with</span> <span class=\"title\">Planar</span> <span class=\"keyword\">with</span> <span class=\"title\">Movable</span> ...</span></div></pre></td></tr></table></figure><p>클래스와 오브젝트 traits 셋다 traits를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits가 자바의 interface와 비슷해보이지만 field를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait가 좀 더 유연하게 사용될 수 있다. 대신 traits는 파라미터를 가질 수 없다는 단점이 있다.</p><h3 id=\"스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy\"><a href=\"#스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy\" class=\"headerlink\" title=\"스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)\"></a>스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)</h3><p><img src=\"http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png\" alt=\"스칼라 타입 클래스 구조\"></p><p>출처 : <a href=\"http://docs.scala-lang.org/tutorials/tour/unified-types.html\" target=\"_blank\" rel=\"external\">http://docs.scala-lang.org/tutorials/tour/unified-types.html</a></p><h4 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h4><ul><li>모든 타입의 가장 상위 타입, ‘==’, ‘!=’,</li><li>‘equals’, ‘hashCode’, ‘toString’</li></ul><h4 id=\"AnyRef\"><a href=\"#AnyRef\" class=\"headerlink\" title=\"AnyRef\"></a>AnyRef</h4><ul><li>Any 클래스를 상속받는다.</li><li>모든 레퍼런스 타입(ex. List, String)의 기본 타입이다.</li><li>java.lang.Object의 별칭이다.</li></ul><h4 id=\"AnyVal\"><a href=\"#AnyVal\" class=\"headerlink\" title=\"AnyVal\"></a>AnyVal</h4><ul><li>Any 클래스를 상속받는다.</li><li>모든 primitive types(Int, Float, Char 등)의 베이스 타입이다</li></ul><h4 id=\"Scala-Nothing\"><a href=\"#Scala-Nothing\" class=\"headerlink\" title=\"Scala.Nothing\"></a>Scala.Nothing</h4><ul><li>모든 다른 AnyVal 타입의 subType이다.</li><li>값을 가지지 않는다.</li><li>함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing을 리턴할 수 있다.</li><li>비어있는 collection을 요소 타입으로서 존재 (ex. Set[Nothing])</li></ul><h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><p>The type of null is Null, null의 타입은 Null이라는 말<br>모든 다른 AnyRef 타입의 subType이다.</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"literal\">null</span>          <span class=\"comment\">// x: Null</span></div><div class=\"line\"><span class=\"keyword\">val</span> y: String = <span class=\"literal\">null</span>  <span class=\"comment\">// y: String</span></div><div class=\"line\"><span class=\"keyword\">val</span> z: <span class=\"built_in\">Int</span> = <span class=\"literal\">null</span>     <span class=\"comment\">// error: type mismatch, 레퍼런스 타입만 적용</span></div></pre></td></tr></table></figure><h2 id=\"3-3-Polymorphism\"><a href=\"#3-3-Polymorphism\" class=\"headerlink\" title=\"3.3 Polymorphism\"></a>3.3 Polymorphism</h2><p>아래 두 Cons 클래스는 동일한 표현이다.<br>클래스 파라미터에 value를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>(<span class=\"params\">val head: <span class=\"type\">Int</span>, val tail: <span class=\"type\">IntList</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntList</span> </span>&#123; ... &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 즉, _head, _tail 은 쓰지 않는 이름</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>(<span class=\"params\">_head: <span class=\"type\">Int</span>, _tail: <span class=\"type\">IntList</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntList</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> head = _head</div><div class=\"line\">  <span class=\"keyword\">val</span> tail = _tail</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Cons 클래스와 List trait를 generic하게 구현한다</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nil</span>[<span class=\"type\">T</span>] <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>함수도 제네릭하게 구현할 수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def singleton[<span class=\"string\">T</span>](<span class=\"link\">elem: T</span>) = new Cons(elem, new Nil[T])</div><div class=\"line\"></div><div class=\"line\">singleton[<span class=\"string\">Int</span>](<span class=\"link\">1</span>)</div><div class=\"line\">singleton[<span class=\"string\">Boolean</span>](<span class=\"link\">true</span>)</div><div class=\"line\"></div><div class=\"line\">// 아래와 같이 호출가능</div><div class=\"line\">singleton(1)</div><div class=\"line\">singleton(true)</div></pre></td></tr></table></figure><p>마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.</p><h3 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h3><blockquote><p>Polymorphism means that a function type comes “in many forms”.<br>프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.</p></blockquote><h3 id=\"다형성의-두가지-주요개념\"><a href=\"#다형성의-두가지-주요개념\" class=\"headerlink\" title=\"다형성의 두가지 주요개념\"></a>다형성의 두가지 주요개념</h3><ul><li>subtyping : instance of a subclass can be passed to a base class</li><li>generics : instances of a function or class are created by type parameterization</li></ul>","excerpt":"","more":"<h2 id=\"3-1-Class-Hierachies\"><a href=\"#3-1-Class-Hierachies\" class=\"headerlink\" title=\"3.1 Class Hierachies\"></a>3.1 Class Hierachies</h2><h3 id=\"abstract-class-추상-클래스\"><a href=\"#abstract-class-추상-클래스\" class=\"headerlink\" title=\"abstract class (추상 클래스)\"></a>abstract class (추상 클래스)</h3><p>추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span> = <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(x, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"string\">\".\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonEmpty</span>(<span class=\"params\">elem: <span class=\"type\">Int</span>, left: <span class=\"type\">IntSet</span>, right: <span class=\"type\">IntSet</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span> =</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; elem) <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(elem, left incl x, right)</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; elem) <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(elem, left, right incl x)</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span> =</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; elem) left contains x</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; elem) right contains x</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"string\">\"&#123;\"</span> + left + elem + right + <span class=\"string\">\"&#125;\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> t1 = <span class=\"keyword\">new</span> <span class=\"type\">NonEmpty</span>(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>, <span class=\"keyword\">new</span> <span class=\"type\">Empty</span>)</div><div class=\"line\"><span class=\"comment\">// t1: NonEmpty = &#123;.3.&#125;</span></div><div class=\"line\"><span class=\"keyword\">val</span> t2 = t1 incl <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">//t1: NonEmpty = &#123;.3.&#125;</span></div></pre></td></tr></table></figure><p>위에서 IntSet은 Empty와 NonEmpty클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty와 NonEmpty 클래스에서 구현하게 된다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span> </span>= <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span> </span>= <span class=\"number\">2</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span> </span>= <span class=\"number\">3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Base 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)<br>자바같은 경우 메소드 오버라이드 할때는 별도의 modifier를 지정해주지 않는다. scala에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.</p><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><p>여러개의 instance를 만들 필요 없는 클래스 같은 경우에는 간단히 object를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance를 만들 수 없고 단지 하나의 object로 작동한다(singleton object).<br>오직 Empty 클래스에만 object를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object는 value라 했으므로, object가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.<br>evaluation 측면에서 보자면, 위에서도 얘기 했듯이 object 자체는 이미 value기 때문에 아래와 같이 Empty로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.</p><h3 id=\"exercise-union-함수-구현\"><a href=\"#exercise-union-함수-구현\" class=\"headerlink\" title=\"exercise - union 함수 구현\"></a>exercise - union 함수 구현</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">incl</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">contains</span></span>(x: <span class=\"type\">Int</span>): <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>): <span class=\"type\">IntSet</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Empty</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>) = other</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonEmpty</span>(<span class=\"params\">elem: <span class=\"type\">Int</span>, left: <span class=\"type\">IntSet</span>, right: <span class=\"type\">IntSet</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntSet</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span></span>(other: <span class=\"type\">IntSet</span>) =</div><div class=\"line\">    ((left union right) union other) incl elem</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>으아… 어렵다<br>대략 짐작해보자면, (left union right) 부분이 실행되면 left가 현재 node가 되고 right가 other가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node가 나오게 되는데 leaf node의 left와 right는 모두 Empty이므로 결국 incl elem에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left의 elem을 떼다가 right 트리에 include를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree가 만들어진다.</p><h3 id=\"동적-바인딩\"><a href=\"#동적-바인딩\" class=\"headerlink\" title=\"동적 바인딩\"></a>동적 바인딩</h3><p>메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.</p><h2 id=\"3-2-How-Classes-Are-Organized\"><a href=\"#3-2-How-Classes-Are-Organized\" class=\"headerlink\" title=\"3.2 How Classes Are Organized\"></a>3.2 How Classes Are Organized</h2><h3 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h3><p>자바의 패키지 지정 방식과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">package progfun<span class=\"selector-class\">.examples</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">object</span> Hello &#123; ... &#125;</div></pre></td></tr></table></figure><p>위와 같은 패키지와 object가 있다면, progfun.examples.Hello와 같은 full qualified name으로 Hello 오브젝트에 접근 가능하다</p><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> week3.Rational           <span class=\"comment\">// imports just Rational</span></div><div class=\"line\"><span class=\"keyword\">import</span> week3.&#123;Rational, Hello&#125;  <span class=\"comment\">// imports both Rational and Hello</span></div><div class=\"line\"><span class=\"keyword\">import</span> week3._                  <span class=\"comment\">// import everything in package week3</span></div></pre></td></tr></table></figure><p>import 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object를 가져오기 위해 ‘_’를 이용할 수 있다.</p><p>스칼라 프로그램에서 자동으로 import되는 패키지 또는 obejct<br>All members of package scala<br>All members of package java.lang<br>All members of the singleton object scala.Predef</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require       scala<span class=\"selector-class\">.Predef</span><span class=\"selector-class\">.require</span></div><div class=\"line\">assert        scala<span class=\"selector-class\">.Predef</span><span class=\"selector-class\">.assert</span></div></pre></td></tr></table></figure><h3 id=\"Traits\"><a href=\"#Traits\" class=\"headerlink\" title=\"Traits\"></a>Traits</h3><p>스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Planar</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">height</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span></span>: <span class=\"type\">Int</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">surface</span> </span>= height  width</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> <span class=\"keyword\">with</span> <span class=\"title\">Planar</span> <span class=\"keyword\">with</span> <span class=\"title\">Movable</span> ...</span></div></pre></td></tr></table></figure><p>클래스와 오브젝트 traits 셋다 traits를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits가 자바의 interface와 비슷해보이지만 field를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait가 좀 더 유연하게 사용될 수 있다. 대신 traits는 파라미터를 가질 수 없다는 단점이 있다.</p><h3 id=\"스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy\"><a href=\"#스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy\" class=\"headerlink\" title=\"스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)\"></a>스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)</h3><p><img src=\"http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png\" alt=\"스칼라 타입 클래스 구조\"></p><p>출처 : <a href=\"http://docs.scala-lang.org/tutorials/tour/unified-types.html\">http://docs.scala-lang.org/tutorials/tour/unified-types.html</a></p><h4 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h4><ul><li>모든 타입의 가장 상위 타입, ‘==’, ‘!=’,</li><li>‘equals’, ‘hashCode’, ‘toString’</li></ul><h4 id=\"AnyRef\"><a href=\"#AnyRef\" class=\"headerlink\" title=\"AnyRef\"></a>AnyRef</h4><ul><li>Any 클래스를 상속받는다.</li><li>모든 레퍼런스 타입(ex. List, String)의 기본 타입이다.</li><li>java.lang.Object의 별칭이다.</li></ul><h4 id=\"AnyVal\"><a href=\"#AnyVal\" class=\"headerlink\" title=\"AnyVal\"></a>AnyVal</h4><ul><li>Any 클래스를 상속받는다.</li><li>모든 primitive types(Int, Float, Char 등)의 베이스 타입이다</li></ul><h4 id=\"Scala-Nothing\"><a href=\"#Scala-Nothing\" class=\"headerlink\" title=\"Scala.Nothing\"></a>Scala.Nothing</h4><ul><li>모든 다른 AnyVal 타입의 subType이다.</li><li>값을 가지지 않는다.</li><li>함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing을 리턴할 수 있다.</li><li>비어있는 collection을 요소 타입으로서 존재 (ex. Set[Nothing])</li></ul><h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><p>The type of null is Null, null의 타입은 Null이라는 말<br>모든 다른 AnyRef 타입의 subType이다.</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"literal\">null</span>          <span class=\"comment\">// x: Null</span></div><div class=\"line\"><span class=\"keyword\">val</span> y: String = <span class=\"literal\">null</span>  <span class=\"comment\">// y: String</span></div><div class=\"line\"><span class=\"keyword\">val</span> z: <span class=\"built_in\">Int</span> = <span class=\"literal\">null</span>     <span class=\"comment\">// error: type mismatch, 레퍼런스 타입만 적용</span></div></pre></td></tr></table></figure><h2 id=\"3-3-Polymorphism\"><a href=\"#3-3-Polymorphism\" class=\"headerlink\" title=\"3.3 Polymorphism\"></a>3.3 Polymorphism</h2><p>아래 두 Cons 클래스는 동일한 표현이다.<br>클래스 파라미터에 value를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>(<span class=\"params\">val head: <span class=\"type\">Int</span>, val tail: <span class=\"type\">IntList</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntList</span> </span>&#123; ... &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 즉, _head, _tail 은 쓰지 않는 이름</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>(<span class=\"params\">_head: <span class=\"type\">Int</span>, _tail: <span class=\"type\">IntList</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">IntList</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> head = _head</div><div class=\"line\">  <span class=\"keyword\">val</span> tail = _tail</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Cons 클래스와 List trait를 generic하게 구현한다</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">T</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cons</span>[<span class=\"type\">T</span>](<span class=\"params\">val head: <span class=\"type\">T</span>, val tail: <span class=\"type\">List</span>[<span class=\"type\">T</span>]</span>) <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span> </span>= <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nil</span>[<span class=\"type\">T</span>] <span class=\"keyword\">extends</span> <span class=\"title\">List</span>[<span class=\"type\">T</span>] </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">head</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.head\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tail</span></span>: <span class=\"type\">Nothing</span> = <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">NoSuchElementException</span>(<span class=\"string\">\"Nil.tail\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>함수도 제네릭하게 구현할 수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def singleton[<span class=\"string\">T</span>](<span class=\"link\">elem: T</span>) = new Cons(elem, new Nil[T])</div><div class=\"line\"></div><div class=\"line\">singleton[<span class=\"string\">Int</span>](<span class=\"link\">1</span>)</div><div class=\"line\">singleton[<span class=\"string\">Boolean</span>](<span class=\"link\">true</span>)</div><div class=\"line\"></div><div class=\"line\">// 아래와 같이 호출가능</div><div class=\"line\">singleton(1)</div><div class=\"line\">singleton(true)</div></pre></td></tr></table></figure><p>마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.</p><h3 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h3><blockquote><p>Polymorphism means that a function type comes “in many forms”.<br>프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.</p></blockquote><h3 id=\"다형성의-두가지-주요개념\"><a href=\"#다형성의-두가지-주요개념\" class=\"headerlink\" title=\"다형성의 두가지 주요개념\"></a>다형성의 두가지 주요개념</h3><ul><li>subtyping : instance of a subclass can be passed to a base class</li><li>generics : instances of a function or class are created by type parameterization</li></ul>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 5","date":"2016-07-26T14:28:50.000Z","_content":"## 5.1 More Functions on Lists\n\n이번 챕터에서는 스칼라 List의 다른 메서드 들을 알아본다.\nxs는 list의 object를 뜻한다.\n\n### Sublists and element access\n* xs.length     xs의 길이\n* xs.last       xs의 마지막 item return, xs가 비어있으면 exception 발생\n* xs.init       마지막 item을 제외한 list reutnr, xs가 비어있으면 exception 발생\n* xs take n     처음부터 n개의 element의 list 리턴, n이 xs의 length보다 크면 n개만 리턴\n* xs drop n     n개를 제외한 나머지 리스트 리턴\n* xs(n)       n번째 item 리턴\n\n### Creating new lists\n* xs ++ ys      두 list 더하기, :::와 같은 기능을 함\n* xs.reverse    역순의 리스트 생성\n* xs updated (n, x) n번째 item만 x로 바뀐 list 생성\n\n### Finding elements\n* xs indexOf x    x와 같은 첫번째 element의 index 값 리턴, 없으면 -1\n* xs contains x   indexOf x >= 0 과 같음\n\nlast가 과연 필요한지 모르겠지만(tail을 recursive하게 반복하면 찾을 수 있음), 유용하게 쓰일 수 있다면 last의 복잡도는 어떻게 될까?\n\n```\ndef last[T](xs: List[T]): T = xs match {\n  case List() => throw new Error(\"last of empty list\")\n  case List(x) => x\n  case y :: ys => lsat(ys)  \n}\n```\n위와 같이 list의 길이와 같으므로, 복잡도는 O(n)이 되겠다.\ninit 메서드는 어떨까?\n\n```\ndef init[T](xs: List[T]): List[T] = xs match {\n  case List() => throw new Error(\"init of empty list\")\n  case List(x) => List()\n  case y :: ys => y :: init(ys)   \n}\n```\n마찬가지로 O(n)\n그다음은 concat(Same as :::)\n\n```\ndef concat[T](xs: List[T], ys: List[T]) = xs match {\n  case List() => ys\n  case z :: zs => z :: concat(zs, ys) \n}\n```\n복잡도는 |xs|, 즉 xs 의 길이가 된다.\n다음은 reverse\n\n```\ndef reverse[T](xs: List[T]): List[T] = xs match {\n  case List() => xs\n  case y :: ys => reverse(ys) ++ List(y)\n}\n```\nreverse(ys) :: y 가 아니라 reverse(ys) ++ List(y)인 이유는 ::의 마지막엔 Nil이 와야하니깐 y가 Nil이 아니기 때문이 아닐까 생각한다.\n복잡도는 각 요소마다 concatenating을 해주고 list의 length만큼 reverse를 해야하므로 O(n2)이 되겠다. reverse는 다소 실망스러운 성능을 보여주는데, 앞으로 더 개선해보도록 하겠다.\n\n마지막으로 removeAt\n\n```\ndef removeAt[T](n: Int, xs: List[T]) = (xs take n) ::: (xs drop n+1)\n```\n\n## 5.2 Paires and Tuples\n\n앞서 살펴보앗던 insertion sort보다 더 개선된 merge sort 알고리즘에 대해서 살펴보자. 기본적인 개념은 zero or one element 리스트는 이미 sorted 하다는 것.\n\n```\ndef msort(xs: List[Int]): List[Int] = {\n  val n = xs.length/2\n  if (n == 0) xs\n  else {\n    // merge 메서드는 앞으로 더 개선해 나갈 예정임\n    def merge(xs: List[Int], ys: List[Int]) = \n      xs mathch {\n        case Nil => ys\n        case x :: xs1 =>\n          ys match {\n            case Nil => xs\n            case y :: ys1 =>\n              if (x < y) x :: merge(xs1, ys)\n              else y :: merge(xs, ys1)\n          }\n      }\n\n    val (fst, snd) = xs splitAt n\n    merge(msort(fst), msort(snd))\n  }\n}\n```\n밑에서 나오는 splitAt 함수는 index n을 기준으로 리스트를 두개로 쪼개서 리턴한다. 여기서 리턴된 val의 모양을 보자. fst와 snd 두개의 타입으로 묶여져 있다. 이를 Pair라고 한다. 예를 들면\n\n```\nval pair = (\"answer\", 42) > pair: (String, Int) = (answer,42)  \n\nval (label, value) = pare > label: String = answer | value : Int = 42\n```\n위와 같이 타입으로도 쓰일 수 있고, 패턴으로도 사용될 수 있다. 이때 2개 이상의 요소를 가지면 Tuples라 한다. Tuples는 다양하게 사용될 수 있는데, parameterized type으로 사용될 경우, function applictaion으로 사용될 경우, constructor 패턴으로 사용될 경우 각각 \n\n```\nscala.Tuplen[T1, ..., Tn]\nscala.Tuplen(e1, ..., en)\nscala.Tuplen(p1, ..., pn)\n```\n과 같이 사용할 수 있다. (여기서 Tuplen의 n은 파라미터 개수 ex. Tuple2)\n튜플의 각 element는 _1, _2와 같이 접근할 수 있다.\n이제 merge 메소드를 개선해보자.\n\n```\ndef merge(xs: List[Int], ys: List[Int]): List[Int] = (xs, ys) match {\n  case (Nil, ys) => ys\n  case (xs, Nil) => xs\n  case (x :: xs1, y :: ys1) => \n    if (x < y) x :: merge(xs1, ys)\n    else y :: merge(xs, ys1)\n}\n```\n훨씬 깔끔해졌다.\n\n\n## 5.3 Implicit Parameters\n\n이전 장에서 보았던 msort는 List[Int] 타입으로 지정되어 있는데 parameterize를 통해서 Int 말고도 다른 타입이 들어올 수 있도록 임의의 타입 T로 변경해보자\n\n```\nobject mergesort {\n  def msort[T](xs: List[T]): List[T] = {\n    val n = xs.length/2\n    if (n == 0) xs\n    else {\n      def merge(xs: List[T], ys: List[T]): List[T] = (xs, ys) match {\n        case (Nil, ys) => ys\n        case (xs, Nil) => xs\n        case (x :: xs1, y :: ys1) =>\n          if (x < y) x :: merge(xs1, ys)\n          else y :: merge(xs, ys1)\n      }\n\n      val (fst, snd) = xs splitAt n\n      merge(msort(fst), msort(snd))\n    }\n  }\n\n  val nums = List(2, -4, 5, 7, 1)\n  msort(nums)\n}\n```\nx < y 부분에서 에러가 발생한다. 왜냐하면 comparison '<'가 임의의 타입 T에 정의되어 있지 않기 때문이란다....\n그래서 우리는 comparison 함수가 필요하다. 이 때 가장 유연한 방법은 msort 함수에 comparison operation을 추가적인 파라미터로 붙이는 것이다. 아래처럼\n\n```\ndef msort[T](xs: List[T])(lt: (T, T) => Boolean) = {\n  ...\n  merge(msort(fst)(lt), msort(snd)(lt))\n}\n```\n그래서 원래 mergesort에 적용하면 다음과 같다.\n\n```\nobject mergesort {\n  def msort[T](xs: List[T])(lt: (T, T) => Boolean): List[T] = {\n    val n = xs.length/2\n    if (n == 0) xs\n    else {\n      def merge(xs: List[T], ys: List[T]): List[T] = (xs, ys) match {\n        case (Nil, ys) => ys\n        case (xs, Nil) => xs\n        case (x :: xs1, y :: ys1) =>\n          if (lt(x, y)) x :: merge(xs1, ys)\n          else y :: merge(xs, ys1)\n      }\n\n      val (fst, snd) = xs splitAt n\n      merge(msort(fst)(lt), msort(snd)(lt))\n    }\n  }\n\n  val nums = List(2, -4, 5, 7, 1)\n  msort(nums)((x, y) => x < y)\n\n  val fruits = List(\"apple\", \"pineapple\", \"banana\", \"orange\")\n  msort(fruits)((x, y) => x.compareTo(y) < 0)\n}\n```\n이제 Int 타입 뿐만 아니라 String과 같은 다른 타입도 정렬이 가능해졌다. 이 때 lt에 들어오는 함수 파라미터에 타입 붙이는 걸 생략해도 되는데, 컴파일러가 앞에 있는 리스트의 타입을 보고 유추할 수 있기 때문이란다. 즉 파라미터 셋의 마지막에 function value가 들어오게 되면, 컴파일러가 타입 체크를 미뤄버린다.\n\n### scala.math.Ordering[T]\n사실 ordering을 위한 스탠다드 라이브러리 클래스가 있다. \n> scala.math.Ordering[T]\n\n그래서 lt 명령어를 parameterizing 하는 대신 Orderging 클래스로 parameterize 할 수 있다.\n\n```\ndef msort[T](xs: List[T])(ord: Ordering) = \n\n  def merge(xs: List[T], ys: List[T]) =\n    ... if (ord.lt(x, y)) ...\n\n  ... merge(msort(fst)(ord), msort(snd)(ord)) ...\n```\n\n### implicit\n대체로 완성된 느낌이 나지만, Ordering 함수가 처음 콜 될때부터 계속 전달되는게 좀 비효율적으로 보인다. 그래서 여기에다가 또하나를 추가해보자.\nord 파라미터에 implicit(절대적인이란 뜻) 키워드를 앞에 붙여보자. 그러면, 함수를 실제로 호출하는 부분에서 실제 파라미터를 넣어줄 필요가 없다.\n\n```\ndef msort[T](xs: List[T])(implicit ord: Ordering) = \n\n  def merge(xs: List[T], ys: List[T]) =\n    ... if (ord.lt(x, y)) ...\n\n  ... merge(msort(fst), msort(snd)) ...\n\nval nums = List(2, -4, 5, 7, 1)\nmsort(nums)\n```\n더 간결해졌다. \n\n### Rules for Implicit Parameters\n타입이 T인 implicit 파라미터가 있을때, 컴파일러는 \n> (1) implicit이 쓰인 파라미터에 (2) T와 호환되는 타입을 가지고 (3) function call에서 보이거나 T와 관련된 companion 오브젝트(클래스와 객체 이름이 같은 오브젝트)에서 \nsingle implicit definition을 찾는다. 즉, Ordering[Int]가 함수 call의 파라미터로 존재하지 않지만, implicit으로 처리되어 어딘가에 존재하게 된다.\n\n\n## 5.4 Higher-Order List Functions\n위에서 보았던 예제들은 종종 비슷한 구조를 보여준다. 요약해보면\n* 리스트의 각 element를 변경하는 것\n* 어떤 조건을 만족하는 모든 element의 리스트를 구하는 것\n* 연산자를 사용하여 element들을 결합하는 것\n\n함수형 언어는 higer-order functinos 패턴을 이용하는 generic function을 만들 수 있다.\n\n첫번째 예제는 각 요소를 multiply 하는 것이다.\n\n```\ndef scaleList(xs: List[Double], factor: Double): List[Double] = xs match {\n  case Nil => xs\n  case y :: ys => y * factor :: scaleList(ys, factor)\n}\n```\n\n### Map\n위 예제는 list의 map 메서드를 이용하여 만들 수 있다. \nmap 메서드의 구조를 살펴보면 아래와 같다.\n\n```\nabstract class List[T] { ...\n  def map[U](f: T => U): List[U] = this match {\n    case Nil => this\n    case x :: xs => f(x) :: xs.map(f)\n  } \n}\n```\n파라미터로 들어온 함수f가 각 element에 적용되어서 새로운 리스트를 만들어 내는 함수가 바로 map이다. map 메서드를 이용하면 훨씬 간단하게 작성할 수 있다\n\n```\ndef scaleList(xs: List[Double], factor: Double) =\n  xs.map(x => x * factor)\n```\n또하나의 예제를 살펴보자\n\n```\ndef squareList(xs: List[Int]): List[Int] = xs match {\n  case Nil => Nil\n  case y :: ys => y * y :: squareList(ys)\n}\n\ndef squareList(xs: List[Int]): List[Int] =\n  xs map (y => y * y)\n```\n\n### Filtering\n필터링은 어떤 조건에 맞는 element를 모아 새로운 리스트를 만들어 내는 메서드이다. \n0보다 큰수만 필터링 하는 다음의 함수를 보자\n\n```\ndef posElems(xs: List[Int]): List[Int] = xs match {\n  case Nil => xs\n  case y :: ys => if (y > 0) y :: posElems(ys) else posElems(ys)  \n}\n```\n필터를 이용하면 간단하게 해결할 수 있다. 우선은 filter 메서드가 어떻게 생겼는지부터 살펴보도록 하자.\n\n```\nabstract class List[T] {\n  ...\n  def filter(p: T => Boolean): List[T] = this match {\n    case Nil => this\n    case x :: xs => if (p(x)) x :: xs.filter(p) else xs.filter(p)\n  } \n}\n```\n필터는 특정조건함수(p)가 true이면 :: 연산자를 이용하여 리스트에 붙이고 false이면 제외하는 방식으로 새로운 리스트를 만들어간다.\n그럼 위에서 보았던 posElems를 filter를 이용해 재구성해보자\n\n```\ndef posElems(xs: List[Int]): List[Int] = \n  xs filter(x => x > 0)\n```\n\n그외에 유용한 메서드 목록은 아래와 같다.\n\n* xs filterNot p  xs filter (x => !p(x))와 같다.\n* xs partition p  (xs filter p, xs filterNot) 튜플\n* xs takeWhile p  p를 만족하는 요소들의 가장 긴 리스트 \n* xs dropWhile p  p를 만족하는 요소들의 나머지\n* xs span p       (xs takeWhile p, xs dropWhile p) 튜플\n\n예를 들어보자\n\n```\nscala> val nums = List(2, -4, 5, 7, 1)\nnums: List[Int] = List(2, -4, 5, 7, 1)\n\nscala> nums filter (x => x > 0)\nres0: List[Int] = List(2, 5, 7, 1)\n\nscala> nums filterNot (x => x > 0)\nres1: List[Int] = List(-4)\n\nscala> nums partition (x => x > 0)\nres2: (List[Int], List[Int]) = (List(2, 5, 7, 1),List(-4))\n\nscala> nums takeWhile (x => x > 0)\nres3: List[Int] = List(2)\n\nscala> nums dropWhile (x => x > 0)\nres4: List[Int] = List(-4, 5, 7, 1)\n\nscala> nums span (x => x > 0)\nres5: (List[Int], List[Int]) = (List(2),List(-4, 5, 7, 1))\n```\n\n## 5.5 Reductino of Lists\n5.4절에 이어 higr-order Function 패턴을 이용한 List 메서드에 대해서 계속 알아보도록 하자. 5.4에서 보았던 세가지 패턴 중에 마지막인 element를 결합하는 방법들에 대한 내용들이 되겠다. \n\n```\nsum(List(x1, ..., xn))      = 0 + x1 + ... + xn\nproduct(List(x1, ..., xn))  = 1 * x1 * ... * xn\n```\n### ReduceLeft\n각 요소를 더하거나 곱하는 sum과 product 메서드가 있다. 이를 ReduceLeft 메서드를 이용하여 구현해보도록하자. ReduceLeft 메서드는 아래와 같은 구조를 가진다.\n\n```\nList(x1, ..., xn) reduceLeft op = (...(x1 op x2) op ... ) op xn\n\n// 위의 구조를 이용하면 sum과 product는 아래와 같이 구현가능하다.\ndef sum(xs: List[Int]) = (0 :: xs) reduceLeft ((x, y) => x + y) // or (_ + _)\ndef product(xs: List[Int]) = (1 :: xs) reduceLeft ((x, y) => x * y) // or (_ * _)\n```\n\n### FoldLeft\nfoldLeft 함수는 reduceLeft 함수에 비해 좀더 일반적인 형태이다. foldLeft가 reduceLeft와 비슷하지만, foldLeft는 하나의 accumulator(z)를 가진다.\n구조는 아래와 같다.\n\n```\n(List(x1, ..., xn) foldLeft z)(op) = (...(z op x1) op ...) op xn\n```\nfoldLeft로 sum과 product를 구현해보자\n\n```\ndef sum(xs: List[Int]) = (xs foldLeft 0) (_ + _)\ndef product(xs: List[Int]) = (xs foldLeft 1) (_ * _)\n```\n\nfoldLeft와 reduceLeft는 List class에서 다음과 같이 구현된다.\n\n```\nabstract class List[T] { ...\n  def reduceLeft(op: (T, T) => T): T = this match {\n    case Nil => throw new Error(\"Nil.reduceLeft\")\n    case x :: xs => (xs foldLeft x)(op)\n  }\n  def foldLeft[U](z: U)(op: (U, T) => U): U = this match {\n    case Nil => z\n    case x :: xs => (xs foldLeft op(z, x))(op)\n  }\n}\n```\nreduceLeft도 내부적으로는 foldLeft 메서드를 이용한다.\n그리고 reduceRight와 foldRight도 위의 두 메서드와 비슷한 구조로 동작한다. 대신 좌측이 아닌 우측(뒤)부터 reduce한다.\n\n### Difference between FoldLeft and FoldRight\nfoldLeft와 foldRight는 무엇이 다를까? 기본적으로 sum을 가지고 생각했을때, 왼쪽부터 더하는 것이나 오른쪽부터 더하는 것이나 결과는 동일하다. 하지만 어떤 경우에는 둘 중 하나만 적절할 때도 있다. 아래의 예제를 보자\n\n```\ndef concat[T](xs: List[T], ys: List[T]): List[T] = (xs foldRight ys) (_ :: _)\n```\n위의 함수에서 foldRight를 foldLeft로 변경하면, 타입에러가 발생한다. \n1 :: List(2)는 가능하지만 List(1) :: 2 는 불가능한 연산이기 때문이다.\n\n\n## 5.6 Reasoning About Concat\n\n이번 챕터에서는 어떤 연산자(or 함수)가 정확히 참임을 증명할 수 있는지에 대해 알아보도록 한다.\n일반적으로 natural induction(자연 귀납?)에 의해 증명하는 방법의 예는 다음과 같다. \n\n* P(n)이 모든 n >= b 에대해서\n* P(b)가 참이다. (base case)\n* 이때, 모든 n >= b 에 대해서 P(n)이 참이면, P(n + 1)도 참이다.\n\n### Referential Transparency (참조 투명성)\n순수한 함수형 프로그램에서는 사이드 이펙트가 없기 때문에, reduction steps가 어떤 부분에 대해서도 동일하게 적용된다. 이를 Referential Transparency(참조 투명성)이라 한다.\n\nstructural induction은 natural induction과 비슷하다. \nstructural induction은 다음과 같이 동작한다.\n\n* P(xs)이 모든 리스트 xs에 대해서 \n* P(Nil)이 hold 된다면\n* 리스트 xs와 어떤 element x에 대해서 P(xs)가 hold 되다면, P(x :: xs) 또한 hold 된다.\n\n이제 concat 함수를 다시 살펴보자\n\n```\ndef concat[T](xs: List[T], ys: List[T]) = xs match {\n  case List() => ys\n  case x :: xs1 => x :: concat(xs1, ys)\n}\n```\n그리고 다음의 수식을 structural induction으로 증명해보자\n\n```\n(xs ++ ys) ++ zs = xs ++ (ys ++ zs)\n// ++(concat) 연산자의 두가지 정리를 참고한다\n// Nil ++ ys = ys\n// (x :: xs1) ++ ys = x :: (xs1 ++ ys)\n```\n우선 xs에 Nil이 들어갈 때인 P(Nil)을 살펴보자\n\n```\n// left \n(Nil ++ ys) ++ zs\n= ys ++ zs      // by 1st clause of ++\n\n// right\nNil ++ (ys ++ zs)\n= ys ++ zs      // by 1st clause of ++\n```\n다음은 xs 대신에 induction step인 'x :: xs'를 넣어보자\n\n```\n// left\n((x :: xs) ++ ys) + zs\n= (x :: (xs ++ ys)) ++ zs      // by 2st clause of ++\n= x :: ((xs ++ ys) ++ zs)      // by 2st clause of ++\n= x :: (xs ++ (ys ++ zs))    // by induction hypothesis \n// right\n(x :: xs) ++ (ys ++ zs)\n= x :: (xs ++ (ys ++ zs))    // by 2st clause of ++\n```\n좌변과 우변이 같으므로 함수 P는 증명됨\n\n\n## 5.7 A Larger Equational Proof on Lists\n좀더 까다로운 function인 reverse에 대해서 알아보자\n다음의 두가지 amenable한 사실을 가지고 그 아래의 식을 증명해보자\n\n```\n(1) Nil.reverse = Nil               // 1st clause\n(2) (x :: xs).reverse = xs.reverse ++ List(x)   // 2nd clause\n\n// 다음을 증명\nxs.reverse.reverse = xs\n```\nbase case는 단순하다\n\n```\nNil.reverse.reverse\n= Nil.reverse\n= Nil\n```\n이번엔 reduction step이다.\n\n```\n// left\n(x :: xs).reverse.reverse\n= (xs.reverse ++ List(x)).reverse     // by 2nd clause of reverse\n\n// right\nx :: xs\n= x :: xs.reverse.reverse       // by induction hypothesis (가설에 의해)\n```\n두 개를 합쳐보면,\n\n```\n(xs.reverse ++ List(x)).reverse = x :: xs.reverse.reverse\n```\n직접적으로 induction이 불가하므로, 동일한 연산을 일반화 시켜보자\n여기서는 xs.reverse를 ys로 치환하도록 하자. 그럼 수식이 아래와 같이 바뀐다.\n\n```\n(ys ++ List(x)).reverse = x :: ys.reverse\n```\n그럼 이제 두번째 induction인 ys를 증명하면 동일함을 입증할 수 있겠다.\n우선 base case 부터 살펴보자\n\n```\n// left\n(Nil ++ List(x)).reverse\n= List(x).reverse       // by 1st clause of ++\n= (x :: Nil).reverse    // by definition of List\n= Nil.reverse ++ List(x)\n= Nil ++ (x :: Nil)     // by 2nd clause of reverse\n= x :: Nil          // by 1st clause of ++\n= x :: Nil.reverse      // by 1st clause of reverse\n```\n결과는 우변의 ys에 Nil을 집어넣었을 때와 동일한 결과과 도출되었으므로 base case를 증명되었다. 이제 reduction step으로 가보자\n\n``` \n// left\n((y :: ys) ++ List(x)).reverse\n= (y :: (ys ++ List(x))).reverse    // by 2nd clause of ++\n= (ys ++ List(x)).reverse ++ List(y)  // by 2nd clause reverse\n= (x :: ys.reverse) ++ List(y)      // by the induction hypothesis\n= x :: (ys.reverse ++ List(y))      // by 1st clause of ++\n= x :: (y :: ys).reverse        // by 2nd clause of reverse\n\n// right\nx :: (y :: ys).reverse\n```\n좌변과 우변이 동일하므로 증명되었다.\n\n### Exercise\n\n```\n(xs ++ ys) map f = (xs map f) ++ (ys map f)\n\nNil map f = Nil\n(x :: xs) map f = f(x) :: (xs map f)\n```\nbase case..\n\n```\n// left\n(Nil ++ ys) map f\n= ys map f\n\n// right\n(Nil map f) ++ (ys map f)\n= Nil ++ (ys map f)\n= ys map f\n```\nreduction step\n\n```\n// left\n((x :: xs) ++ ys) map f\n= (x :: (xs ++ ys)) map f\n= f(x) :: ((xs ++ ys) map f)\n= f(x) :: ((xs map f) ++ (ys map f))\n\n// right\n((x :: xs) map f) ++ (ys map f)\n= (f(x) :: (xs map f)) ++ (ys map f)\n= f(x) :: ((xs map f) ++ (ys map f))\n```\nbase case, reduction step 모두 좌변과 우변이 같으므로 같음이 증명되었다.\n","source":"_posts/2016-07-26-functional-programming-in-scala-week5.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 5\"\ncategories: programming\ndate:   2016-07-26 23:28:50 +0900\ntags:\n- scala\n- coursera\n---\n## 5.1 More Functions on Lists\n\n이번 챕터에서는 스칼라 List의 다른 메서드 들을 알아본다.\nxs는 list의 object를 뜻한다.\n\n### Sublists and element access\n* xs.length     xs의 길이\n* xs.last       xs의 마지막 item return, xs가 비어있으면 exception 발생\n* xs.init       마지막 item을 제외한 list reutnr, xs가 비어있으면 exception 발생\n* xs take n     처음부터 n개의 element의 list 리턴, n이 xs의 length보다 크면 n개만 리턴\n* xs drop n     n개를 제외한 나머지 리스트 리턴\n* xs(n)       n번째 item 리턴\n\n### Creating new lists\n* xs ++ ys      두 list 더하기, :::와 같은 기능을 함\n* xs.reverse    역순의 리스트 생성\n* xs updated (n, x) n번째 item만 x로 바뀐 list 생성\n\n### Finding elements\n* xs indexOf x    x와 같은 첫번째 element의 index 값 리턴, 없으면 -1\n* xs contains x   indexOf x >= 0 과 같음\n\nlast가 과연 필요한지 모르겠지만(tail을 recursive하게 반복하면 찾을 수 있음), 유용하게 쓰일 수 있다면 last의 복잡도는 어떻게 될까?\n\n```\ndef last[T](xs: List[T]): T = xs match {\n  case List() => throw new Error(\"last of empty list\")\n  case List(x) => x\n  case y :: ys => lsat(ys)  \n}\n```\n위와 같이 list의 길이와 같으므로, 복잡도는 O(n)이 되겠다.\ninit 메서드는 어떨까?\n\n```\ndef init[T](xs: List[T]): List[T] = xs match {\n  case List() => throw new Error(\"init of empty list\")\n  case List(x) => List()\n  case y :: ys => y :: init(ys)   \n}\n```\n마찬가지로 O(n)\n그다음은 concat(Same as :::)\n\n```\ndef concat[T](xs: List[T], ys: List[T]) = xs match {\n  case List() => ys\n  case z :: zs => z :: concat(zs, ys) \n}\n```\n복잡도는 |xs|, 즉 xs 의 길이가 된다.\n다음은 reverse\n\n```\ndef reverse[T](xs: List[T]): List[T] = xs match {\n  case List() => xs\n  case y :: ys => reverse(ys) ++ List(y)\n}\n```\nreverse(ys) :: y 가 아니라 reverse(ys) ++ List(y)인 이유는 ::의 마지막엔 Nil이 와야하니깐 y가 Nil이 아니기 때문이 아닐까 생각한다.\n복잡도는 각 요소마다 concatenating을 해주고 list의 length만큼 reverse를 해야하므로 O(n2)이 되겠다. reverse는 다소 실망스러운 성능을 보여주는데, 앞으로 더 개선해보도록 하겠다.\n\n마지막으로 removeAt\n\n```\ndef removeAt[T](n: Int, xs: List[T]) = (xs take n) ::: (xs drop n+1)\n```\n\n## 5.2 Paires and Tuples\n\n앞서 살펴보앗던 insertion sort보다 더 개선된 merge sort 알고리즘에 대해서 살펴보자. 기본적인 개념은 zero or one element 리스트는 이미 sorted 하다는 것.\n\n```\ndef msort(xs: List[Int]): List[Int] = {\n  val n = xs.length/2\n  if (n == 0) xs\n  else {\n    // merge 메서드는 앞으로 더 개선해 나갈 예정임\n    def merge(xs: List[Int], ys: List[Int]) = \n      xs mathch {\n        case Nil => ys\n        case x :: xs1 =>\n          ys match {\n            case Nil => xs\n            case y :: ys1 =>\n              if (x < y) x :: merge(xs1, ys)\n              else y :: merge(xs, ys1)\n          }\n      }\n\n    val (fst, snd) = xs splitAt n\n    merge(msort(fst), msort(snd))\n  }\n}\n```\n밑에서 나오는 splitAt 함수는 index n을 기준으로 리스트를 두개로 쪼개서 리턴한다. 여기서 리턴된 val의 모양을 보자. fst와 snd 두개의 타입으로 묶여져 있다. 이를 Pair라고 한다. 예를 들면\n\n```\nval pair = (\"answer\", 42) > pair: (String, Int) = (answer,42)  \n\nval (label, value) = pare > label: String = answer | value : Int = 42\n```\n위와 같이 타입으로도 쓰일 수 있고, 패턴으로도 사용될 수 있다. 이때 2개 이상의 요소를 가지면 Tuples라 한다. Tuples는 다양하게 사용될 수 있는데, parameterized type으로 사용될 경우, function applictaion으로 사용될 경우, constructor 패턴으로 사용될 경우 각각 \n\n```\nscala.Tuplen[T1, ..., Tn]\nscala.Tuplen(e1, ..., en)\nscala.Tuplen(p1, ..., pn)\n```\n과 같이 사용할 수 있다. (여기서 Tuplen의 n은 파라미터 개수 ex. Tuple2)\n튜플의 각 element는 _1, _2와 같이 접근할 수 있다.\n이제 merge 메소드를 개선해보자.\n\n```\ndef merge(xs: List[Int], ys: List[Int]): List[Int] = (xs, ys) match {\n  case (Nil, ys) => ys\n  case (xs, Nil) => xs\n  case (x :: xs1, y :: ys1) => \n    if (x < y) x :: merge(xs1, ys)\n    else y :: merge(xs, ys1)\n}\n```\n훨씬 깔끔해졌다.\n\n\n## 5.3 Implicit Parameters\n\n이전 장에서 보았던 msort는 List[Int] 타입으로 지정되어 있는데 parameterize를 통해서 Int 말고도 다른 타입이 들어올 수 있도록 임의의 타입 T로 변경해보자\n\n```\nobject mergesort {\n  def msort[T](xs: List[T]): List[T] = {\n    val n = xs.length/2\n    if (n == 0) xs\n    else {\n      def merge(xs: List[T], ys: List[T]): List[T] = (xs, ys) match {\n        case (Nil, ys) => ys\n        case (xs, Nil) => xs\n        case (x :: xs1, y :: ys1) =>\n          if (x < y) x :: merge(xs1, ys)\n          else y :: merge(xs, ys1)\n      }\n\n      val (fst, snd) = xs splitAt n\n      merge(msort(fst), msort(snd))\n    }\n  }\n\n  val nums = List(2, -4, 5, 7, 1)\n  msort(nums)\n}\n```\nx < y 부분에서 에러가 발생한다. 왜냐하면 comparison '<'가 임의의 타입 T에 정의되어 있지 않기 때문이란다....\n그래서 우리는 comparison 함수가 필요하다. 이 때 가장 유연한 방법은 msort 함수에 comparison operation을 추가적인 파라미터로 붙이는 것이다. 아래처럼\n\n```\ndef msort[T](xs: List[T])(lt: (T, T) => Boolean) = {\n  ...\n  merge(msort(fst)(lt), msort(snd)(lt))\n}\n```\n그래서 원래 mergesort에 적용하면 다음과 같다.\n\n```\nobject mergesort {\n  def msort[T](xs: List[T])(lt: (T, T) => Boolean): List[T] = {\n    val n = xs.length/2\n    if (n == 0) xs\n    else {\n      def merge(xs: List[T], ys: List[T]): List[T] = (xs, ys) match {\n        case (Nil, ys) => ys\n        case (xs, Nil) => xs\n        case (x :: xs1, y :: ys1) =>\n          if (lt(x, y)) x :: merge(xs1, ys)\n          else y :: merge(xs, ys1)\n      }\n\n      val (fst, snd) = xs splitAt n\n      merge(msort(fst)(lt), msort(snd)(lt))\n    }\n  }\n\n  val nums = List(2, -4, 5, 7, 1)\n  msort(nums)((x, y) => x < y)\n\n  val fruits = List(\"apple\", \"pineapple\", \"banana\", \"orange\")\n  msort(fruits)((x, y) => x.compareTo(y) < 0)\n}\n```\n이제 Int 타입 뿐만 아니라 String과 같은 다른 타입도 정렬이 가능해졌다. 이 때 lt에 들어오는 함수 파라미터에 타입 붙이는 걸 생략해도 되는데, 컴파일러가 앞에 있는 리스트의 타입을 보고 유추할 수 있기 때문이란다. 즉 파라미터 셋의 마지막에 function value가 들어오게 되면, 컴파일러가 타입 체크를 미뤄버린다.\n\n### scala.math.Ordering[T]\n사실 ordering을 위한 스탠다드 라이브러리 클래스가 있다. \n> scala.math.Ordering[T]\n\n그래서 lt 명령어를 parameterizing 하는 대신 Orderging 클래스로 parameterize 할 수 있다.\n\n```\ndef msort[T](xs: List[T])(ord: Ordering) = \n\n  def merge(xs: List[T], ys: List[T]) =\n    ... if (ord.lt(x, y)) ...\n\n  ... merge(msort(fst)(ord), msort(snd)(ord)) ...\n```\n\n### implicit\n대체로 완성된 느낌이 나지만, Ordering 함수가 처음 콜 될때부터 계속 전달되는게 좀 비효율적으로 보인다. 그래서 여기에다가 또하나를 추가해보자.\nord 파라미터에 implicit(절대적인이란 뜻) 키워드를 앞에 붙여보자. 그러면, 함수를 실제로 호출하는 부분에서 실제 파라미터를 넣어줄 필요가 없다.\n\n```\ndef msort[T](xs: List[T])(implicit ord: Ordering) = \n\n  def merge(xs: List[T], ys: List[T]) =\n    ... if (ord.lt(x, y)) ...\n\n  ... merge(msort(fst), msort(snd)) ...\n\nval nums = List(2, -4, 5, 7, 1)\nmsort(nums)\n```\n더 간결해졌다. \n\n### Rules for Implicit Parameters\n타입이 T인 implicit 파라미터가 있을때, 컴파일러는 \n> (1) implicit이 쓰인 파라미터에 (2) T와 호환되는 타입을 가지고 (3) function call에서 보이거나 T와 관련된 companion 오브젝트(클래스와 객체 이름이 같은 오브젝트)에서 \nsingle implicit definition을 찾는다. 즉, Ordering[Int]가 함수 call의 파라미터로 존재하지 않지만, implicit으로 처리되어 어딘가에 존재하게 된다.\n\n\n## 5.4 Higher-Order List Functions\n위에서 보았던 예제들은 종종 비슷한 구조를 보여준다. 요약해보면\n* 리스트의 각 element를 변경하는 것\n* 어떤 조건을 만족하는 모든 element의 리스트를 구하는 것\n* 연산자를 사용하여 element들을 결합하는 것\n\n함수형 언어는 higer-order functinos 패턴을 이용하는 generic function을 만들 수 있다.\n\n첫번째 예제는 각 요소를 multiply 하는 것이다.\n\n```\ndef scaleList(xs: List[Double], factor: Double): List[Double] = xs match {\n  case Nil => xs\n  case y :: ys => y * factor :: scaleList(ys, factor)\n}\n```\n\n### Map\n위 예제는 list의 map 메서드를 이용하여 만들 수 있다. \nmap 메서드의 구조를 살펴보면 아래와 같다.\n\n```\nabstract class List[T] { ...\n  def map[U](f: T => U): List[U] = this match {\n    case Nil => this\n    case x :: xs => f(x) :: xs.map(f)\n  } \n}\n```\n파라미터로 들어온 함수f가 각 element에 적용되어서 새로운 리스트를 만들어 내는 함수가 바로 map이다. map 메서드를 이용하면 훨씬 간단하게 작성할 수 있다\n\n```\ndef scaleList(xs: List[Double], factor: Double) =\n  xs.map(x => x * factor)\n```\n또하나의 예제를 살펴보자\n\n```\ndef squareList(xs: List[Int]): List[Int] = xs match {\n  case Nil => Nil\n  case y :: ys => y * y :: squareList(ys)\n}\n\ndef squareList(xs: List[Int]): List[Int] =\n  xs map (y => y * y)\n```\n\n### Filtering\n필터링은 어떤 조건에 맞는 element를 모아 새로운 리스트를 만들어 내는 메서드이다. \n0보다 큰수만 필터링 하는 다음의 함수를 보자\n\n```\ndef posElems(xs: List[Int]): List[Int] = xs match {\n  case Nil => xs\n  case y :: ys => if (y > 0) y :: posElems(ys) else posElems(ys)  \n}\n```\n필터를 이용하면 간단하게 해결할 수 있다. 우선은 filter 메서드가 어떻게 생겼는지부터 살펴보도록 하자.\n\n```\nabstract class List[T] {\n  ...\n  def filter(p: T => Boolean): List[T] = this match {\n    case Nil => this\n    case x :: xs => if (p(x)) x :: xs.filter(p) else xs.filter(p)\n  } \n}\n```\n필터는 특정조건함수(p)가 true이면 :: 연산자를 이용하여 리스트에 붙이고 false이면 제외하는 방식으로 새로운 리스트를 만들어간다.\n그럼 위에서 보았던 posElems를 filter를 이용해 재구성해보자\n\n```\ndef posElems(xs: List[Int]): List[Int] = \n  xs filter(x => x > 0)\n```\n\n그외에 유용한 메서드 목록은 아래와 같다.\n\n* xs filterNot p  xs filter (x => !p(x))와 같다.\n* xs partition p  (xs filter p, xs filterNot) 튜플\n* xs takeWhile p  p를 만족하는 요소들의 가장 긴 리스트 \n* xs dropWhile p  p를 만족하는 요소들의 나머지\n* xs span p       (xs takeWhile p, xs dropWhile p) 튜플\n\n예를 들어보자\n\n```\nscala> val nums = List(2, -4, 5, 7, 1)\nnums: List[Int] = List(2, -4, 5, 7, 1)\n\nscala> nums filter (x => x > 0)\nres0: List[Int] = List(2, 5, 7, 1)\n\nscala> nums filterNot (x => x > 0)\nres1: List[Int] = List(-4)\n\nscala> nums partition (x => x > 0)\nres2: (List[Int], List[Int]) = (List(2, 5, 7, 1),List(-4))\n\nscala> nums takeWhile (x => x > 0)\nres3: List[Int] = List(2)\n\nscala> nums dropWhile (x => x > 0)\nres4: List[Int] = List(-4, 5, 7, 1)\n\nscala> nums span (x => x > 0)\nres5: (List[Int], List[Int]) = (List(2),List(-4, 5, 7, 1))\n```\n\n## 5.5 Reductino of Lists\n5.4절에 이어 higr-order Function 패턴을 이용한 List 메서드에 대해서 계속 알아보도록 하자. 5.4에서 보았던 세가지 패턴 중에 마지막인 element를 결합하는 방법들에 대한 내용들이 되겠다. \n\n```\nsum(List(x1, ..., xn))      = 0 + x1 + ... + xn\nproduct(List(x1, ..., xn))  = 1 * x1 * ... * xn\n```\n### ReduceLeft\n각 요소를 더하거나 곱하는 sum과 product 메서드가 있다. 이를 ReduceLeft 메서드를 이용하여 구현해보도록하자. ReduceLeft 메서드는 아래와 같은 구조를 가진다.\n\n```\nList(x1, ..., xn) reduceLeft op = (...(x1 op x2) op ... ) op xn\n\n// 위의 구조를 이용하면 sum과 product는 아래와 같이 구현가능하다.\ndef sum(xs: List[Int]) = (0 :: xs) reduceLeft ((x, y) => x + y) // or (_ + _)\ndef product(xs: List[Int]) = (1 :: xs) reduceLeft ((x, y) => x * y) // or (_ * _)\n```\n\n### FoldLeft\nfoldLeft 함수는 reduceLeft 함수에 비해 좀더 일반적인 형태이다. foldLeft가 reduceLeft와 비슷하지만, foldLeft는 하나의 accumulator(z)를 가진다.\n구조는 아래와 같다.\n\n```\n(List(x1, ..., xn) foldLeft z)(op) = (...(z op x1) op ...) op xn\n```\nfoldLeft로 sum과 product를 구현해보자\n\n```\ndef sum(xs: List[Int]) = (xs foldLeft 0) (_ + _)\ndef product(xs: List[Int]) = (xs foldLeft 1) (_ * _)\n```\n\nfoldLeft와 reduceLeft는 List class에서 다음과 같이 구현된다.\n\n```\nabstract class List[T] { ...\n  def reduceLeft(op: (T, T) => T): T = this match {\n    case Nil => throw new Error(\"Nil.reduceLeft\")\n    case x :: xs => (xs foldLeft x)(op)\n  }\n  def foldLeft[U](z: U)(op: (U, T) => U): U = this match {\n    case Nil => z\n    case x :: xs => (xs foldLeft op(z, x))(op)\n  }\n}\n```\nreduceLeft도 내부적으로는 foldLeft 메서드를 이용한다.\n그리고 reduceRight와 foldRight도 위의 두 메서드와 비슷한 구조로 동작한다. 대신 좌측이 아닌 우측(뒤)부터 reduce한다.\n\n### Difference between FoldLeft and FoldRight\nfoldLeft와 foldRight는 무엇이 다를까? 기본적으로 sum을 가지고 생각했을때, 왼쪽부터 더하는 것이나 오른쪽부터 더하는 것이나 결과는 동일하다. 하지만 어떤 경우에는 둘 중 하나만 적절할 때도 있다. 아래의 예제를 보자\n\n```\ndef concat[T](xs: List[T], ys: List[T]): List[T] = (xs foldRight ys) (_ :: _)\n```\n위의 함수에서 foldRight를 foldLeft로 변경하면, 타입에러가 발생한다. \n1 :: List(2)는 가능하지만 List(1) :: 2 는 불가능한 연산이기 때문이다.\n\n\n## 5.6 Reasoning About Concat\n\n이번 챕터에서는 어떤 연산자(or 함수)가 정확히 참임을 증명할 수 있는지에 대해 알아보도록 한다.\n일반적으로 natural induction(자연 귀납?)에 의해 증명하는 방법의 예는 다음과 같다. \n\n* P(n)이 모든 n >= b 에대해서\n* P(b)가 참이다. (base case)\n* 이때, 모든 n >= b 에 대해서 P(n)이 참이면, P(n + 1)도 참이다.\n\n### Referential Transparency (참조 투명성)\n순수한 함수형 프로그램에서는 사이드 이펙트가 없기 때문에, reduction steps가 어떤 부분에 대해서도 동일하게 적용된다. 이를 Referential Transparency(참조 투명성)이라 한다.\n\nstructural induction은 natural induction과 비슷하다. \nstructural induction은 다음과 같이 동작한다.\n\n* P(xs)이 모든 리스트 xs에 대해서 \n* P(Nil)이 hold 된다면\n* 리스트 xs와 어떤 element x에 대해서 P(xs)가 hold 되다면, P(x :: xs) 또한 hold 된다.\n\n이제 concat 함수를 다시 살펴보자\n\n```\ndef concat[T](xs: List[T], ys: List[T]) = xs match {\n  case List() => ys\n  case x :: xs1 => x :: concat(xs1, ys)\n}\n```\n그리고 다음의 수식을 structural induction으로 증명해보자\n\n```\n(xs ++ ys) ++ zs = xs ++ (ys ++ zs)\n// ++(concat) 연산자의 두가지 정리를 참고한다\n// Nil ++ ys = ys\n// (x :: xs1) ++ ys = x :: (xs1 ++ ys)\n```\n우선 xs에 Nil이 들어갈 때인 P(Nil)을 살펴보자\n\n```\n// left \n(Nil ++ ys) ++ zs\n= ys ++ zs      // by 1st clause of ++\n\n// right\nNil ++ (ys ++ zs)\n= ys ++ zs      // by 1st clause of ++\n```\n다음은 xs 대신에 induction step인 'x :: xs'를 넣어보자\n\n```\n// left\n((x :: xs) ++ ys) + zs\n= (x :: (xs ++ ys)) ++ zs      // by 2st clause of ++\n= x :: ((xs ++ ys) ++ zs)      // by 2st clause of ++\n= x :: (xs ++ (ys ++ zs))    // by induction hypothesis \n// right\n(x :: xs) ++ (ys ++ zs)\n= x :: (xs ++ (ys ++ zs))    // by 2st clause of ++\n```\n좌변과 우변이 같으므로 함수 P는 증명됨\n\n\n## 5.7 A Larger Equational Proof on Lists\n좀더 까다로운 function인 reverse에 대해서 알아보자\n다음의 두가지 amenable한 사실을 가지고 그 아래의 식을 증명해보자\n\n```\n(1) Nil.reverse = Nil               // 1st clause\n(2) (x :: xs).reverse = xs.reverse ++ List(x)   // 2nd clause\n\n// 다음을 증명\nxs.reverse.reverse = xs\n```\nbase case는 단순하다\n\n```\nNil.reverse.reverse\n= Nil.reverse\n= Nil\n```\n이번엔 reduction step이다.\n\n```\n// left\n(x :: xs).reverse.reverse\n= (xs.reverse ++ List(x)).reverse     // by 2nd clause of reverse\n\n// right\nx :: xs\n= x :: xs.reverse.reverse       // by induction hypothesis (가설에 의해)\n```\n두 개를 합쳐보면,\n\n```\n(xs.reverse ++ List(x)).reverse = x :: xs.reverse.reverse\n```\n직접적으로 induction이 불가하므로, 동일한 연산을 일반화 시켜보자\n여기서는 xs.reverse를 ys로 치환하도록 하자. 그럼 수식이 아래와 같이 바뀐다.\n\n```\n(ys ++ List(x)).reverse = x :: ys.reverse\n```\n그럼 이제 두번째 induction인 ys를 증명하면 동일함을 입증할 수 있겠다.\n우선 base case 부터 살펴보자\n\n```\n// left\n(Nil ++ List(x)).reverse\n= List(x).reverse       // by 1st clause of ++\n= (x :: Nil).reverse    // by definition of List\n= Nil.reverse ++ List(x)\n= Nil ++ (x :: Nil)     // by 2nd clause of reverse\n= x :: Nil          // by 1st clause of ++\n= x :: Nil.reverse      // by 1st clause of reverse\n```\n결과는 우변의 ys에 Nil을 집어넣었을 때와 동일한 결과과 도출되었으므로 base case를 증명되었다. 이제 reduction step으로 가보자\n\n``` \n// left\n((y :: ys) ++ List(x)).reverse\n= (y :: (ys ++ List(x))).reverse    // by 2nd clause of ++\n= (ys ++ List(x)).reverse ++ List(y)  // by 2nd clause reverse\n= (x :: ys.reverse) ++ List(y)      // by the induction hypothesis\n= x :: (ys.reverse ++ List(y))      // by 1st clause of ++\n= x :: (y :: ys).reverse        // by 2nd clause of reverse\n\n// right\nx :: (y :: ys).reverse\n```\n좌변과 우변이 동일하므로 증명되었다.\n\n### Exercise\n\n```\n(xs ++ ys) map f = (xs map f) ++ (ys map f)\n\nNil map f = Nil\n(x :: xs) map f = f(x) :: (xs map f)\n```\nbase case..\n\n```\n// left\n(Nil ++ ys) map f\n= ys map f\n\n// right\n(Nil map f) ++ (ys map f)\n= Nil ++ (ys map f)\n= ys map f\n```\nreduction step\n\n```\n// left\n((x :: xs) ++ ys) map f\n= (x :: (xs ++ ys)) map f\n= f(x) :: ((xs ++ ys) map f)\n= f(x) :: ((xs map f) ++ (ys map f))\n\n// right\n((x :: xs) map f) ++ (ys map f)\n= (f(x) :: (xs map f)) ++ (ys map f)\n= f(x) :: ((xs map f) ++ (ys map f))\n```\nbase case, reduction step 모두 좌변과 우변이 같으므로 같음이 증명되었다.\n","slug":"2016-07-26-functional-programming-in-scala-week5","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7c001rwxt409rbdlrl","content":"<h2 id=\"5-1-More-Functions-on-Lists\"><a href=\"#5-1-More-Functions-on-Lists\" class=\"headerlink\" title=\"5.1 More Functions on Lists\"></a>5.1 More Functions on Lists</h2><p>이번 챕터에서는 스칼라 List의 다른 메서드 들을 알아본다.<br>xs는 list의 object를 뜻한다.</p><h3 id=\"Sublists-and-element-access\"><a href=\"#Sublists-and-element-access\" class=\"headerlink\" title=\"Sublists and element access\"></a>Sublists and element access</h3><ul><li>xs.length xs의 길이</li><li>xs.last xs의 마지막 item return, xs가 비어있으면 exception 발생</li><li>xs.init 마지막 item을 제외한 list reutnr, xs가 비어있으면 exception 발생</li><li>xs take n 처음부터 n개의 element의 list 리턴, n이 xs의 length보다 크면 n개만 리턴</li><li>xs drop n n개를 제외한 나머지 리스트 리턴</li><li>xs(n) n번째 item 리턴</li></ul><h3 id=\"Creating-new-lists\"><a href=\"#Creating-new-lists\" class=\"headerlink\" title=\"Creating new lists\"></a>Creating new lists</h3><ul><li>xs ++ ys 두 list 더하기, :::와 같은 기능을 함</li><li>xs.reverse 역순의 리스트 생성</li><li>xs updated (n, x) n번째 item만 x로 바뀐 list 생성</li></ul><h3 id=\"Finding-elements\"><a href=\"#Finding-elements\" class=\"headerlink\" title=\"Finding elements\"></a>Finding elements</h3><ul><li>xs indexOf x x와 같은 첫번째 element의 index 값 리턴, 없으면 -1</li><li>xs contains x indexOf x &gt;= 0 과 같음</li></ul><p>last가 과연 필요한지 모르겠지만(tail을 recursive하게 반복하면 찾을 수 있음), 유용하게 쓰일 수 있다면 last의 복잡도는 어떻게 될까?</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def last[T](xs: <span class=\"built_in\">List</span>[T]): T = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>() =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"last of empty list\"</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>(x) =&gt; x</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; lsat(ys)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>위와 같이 list의 길이와 같으므로, 복잡도는 O(n)이 되겠다.<br>init 메서드는 어떨까?</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def init[T](xs: <span class=\"built_in\">List</span>[T]): <span class=\"built_in\">List</span>[T] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>() =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"init of empty list\"</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>(x) =&gt; <span class=\"built_in\">List</span>()</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y :: init(ys)   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>마찬가지로 O(n)<br>그다음은 concat(Same as :::)</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>) = xs match &#123;</div><div class=\"line\">  case List() =&gt; ys</div><div class=\"line\">  case z :: zs =&gt; z :: concat(zs, ys) </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>복잡도는 |xs|, 즉 xs 의 길이가 된다.<br>다음은 reverse</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def reverse[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>): List[T] = xs match &#123;</div><div class=\"line\">  case List() =&gt; xs</div><div class=\"line\">  case y :: ys =&gt; reverse(ys) ++ List(y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>reverse(ys) :: y 가 아니라 reverse(ys) ++ List(y)인 이유는 ::의 마지막엔 Nil이 와야하니깐 y가 Nil이 아니기 때문이 아닐까 생각한다.<br>복잡도는 각 요소마다 concatenating을 해주고 list의 length만큼 reverse를 해야하므로 O(n2)이 되겠다. reverse는 다소 실망스러운 성능을 보여주는데, 앞으로 더 개선해보도록 하겠다.</p><p>마지막으로 removeAt</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def removeAt[<span class=\"string\">T</span>](<span class=\"link\">n: Int, xs: List[T]</span>) = (xs take n) ::: (xs drop n+1)</div></pre></td></tr></table></figure><h2 id=\"5-2-Paires-and-Tuples\"><a href=\"#5-2-Paires-and-Tuples\" class=\"headerlink\" title=\"5.2 Paires and Tuples\"></a>5.2 Paires and Tuples</h2><p>앞서 살펴보앗던 insertion sort보다 더 개선된 merge sort 알고리즘에 대해서 살펴보자. 기본적인 개념은 zero or one element 리스트는 이미 sorted 하다는 것.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  val n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// merge 메서드는 앞으로 더 개선해 나갈 예정임</span></div><div class=\"line\">    def merge(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], ys: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = </div><div class=\"line\">      xs mathch &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> Nil =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> x :: xs1 =&gt;</div><div class=\"line\">          ys match &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">            <span class=\"keyword\">case</span> y :: ys1 =&gt;</div><div class=\"line\">              <span class=\"keyword\">if</span> (x &lt; y) x :: merge(xs1, ys)</div><div class=\"line\">              <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    val (fst, snd) = xs splitAt n</div><div class=\"line\">    merge(msort(fst), msort(snd))</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>밑에서 나오는 splitAt 함수는 index n을 기준으로 리스트를 두개로 쪼개서 리턴한다. 여기서 리턴된 val의 모양을 보자. fst와 snd 두개의 타입으로 묶여져 있다. 이를 Pair라고 한다. 예를 들면</p><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val pair = (<span class=\"string\">\"answer\"</span>, <span class=\"number\">42</span>) &gt; pair: (<span class=\"built_in\">String</span>, <span class=\"built_in\">Int</span>) = (answer,<span class=\"number\">42</span>)  </div><div class=\"line\"></div><div class=\"line\">val (label, value) = pare &gt; label: <span class=\"built_in\">String</span> = answer | value : <span class=\"built_in\">Int</span> = <span class=\"number\">42</span></div></pre></td></tr></table></figure><p>위와 같이 타입으로도 쓰일 수 있고, 패턴으로도 사용될 수 있다. 이때 2개 이상의 요소를 가지면 Tuples라 한다. Tuples는 다양하게 사용될 수 있는데, parameterized type으로 사용될 경우, function applictaion으로 사용될 경우, constructor 패턴으로 사용될 경우 각각</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span><span class=\"selector-attr\">[T1, ..., Tn]</span></div><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span>(<span class=\"selector-tag\">e1</span>, ..., <span class=\"selector-tag\">en</span>)</div><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span>(<span class=\"selector-tag\">p1</span>, ..., <span class=\"selector-tag\">pn</span>)</div></pre></td></tr></table></figure><p>과 같이 사용할 수 있다. (여기서 Tuplen의 n은 파라미터 개수 ex. Tuple2)<br>튜플의 각 element는 _1, _2와 같이 접근할 수 있다.<br>이제 merge 메소드를 개선해보자.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">merge</span>(xs: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>], ys: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>] = (xs, ys) <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (Nil, ys) =&gt; ys</div><div class=\"line\">  <span class=\"keyword\">case</span> (xs, Nil) =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt; </div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; y) x :: <span class=\"keyword\">merge</span>(xs1, ys)</div><div class=\"line\">    <span class=\"keyword\">else</span> y :: <span class=\"keyword\">merge</span>(xs, ys1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>훨씬 깔끔해졌다.</p><h2 id=\"5-3-Implicit-Parameters\"><a href=\"#5-3-Implicit-Parameters\" class=\"headerlink\" title=\"5.3 Implicit Parameters\"></a>5.3 Implicit Parameters</h2><p>이전 장에서 보았던 msort는 List[Int] 타입으로 지정되어 있는데 parameterize를 통해서 Int 말고도 다른 타입이 들어올 수 있도록 임의의 타입 T로 변경해보자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">mergesort</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">msort</span></span>[<span class=\"type\">T</span>](xs: <span class=\"type\">List</span>[<span class=\"type\">T</span>]): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span></span>(xs: <span class=\"type\">List</span>[<span class=\"type\">T</span>], ys: <span class=\"type\">List</span>[<span class=\"type\">T</span>]): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = (xs, ys) <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> (<span class=\"type\">Nil</span>, ys) =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> (xs, <span class=\"type\">Nil</span>) =&gt; xs</div><div class=\"line\">        <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span> (x &lt; y) x :: merge(xs1, ys)</div><div class=\"line\">          <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">val</span> (fst, snd) = xs splitAt n</div><div class=\"line\">      merge(msort(fst), msort(snd))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">val</span> nums = <span class=\"type\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  msort(nums)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>x &lt; y 부분에서 에러가 발생한다. 왜냐하면 comparison ‘&lt;’가 임의의 타입 T에 정의되어 있지 않기 때문이란다….<br>그래서 우리는 comparison 함수가 필요하다. 이 때 가장 유연한 방법은 msort 함수에 comparison operation을 추가적인 파라미터로 붙이는 것이다. 아래처럼</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>)(lt: (T, T) =&gt; Boolean) = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  merge(msort(fst)(lt), msort(snd)(lt))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그래서 원래 mergesort에 적용하면 다음과 같다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">object mergesort &#123;</div><div class=\"line\">  def msort[T](xs: <span class=\"keyword\">List</span>[T])(lt: (T, T) =&gt; <span class=\"keyword\">Boolean</span>): <span class=\"keyword\">List</span>[T] = &#123;</div><div class=\"line\">    val n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      def merge(xs: <span class=\"keyword\">List</span>[T], ys: <span class=\"keyword\">List</span>[T]): <span class=\"keyword\">List</span>[T] = (xs, ys) match &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> (Nil, ys) =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> (xs, Nil) =&gt; xs</div><div class=\"line\">        <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span> (lt(x, y)) x :: merge(xs1, ys)</div><div class=\"line\">          <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      val (fst, snd) = xs splitAt n</div><div class=\"line\">      merge(msort(fst)(lt), msort(snd)(lt))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  val nums = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  msort(nums)((x, y) =&gt; x &lt; y)</div><div class=\"line\"></div><div class=\"line\">  val fruits = <span class=\"keyword\">List</span>(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pineapple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"orange\"</span>)</div><div class=\"line\">  msort(fruits)((x, y) =&gt; x.compareTo(y) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>이제 Int 타입 뿐만 아니라 String과 같은 다른 타입도 정렬이 가능해졌다. 이 때 lt에 들어오는 함수 파라미터에 타입 붙이는 걸 생략해도 되는데, 컴파일러가 앞에 있는 리스트의 타입을 보고 유추할 수 있기 때문이란다. 즉 파라미터 셋의 마지막에 function value가 들어오게 되면, 컴파일러가 타입 체크를 미뤄버린다.</p><h3 id=\"scala-math-Ordering-T\"><a href=\"#scala-math-Ordering-T\" class=\"headerlink\" title=\"scala.math.Ordering[T]\"></a>scala.math.Ordering[T]</h3><p>사실 ordering을 위한 스탠다드 라이브러리 클래스가 있다.</p><blockquote><p>scala.math.Ordering[T]</p></blockquote><p>그래서 lt 명령어를 parameterizing 하는 대신 Orderging 클래스로 parameterize 할 수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>)(ord: Ordering) = </div><div class=\"line\"></div><div class=\"line\">  def merge(xs: List[T], ys: List[T]) =</div><div class=\"line\"><span class=\"code\">    ... if (ord.lt(x, y)) ...</span></div><div class=\"line\"></div><div class=\"line\">  ... merge(msort(fst)(ord), msort(snd)(ord)) ...</div></pre></td></tr></table></figure><h3 id=\"implicit\"><a href=\"#implicit\" class=\"headerlink\" title=\"implicit\"></a>implicit</h3><p>대체로 완성된 느낌이 나지만, Ordering 함수가 처음 콜 될때부터 계속 전달되는게 좀 비효율적으로 보인다. 그래서 여기에다가 또하나를 추가해보자.<br>ord 파라미터에 implicit(절대적인이란 뜻) 키워드를 앞에 붙여보자. 그러면, 함수를 실제로 호출하는 부분에서 실제 파라미터를 넣어줄 필요가 없다.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[T](xs: List[T])(<span class=\"keyword\">implicit</span> ord: Ordering) = </div><div class=\"line\"></div><div class=\"line\">  def <span class=\"built_in\">merge</span>(xs: List[T], ys: List[T]) =</div><div class=\"line\">    ... <span class=\"keyword\">if</span> (ord.lt(x, y)) ...</div><div class=\"line\"></div><div class=\"line\">  ... <span class=\"built_in\">merge</span>(msort(fst), msort(snd)) ...</div><div class=\"line\"></div><div class=\"line\">val nums = List(<span class=\"number\">2</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">msort(nums)</div></pre></td></tr></table></figure><p>더 간결해졌다.</p><h3 id=\"Rules-for-Implicit-Parameters\"><a href=\"#Rules-for-Implicit-Parameters\" class=\"headerlink\" title=\"Rules for Implicit Parameters\"></a>Rules for Implicit Parameters</h3><p>타입이 T인 implicit 파라미터가 있을때, 컴파일러는</p><blockquote><p>(1) implicit이 쓰인 파라미터에 (2) T와 호환되는 타입을 가지고 (3) function call에서 보이거나 T와 관련된 companion 오브젝트(클래스와 객체 이름이 같은 오브젝트)에서<br>single implicit definition을 찾는다. 즉, Ordering[Int]가 함수 call의 파라미터로 존재하지 않지만, implicit으로 처리되어 어딘가에 존재하게 된다.</p></blockquote><h2 id=\"5-4-Higher-Order-List-Functions\"><a href=\"#5-4-Higher-Order-List-Functions\" class=\"headerlink\" title=\"5.4 Higher-Order List Functions\"></a>5.4 Higher-Order List Functions</h2><p>위에서 보았던 예제들은 종종 비슷한 구조를 보여준다. 요약해보면</p><ul><li>리스트의 각 element를 변경하는 것</li><li>어떤 조건을 만족하는 모든 element의 리스트를 구하는 것</li><li>연산자를 사용하여 element들을 결합하는 것</li></ul><p>함수형 언어는 higer-order functinos 패턴을 이용하는 generic function을 만들 수 있다.</p><p>첫번째 예제는 각 요소를 multiply 하는 것이다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def scaleList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>], factor: <span class=\"keyword\">Double</span>): <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y * factor :: scaleList(ys, factor)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>위 예제는 list의 map 메서드를 이용하여 만들 수 있다.<br>map 메서드의 구조를 살펴보면 아래와 같다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract class List[T] &#123; ...</div><div class=\"line\">  def map[<span class=\"string\">U</span>](<span class=\"link\">f: T =&gt; U</span>): List[U] = this match &#123;</div><div class=\"line\"><span class=\"code\">    case Nil =&gt; this</span></div><div class=\"line\"><span class=\"code\">    case x :: xs =&gt; f(x) :: xs.map(f)</span></div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>파라미터로 들어온 함수f가 각 element에 적용되어서 새로운 리스트를 만들어 내는 함수가 바로 map이다. map 메서드를 이용하면 훨씬 간단하게 작성할 수 있다</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def scaleList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>], factor: <span class=\"keyword\">Double</span>) =</div><div class=\"line\">  xs.map(x =&gt; x * factor)</div></pre></td></tr></table></figure><p>또하나의 예제를 살펴보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def squareList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; Nil</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y * y :: squareList(ys)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def squareList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] =</div><div class=\"line\">  xs map (y =&gt; y * y)</div></pre></td></tr></table></figure><h3 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h3><p>필터링은 어떤 조건에 맞는 element를 모아 새로운 리스트를 만들어 내는 메서드이다.<br>0보다 큰수만 필터링 하는 다음의 함수를 보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def posElems(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) y :: posElems(ys) <span class=\"keyword\">else</span> posElems(ys)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>필터를 이용하면 간단하게 해결할 수 있다. 우선은 filter 메서드가 어떻게 생겼는지부터 살펴보도록 하자.</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span>[<span class=\"title\">T</span>] </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  def filter(p: T =&gt; Boolean): <span class=\"built_in\">List</span>[T] = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">case</span> x :: xs =&gt; <span class=\"keyword\">if</span> (p(x)) x :: xs.filter(p) <span class=\"keyword\">else</span> xs.filter(p)</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>필터는 특정조건함수(p)가 true이면 :: 연산자를 이용하여 리스트에 붙이고 false이면 제외하는 방식으로 새로운 리스트를 만들어간다.<br>그럼 위에서 보았던 posElems를 filter를 이용해 재구성해보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def posElems(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = </div><div class=\"line\">  xs filter(x =&gt; x &gt; <span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>그외에 유용한 메서드 목록은 아래와 같다.</p><ul><li>xs filterNot p xs filter (x =&gt; !p(x))와 같다.</li><li>xs partition p (xs filter p, xs filterNot) 튜플</li><li>xs takeWhile p p를 만족하는 요소들의 가장 긴 리스트</li><li>xs dropWhile p p를 만족하는 요소들의 나머지</li><li>xs span p (xs takeWhile p, xs dropWhile p) 튜플</li></ul><p>예를 들어보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; val nums = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">nums: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums filter (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res0: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums filterNot (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res1: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">-4</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums partition (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res2: (<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = (<span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>),<span class=\"keyword\">List</span>(<span class=\"number\">-4</span>))</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums takeWhile (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res3: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums dropWhile (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res4: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums span (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res5: (<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = (<span class=\"keyword\">List</span>(<span class=\"number\">2</span>),<span class=\"keyword\">List</span>(<span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>))</div></pre></td></tr></table></figure><h2 id=\"5-5-Reductino-of-Lists\"><a href=\"#5-5-Reductino-of-Lists\" class=\"headerlink\" title=\"5.5 Reductino of Lists\"></a>5.5 Reductino of Lists</h2><p>5.4절에 이어 higr-order Function 패턴을 이용한 List 메서드에 대해서 계속 알아보도록 하자. 5.4에서 보았던 세가지 패턴 중에 마지막인 element를 결합하는 방법들에 대한 내용들이 되겠다.</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"built_in\">List</span>(x1, <span class=\"params\">...</span>, xn))      = <span class=\"number\">0</span> + x1 + <span class=\"params\">...</span> + xn</div><div class=\"line\">product(<span class=\"built_in\">List</span>(x1, <span class=\"params\">...</span>, xn))  = <span class=\"number\">1</span> * x1 * <span class=\"params\">...</span> * xn</div></pre></td></tr></table></figure><h3 id=\"ReduceLeft\"><a href=\"#ReduceLeft\" class=\"headerlink\" title=\"ReduceLeft\"></a>ReduceLeft</h3><p>각 요소를 더하거나 곱하는 sum과 product 메서드가 있다. 이를 ReduceLeft 메서드를 이용하여 구현해보도록하자. ReduceLeft 메서드는 아래와 같은 구조를 가진다.</p><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List(x1, ..., xn) reduceLeft <span class=\"built_in\">op</span> = (...(x1 <span class=\"built_in\">op</span> x2) <span class=\"built_in\">op</span> ... ) <span class=\"built_in\">op</span> xn</div><div class=\"line\"></div><div class=\"line\">// 위의 구조를 이용하면 <span class=\"built_in\">sum</span>과 <span class=\"built_in\">product</span>는 아래와 같이 구현가능하다.</div><div class=\"line\">def <span class=\"built_in\">sum</span>(xs: List[Int]) = (<span class=\"number\">0</span> :: xs) reduceLeft ((x, y) =&gt; x + y) // <span class=\"keyword\">or</span> (<span class=\"symbol\">_</span> + <span class=\"symbol\">_</span>)</div><div class=\"line\">def <span class=\"built_in\">product</span>(xs: List[Int]) = (<span class=\"number\">1</span> :: xs) reduceLeft ((x, y) =&gt; x * y) // <span class=\"keyword\">or</span> (<span class=\"symbol\">_</span> * <span class=\"symbol\">_</span>)</div></pre></td></tr></table></figure><h3 id=\"FoldLeft\"><a href=\"#FoldLeft\" class=\"headerlink\" title=\"FoldLeft\"></a>FoldLeft</h3><p>foldLeft 함수는 reduceLeft 함수에 비해 좀더 일반적인 형태이다. foldLeft가 reduceLeft와 비슷하지만, foldLeft는 하나의 accumulator(z)를 가진다.<br>구조는 아래와 같다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">List</span>(<span class=\"name\">x1</span>, ..., xn) foldLeft z)(<span class=\"name\">op</span>) = (...(<span class=\"name\">z</span> op x1) op ...) op xn</div></pre></td></tr></table></figure><p>foldLeft로 sum과 product를 구현해보자</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sum(<span class=\"name\">xs</span>: List[Int]) = (<span class=\"name\">xs</span> foldLeft <span class=\"number\">0</span>) (<span class=\"name\">_</span> + _)</div><div class=\"line\">def product(<span class=\"name\">xs</span>: List[Int]) = (<span class=\"name\">xs</span> foldLeft <span class=\"number\">1</span>) (<span class=\"name\">_</span> * _)</div></pre></td></tr></table></figure><p>foldLeft와 reduceLeft는 List class에서 다음과 같이 구현된다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span>[<span class=\"title\">T</span>] &#123;</span> ...</div><div class=\"line\">  <span class=\"keyword\">def</span> reduceLeft(<span class=\"string\">op:</span> (T, T) =&gt; T): T = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Nil.reduceLeft\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">x :</span>: xs =&gt; (xs foldLeft x)(op)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">def</span> foldLeft[U](<span class=\"string\">z:</span> U)(<span class=\"string\">op:</span> (U, T) =&gt; U): U = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; z</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">x :</span>: xs =&gt; (xs foldLeft op(z, x))(op)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>reduceLeft도 내부적으로는 foldLeft 메서드를 이용한다.<br>그리고 reduceRight와 foldRight도 위의 두 메서드와 비슷한 구조로 동작한다. 대신 좌측이 아닌 우측(뒤)부터 reduce한다.</p><h3 id=\"Difference-between-FoldLeft-and-FoldRight\"><a href=\"#Difference-between-FoldLeft-and-FoldRight\" class=\"headerlink\" title=\"Difference between FoldLeft and FoldRight\"></a>Difference between FoldLeft and FoldRight</h3><p>foldLeft와 foldRight는 무엇이 다를까? 기본적으로 sum을 가지고 생각했을때, 왼쪽부터 더하는 것이나 오른쪽부터 더하는 것이나 결과는 동일하다. 하지만 어떤 경우에는 둘 중 하나만 적절할 때도 있다. 아래의 예제를 보자</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>): List[T] = (xs foldRight ys) (<span class=\"emphasis\">_ :: _</span>)</div></pre></td></tr></table></figure><p>위의 함수에서 foldRight를 foldLeft로 변경하면, 타입에러가 발생한다.<br>1 :: List(2)는 가능하지만 List(1) :: 2 는 불가능한 연산이기 때문이다.</p><h2 id=\"5-6-Reasoning-About-Concat\"><a href=\"#5-6-Reasoning-About-Concat\" class=\"headerlink\" title=\"5.6 Reasoning About Concat\"></a>5.6 Reasoning About Concat</h2><p>이번 챕터에서는 어떤 연산자(or 함수)가 정확히 참임을 증명할 수 있는지에 대해 알아보도록 한다.<br>일반적으로 natural induction(자연 귀납?)에 의해 증명하는 방법의 예는 다음과 같다.</p><ul><li>P(n)이 모든 n &gt;= b 에대해서</li><li>P(b)가 참이다. (base case)</li><li>이때, 모든 n &gt;= b 에 대해서 P(n)이 참이면, P(n + 1)도 참이다.</li></ul><h3 id=\"Referential-Transparency-참조-투명성\"><a href=\"#Referential-Transparency-참조-투명성\" class=\"headerlink\" title=\"Referential Transparency (참조 투명성)\"></a>Referential Transparency (참조 투명성)</h3><p>순수한 함수형 프로그램에서는 사이드 이펙트가 없기 때문에, reduction steps가 어떤 부분에 대해서도 동일하게 적용된다. 이를 Referential Transparency(참조 투명성)이라 한다.</p><p>structural induction은 natural induction과 비슷하다.<br>structural induction은 다음과 같이 동작한다.</p><ul><li>P(xs)이 모든 리스트 xs에 대해서</li><li>P(Nil)이 hold 된다면</li><li>리스트 xs와 어떤 element x에 대해서 P(xs)가 hold 되다면, P(x :: xs) 또한 hold 된다.</li></ul><p>이제 concat 함수를 다시 살펴보자</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>) = xs match &#123;</div><div class=\"line\">  case List() =&gt; ys</div><div class=\"line\">  case x :: xs1 =&gt; x :: concat(xs1, ys)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그리고 다음의 수식을 structural induction으로 증명해보자</p><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">(xs</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys)</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">zs</span> <span class=\"comment\">=</span> <span class=\"comment\">xs</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">(ys</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">zs)</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">(concat)</span> <span class=\"comment\">연산자의</span> <span class=\"comment\">두가지</span> <span class=\"comment\">정리를</span> <span class=\"comment\">참고한다</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"comment\">Nil</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys</span> <span class=\"comment\">=</span> <span class=\"comment\">ys</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"comment\">(x</span> <span class=\"comment\">::</span> <span class=\"comment\">xs1)</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys</span> <span class=\"comment\">=</span> <span class=\"comment\">x</span> <span class=\"comment\">::</span> <span class=\"comment\">(xs1</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys)</span></div></pre></td></tr></table></figure><p>우선 xs에 Nil이 들어갈 때인 P(Nil)을 살펴보자</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span> </div><div class=\"line\">(Nil ++ ys) ++ zs</div><div class=\"line\">= ys ++ zs      // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\"></div><div class=\"line\">// <span class=\"built_in\">right</span></div><div class=\"line\">Nil ++ (ys ++ zs)</div><div class=\"line\">= ys ++ zs      // by <span class=\"number\">1</span>st clause of ++</div></pre></td></tr></table></figure><p>다음은 xs 대신에 induction step인 ‘x :: xs’를 넣어보자</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) <span class=\"code\">++ ys) +</span> zs</div><div class=\"line\"><span class=\"section\">= (x :: (xs ++ ys)) ++ zs      // by 2st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: ((xs ++ ys) ++ zs)      // by 2st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: (xs ++ (ys ++ zs))    // by induction hypothesis </span></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">(x :: </span>xs) <span class=\"code\">++ (ys +</span>+ zs)</div><div class=\"line\"><span class=\"section\">= x :: (xs ++ (ys ++ zs))    // by 2st clause of ++</span></div></pre></td></tr></table></figure><p>좌변과 우변이 같으므로 함수 P는 증명됨</p><h2 id=\"5-7-A-Larger-Equational-Proof-on-Lists\"><a href=\"#5-7-A-Larger-Equational-Proof-on-Lists\" class=\"headerlink\" title=\"5.7 A Larger Equational Proof on Lists\"></a>5.7 A Larger Equational Proof on Lists</h2><p>좀더 까다로운 function인 reverse에 대해서 알아보자<br>다음의 두가지 amenable한 사실을 가지고 그 아래의 식을 증명해보자</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>) Nil<span class=\"selector-class\">.reverse</span> = Nil               <span class=\"comment\">// 1st clause</span></div><div class=\"line\">(<span class=\"number\">2</span>) (x :: xs)<span class=\"selector-class\">.reverse</span> = xs<span class=\"selector-class\">.reverse</span> ++ List(x)   <span class=\"comment\">// 2nd clause</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 다음을 증명</span></div><div class=\"line\">xs<span class=\"selector-class\">.reverse</span><span class=\"selector-class\">.reverse</span> = xs</div></pre></td></tr></table></figure><p>base case는 단순하다</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nil.reverse.reverse</div><div class=\"line\"><span class=\"section\">= Nil.reverse</span></div><div class=\"line\"><span class=\"section\">= Nil</span></div></pre></td></tr></table></figure><p>이번엔 reduction step이다.</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">(x :: </span>xs).reverse.reverse</div><div class=\"line\"><span class=\"section\">= (xs.reverse ++ List(x)).reverse     // by 2nd clause of reverse</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">x :: </span>xs</div><div class=\"line\"><span class=\"section\">= x :: xs.reverse.reverse       // by induction hypothesis (가설에 의해)</span></div></pre></td></tr></table></figure><p>두 개를 합쳐보면,</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(xs<span class=\"selector-class\">.reverse</span> ++ List(x))<span class=\"selector-class\">.reverse</span> = x :: xs<span class=\"selector-class\">.reverse</span><span class=\"selector-class\">.reverse</span></div></pre></td></tr></table></figure><p>직접적으로 induction이 불가하므로, 동일한 연산을 일반화 시켜보자<br>여기서는 xs.reverse를 ys로 치환하도록 하자. 그럼 수식이 아래와 같이 바뀐다.</p><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(ys ++ <span class=\"built_in\">List</span>(x)).<span class=\"built_in\">reverse</span> = x :: ys.<span class=\"built_in\">reverse</span></div></pre></td></tr></table></figure><p>그럼 이제 두번째 induction인 ys를 증명하면 동일함을 입증할 수 있겠다.<br>우선 base case 부터 살펴보자</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span></div><div class=\"line\">(Nil ++ List(x)).reverse</div><div class=\"line\">= List(x).reverse       // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\">= (x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil).reverse    // by definition of List</div><div class=\"line\">= Nil.reverse ++ List(x)</div><div class=\"line\">= Nil ++ (x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil)     // by <span class=\"number\">2</span>nd clause of reverse</div><div class=\"line\">= x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil          // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\">= x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil.reverse      // by <span class=\"number\">1</span>st clause of reverse</div></pre></td></tr></table></figure><p>결과는 우변의 ys에 Nil을 집어넣었을 때와 동일한 결과과 도출되었으므로 base case를 증명되었다. 이제 reduction step으로 가보자</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((y :: </span>ys) ++ List(x)).reverse</div><div class=\"line\"><span class=\"section\">= (y :: (ys ++ List(x))).reverse    // by 2nd clause of ++</span></div><div class=\"line\"><span class=\"section\">= (ys ++ List(x)).reverse ++ List(y)  // by 2nd clause reverse</span></div><div class=\"line\"><span class=\"section\">= (x :: ys.reverse) ++ List(y)      // by the induction hypothesis</span></div><div class=\"line\"><span class=\"section\">= x :: (ys.reverse ++ List(y))      // by 1st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: (y :: ys).reverse        // by 2nd clause of reverse</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">x :: </span>(y :: ys).reverse</div></pre></td></tr></table></figure><p>좌변과 우변이 동일하므로 증명되었다.</p><h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(xs ++ ys) <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = (xs <span class=\"built_in\">map</span> f) ++ (ys <span class=\"built_in\">map</span> f)</div><div class=\"line\"></div><div class=\"line\">Nil <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = Nil</div><div class=\"line\">(x :: xs) <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = f(x) :: (xs <span class=\"built_in\">map</span> f)</div></pre></td></tr></table></figure><p>base case..</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span></div><div class=\"line\">(Nil ++ ys) map f</div><div class=\"line\">= ys map f</div><div class=\"line\"></div><div class=\"line\">// <span class=\"built_in\">right</span></div><div class=\"line\">(Nil map f) ++ (ys map f)</div><div class=\"line\">= Nil ++ (ys map f)</div><div class=\"line\">= ys map f</div></pre></td></tr></table></figure><p>reduction step</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) ++ ys) map f</div><div class=\"line\"><span class=\"section\">= (x :: (xs ++ ys)) map f</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs ++ ys) map f)</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs map f) ++ (ys map f))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) map f) ++ (ys map f)</div><div class=\"line\"><span class=\"section\">= (f(x) :: (xs map f)) ++ (ys map f)</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs map f) ++ (ys map f))</span></div></pre></td></tr></table></figure><p>base case, reduction step 모두 좌변과 우변이 같으므로 같음이 증명되었다.</p>","excerpt":"","more":"<h2 id=\"5-1-More-Functions-on-Lists\"><a href=\"#5-1-More-Functions-on-Lists\" class=\"headerlink\" title=\"5.1 More Functions on Lists\"></a>5.1 More Functions on Lists</h2><p>이번 챕터에서는 스칼라 List의 다른 메서드 들을 알아본다.<br>xs는 list의 object를 뜻한다.</p><h3 id=\"Sublists-and-element-access\"><a href=\"#Sublists-and-element-access\" class=\"headerlink\" title=\"Sublists and element access\"></a>Sublists and element access</h3><ul><li>xs.length xs의 길이</li><li>xs.last xs의 마지막 item return, xs가 비어있으면 exception 발생</li><li>xs.init 마지막 item을 제외한 list reutnr, xs가 비어있으면 exception 발생</li><li>xs take n 처음부터 n개의 element의 list 리턴, n이 xs의 length보다 크면 n개만 리턴</li><li>xs drop n n개를 제외한 나머지 리스트 리턴</li><li>xs(n) n번째 item 리턴</li></ul><h3 id=\"Creating-new-lists\"><a href=\"#Creating-new-lists\" class=\"headerlink\" title=\"Creating new lists\"></a>Creating new lists</h3><ul><li>xs ++ ys 두 list 더하기, :::와 같은 기능을 함</li><li>xs.reverse 역순의 리스트 생성</li><li>xs updated (n, x) n번째 item만 x로 바뀐 list 생성</li></ul><h3 id=\"Finding-elements\"><a href=\"#Finding-elements\" class=\"headerlink\" title=\"Finding elements\"></a>Finding elements</h3><ul><li>xs indexOf x x와 같은 첫번째 element의 index 값 리턴, 없으면 -1</li><li>xs contains x indexOf x &gt;= 0 과 같음</li></ul><p>last가 과연 필요한지 모르겠지만(tail을 recursive하게 반복하면 찾을 수 있음), 유용하게 쓰일 수 있다면 last의 복잡도는 어떻게 될까?</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def last[T](xs: <span class=\"built_in\">List</span>[T]): T = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>() =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"last of empty list\"</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>(x) =&gt; x</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; lsat(ys)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>위와 같이 list의 길이와 같으므로, 복잡도는 O(n)이 되겠다.<br>init 메서드는 어떨까?</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def init[T](xs: <span class=\"built_in\">List</span>[T]): <span class=\"built_in\">List</span>[T] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>() =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"init of empty list\"</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">List</span>(x) =&gt; <span class=\"built_in\">List</span>()</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y :: init(ys)   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>마찬가지로 O(n)<br>그다음은 concat(Same as :::)</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>) = xs match &#123;</div><div class=\"line\">  case List() =&gt; ys</div><div class=\"line\">  case z :: zs =&gt; z :: concat(zs, ys) </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>복잡도는 |xs|, 즉 xs 의 길이가 된다.<br>다음은 reverse</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def reverse[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>): List[T] = xs match &#123;</div><div class=\"line\">  case List() =&gt; xs</div><div class=\"line\">  case y :: ys =&gt; reverse(ys) ++ List(y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>reverse(ys) :: y 가 아니라 reverse(ys) ++ List(y)인 이유는 ::의 마지막엔 Nil이 와야하니깐 y가 Nil이 아니기 때문이 아닐까 생각한다.<br>복잡도는 각 요소마다 concatenating을 해주고 list의 length만큼 reverse를 해야하므로 O(n2)이 되겠다. reverse는 다소 실망스러운 성능을 보여주는데, 앞으로 더 개선해보도록 하겠다.</p><p>마지막으로 removeAt</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def removeAt[<span class=\"string\">T</span>](<span class=\"link\">n: Int, xs: List[T]</span>) = (xs take n) ::: (xs drop n+1)</div></pre></td></tr></table></figure><h2 id=\"5-2-Paires-and-Tuples\"><a href=\"#5-2-Paires-and-Tuples\" class=\"headerlink\" title=\"5.2 Paires and Tuples\"></a>5.2 Paires and Tuples</h2><p>앞서 살펴보앗던 insertion sort보다 더 개선된 merge sort 알고리즘에 대해서 살펴보자. 기본적인 개념은 zero or one element 리스트는 이미 sorted 하다는 것.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = &#123;</div><div class=\"line\">  val n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// merge 메서드는 앞으로 더 개선해 나갈 예정임</span></div><div class=\"line\">    def merge(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], ys: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = </div><div class=\"line\">      xs mathch &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> Nil =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> x :: xs1 =&gt;</div><div class=\"line\">          ys match &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">            <span class=\"keyword\">case</span> y :: ys1 =&gt;</div><div class=\"line\">              <span class=\"keyword\">if</span> (x &lt; y) x :: merge(xs1, ys)</div><div class=\"line\">              <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    val (fst, snd) = xs splitAt n</div><div class=\"line\">    merge(msort(fst), msort(snd))</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>밑에서 나오는 splitAt 함수는 index n을 기준으로 리스트를 두개로 쪼개서 리턴한다. 여기서 리턴된 val의 모양을 보자. fst와 snd 두개의 타입으로 묶여져 있다. 이를 Pair라고 한다. 예를 들면</p><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val pair = (<span class=\"string\">\"answer\"</span>, <span class=\"number\">42</span>) &gt; pair: (<span class=\"built_in\">String</span>, <span class=\"built_in\">Int</span>) = (answer,<span class=\"number\">42</span>)  </div><div class=\"line\"></div><div class=\"line\">val (label, value) = pare &gt; label: <span class=\"built_in\">String</span> = answer | value : <span class=\"built_in\">Int</span> = <span class=\"number\">42</span></div></pre></td></tr></table></figure><p>위와 같이 타입으로도 쓰일 수 있고, 패턴으로도 사용될 수 있다. 이때 2개 이상의 요소를 가지면 Tuples라 한다. Tuples는 다양하게 사용될 수 있는데, parameterized type으로 사용될 경우, function applictaion으로 사용될 경우, constructor 패턴으로 사용될 경우 각각</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span><span class=\"selector-attr\">[T1, ..., Tn]</span></div><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span>(<span class=\"selector-tag\">e1</span>, ..., <span class=\"selector-tag\">en</span>)</div><div class=\"line\"><span class=\"selector-tag\">scala</span><span class=\"selector-class\">.Tuplen</span>(<span class=\"selector-tag\">p1</span>, ..., <span class=\"selector-tag\">pn</span>)</div></pre></td></tr></table></figure><p>과 같이 사용할 수 있다. (여기서 Tuplen의 n은 파라미터 개수 ex. Tuple2)<br>튜플의 각 element는 _1, _2와 같이 접근할 수 있다.<br>이제 merge 메소드를 개선해보자.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">merge</span>(xs: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>], ys: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>] = (xs, ys) <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (Nil, ys) =&gt; ys</div><div class=\"line\">  <span class=\"keyword\">case</span> (xs, Nil) =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt; </div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; y) x :: <span class=\"keyword\">merge</span>(xs1, ys)</div><div class=\"line\">    <span class=\"keyword\">else</span> y :: <span class=\"keyword\">merge</span>(xs, ys1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>훨씬 깔끔해졌다.</p><h2 id=\"5-3-Implicit-Parameters\"><a href=\"#5-3-Implicit-Parameters\" class=\"headerlink\" title=\"5.3 Implicit Parameters\"></a>5.3 Implicit Parameters</h2><p>이전 장에서 보았던 msort는 List[Int] 타입으로 지정되어 있는데 parameterize를 통해서 Int 말고도 다른 타입이 들어올 수 있도록 임의의 타입 T로 변경해보자</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">mergesort</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">msort</span></span>[<span class=\"type\">T</span>](xs: <span class=\"type\">List</span>[<span class=\"type\">T</span>]): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span></span>(xs: <span class=\"type\">List</span>[<span class=\"type\">T</span>], ys: <span class=\"type\">List</span>[<span class=\"type\">T</span>]): <span class=\"type\">List</span>[<span class=\"type\">T</span>] = (xs, ys) <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> (<span class=\"type\">Nil</span>, ys) =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> (xs, <span class=\"type\">Nil</span>) =&gt; xs</div><div class=\"line\">        <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span> (x &lt; y) x :: merge(xs1, ys)</div><div class=\"line\">          <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">val</span> (fst, snd) = xs splitAt n</div><div class=\"line\">      merge(msort(fst), msort(snd))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">val</span> nums = <span class=\"type\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  msort(nums)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>x &lt; y 부분에서 에러가 발생한다. 왜냐하면 comparison ‘&lt;’가 임의의 타입 T에 정의되어 있지 않기 때문이란다….<br>그래서 우리는 comparison 함수가 필요하다. 이 때 가장 유연한 방법은 msort 함수에 comparison operation을 추가적인 파라미터로 붙이는 것이다. 아래처럼</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>)(lt: (T, T) =&gt; Boolean) = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  merge(msort(fst)(lt), msort(snd)(lt))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그래서 원래 mergesort에 적용하면 다음과 같다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">object mergesort &#123;</div><div class=\"line\">  def msort[T](xs: <span class=\"keyword\">List</span>[T])(lt: (T, T) =&gt; <span class=\"keyword\">Boolean</span>): <span class=\"keyword\">List</span>[T] = &#123;</div><div class=\"line\">    val n = xs.length/<span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) xs</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      def merge(xs: <span class=\"keyword\">List</span>[T], ys: <span class=\"keyword\">List</span>[T]): <span class=\"keyword\">List</span>[T] = (xs, ys) match &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> (Nil, ys) =&gt; ys</div><div class=\"line\">        <span class=\"keyword\">case</span> (xs, Nil) =&gt; xs</div><div class=\"line\">        <span class=\"keyword\">case</span> (x :: xs1, y :: ys1) =&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span> (lt(x, y)) x :: merge(xs1, ys)</div><div class=\"line\">          <span class=\"keyword\">else</span> y :: merge(xs, ys1)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      val (fst, snd) = xs splitAt n</div><div class=\"line\">      merge(msort(fst)(lt), msort(snd)(lt))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  val nums = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  msort(nums)((x, y) =&gt; x &lt; y)</div><div class=\"line\"></div><div class=\"line\">  val fruits = <span class=\"keyword\">List</span>(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pineapple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"orange\"</span>)</div><div class=\"line\">  msort(fruits)((x, y) =&gt; x.compareTo(y) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>이제 Int 타입 뿐만 아니라 String과 같은 다른 타입도 정렬이 가능해졌다. 이 때 lt에 들어오는 함수 파라미터에 타입 붙이는 걸 생략해도 되는데, 컴파일러가 앞에 있는 리스트의 타입을 보고 유추할 수 있기 때문이란다. 즉 파라미터 셋의 마지막에 function value가 들어오게 되면, 컴파일러가 타입 체크를 미뤄버린다.</p><h3 id=\"scala-math-Ordering-T\"><a href=\"#scala-math-Ordering-T\" class=\"headerlink\" title=\"scala.math.Ordering[T]\"></a>scala.math.Ordering[T]</h3><p>사실 ordering을 위한 스탠다드 라이브러리 클래스가 있다.</p><blockquote><p>scala.math.Ordering[T]</p></blockquote><p>그래서 lt 명령어를 parameterizing 하는 대신 Orderging 클래스로 parameterize 할 수 있다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T]</span>)(ord: Ordering) = </div><div class=\"line\"></div><div class=\"line\">  def merge(xs: List[T], ys: List[T]) =</div><div class=\"line\"><span class=\"code\">    ... if (ord.lt(x, y)) ...</span></div><div class=\"line\"></div><div class=\"line\">  ... merge(msort(fst)(ord), msort(snd)(ord)) ...</div></pre></td></tr></table></figure><h3 id=\"implicit\"><a href=\"#implicit\" class=\"headerlink\" title=\"implicit\"></a>implicit</h3><p>대체로 완성된 느낌이 나지만, Ordering 함수가 처음 콜 될때부터 계속 전달되는게 좀 비효율적으로 보인다. 그래서 여기에다가 또하나를 추가해보자.<br>ord 파라미터에 implicit(절대적인이란 뜻) 키워드를 앞에 붙여보자. 그러면, 함수를 실제로 호출하는 부분에서 실제 파라미터를 넣어줄 필요가 없다.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">def msort[T](xs: List[T])(<span class=\"keyword\">implicit</span> ord: Ordering) = </div><div class=\"line\"></div><div class=\"line\">  def <span class=\"built_in\">merge</span>(xs: List[T], ys: List[T]) =</div><div class=\"line\">    ... <span class=\"keyword\">if</span> (ord.lt(x, y)) ...</div><div class=\"line\"></div><div class=\"line\">  ... <span class=\"built_in\">merge</span>(msort(fst), msort(snd)) ...</div><div class=\"line\"></div><div class=\"line\">val nums = List(<span class=\"number\">2</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">msort(nums)</div></pre></td></tr></table></figure><p>더 간결해졌다.</p><h3 id=\"Rules-for-Implicit-Parameters\"><a href=\"#Rules-for-Implicit-Parameters\" class=\"headerlink\" title=\"Rules for Implicit Parameters\"></a>Rules for Implicit Parameters</h3><p>타입이 T인 implicit 파라미터가 있을때, 컴파일러는</p><blockquote><p>(1) implicit이 쓰인 파라미터에 (2) T와 호환되는 타입을 가지고 (3) function call에서 보이거나 T와 관련된 companion 오브젝트(클래스와 객체 이름이 같은 오브젝트)에서<br>single implicit definition을 찾는다. 즉, Ordering[Int]가 함수 call의 파라미터로 존재하지 않지만, implicit으로 처리되어 어딘가에 존재하게 된다.</p></blockquote><h2 id=\"5-4-Higher-Order-List-Functions\"><a href=\"#5-4-Higher-Order-List-Functions\" class=\"headerlink\" title=\"5.4 Higher-Order List Functions\"></a>5.4 Higher-Order List Functions</h2><p>위에서 보았던 예제들은 종종 비슷한 구조를 보여준다. 요약해보면</p><ul><li>리스트의 각 element를 변경하는 것</li><li>어떤 조건을 만족하는 모든 element의 리스트를 구하는 것</li><li>연산자를 사용하여 element들을 결합하는 것</li></ul><p>함수형 언어는 higer-order functinos 패턴을 이용하는 generic function을 만들 수 있다.</p><p>첫번째 예제는 각 요소를 multiply 하는 것이다.</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def scaleList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>], factor: <span class=\"keyword\">Double</span>): <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y * factor :: scaleList(ys, factor)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>위 예제는 list의 map 메서드를 이용하여 만들 수 있다.<br>map 메서드의 구조를 살펴보면 아래와 같다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract class List[T] &#123; ...</div><div class=\"line\">  def map[<span class=\"string\">U</span>](<span class=\"link\">f: T =&gt; U</span>): List[U] = this match &#123;</div><div class=\"line\"><span class=\"code\">    case Nil =&gt; this</span></div><div class=\"line\"><span class=\"code\">    case x :: xs =&gt; f(x) :: xs.map(f)</span></div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>파라미터로 들어온 함수f가 각 element에 적용되어서 새로운 리스트를 만들어 내는 함수가 바로 map이다. map 메서드를 이용하면 훨씬 간단하게 작성할 수 있다</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def scaleList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Double</span>], factor: <span class=\"keyword\">Double</span>) =</div><div class=\"line\">  xs.map(x =&gt; x * factor)</div></pre></td></tr></table></figure><p>또하나의 예제를 살펴보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def squareList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; Nil</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; y * y :: squareList(ys)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">def squareList(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] =</div><div class=\"line\">  xs map (y =&gt; y * y)</div></pre></td></tr></table></figure><h3 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h3><p>필터링은 어떤 조건에 맞는 element를 모아 새로운 리스트를 만들어 내는 메서드이다.<br>0보다 큰수만 필터링 하는 다음의 함수를 보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def posElems(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = xs match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Nil =&gt; xs</div><div class=\"line\">  <span class=\"keyword\">case</span> y :: ys =&gt; <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) y :: posElems(ys) <span class=\"keyword\">else</span> posElems(ys)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>필터를 이용하면 간단하게 해결할 수 있다. 우선은 filter 메서드가 어떻게 생겼는지부터 살펴보도록 하자.</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span>[<span class=\"title\">T</span>] </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  def filter(p: T =&gt; Boolean): <span class=\"built_in\">List</span>[T] = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">case</span> x :: xs =&gt; <span class=\"keyword\">if</span> (p(x)) x :: xs.filter(p) <span class=\"keyword\">else</span> xs.filter(p)</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>필터는 특정조건함수(p)가 true이면 :: 연산자를 이용하여 리스트에 붙이고 false이면 제외하는 방식으로 새로운 리스트를 만들어간다.<br>그럼 위에서 보았던 posElems를 filter를 이용해 재구성해보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def posElems(xs: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]): <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = </div><div class=\"line\">  xs filter(x =&gt; x &gt; <span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>그외에 유용한 메서드 목록은 아래와 같다.</p><ul><li>xs filterNot p xs filter (x =&gt; !p(x))와 같다.</li><li>xs partition p (xs filter p, xs filterNot) 튜플</li><li>xs takeWhile p p를 만족하는 요소들의 가장 긴 리스트</li><li>xs dropWhile p p를 만족하는 요소들의 나머지</li><li>xs span p (xs takeWhile p, xs dropWhile p) 튜플</li></ul><p>예를 들어보자</p><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; val nums = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\">nums: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums filter (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res0: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums filterNot (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res1: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">-4</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums partition (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res2: (<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = (<span class=\"keyword\">List</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>),<span class=\"keyword\">List</span>(<span class=\"number\">-4</span>))</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums takeWhile (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res3: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums dropWhile (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res4: <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>] = <span class=\"keyword\">List</span>(<span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">scala&gt; nums span (x =&gt; x &gt; <span class=\"number\">0</span>)</div><div class=\"line\">res5: (<span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>], <span class=\"keyword\">List</span>[<span class=\"keyword\">Int</span>]) = (<span class=\"keyword\">List</span>(<span class=\"number\">2</span>),<span class=\"keyword\">List</span>(<span class=\"number\">-4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>))</div></pre></td></tr></table></figure><h2 id=\"5-5-Reductino-of-Lists\"><a href=\"#5-5-Reductino-of-Lists\" class=\"headerlink\" title=\"5.5 Reductino of Lists\"></a>5.5 Reductino of Lists</h2><p>5.4절에 이어 higr-order Function 패턴을 이용한 List 메서드에 대해서 계속 알아보도록 하자. 5.4에서 보았던 세가지 패턴 중에 마지막인 element를 결합하는 방법들에 대한 내용들이 되겠다.</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"built_in\">List</span>(x1, <span class=\"params\">...</span>, xn))      = <span class=\"number\">0</span> + x1 + <span class=\"params\">...</span> + xn</div><div class=\"line\">product(<span class=\"built_in\">List</span>(x1, <span class=\"params\">...</span>, xn))  = <span class=\"number\">1</span> * x1 * <span class=\"params\">...</span> * xn</div></pre></td></tr></table></figure><h3 id=\"ReduceLeft\"><a href=\"#ReduceLeft\" class=\"headerlink\" title=\"ReduceLeft\"></a>ReduceLeft</h3><p>각 요소를 더하거나 곱하는 sum과 product 메서드가 있다. 이를 ReduceLeft 메서드를 이용하여 구현해보도록하자. ReduceLeft 메서드는 아래와 같은 구조를 가진다.</p><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List(x1, ..., xn) reduceLeft <span class=\"built_in\">op</span> = (...(x1 <span class=\"built_in\">op</span> x2) <span class=\"built_in\">op</span> ... ) <span class=\"built_in\">op</span> xn</div><div class=\"line\"></div><div class=\"line\">// 위의 구조를 이용하면 <span class=\"built_in\">sum</span>과 <span class=\"built_in\">product</span>는 아래와 같이 구현가능하다.</div><div class=\"line\">def <span class=\"built_in\">sum</span>(xs: List[Int]) = (<span class=\"number\">0</span> :: xs) reduceLeft ((x, y) =&gt; x + y) // <span class=\"keyword\">or</span> (<span class=\"symbol\">_</span> + <span class=\"symbol\">_</span>)</div><div class=\"line\">def <span class=\"built_in\">product</span>(xs: List[Int]) = (<span class=\"number\">1</span> :: xs) reduceLeft ((x, y) =&gt; x * y) // <span class=\"keyword\">or</span> (<span class=\"symbol\">_</span> * <span class=\"symbol\">_</span>)</div></pre></td></tr></table></figure><h3 id=\"FoldLeft\"><a href=\"#FoldLeft\" class=\"headerlink\" title=\"FoldLeft\"></a>FoldLeft</h3><p>foldLeft 함수는 reduceLeft 함수에 비해 좀더 일반적인 형태이다. foldLeft가 reduceLeft와 비슷하지만, foldLeft는 하나의 accumulator(z)를 가진다.<br>구조는 아래와 같다.</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">List</span>(<span class=\"name\">x1</span>, ..., xn) foldLeft z)(<span class=\"name\">op</span>) = (...(<span class=\"name\">z</span> op x1) op ...) op xn</div></pre></td></tr></table></figure><p>foldLeft로 sum과 product를 구현해보자</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sum(<span class=\"name\">xs</span>: List[Int]) = (<span class=\"name\">xs</span> foldLeft <span class=\"number\">0</span>) (<span class=\"name\">_</span> + _)</div><div class=\"line\">def product(<span class=\"name\">xs</span>: List[Int]) = (<span class=\"name\">xs</span> foldLeft <span class=\"number\">1</span>) (<span class=\"name\">_</span> * _)</div></pre></td></tr></table></figure><p>foldLeft와 reduceLeft는 List class에서 다음과 같이 구현된다.</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span>[<span class=\"title\">T</span>] &#123;</span> ...</div><div class=\"line\">  <span class=\"keyword\">def</span> reduceLeft(<span class=\"string\">op:</span> (T, T) =&gt; T): T = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Nil.reduceLeft\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">x :</span>: xs =&gt; (xs foldLeft x)(op)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">def</span> foldLeft[U](<span class=\"string\">z:</span> U)(<span class=\"string\">op:</span> (U, T) =&gt; U): U = <span class=\"keyword\">this</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Nil =&gt; z</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">x :</span>: xs =&gt; (xs foldLeft op(z, x))(op)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>reduceLeft도 내부적으로는 foldLeft 메서드를 이용한다.<br>그리고 reduceRight와 foldRight도 위의 두 메서드와 비슷한 구조로 동작한다. 대신 좌측이 아닌 우측(뒤)부터 reduce한다.</p><h3 id=\"Difference-between-FoldLeft-and-FoldRight\"><a href=\"#Difference-between-FoldLeft-and-FoldRight\" class=\"headerlink\" title=\"Difference between FoldLeft and FoldRight\"></a>Difference between FoldLeft and FoldRight</h3><p>foldLeft와 foldRight는 무엇이 다를까? 기본적으로 sum을 가지고 생각했을때, 왼쪽부터 더하는 것이나 오른쪽부터 더하는 것이나 결과는 동일하다. 하지만 어떤 경우에는 둘 중 하나만 적절할 때도 있다. 아래의 예제를 보자</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>): List[T] = (xs foldRight ys) (<span class=\"emphasis\">_ :: _</span>)</div></pre></td></tr></table></figure><p>위의 함수에서 foldRight를 foldLeft로 변경하면, 타입에러가 발생한다.<br>1 :: List(2)는 가능하지만 List(1) :: 2 는 불가능한 연산이기 때문이다.</p><h2 id=\"5-6-Reasoning-About-Concat\"><a href=\"#5-6-Reasoning-About-Concat\" class=\"headerlink\" title=\"5.6 Reasoning About Concat\"></a>5.6 Reasoning About Concat</h2><p>이번 챕터에서는 어떤 연산자(or 함수)가 정확히 참임을 증명할 수 있는지에 대해 알아보도록 한다.<br>일반적으로 natural induction(자연 귀납?)에 의해 증명하는 방법의 예는 다음과 같다.</p><ul><li>P(n)이 모든 n &gt;= b 에대해서</li><li>P(b)가 참이다. (base case)</li><li>이때, 모든 n &gt;= b 에 대해서 P(n)이 참이면, P(n + 1)도 참이다.</li></ul><h3 id=\"Referential-Transparency-참조-투명성\"><a href=\"#Referential-Transparency-참조-투명성\" class=\"headerlink\" title=\"Referential Transparency (참조 투명성)\"></a>Referential Transparency (참조 투명성)</h3><p>순수한 함수형 프로그램에서는 사이드 이펙트가 없기 때문에, reduction steps가 어떤 부분에 대해서도 동일하게 적용된다. 이를 Referential Transparency(참조 투명성)이라 한다.</p><p>structural induction은 natural induction과 비슷하다.<br>structural induction은 다음과 같이 동작한다.</p><ul><li>P(xs)이 모든 리스트 xs에 대해서</li><li>P(Nil)이 hold 된다면</li><li>리스트 xs와 어떤 element x에 대해서 P(xs)가 hold 되다면, P(x :: xs) 또한 hold 된다.</li></ul><p>이제 concat 함수를 다시 살펴보자</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def concat[<span class=\"string\">T</span>](<span class=\"link\">xs: List[T], ys: List[T]</span>) = xs match &#123;</div><div class=\"line\">  case List() =&gt; ys</div><div class=\"line\">  case x :: xs1 =&gt; x :: concat(xs1, ys)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>그리고 다음의 수식을 structural induction으로 증명해보자</p><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">(xs</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys)</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">zs</span> <span class=\"comment\">=</span> <span class=\"comment\">xs</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">(ys</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">zs)</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">(concat)</span> <span class=\"comment\">연산자의</span> <span class=\"comment\">두가지</span> <span class=\"comment\">정리를</span> <span class=\"comment\">참고한다</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"comment\">Nil</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys</span> <span class=\"comment\">=</span> <span class=\"comment\">ys</span></div><div class=\"line\"><span class=\"comment\">//</span> <span class=\"comment\">(x</span> <span class=\"comment\">::</span> <span class=\"comment\">xs1)</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys</span> <span class=\"comment\">=</span> <span class=\"comment\">x</span> <span class=\"comment\">::</span> <span class=\"comment\">(xs1</span> <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">ys)</span></div></pre></td></tr></table></figure><p>우선 xs에 Nil이 들어갈 때인 P(Nil)을 살펴보자</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span> </div><div class=\"line\">(Nil ++ ys) ++ zs</div><div class=\"line\">= ys ++ zs      // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\"></div><div class=\"line\">// <span class=\"built_in\">right</span></div><div class=\"line\">Nil ++ (ys ++ zs)</div><div class=\"line\">= ys ++ zs      // by <span class=\"number\">1</span>st clause of ++</div></pre></td></tr></table></figure><p>다음은 xs 대신에 induction step인 ‘x :: xs’를 넣어보자</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) <span class=\"code\">++ ys) +</span> zs</div><div class=\"line\"><span class=\"section\">= (x :: (xs ++ ys)) ++ zs      // by 2st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: ((xs ++ ys) ++ zs)      // by 2st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: (xs ++ (ys ++ zs))    // by induction hypothesis </span></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">(x :: </span>xs) <span class=\"code\">++ (ys +</span>+ zs)</div><div class=\"line\"><span class=\"section\">= x :: (xs ++ (ys ++ zs))    // by 2st clause of ++</span></div></pre></td></tr></table></figure><p>좌변과 우변이 같으므로 함수 P는 증명됨</p><h2 id=\"5-7-A-Larger-Equational-Proof-on-Lists\"><a href=\"#5-7-A-Larger-Equational-Proof-on-Lists\" class=\"headerlink\" title=\"5.7 A Larger Equational Proof on Lists\"></a>5.7 A Larger Equational Proof on Lists</h2><p>좀더 까다로운 function인 reverse에 대해서 알아보자<br>다음의 두가지 amenable한 사실을 가지고 그 아래의 식을 증명해보자</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>) Nil<span class=\"selector-class\">.reverse</span> = Nil               <span class=\"comment\">// 1st clause</span></div><div class=\"line\">(<span class=\"number\">2</span>) (x :: xs)<span class=\"selector-class\">.reverse</span> = xs<span class=\"selector-class\">.reverse</span> ++ List(x)   <span class=\"comment\">// 2nd clause</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 다음을 증명</span></div><div class=\"line\">xs<span class=\"selector-class\">.reverse</span><span class=\"selector-class\">.reverse</span> = xs</div></pre></td></tr></table></figure><p>base case는 단순하다</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nil.reverse.reverse</div><div class=\"line\"><span class=\"section\">= Nil.reverse</span></div><div class=\"line\"><span class=\"section\">= Nil</span></div></pre></td></tr></table></figure><p>이번엔 reduction step이다.</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">(x :: </span>xs).reverse.reverse</div><div class=\"line\"><span class=\"section\">= (xs.reverse ++ List(x)).reverse     // by 2nd clause of reverse</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">x :: </span>xs</div><div class=\"line\"><span class=\"section\">= x :: xs.reverse.reverse       // by induction hypothesis (가설에 의해)</span></div></pre></td></tr></table></figure><p>두 개를 합쳐보면,</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(xs<span class=\"selector-class\">.reverse</span> ++ List(x))<span class=\"selector-class\">.reverse</span> = x :: xs<span class=\"selector-class\">.reverse</span><span class=\"selector-class\">.reverse</span></div></pre></td></tr></table></figure><p>직접적으로 induction이 불가하므로, 동일한 연산을 일반화 시켜보자<br>여기서는 xs.reverse를 ys로 치환하도록 하자. 그럼 수식이 아래와 같이 바뀐다.</p><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(ys ++ <span class=\"built_in\">List</span>(x)).<span class=\"built_in\">reverse</span> = x :: ys.<span class=\"built_in\">reverse</span></div></pre></td></tr></table></figure><p>그럼 이제 두번째 induction인 ys를 증명하면 동일함을 입증할 수 있겠다.<br>우선 base case 부터 살펴보자</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span></div><div class=\"line\">(Nil ++ List(x)).reverse</div><div class=\"line\">= List(x).reverse       // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\">= (x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil).reverse    // by definition of List</div><div class=\"line\">= Nil.reverse ++ List(x)</div><div class=\"line\">= Nil ++ (x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil)     // by <span class=\"number\">2</span>nd clause of reverse</div><div class=\"line\">= x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil          // by <span class=\"number\">1</span>st clause of ++</div><div class=\"line\">= x <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Nil.reverse      // by <span class=\"number\">1</span>st clause of reverse</div></pre></td></tr></table></figure><p>결과는 우변의 ys에 Nil을 집어넣었을 때와 동일한 결과과 도출되었으므로 base case를 증명되었다. 이제 reduction step으로 가보자</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((y :: </span>ys) ++ List(x)).reverse</div><div class=\"line\"><span class=\"section\">= (y :: (ys ++ List(x))).reverse    // by 2nd clause of ++</span></div><div class=\"line\"><span class=\"section\">= (ys ++ List(x)).reverse ++ List(y)  // by 2nd clause reverse</span></div><div class=\"line\"><span class=\"section\">= (x :: ys.reverse) ++ List(y)      // by the induction hypothesis</span></div><div class=\"line\"><span class=\"section\">= x :: (ys.reverse ++ List(y))      // by 1st clause of ++</span></div><div class=\"line\"><span class=\"section\">= x :: (y :: ys).reverse        // by 2nd clause of reverse</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">x :: </span>(y :: ys).reverse</div></pre></td></tr></table></figure><p>좌변과 우변이 동일하므로 증명되었다.</p><h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(xs ++ ys) <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = (xs <span class=\"built_in\">map</span> f) ++ (ys <span class=\"built_in\">map</span> f)</div><div class=\"line\"></div><div class=\"line\">Nil <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = Nil</div><div class=\"line\">(x :: xs) <span class=\"built_in\">map</span> <span class=\"attr\">f</span> = f(x) :: (xs <span class=\"built_in\">map</span> f)</div></pre></td></tr></table></figure><p>base case..</p><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">left</span></div><div class=\"line\">(Nil ++ ys) map f</div><div class=\"line\">= ys map f</div><div class=\"line\"></div><div class=\"line\">// <span class=\"built_in\">right</span></div><div class=\"line\">(Nil map f) ++ (ys map f)</div><div class=\"line\">= Nil ++ (ys map f)</div><div class=\"line\">= ys map f</div></pre></td></tr></table></figure><p>reduction step</p><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// left</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) ++ ys) map f</div><div class=\"line\"><span class=\"section\">= (x :: (xs ++ ys)) map f</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs ++ ys) map f)</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs map f) ++ (ys map f))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// right</span></div><div class=\"line\"><span class=\"bullet\">((x :: </span>xs) map f) ++ (ys map f)</div><div class=\"line\"><span class=\"section\">= (f(x) :: (xs map f)) ++ (ys map f)</span></div><div class=\"line\"><span class=\"section\">= f(x) :: ((xs map f) ++ (ys map f))</span></div></pre></td></tr></table></figure><p>base case, reduction step 모두 좌변과 우변이 같으므로 같음이 증명되었다.</p>"},{"layout":"post","comments":1,"title":"Functional Programming in Scala week 6","date":"2016-07-26T14:29:50.000Z","_content":"## 6.1 Other Collections\n\n이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자. \n\n### Vector\n리스트의 경우에는 첫번째 element에 접근하는게 마지막 element에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector는 리스트 보다 access pattern이 훨씬 균형잡혀 있다.\n\n벡터는 최초에 2^5(32개)의 원소를 가지는 array가 만들어 진다. 32개가 넘는 원소가 필요하게 되면, 그다음은 32개를 추가로 만드는 것이 아니라, 2^5 * 2^5개, 그러니깐 총 2^10(1024개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32개보다 커지면, 처음 만들어진 32개짜리 벡터는 각각의 32개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32개짜리 원소에서 1024개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다. \n\n또 다른 장점으로는 map, for, filter, fold와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32개가 하나의 묶음이다보니 a single cache line에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list는 vector에 비해서 locality가 나쁘다고 할 수 있다.\n\nvector가 이렇게 좋다는데, list를 써야하는 이유는 무엇일까? recursive data structure의 head를 취하고 나머지를 다시 연산하는 모델 안에서는 list가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head를 취하기가 훨씬 쉽기 때문이다. 하지만 vector의 경우 depth가 1일때는 몰라도 depth가 1만 더 증가해도 훨씬 복잡해진다.\n\nlist의 concat 연산 (::)은 vector에서 다음과 같이 쓰인다.\n\n```\nx +: xs     // xs 앞에 x를 포함하는 새로운 벡터를 붙인다.\nxs :+ x     // xs 뒤에 x를 포함하는 새로운 벡터를 붙인다.\n```\n\n벡터 또한 immutable하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.\n\n\n### Collection Hierachy \n\n스칼라의 collection은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List와 Vector가 속하는 Seq, 나머지는 Set과 Map이다. \n\n![Collectino Hierachy](http://docs.scala-lang.org/resources/images/collections.immutable.png)\n\nArray와 String는 점선으로 되어있는데, 이들도 Seq로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.\n\n```\n// Array\nval xs = Array(1, 2, 3, 44)\nxs map (x => x * 2)\n// res0 : Array[Int] = Array(2, 4, 6, 88)\n\n// String\nval s = \"Hello World\"\ns filter (c => c.isUpper)\n// res1: String = HW\n```\n\n### Range\n\nRange는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.\n\n```\nval r: Range = 1 until 5    // 1, 2, 3, 4\nval s: Range = 1 to 5     // 1, 2, 3, 4, 5\n1 to 10 by 3          // 1, 4, 7, 10\n6 to 1 by -2          // 6, 4, 2\n```\n\n### Some more Sequence Operations\n* xs exists p     : p 함수의 조건을 만족하는 원소가 있는지\n* xs forall p     : 모든 원소가 p 함수의 조건을 만족하는지\n* xs zip ys     : 두 collection의 원소를 pair로 가지는 새로운 collection 생성, 타입은 xs\n* xs.unzip      : zip 형태의 collection을 분해해서 List의 tuples을 만듦, Array는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.\n\n* xs.flatMap f    : 모든 element에 collection-valued functino f를 적용  \n* xs.sum          : numeric collection의 요소들의 합\n* xs.product    : numeric collection의 요소들의 곱\n* xs.max      : 최고값\n* xs.min      : 최소값\n\n \n### Scalar Product\n\n```\nval a: Vector[Double] = Vector(1.0, 2.0, 3.0)\nval b: Vector[Double] = Vector(3.0, 4.0, 5.0)\n  \ndef scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =\n  (xs zip ys).map(xy => xy._1 * xy._2).sum\n\nscalarProduct(a, b)\n\ndef scalarProduct2(xs: Vector[Double], ys: Vector[Double]): Double =\n  (xs zip ys).map{ case (x, y) => x * y }.sum\n\nscalarProduct2(a, b)\n```\n\n두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs와 ys를 zip으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case문으로 대체할 수 있다.\n\n```\n{case p1 => e1 ... case pn => en}\n\n// 위와 동일\nx => x match { case p1 => e1 ... case pn => en }\n```\n\n### isPrime\n\n```\ndef isPrime(n: Int): Boolean = (2 until n) forall (x => (n % x) != 0)\n```\n2부터 n 전까지의 수가 모두 n으로 나누어 떨어지지 않으면 n을 prime number(소수)라 할 수 있다.\n\n\n\n## 6.2 Combinatorial Search and For-Expressions\n\n양수 n이 있고, 또다른 양수 i와 j가 1 <= j < i < n을 만족하고 i + j가 소수라는 조건이 있다. \n코드로 나타내면 다음과 같다.\n\n```\nval n = 7\n(1 until n) map (i => (1 until i) map (j => (i, j)))\n\n// result\nres0: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Int, Int)]] = Vector(Vector(), Vector((2,1)), Vector((3,1), (3,2)), Vector((4,1), (4,2), (4,3)), Vector((5,1), (5,2), (5,3), (5,4)), Vector((6,1), (6,2), (6,3), (6,4), (6,5)))\n```\n\n음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores가 나왔다.\nRange는 Seq의 하위 타입이지만 사실 그 중간에 IndexedSeq라는 타입이 존재한다. 결과값으로 pair가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair를 담을 가장 적합한 타입인 Vector가 선택되어 나타난것이다.\n\n원래 우리가 찾으려고 했던 결과는 Vector의 Vector가 아니라 pair를 하나의 single list에 담아져야 한다. 그래서 모든 sub-sequences를 foldRight와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)\n\n```\n(xss foldRight Seq[Int]())(_ ++ _)\n\n// equvalently\nxss.flatten\n\n// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.\n((1 until n) map (i => (1 until i) map (j => (i, j)))).flatten\n\n// 아래의 법칙을 이용하면\nxs flatMap f = (xs map f).flatten\n\n// 더 간단해질 수 있다.\n(1 until n) flatMap (i => (1 until i) map (j => (i, j)))\n\n// result \nres0: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((2,1), (3,1), (3,2), (4,1), (4,2), (4,3), (5,1), (5,2), (5,3), (5,4), (6,1), (6,2), (6,3), (6,4), (6,5))\n\n// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용\n(1 until n) flatMap (i => (1 until i) map (j => (i, j))) filter (pair => isPrime(pair._1 + pair._2))\n\n// result \nres0: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((2,1), (3,2), (4,1), (4,3), (5,2), (6,1), (6,5))\n```\n\n### For-Expression\n\nfor loop에 대해서 알아보자\n\n```\ncase class Person(name: String, age: Int)\n\n// 20살 이상인 사람만 가져오고 싶을때\nfor (p <- persons if p.age > 20) yield p.name\n\n// 아래와 같음\npersons filter (p => p.age > 20) map (p = > p.name)\n```\n\n기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop는 어떤 요소가 변할 수 있는 side effect가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.\n\n```\nfor (s) yield e\n```\nfor-expression을 위와같이 단순화 시킬 수 있다.\n\n> s is a sequence of generators and filters\n> e is an expression whose value is returned by an iteration\n\n* generator의 p <- e에서 p는 하나의 패턴이고, e는 컬렉션의 값이다.\n* filter의 f는 boolean expression이다.\n* 몇개의 generator가 있을때는 마지막이 처음보다 빠르다. why?\n* ( s )는 { s }처럼 사용할 수도 있다.\n\n### example\n\n이전에 보았던 문제를 for loop를 이용해 다시 만들어 보자.\n첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair를 구하는 함수\n\n```\nfor {\n  i <- 1 until n\n  j <- 1 until i\n  if isPrime(i+j)\n} yield (i, j)\n```\n매우 심플해졌다.\n\n두번째는 scalarProduct\n\n```\ndef scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =\n  (for ((x, y) <- xs zip ys) yield x * y).sum\n```\n따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.\n\n\n## 6.3 Combinatorial Search Example\n\n이번 챕터에서는 Set에 대해 알아보자.\nSet도 Seq와 마찬가지로 Iterable의 subclass다. 그래서 Seq에서 사용하는 대부분의 연산(map, filter 등)을 Set에서도 동일하게 사용할 수 있다.\n\n### Sets vs Sequences\n* Set은 unordered하다. \n* Set은 중복되는 element를 가질 수 없다.\n* Set의 fundamental operation은 요소가 해당 Set에 포함되는지 확인하는 contains다.\n\n### Example: N-Queens\n예제를 살펴보자.\n체스보드에 서로 위협이 되지 않는 8개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal에 둘 수 없는 문제와 같다.\n\n알고리즘을 살펴보자.\n* 사이즈 n인 보드에 k-1개의 퀸이 놓여진 모든 솔루션 추출\n* 각 솔루션을 0에서 n-1까지의 columns 숫자로 구성된 리스트로 변환\n* 리스트의 첫번째 요소는 k-1번째 row가 될 것이고, k-2, k-3 ...의 퀸을 붙여나간다.\n* 각 솔루션의 하나의 element와 함께 set of lists로 만들어진다.\n* kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.\n\n```\ndef queens(n: Int): Set[List[Int]] = {\n  def placeQueens(k: Int): Set[List[Int]] =\n    if (k == 0) Set(List())\n     else\n      for {\n        queens <- placeQueens(k - 1)\n        col <- 0 until n\n        if isSafe(col, queens)\n      } yield col :: queens\n\n  placeQueens(n)\n}\n```\n\n기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth씩 내려가다보면 마지막에는 빈 셋에 0에서 n까지 각각 배치될것이다. 그리고 1개의 퀸이 배치된 list들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.\n\n```\ndef isSafe(col: Int, queens: List[Int]): Boolean = {\n  val row = queens.length\n  val queensWithRow = (row -1 to 0 by -1) zip queens\n  queensWithRow forall {\n    case (r, c) => col != c && math.abs(col - c) != row - r\n  }\n}\n```\n\n기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column에 속하지 않으면서 대각선에 위치하지 않으면 safe하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.\n\n```\ndef show(queens: List[Int]) = {\n  val lines =\n    for (col <- queens)\n    yield Vector.fill(queens.length)(\"* \").updated(col, \"X \").mkString\n  \"\\n\" + (lines mkString \"\\n\")\n}\n\n(queens(8) take 3 map show) mkString \"\\n\"\n\n```\n마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다. \n결과는 아래와 같다.\n\n```\nres0: String = \n* * X * * * * * \nX * * * * * * * \n* * * * * * X * \n* * * * X * * * \n* * * * * * * X \n* X * * * * * * \n* * * X * * * * \n* * * * * X * * \n\n* * * * * X * * \n* * X * * * * * \nX * * * * * * * \n* * * * * * * X \n* * * X * * * * \n* X * * * * * * \n* * * * * * X * \n* * * * X * * * \n\n* * * * X * * * \n* X * * * * * * \n* * * * * * * X \nX * * * * * * * \n* * * X * * * * \n* * * * * * X * \n* * X * * * * * \n* * * * * X * * \n```\n\n\n## 6.4 Maps\n\nMap에 대해서 알아보자.\nMap은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value는 숫자나 문자 등 어떤 타입이든 가능하다.\n또한 Map[Key, Value]는 Key => Value의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value를 구할 수 있다는 말과 같다.\n\n```\n// key를 이용해 value를 가져올때\ncapitalOfCountry(\"andorra\")   // exception 발생\n\n// 대신에 get을 사용한다.\ncapitalOfCountry get \"andorra\"  // None\n```\n\n### Option Type\nOption은 covariant 하기 때문에 Option[A] > Option[Nothing]이다. 즉 None\n\n```\ntrait Option[+A]\ncase class Some[+A](value: A) extend Option[A]\nobject None extend Option[Nothing]\n```\n\n패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.\n\n```\ndef showCapital(country: String) = capitalOfCountry.get(country) match {\n  case Some(capital) => capital\n  case None => \"missing data\"\n}\n```\n\n### Sorted and GroupBy\nsql 쿼리의 opertaion을 사용해보자.\n\n```\n// sorted\nval fruit = List(\"apple\", \"pear\", \"orange\", \"pineapple\")\nfruit.sortWith (_.length < _.length)  // List(\"pear\", \"apple\", \"orange\", \"pineapple\")\nfruit.sorted    // List(\"apple\", \"orange\", \"pear\", \"pineapple\")\n      \n// groupBy\nfruit groupBy (_.head)    \n// Map(p -> List(pear, pineapple)),\n//     a -> List(apple),\n//     o -> List(orange)) \n```\ngroubBy 명령은 식별 함수 f에 따라 collection의 map을 만든다.\n\n### Polynoial Example\nfrom exponents to coefficient 방식으로 map을 만든다.\n\n```\nclass Poly(val terms: Map[Int, Double]) {\n  def + (other: Poly) = new Poly(terms ++ other.terms)\n  override def toString =\n    (for ((exp, coeff) <- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"\n}\n\nval p1 = new Poly(Map(1 -> 2.0, 3 -> 4.0, 5 -> 6.2))\nval p2 = new Poly(Map(0 -> 3.0, 3 -> 7.0))\np1 + p2\n```\n\n두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents가 같은 coefficient 끼리 더해주고 나머지 exponents들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.\n하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.\n\n```\np1: Poly = 6.2x^5 + 4.0x^3 + 2.0x^1\np2: Poly = 7.0x^3 + 3.0x^0\nres0: Poly = 6.2x^5 + 7.0x^3 + 2.0x^1 + 3.0x^0\n```\n\n왜 그럴까??\n맵끼리 concatenating 할때는 아마 같은 키의 value를 합치는게 아니라 뒤에 나오는 map의 key의 value로 대체하기 때문에 이렇게 나오는 것이다.\n다음과 같이 바꿔보자.\n\n```\ndef + (other: Poly) = new Poly(terms ++ (other.terms map adjust))\ndef adjust(term: (Int, Double)): (Int, Double) = {\n  val (exp, coeff) = term\n  terms get exp match {\n    case Some(coeff1) => exp -> (coeff + coeff1)\n    case None => exp -> coeff\n  }\n}\n```\n\n뒤에 오는 other에 adjust 함수를 매핑해보자.\nadjust 함수는 other의 term 하나를 뽑아다가 terms에 해당 exponent가 있는지 확인하고 있으면 terms와 other(term)의 coefficient를 더해준다. 만약 없다면, othe의 coeff를 그대로 리턴한다.\n결과를 보자. \n\n```\np1: Poly = 6.2x^5 + 4.0x^3 + 2.0x^1\np2: Poly = 7.0x^3 + 3.0x^0\nres0: Poly = 6.2x^5 + 11.0x^3 + 2.0x^1 + 3.0x^0\n```\n\n### Default Values \n심플한 방법이 있었다.\nwithDefaultValue operation을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.\nwithDefaultValue를 이용해 좀더 개선해보자.\n\n```\nclass Poly(terms0: Map[Int, Double]) {\n  def this(bindings: (Int, Double)*) = this(bindings.toMap)\n  val terms = terms0 withDefaultValue 0.0\n  def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))\n  def adjust(term: (Int, Double)): (Int, Double) = {\n    val (exp, coeff) = term\n    exp -> (coeff + terms(exp))\n  }\n\n  override def toString =\n    (for ((exp, coeff) <- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"\n}\n\nval p1 = new Poly(1 -> 2.0, 3 -> 4.0, 5 -> 6.2)\nval p2 = new Poly(0 -> 3.0, 3 -> 7.0)\np1 + p2\np1.terms(8)\n```\n크게 두가지가 바뀌었다.\n첫째는 Poly 클래스의 parameter에 default value를 적용해주어 adjust에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -> (coeff + terms(exp)))\n그리고 둘째는 새로운 Poly를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial하게 들어오면 이를 Map으로 바꿔주도록 하였다. \n\n### Exercise\n위에서 보았던 '++' 연산과 foldLeft를 이용한 연산중 어느것이 더 효율적일까? \n\n```\ndef + (other: Poly) =\n  new Poly((other.terms foldLeft terms)(addTerm))\n\ndef addTerm(terms: Map[Int, Double], term: (Int, Double)): Map[Int, Double] = {\n  val (exp, coeff) = term\n  terms + (exp -> (coeff + terms(exp)))\n}\n```\nfold를 이용하면 위에서처럼 Map을 생성하여 각 exponent를 비교해서 값을 넣는게 아니라 기존부터 있던 terms에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.\n\n\n\n## 6.5 Putting the Pieces Together\n\n전화번호를 문자로 바꾸는 예제를 살펴보자.\n참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300라인정도의 코드가 나왔다고 한다.\n\n```\nval mnemonics = Map(\n       '2' -> \"ABC\", '3' -> \"DEF\", '4' => \"GHI\", '5' -> \"JKL\", \n       '6' -> \"MNO\", '7' -> \"PQRS\", '8' -> \"TUV\", '9' -> \"WXYZ\")\n```\n\n위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.\n\n예를 들어 \"7225247386\"를 convert해보면 그 중 하나가 \"SCALAISFUN\"(Scala is fun)이 된다.\n\n전체코드는 다음과 같다.\n\n```\nval in = Source.fromURL(\"http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt\")\nval words = in.getLines.toList filter (word => word forall (chr => chr.isLetter))\n\nval mnem = Map(\n  '2' -> \"ABC\", '3' -> \"DEF\", '4' -> \"GHI\", '5' -> \"JKL\",\n  '6' -> \"MNO\", '7' -> \"PQRS\", '8' -> \"TUV\", '9' -> \"WXYZ\")\n\nval charCode: Map[Char, Char] =\n  for ((digit, str) <- mnem; ltr <- str) yield ltr -> digit\n\n/**\n * 파라미터로 들어온 문자열을 charCode로 변경함\n * @param word\n * @return\n */\ndef wordCode(word: String): String =\n  word.toUpperCase map charCode\n\n  wordCode(\"Java\")  // res0: String = 5282\n\n/**\n * A map form digit strings to the words that represent them,\n * e,g. \"5282\" -> List(\"Java\", \"Kata\", \"Lava\", ...)\n * Note: A missing number should map to the empty set, e,g. \"11111\" -> List()\n */\nval wordsForNum: Map[String, Seq[String]] =\n  words groupBy wordCode withDefaultValue Seq()\n\n/**\n * Return all ways to encode a number as a list of words\n */\ndef encode(number: String): Set[List[String]] =\n  if (number.isEmpty) Set(List())\n  // 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다\n  else {\n    for {\n      split <- 1 to number.length\n      word <- wordsForNum(number take split)\n      rest <- encode(number drop split)\n    } yield word :: rest\n  }.toSet\n\nencode(\"7225247386\")\n\ndef translate(number: String): Set[String] =\n  encode(number) map(_ mkString \" \")\n\ntranslate(\"7225247386\")\n```  \n \n지금까지 살펴본 스칼라 collection은 아래와 같이 정리 할 수 있다.\n\n* easy to use: few steps to do the job.\n* concise: one word replaces a whole loop.\n* safe: type checker is really good at catching errors.\n* fast: collection ops art tuned, can be parallelized.\n* universal: one vocabulary to work on all kinds of collections.\n","source":"_posts/2016-07-26-functional-programming-in-scala-week6.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"Functional Programming in Scala week 6\"\ncategories: programming\ndate:   2016-07-26 23:29:50 +0900\ntags:\n- scala\n- coursera\n---\n## 6.1 Other Collections\n\n이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자. \n\n### Vector\n리스트의 경우에는 첫번째 element에 접근하는게 마지막 element에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector는 리스트 보다 access pattern이 훨씬 균형잡혀 있다.\n\n벡터는 최초에 2^5(32개)의 원소를 가지는 array가 만들어 진다. 32개가 넘는 원소가 필요하게 되면, 그다음은 32개를 추가로 만드는 것이 아니라, 2^5 * 2^5개, 그러니깐 총 2^10(1024개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32개보다 커지면, 처음 만들어진 32개짜리 벡터는 각각의 32개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32개짜리 원소에서 1024개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다. \n\n또 다른 장점으로는 map, for, filter, fold와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32개가 하나의 묶음이다보니 a single cache line에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list는 vector에 비해서 locality가 나쁘다고 할 수 있다.\n\nvector가 이렇게 좋다는데, list를 써야하는 이유는 무엇일까? recursive data structure의 head를 취하고 나머지를 다시 연산하는 모델 안에서는 list가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head를 취하기가 훨씬 쉽기 때문이다. 하지만 vector의 경우 depth가 1일때는 몰라도 depth가 1만 더 증가해도 훨씬 복잡해진다.\n\nlist의 concat 연산 (::)은 vector에서 다음과 같이 쓰인다.\n\n```\nx +: xs     // xs 앞에 x를 포함하는 새로운 벡터를 붙인다.\nxs :+ x     // xs 뒤에 x를 포함하는 새로운 벡터를 붙인다.\n```\n\n벡터 또한 immutable하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.\n\n\n### Collection Hierachy \n\n스칼라의 collection은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List와 Vector가 속하는 Seq, 나머지는 Set과 Map이다. \n\n![Collectino Hierachy](http://docs.scala-lang.org/resources/images/collections.immutable.png)\n\nArray와 String는 점선으로 되어있는데, 이들도 Seq로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.\n\n```\n// Array\nval xs = Array(1, 2, 3, 44)\nxs map (x => x * 2)\n// res0 : Array[Int] = Array(2, 4, 6, 88)\n\n// String\nval s = \"Hello World\"\ns filter (c => c.isUpper)\n// res1: String = HW\n```\n\n### Range\n\nRange는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.\n\n```\nval r: Range = 1 until 5    // 1, 2, 3, 4\nval s: Range = 1 to 5     // 1, 2, 3, 4, 5\n1 to 10 by 3          // 1, 4, 7, 10\n6 to 1 by -2          // 6, 4, 2\n```\n\n### Some more Sequence Operations\n* xs exists p     : p 함수의 조건을 만족하는 원소가 있는지\n* xs forall p     : 모든 원소가 p 함수의 조건을 만족하는지\n* xs zip ys     : 두 collection의 원소를 pair로 가지는 새로운 collection 생성, 타입은 xs\n* xs.unzip      : zip 형태의 collection을 분해해서 List의 tuples을 만듦, Array는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.\n\n* xs.flatMap f    : 모든 element에 collection-valued functino f를 적용  \n* xs.sum          : numeric collection의 요소들의 합\n* xs.product    : numeric collection의 요소들의 곱\n* xs.max      : 최고값\n* xs.min      : 최소값\n\n \n### Scalar Product\n\n```\nval a: Vector[Double] = Vector(1.0, 2.0, 3.0)\nval b: Vector[Double] = Vector(3.0, 4.0, 5.0)\n  \ndef scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =\n  (xs zip ys).map(xy => xy._1 * xy._2).sum\n\nscalarProduct(a, b)\n\ndef scalarProduct2(xs: Vector[Double], ys: Vector[Double]): Double =\n  (xs zip ys).map{ case (x, y) => x * y }.sum\n\nscalarProduct2(a, b)\n```\n\n두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs와 ys를 zip으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case문으로 대체할 수 있다.\n\n```\n{case p1 => e1 ... case pn => en}\n\n// 위와 동일\nx => x match { case p1 => e1 ... case pn => en }\n```\n\n### isPrime\n\n```\ndef isPrime(n: Int): Boolean = (2 until n) forall (x => (n % x) != 0)\n```\n2부터 n 전까지의 수가 모두 n으로 나누어 떨어지지 않으면 n을 prime number(소수)라 할 수 있다.\n\n\n\n## 6.2 Combinatorial Search and For-Expressions\n\n양수 n이 있고, 또다른 양수 i와 j가 1 <= j < i < n을 만족하고 i + j가 소수라는 조건이 있다. \n코드로 나타내면 다음과 같다.\n\n```\nval n = 7\n(1 until n) map (i => (1 until i) map (j => (i, j)))\n\n// result\nres0: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Int, Int)]] = Vector(Vector(), Vector((2,1)), Vector((3,1), (3,2)), Vector((4,1), (4,2), (4,3)), Vector((5,1), (5,2), (5,3), (5,4)), Vector((6,1), (6,2), (6,3), (6,4), (6,5)))\n```\n\n음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores가 나왔다.\nRange는 Seq의 하위 타입이지만 사실 그 중간에 IndexedSeq라는 타입이 존재한다. 결과값으로 pair가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair를 담을 가장 적합한 타입인 Vector가 선택되어 나타난것이다.\n\n원래 우리가 찾으려고 했던 결과는 Vector의 Vector가 아니라 pair를 하나의 single list에 담아져야 한다. 그래서 모든 sub-sequences를 foldRight와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)\n\n```\n(xss foldRight Seq[Int]())(_ ++ _)\n\n// equvalently\nxss.flatten\n\n// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.\n((1 until n) map (i => (1 until i) map (j => (i, j)))).flatten\n\n// 아래의 법칙을 이용하면\nxs flatMap f = (xs map f).flatten\n\n// 더 간단해질 수 있다.\n(1 until n) flatMap (i => (1 until i) map (j => (i, j)))\n\n// result \nres0: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((2,1), (3,1), (3,2), (4,1), (4,2), (4,3), (5,1), (5,2), (5,3), (5,4), (6,1), (6,2), (6,3), (6,4), (6,5))\n\n// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용\n(1 until n) flatMap (i => (1 until i) map (j => (i, j))) filter (pair => isPrime(pair._1 + pair._2))\n\n// result \nres0: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((2,1), (3,2), (4,1), (4,3), (5,2), (6,1), (6,5))\n```\n\n### For-Expression\n\nfor loop에 대해서 알아보자\n\n```\ncase class Person(name: String, age: Int)\n\n// 20살 이상인 사람만 가져오고 싶을때\nfor (p <- persons if p.age > 20) yield p.name\n\n// 아래와 같음\npersons filter (p => p.age > 20) map (p = > p.name)\n```\n\n기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop는 어떤 요소가 변할 수 있는 side effect가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.\n\n```\nfor (s) yield e\n```\nfor-expression을 위와같이 단순화 시킬 수 있다.\n\n> s is a sequence of generators and filters\n> e is an expression whose value is returned by an iteration\n\n* generator의 p <- e에서 p는 하나의 패턴이고, e는 컬렉션의 값이다.\n* filter의 f는 boolean expression이다.\n* 몇개의 generator가 있을때는 마지막이 처음보다 빠르다. why?\n* ( s )는 { s }처럼 사용할 수도 있다.\n\n### example\n\n이전에 보았던 문제를 for loop를 이용해 다시 만들어 보자.\n첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair를 구하는 함수\n\n```\nfor {\n  i <- 1 until n\n  j <- 1 until i\n  if isPrime(i+j)\n} yield (i, j)\n```\n매우 심플해졌다.\n\n두번째는 scalarProduct\n\n```\ndef scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =\n  (for ((x, y) <- xs zip ys) yield x * y).sum\n```\n따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.\n\n\n## 6.3 Combinatorial Search Example\n\n이번 챕터에서는 Set에 대해 알아보자.\nSet도 Seq와 마찬가지로 Iterable의 subclass다. 그래서 Seq에서 사용하는 대부분의 연산(map, filter 등)을 Set에서도 동일하게 사용할 수 있다.\n\n### Sets vs Sequences\n* Set은 unordered하다. \n* Set은 중복되는 element를 가질 수 없다.\n* Set의 fundamental operation은 요소가 해당 Set에 포함되는지 확인하는 contains다.\n\n### Example: N-Queens\n예제를 살펴보자.\n체스보드에 서로 위협이 되지 않는 8개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal에 둘 수 없는 문제와 같다.\n\n알고리즘을 살펴보자.\n* 사이즈 n인 보드에 k-1개의 퀸이 놓여진 모든 솔루션 추출\n* 각 솔루션을 0에서 n-1까지의 columns 숫자로 구성된 리스트로 변환\n* 리스트의 첫번째 요소는 k-1번째 row가 될 것이고, k-2, k-3 ...의 퀸을 붙여나간다.\n* 각 솔루션의 하나의 element와 함께 set of lists로 만들어진다.\n* kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.\n\n```\ndef queens(n: Int): Set[List[Int]] = {\n  def placeQueens(k: Int): Set[List[Int]] =\n    if (k == 0) Set(List())\n     else\n      for {\n        queens <- placeQueens(k - 1)\n        col <- 0 until n\n        if isSafe(col, queens)\n      } yield col :: queens\n\n  placeQueens(n)\n}\n```\n\n기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth씩 내려가다보면 마지막에는 빈 셋에 0에서 n까지 각각 배치될것이다. 그리고 1개의 퀸이 배치된 list들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.\n\n```\ndef isSafe(col: Int, queens: List[Int]): Boolean = {\n  val row = queens.length\n  val queensWithRow = (row -1 to 0 by -1) zip queens\n  queensWithRow forall {\n    case (r, c) => col != c && math.abs(col - c) != row - r\n  }\n}\n```\n\n기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column에 속하지 않으면서 대각선에 위치하지 않으면 safe하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.\n\n```\ndef show(queens: List[Int]) = {\n  val lines =\n    for (col <- queens)\n    yield Vector.fill(queens.length)(\"* \").updated(col, \"X \").mkString\n  \"\\n\" + (lines mkString \"\\n\")\n}\n\n(queens(8) take 3 map show) mkString \"\\n\"\n\n```\n마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다. \n결과는 아래와 같다.\n\n```\nres0: String = \n* * X * * * * * \nX * * * * * * * \n* * * * * * X * \n* * * * X * * * \n* * * * * * * X \n* X * * * * * * \n* * * X * * * * \n* * * * * X * * \n\n* * * * * X * * \n* * X * * * * * \nX * * * * * * * \n* * * * * * * X \n* * * X * * * * \n* X * * * * * * \n* * * * * * X * \n* * * * X * * * \n\n* * * * X * * * \n* X * * * * * * \n* * * * * * * X \nX * * * * * * * \n* * * X * * * * \n* * * * * * X * \n* * X * * * * * \n* * * * * X * * \n```\n\n\n## 6.4 Maps\n\nMap에 대해서 알아보자.\nMap은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value는 숫자나 문자 등 어떤 타입이든 가능하다.\n또한 Map[Key, Value]는 Key => Value의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value를 구할 수 있다는 말과 같다.\n\n```\n// key를 이용해 value를 가져올때\ncapitalOfCountry(\"andorra\")   // exception 발생\n\n// 대신에 get을 사용한다.\ncapitalOfCountry get \"andorra\"  // None\n```\n\n### Option Type\nOption은 covariant 하기 때문에 Option[A] > Option[Nothing]이다. 즉 None\n\n```\ntrait Option[+A]\ncase class Some[+A](value: A) extend Option[A]\nobject None extend Option[Nothing]\n```\n\n패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.\n\n```\ndef showCapital(country: String) = capitalOfCountry.get(country) match {\n  case Some(capital) => capital\n  case None => \"missing data\"\n}\n```\n\n### Sorted and GroupBy\nsql 쿼리의 opertaion을 사용해보자.\n\n```\n// sorted\nval fruit = List(\"apple\", \"pear\", \"orange\", \"pineapple\")\nfruit.sortWith (_.length < _.length)  // List(\"pear\", \"apple\", \"orange\", \"pineapple\")\nfruit.sorted    // List(\"apple\", \"orange\", \"pear\", \"pineapple\")\n      \n// groupBy\nfruit groupBy (_.head)    \n// Map(p -> List(pear, pineapple)),\n//     a -> List(apple),\n//     o -> List(orange)) \n```\ngroubBy 명령은 식별 함수 f에 따라 collection의 map을 만든다.\n\n### Polynoial Example\nfrom exponents to coefficient 방식으로 map을 만든다.\n\n```\nclass Poly(val terms: Map[Int, Double]) {\n  def + (other: Poly) = new Poly(terms ++ other.terms)\n  override def toString =\n    (for ((exp, coeff) <- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"\n}\n\nval p1 = new Poly(Map(1 -> 2.0, 3 -> 4.0, 5 -> 6.2))\nval p2 = new Poly(Map(0 -> 3.0, 3 -> 7.0))\np1 + p2\n```\n\n두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents가 같은 coefficient 끼리 더해주고 나머지 exponents들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.\n하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.\n\n```\np1: Poly = 6.2x^5 + 4.0x^3 + 2.0x^1\np2: Poly = 7.0x^3 + 3.0x^0\nres0: Poly = 6.2x^5 + 7.0x^3 + 2.0x^1 + 3.0x^0\n```\n\n왜 그럴까??\n맵끼리 concatenating 할때는 아마 같은 키의 value를 합치는게 아니라 뒤에 나오는 map의 key의 value로 대체하기 때문에 이렇게 나오는 것이다.\n다음과 같이 바꿔보자.\n\n```\ndef + (other: Poly) = new Poly(terms ++ (other.terms map adjust))\ndef adjust(term: (Int, Double)): (Int, Double) = {\n  val (exp, coeff) = term\n  terms get exp match {\n    case Some(coeff1) => exp -> (coeff + coeff1)\n    case None => exp -> coeff\n  }\n}\n```\n\n뒤에 오는 other에 adjust 함수를 매핑해보자.\nadjust 함수는 other의 term 하나를 뽑아다가 terms에 해당 exponent가 있는지 확인하고 있으면 terms와 other(term)의 coefficient를 더해준다. 만약 없다면, othe의 coeff를 그대로 리턴한다.\n결과를 보자. \n\n```\np1: Poly = 6.2x^5 + 4.0x^3 + 2.0x^1\np2: Poly = 7.0x^3 + 3.0x^0\nres0: Poly = 6.2x^5 + 11.0x^3 + 2.0x^1 + 3.0x^0\n```\n\n### Default Values \n심플한 방법이 있었다.\nwithDefaultValue operation을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.\nwithDefaultValue를 이용해 좀더 개선해보자.\n\n```\nclass Poly(terms0: Map[Int, Double]) {\n  def this(bindings: (Int, Double)*) = this(bindings.toMap)\n  val terms = terms0 withDefaultValue 0.0\n  def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))\n  def adjust(term: (Int, Double)): (Int, Double) = {\n    val (exp, coeff) = term\n    exp -> (coeff + terms(exp))\n  }\n\n  override def toString =\n    (for ((exp, coeff) <- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"\n}\n\nval p1 = new Poly(1 -> 2.0, 3 -> 4.0, 5 -> 6.2)\nval p2 = new Poly(0 -> 3.0, 3 -> 7.0)\np1 + p2\np1.terms(8)\n```\n크게 두가지가 바뀌었다.\n첫째는 Poly 클래스의 parameter에 default value를 적용해주어 adjust에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -> (coeff + terms(exp)))\n그리고 둘째는 새로운 Poly를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial하게 들어오면 이를 Map으로 바꿔주도록 하였다. \n\n### Exercise\n위에서 보았던 '++' 연산과 foldLeft를 이용한 연산중 어느것이 더 효율적일까? \n\n```\ndef + (other: Poly) =\n  new Poly((other.terms foldLeft terms)(addTerm))\n\ndef addTerm(terms: Map[Int, Double], term: (Int, Double)): Map[Int, Double] = {\n  val (exp, coeff) = term\n  terms + (exp -> (coeff + terms(exp)))\n}\n```\nfold를 이용하면 위에서처럼 Map을 생성하여 각 exponent를 비교해서 값을 넣는게 아니라 기존부터 있던 terms에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.\n\n\n\n## 6.5 Putting the Pieces Together\n\n전화번호를 문자로 바꾸는 예제를 살펴보자.\n참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300라인정도의 코드가 나왔다고 한다.\n\n```\nval mnemonics = Map(\n       '2' -> \"ABC\", '3' -> \"DEF\", '4' => \"GHI\", '5' -> \"JKL\", \n       '6' -> \"MNO\", '7' -> \"PQRS\", '8' -> \"TUV\", '9' -> \"WXYZ\")\n```\n\n위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.\n\n예를 들어 \"7225247386\"를 convert해보면 그 중 하나가 \"SCALAISFUN\"(Scala is fun)이 된다.\n\n전체코드는 다음과 같다.\n\n```\nval in = Source.fromURL(\"http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt\")\nval words = in.getLines.toList filter (word => word forall (chr => chr.isLetter))\n\nval mnem = Map(\n  '2' -> \"ABC\", '3' -> \"DEF\", '4' -> \"GHI\", '5' -> \"JKL\",\n  '6' -> \"MNO\", '7' -> \"PQRS\", '8' -> \"TUV\", '9' -> \"WXYZ\")\n\nval charCode: Map[Char, Char] =\n  for ((digit, str) <- mnem; ltr <- str) yield ltr -> digit\n\n/**\n * 파라미터로 들어온 문자열을 charCode로 변경함\n * @param word\n * @return\n */\ndef wordCode(word: String): String =\n  word.toUpperCase map charCode\n\n  wordCode(\"Java\")  // res0: String = 5282\n\n/**\n * A map form digit strings to the words that represent them,\n * e,g. \"5282\" -> List(\"Java\", \"Kata\", \"Lava\", ...)\n * Note: A missing number should map to the empty set, e,g. \"11111\" -> List()\n */\nval wordsForNum: Map[String, Seq[String]] =\n  words groupBy wordCode withDefaultValue Seq()\n\n/**\n * Return all ways to encode a number as a list of words\n */\ndef encode(number: String): Set[List[String]] =\n  if (number.isEmpty) Set(List())\n  // 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다\n  else {\n    for {\n      split <- 1 to number.length\n      word <- wordsForNum(number take split)\n      rest <- encode(number drop split)\n    } yield word :: rest\n  }.toSet\n\nencode(\"7225247386\")\n\ndef translate(number: String): Set[String] =\n  encode(number) map(_ mkString \" \")\n\ntranslate(\"7225247386\")\n```  \n \n지금까지 살펴본 스칼라 collection은 아래와 같이 정리 할 수 있다.\n\n* easy to use: few steps to do the job.\n* concise: one word replaces a whole loop.\n* safe: type checker is really good at catching errors.\n* fast: collection ops art tuned, can be parallelized.\n* universal: one vocabulary to work on all kinds of collections.\n","slug":"2016-07-26-functional-programming-in-scala-week6","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7e001uwxt487usakgb","content":"<h2 id=\"6-1-Other-Collections\"><a href=\"#6-1-Other-Collections\" class=\"headerlink\" title=\"6.1 Other Collections\"></a>6.1 Other Collections</h2><p>이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자.</p><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>리스트의 경우에는 첫번째 element에 접근하는게 마지막 element에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector는 리스트 보다 access pattern이 훨씬 균형잡혀 있다.</p><p>벡터는 최초에 2^5(32개)의 원소를 가지는 array가 만들어 진다. 32개가 넘는 원소가 필요하게 되면, 그다음은 32개를 추가로 만드는 것이 아니라, 2^5 * 2^5개, 그러니깐 총 2^10(1024개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32개보다 커지면, 처음 만들어진 32개짜리 벡터는 각각의 32개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32개짜리 원소에서 1024개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다.</p><p>또 다른 장점으로는 map, for, filter, fold와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32개가 하나의 묶음이다보니 a single cache line에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list는 vector에 비해서 locality가 나쁘다고 할 수 있다.</p><p>vector가 이렇게 좋다는데, list를 써야하는 이유는 무엇일까? recursive data structure의 head를 취하고 나머지를 다시 연산하는 모델 안에서는 list가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head를 취하기가 훨씬 쉽기 때문이다. 하지만 vector의 경우 depth가 1일때는 몰라도 depth가 1만 더 증가해도 훨씬 복잡해진다.</p><p>list의 concat 연산 (::)은 vector에서 다음과 같이 쓰인다.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">x</span> +: xs     // xs 앞에 <span class=\"keyword\">x</span>를 포함하는 새로운 벡터를 붙인다.</div><div class=\"line\">xs :+ <span class=\"keyword\">x</span>     // xs 뒤에 <span class=\"keyword\">x</span>를 포함하는 새로운 벡터를 붙인다.</div></pre></td></tr></table></figure><p>벡터 또한 immutable하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.</p><h3 id=\"Collection-Hierachy\"><a href=\"#Collection-Hierachy\" class=\"headerlink\" title=\"Collection Hierachy\"></a>Collection Hierachy</h3><p>스칼라의 collection은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List와 Vector가 속하는 Seq, 나머지는 Set과 Map이다.</p><p><img src=\"http://docs.scala-lang.org/resources/images/collections.immutable.png\" alt=\"Collectino Hierachy\"></p><p>Array와 String는 점선으로 되어있는데, 이들도 Seq로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array</span></div><div class=\"line\">val xs = <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>)</div><div class=\"line\">xs map (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// res0 : Array[Int] = Array(2, 4, 6, 88)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// String</span></div><div class=\"line\">val s = <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">s filter (<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.isUpper)</div><div class=\"line\"><span class=\"comment\">// res1: String = HW</span></div></pre></td></tr></table></figure><h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><p>Range는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">val r: Range = <span class=\"number\">1</span> <span class=\"keyword\">until</span> <span class=\"number\">5</span>   <span class=\"comment\"> // 1, 2, 3, 4</span></div><div class=\"line\">val s: Range = <span class=\"number\">1</span> <span class=\"built_in\">to</span> <span class=\"number\">5</span>    <span class=\"comment\"> // 1, 2, 3, 4, 5</span></div><div class=\"line\"><span class=\"number\">1</span> <span class=\"built_in\">to</span> <span class=\"number\">10</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span>         <span class=\"comment\"> // 1, 4, 7, 10</span></div><div class=\"line\"><span class=\"number\">6</span> <span class=\"built_in\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">by</span> <span class=\"number\">-2</span>         <span class=\"comment\"> // 6, 4, 2</span></div></pre></td></tr></table></figure><h3 id=\"Some-more-Sequence-Operations\"><a href=\"#Some-more-Sequence-Operations\" class=\"headerlink\" title=\"Some more Sequence Operations\"></a>Some more Sequence Operations</h3><ul><li>xs exists p : p 함수의 조건을 만족하는 원소가 있는지</li><li>xs forall p : 모든 원소가 p 함수의 조건을 만족하는지</li><li>xs zip ys : 두 collection의 원소를 pair로 가지는 새로운 collection 생성, 타입은 xs</li><li><p>xs.unzip : zip 형태의 collection을 분해해서 List의 tuples을 만듦, Array는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.</p></li><li><p>xs.flatMap f : 모든 element에 collection-valued functino f를 적용</p></li><li>xs.sum : numeric collection의 요소들의 합</li><li>xs.product : numeric collection의 요소들의 곱</li><li>xs.max : 최고값</li><li>xs.min : 최소값</li></ul><h3 id=\"Scalar-Product\"><a href=\"#Scalar-Product\" class=\"headerlink\" title=\"Scalar Product\"></a>Scalar Product</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">val a: Vector[Double] = Vector<span class=\"comment\">(1.0, 2.0, 3.0)</span></div><div class=\"line\">val b: Vector[Double] = Vector<span class=\"comment\">(3.0, 4.0, 5.0)</span></div><div class=\"line\">  </div><div class=\"line\">def scalarProduct<span class=\"comment\">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</div><div class=\"line\">  <span class=\"comment\">(xs zip ys)</span>.map<span class=\"comment\">(xy =&gt; xy._1 * xy._2)</span>.sum</div><div class=\"line\"></div><div class=\"line\">scalarProduct<span class=\"comment\">(a, b)</span></div><div class=\"line\"></div><div class=\"line\">def scalarProduct<span class=\"number\">2</span><span class=\"comment\">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</div><div class=\"line\">  <span class=\"comment\">(xs zip ys)</span>.map&#123; case <span class=\"comment\">(x, y)</span> =&gt; x * y &#125;.sum</div><div class=\"line\"></div><div class=\"line\">scalarProduct<span class=\"number\">2</span><span class=\"comment\">(a, b)</span></div></pre></td></tr></table></figure><p>두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs와 ys를 zip으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case문으로 대체할 수 있다.</p><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"built_in\">case</span> p1 =&gt; e1 ... <span class=\"built_in\">case</span> pn =&gt; en&#125;</div><div class=\"line\"></div><div class=\"line\">// 위와 동일</div><div class=\"line\">x =&gt; x <span class=\"keyword\">match</span> &#123; <span class=\"built_in\">case</span> p1 =&gt; e1 ... <span class=\"built_in\">case</span> pn =&gt; en &#125;</div></pre></td></tr></table></figure><h3 id=\"isPrime\"><a href=\"#isPrime\" class=\"headerlink\" title=\"isPrime\"></a>isPrime</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"symbol\">n:</span> Int)</span></span>: Boolean = (<span class=\"number\">2</span> <span class=\"keyword\">until</span> n) forall (x =&gt; (n % x) != <span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>2부터 n 전까지의 수가 모두 n으로 나누어 떨어지지 않으면 n을 prime number(소수)라 할 수 있다.</p><h2 id=\"6-2-Combinatorial-Search-and-For-Expressions\"><a href=\"#6-2-Combinatorial-Search-and-For-Expressions\" class=\"headerlink\" title=\"6.2 Combinatorial Search and For-Expressions\"></a>6.2 Combinatorial Search and For-Expressions</h2><p>양수 n이 있고, 또다른 양수 i와 j가 1 &lt;= j &lt; i &lt; n을 만족하고 i + j가 소수라는 조건이 있다.<br>코드로 나타내면 다음과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">val n = <span class=\"number\">7</span></div><div class=\"line\">(<span class=\"number\">1</span> until n) map (<span class=\"selector-tag\">i</span> =&gt; (<span class=\"number\">1</span> until i) map (j =&gt; (<span class=\"selector-tag\">i</span>, j)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">res0: scala<span class=\"selector-class\">.collection</span><span class=\"selector-class\">.immutable</span><span class=\"selector-class\">.IndexedSeq</span>[scala<span class=\"selector-class\">.collection</span><span class=\"selector-class\">.immutable</span><span class=\"selector-class\">.IndexedSeq</span>[(Int, Int)]] = Vector(Vector(), Vector((<span class=\"number\">2</span>,<span class=\"number\">1</span>)), Vector((<span class=\"number\">3</span>,<span class=\"number\">1</span>), (<span class=\"number\">3</span>,<span class=\"number\">2</span>)), Vector((<span class=\"number\">4</span>,<span class=\"number\">1</span>), (<span class=\"number\">4</span>,<span class=\"number\">2</span>), (<span class=\"number\">4</span>,<span class=\"number\">3</span>)), Vector((<span class=\"number\">5</span>,<span class=\"number\">1</span>), (<span class=\"number\">5</span>,<span class=\"number\">2</span>), (<span class=\"number\">5</span>,<span class=\"number\">3</span>), (<span class=\"number\">5</span>,<span class=\"number\">4</span>)), Vector((<span class=\"number\">6</span>,<span class=\"number\">1</span>), (<span class=\"number\">6</span>,<span class=\"number\">2</span>), (<span class=\"number\">6</span>,<span class=\"number\">3</span>), (<span class=\"number\">6</span>,<span class=\"number\">4</span>), (<span class=\"number\">6</span>,<span class=\"number\">5</span>)))</div></pre></td></tr></table></figure><p>음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores가 나왔다.<br>Range는 Seq의 하위 타입이지만 사실 그 중간에 IndexedSeq라는 타입이 존재한다. 결과값으로 pair가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair를 담을 가장 적합한 타입인 Vector가 선택되어 나타난것이다.</p><p>원래 우리가 찾으려고 했던 결과는 Vector의 Vector가 아니라 pair를 하나의 single list에 담아져야 한다. 그래서 모든 sub-sequences를 foldRight와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)</p><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">xss</span> foldRight Seq[<span class=\"name\">Int</span>]())(<span class=\"name\">_</span> ++ _)</div><div class=\"line\"></div><div class=\"line\">// equvalently</div><div class=\"line\">xss.flatten</div><div class=\"line\"></div><div class=\"line\">// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.</div><div class=\"line\">((<span class=\"name\">1</span> until n) map (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j)))).flatten</div><div class=\"line\"></div><div class=\"line\">// 아래의 법칙을 이용하면</div><div class=\"line\">xs flatMap f = (<span class=\"name\">xs</span> map f).flatten</div><div class=\"line\"></div><div class=\"line\">// 더 간단해질 수 있다.</div><div class=\"line\">(<span class=\"name\">1</span> until n) flatMap (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j)))</div><div class=\"line\"></div><div class=\"line\">// result </div><div class=\"line\">res0: scala.collection.immutable.IndexedSeq[(<span class=\"name\">Int</span>, Int)] = Vector((<span class=\"name\">2</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">1</span>), (<span class=\"name\">4</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">1</span>), (<span class=\"name\">5</span>,<span class=\"number\">2</span>), (<span class=\"name\">5</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">4</span>), (<span class=\"name\">6</span>,<span class=\"number\">1</span>), (<span class=\"name\">6</span>,<span class=\"number\">2</span>), (<span class=\"name\">6</span>,<span class=\"number\">3</span>), (<span class=\"name\">6</span>,<span class=\"number\">4</span>), (<span class=\"name\">6</span>,<span class=\"number\">5</span>))</div><div class=\"line\"></div><div class=\"line\">// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용</div><div class=\"line\">(<span class=\"name\">1</span> until n) flatMap (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j))) filter (<span class=\"name\">pair</span> =&gt; isPrime(<span class=\"name\">pair._1</span> + pair._2))</div><div class=\"line\"></div><div class=\"line\">// result </div><div class=\"line\">res0: scala.collection.immutable.IndexedSeq[(<span class=\"name\">Int</span>, Int)] = Vector((<span class=\"name\">2</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">1</span>), (<span class=\"name\">4</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">2</span>), (<span class=\"name\">6</span>,<span class=\"number\">1</span>), (<span class=\"name\">6</span>,<span class=\"number\">5</span>))</div></pre></td></tr></table></figure><h3 id=\"For-Expression\"><a href=\"#For-Expression\" class=\"headerlink\" title=\"For-Expression\"></a>For-Expression</h3><p>for loop에 대해서 알아보자</p><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">class</span> Person(<span class=\"keyword\">name</span>: <span class=\"keyword\">String</span>, age: Int)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 20살 이상인 사람만 가져오고 싶을때</span></div><div class=\"line\"><span class=\"keyword\">for</span> (p &lt;- persons <span class=\"keyword\">if</span> p.age &gt; <span class=\"number\">20</span>) yield p.<span class=\"keyword\">name</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 아래와 같음</span></div><div class=\"line\">persons filter (p =&gt; p.age &gt; <span class=\"number\">20</span>) map (p = &gt; p.<span class=\"keyword\">name</span>)</div></pre></td></tr></table></figure><p>기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop는 어떤 요소가 변할 수 있는 side effect가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">for</span> (s) <span class=\"built_in\">yield</span> e</div></pre></td></tr></table></figure><p>for-expression을 위와같이 단순화 시킬 수 있다.</p><blockquote><p>s is a sequence of generators and filters<br>e is an expression whose value is returned by an iteration</p></blockquote><ul><li>generator의 p &lt;- e에서 p는 하나의 패턴이고, e는 컬렉션의 값이다.</li><li>filter의 f는 boolean expression이다.</li><li>몇개의 generator가 있을때는 마지막이 처음보다 빠르다. why?</li><li>( s )는 { s }처럼 사용할 수도 있다.</li></ul><h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><p>이전에 보았던 문제를 for loop를 이용해 다시 만들어 보자.<br>첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair를 구하는 함수</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">i</span> &lt;- <span class=\"number\">1</span> until n</div><div class=\"line\">  j &lt;- <span class=\"number\">1</span> until <span class=\"selector-tag\">i</span></div><div class=\"line\">  <span class=\"keyword\">if</span> isPrime(i+j)</div><div class=\"line\">&#125; yield (<span class=\"selector-tag\">i</span>, j)</div></pre></td></tr></table></figure><p>매우 심플해졌다.</p><p>두번째는 scalarProduct</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scalarProduct</span><span class=\"params\">(<span class=\"symbol\">xs:</span> Vector[Double], <span class=\"symbol\">ys:</span> Vector[Double])</span></span>: Double =</div><div class=\"line\">  (<span class=\"keyword\">for</span> ((x, y) &lt;- xs zip ys) <span class=\"keyword\">yield</span> x * y).sum</div></pre></td></tr></table></figure><p>따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.</p><h2 id=\"6-3-Combinatorial-Search-Example\"><a href=\"#6-3-Combinatorial-Search-Example\" class=\"headerlink\" title=\"6.3 Combinatorial Search Example\"></a>6.3 Combinatorial Search Example</h2><p>이번 챕터에서는 Set에 대해 알아보자.<br>Set도 Seq와 마찬가지로 Iterable의 subclass다. 그래서 Seq에서 사용하는 대부분의 연산(map, filter 등)을 Set에서도 동일하게 사용할 수 있다.</p><h3 id=\"Sets-vs-Sequences\"><a href=\"#Sets-vs-Sequences\" class=\"headerlink\" title=\"Sets vs Sequences\"></a>Sets vs Sequences</h3><ul><li>Set은 unordered하다.</li><li>Set은 중복되는 element를 가질 수 없다.</li><li>Set의 fundamental operation은 요소가 해당 Set에 포함되는지 확인하는 contains다.</li></ul><h3 id=\"Example-N-Queens\"><a href=\"#Example-N-Queens\" class=\"headerlink\" title=\"Example: N-Queens\"></a>Example: N-Queens</h3><p>예제를 살펴보자.<br>체스보드에 서로 위협이 되지 않는 8개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal에 둘 수 없는 문제와 같다.</p><p>알고리즘을 살펴보자.</p><ul><li>사이즈 n인 보드에 k-1개의 퀸이 놓여진 모든 솔루션 추출</li><li>각 솔루션을 0에서 n-1까지의 columns 숫자로 구성된 리스트로 변환</li><li>리스트의 첫번째 요소는 k-1번째 row가 될 것이고, k-2, k-3 …의 퀸을 붙여나간다.</li><li>각 솔루션의 하나의 element와 함께 set of lists로 만들어진다.</li><li>kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.</li></ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">def queens(n: Int): <span class=\"keyword\">Set</span>[<span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]] = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> placeQueens(k: <span class=\"built_in\">Int</span>): <span class=\"keyword\">Set</span>[<span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]] =</div><div class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) <span class=\"keyword\">Set</span>(<span class=\"keyword\">List</span>())</div><div class=\"line\">     <span class=\"keyword\">else</span></div><div class=\"line\">      <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        queens &lt;- placeQueens(k - <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">col</span> &lt;- <span class=\"number\">0</span> <span class=\"keyword\">until</span> n</div><div class=\"line\">        <span class=\"keyword\">if</span> isSafe(<span class=\"keyword\">col</span>, queens)</div><div class=\"line\">      &#125; yield <span class=\"keyword\">col</span> :: queens</div><div class=\"line\"></div><div class=\"line\">  placeQueens(n)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth씩 내려가다보면 마지막에는 빈 셋에 0에서 n까지 각각 배치될것이다. 그리고 1개의 퀸이 배치된 list들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.</p><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def isSafe(<span class=\"built_in\">col</span>: Int, queens: List[Int]): Boolean = &#123;</div><div class=\"line\">  val <span class=\"built_in\">row</span> = queens.<span class=\"built_in\">length</span></div><div class=\"line\">  val queensWithRow = (<span class=\"built_in\">row</span> -<span class=\"number\">1</span> to <span class=\"number\">0</span> by -<span class=\"number\">1</span>) zip queens</div><div class=\"line\">  queensWithRow forall &#123;</div><div class=\"line\">    case (r, c) =&gt; <span class=\"built_in\">col</span> != c &amp;&amp; math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">col</span> - c) != <span class=\"built_in\">row</span> - r</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column에 속하지 않으면서 대각선에 위치하지 않으면 safe하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">show</span>(queens: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]) = &#123;</div><div class=\"line\">  val <span class=\"keyword\">lines</span> =</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">col</span> &lt;- queens)</div><div class=\"line\">    yield Vector.fill(queens.length)(<span class=\"string\">\"* \"</span>).updated(<span class=\"keyword\">col</span>, <span class=\"string\">\"X \"</span>).mkString</div><div class=\"line\">  <span class=\"string\">\"\\n\"</span> + (<span class=\"keyword\">lines</span> mkString <span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(queens(<span class=\"number\">8</span>) take <span class=\"number\">3</span> <span class=\"keyword\">map</span> <span class=\"keyword\">show</span>) mkString <span class=\"string\">\"\\n\"</span></div></pre></td></tr></table></figure><p>마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다.<br>결과는 아래와 같다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">res0: String = </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span></div></pre></td></tr></table></figure><h2 id=\"6-4-Maps\"><a href=\"#6-4-Maps\" class=\"headerlink\" title=\"6.4 Maps\"></a>6.4 Maps</h2><p>Map에 대해서 알아보자.<br>Map은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value는 숫자나 문자 등 어떤 타입이든 가능하다.<br>또한 Map[Key, Value]는 Key =&gt; Value의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value를 구할 수 있다는 말과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key를 이용해 value를 가져올때</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">capitalOfCountry</span><span class=\"params\">(<span class=\"string\">\"andorra\"</span>)</span></span>   <span class=\"comment\">// exception 발생</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 대신에 get을 사용한다.</span></div><div class=\"line\">capitalOfCountry get <span class=\"string\">\"andorra\"</span>  <span class=\"comment\">// None</span></div></pre></td></tr></table></figure><h3 id=\"Option-Type\"><a href=\"#Option-Type\" class=\"headerlink\" title=\"Option Type\"></a>Option Type</h3><p>Option은 covariant 하기 때문에 Option[A] &gt; Option[Nothing]이다. 즉 None</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">trait Option[+A]</div><div class=\"line\">case class Some[<span class=\"string\">+A</span>](<span class=\"link\">value: A</span>) extend Option[A]</div><div class=\"line\">object None extend Option[Nothing]</div></pre></td></tr></table></figure><p>패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def showCapital(country: <span class=\"built_in\">String</span>) = capitalOfCountry.<span class=\"keyword\">get</span>(country) match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Some(capital) =&gt; capital</div><div class=\"line\">  <span class=\"keyword\">case</span> None =&gt; <span class=\"string\">\"missing data\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Sorted-and-GroupBy\"><a href=\"#Sorted-and-GroupBy\" class=\"headerlink\" title=\"Sorted and GroupBy\"></a>Sorted and GroupBy</h3><p>sql 쿼리의 opertaion을 사용해보자.</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> sorted</div><div class=\"line\">val fruit = List(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">fruit.sortWith (_.length &lt; _.length)  <span class=\"regexp\">//</span> List(<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">fruit.sorted    <span class=\"regexp\">//</span> List(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">      </div><div class=\"line\"><span class=\"regexp\">//</span> groupBy</div><div class=\"line\">fruit groupBy (_.head)    </div><div class=\"line\"><span class=\"regexp\">//</span> Map(p -&gt; List(pear, pineapple)),</div><div class=\"line\"><span class=\"regexp\">//</span>     a -&gt; List(apple),</div><div class=\"line\"><span class=\"regexp\">//</span>     o -&gt; List(orange))</div></pre></td></tr></table></figure><p>groubBy 명령은 식별 함수 f에 따라 collection의 map을 만든다.</p><h3 id=\"Polynoial-Example\"><a href=\"#Polynoial-Example\" class=\"headerlink\" title=\"Polynoial Example\"></a>Polynoial Example</h3><p>from exponents to coefficient 방식으로 map을 만든다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Poly</span>(<span class=\"params\">val terms: <span class=\"type\">Map</span>[<span class=\"type\">Int</span>, <span class=\"type\">Double</span>]</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">+</span> </span>(other: <span class=\"type\">Poly</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(terms ++ other.terms)</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>=</div><div class=\"line\">    (<span class=\"keyword\">for</span> ((exp, coeff) &lt;- terms.toList.sorted.reverse) <span class=\"keyword\">yield</span> coeff+<span class=\"string\">\"x^\"</span>+exp) mkString <span class=\"string\">\" + \"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(<span class=\"type\">Map</span>(<span class=\"number\">1</span> -&gt; <span class=\"number\">2.0</span>, <span class=\"number\">3</span> -&gt; <span class=\"number\">4.0</span>, <span class=\"number\">5</span> -&gt; <span class=\"number\">6.2</span>))</div><div class=\"line\"><span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(<span class=\"type\">Map</span>(<span class=\"number\">0</span> -&gt; <span class=\"number\">3.0</span>, <span class=\"number\">3</span> -&gt; <span class=\"number\">7.0</span>))</div><div class=\"line\">p1 + p2</div></pre></td></tr></table></figure><p>두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents가 같은 coefficient 끼리 더해주고 나머지 exponents들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.<br>하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p<span class=\"number\">1</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">4.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span></div><div class=\"line\">p<span class=\"number\">2</span>: Poly = <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div><div class=\"line\">res<span class=\"number\">0</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div></pre></td></tr></table></figure><p>왜 그럴까??<br>맵끼리 concatenating 할때는 아마 같은 키의 value를 합치는게 아니라 뒤에 나오는 map의 key의 value로 대체하기 때문에 이렇게 나오는 것이다.<br>다음과 같이 바꿔보자.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))</div><div class=\"line\">def adjust(term: (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>)): (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>) = &#123;</div><div class=\"line\">  val (<span class=\"built_in\">exp</span>, coeff) = term</div><div class=\"line\">  terms get <span class=\"built_in\">exp</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Some(coeff1) =&gt; <span class=\"built_in\">exp</span> -&gt; (coeff + coeff1)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">None</span> =&gt; <span class=\"built_in\">exp</span> -&gt; coeff</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>뒤에 오는 other에 adjust 함수를 매핑해보자.<br>adjust 함수는 other의 term 하나를 뽑아다가 terms에 해당 exponent가 있는지 확인하고 있으면 terms와 other(term)의 coefficient를 더해준다. 만약 없다면, othe의 coeff를 그대로 리턴한다.<br>결과를 보자.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p<span class=\"number\">1</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">4.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span></div><div class=\"line\">p<span class=\"number\">2</span>: Poly = <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div><div class=\"line\">res<span class=\"number\">0</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">11.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div></pre></td></tr></table></figure><h3 id=\"Default-Values\"><a href=\"#Default-Values\" class=\"headerlink\" title=\"Default Values\"></a>Default Values</h3><p>심플한 방법이 있었다.<br>withDefaultValue operation을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.<br>withDefaultValue를 이용해 좀더 개선해보자.</p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Poly</span>(<span class=\"title\">terms0</span>: <span class=\"type\">Map</span>[<span class=\"type\">Int</span>, <span class=\"type\">Double</span>]) &#123;</span></div><div class=\"line\">  def this(<span class=\"title\">bindings</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>)*) = this(<span class=\"title\">bindings</span>.<span class=\"title\">toMap</span>)</div><div class=\"line\">  val terms = terms0 withDefaultValue 0.0</div><div class=\"line\">  def + (<span class=\"title\">other</span>: <span class=\"type\">Poly</span>) = new <span class=\"type\">Poly</span>(<span class=\"title\">terms</span> ++ (<span class=\"title\">other</span>.<span class=\"title\">terms</span> <span class=\"title\">map</span> <span class=\"title\">adjust</span>))</div><div class=\"line\">  def adjust(<span class=\"title\">term</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>)): (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    val (<span class=\"title\">exp</span>, <span class=\"title\">coeff</span>) = term</div><div class=\"line\">    exp -&gt; (<span class=\"title\">coeff</span> + <span class=\"title\">terms</span>(<span class=\"title\">exp</span>))</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  override def toString =</div><div class=\"line\">    (<span class=\"title\">for</span> ((<span class=\"title\">exp</span>, <span class=\"title\">coeff</span>) &lt;- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">val p1 = new <span class=\"type\">Poly</span>(1 -&gt; 2.0, 3 -&gt; 4.0, 5 -&gt; 6.2)</div><div class=\"line\">val p2 = new <span class=\"type\">Poly</span>(0 -&gt; 3.0, 3 -&gt; 7.0)</div><div class=\"line\">p1 + p2</div><div class=\"line\">p1.terms(8)</div></pre></td></tr></table></figure><p>크게 두가지가 바뀌었다.<br>첫째는 Poly 클래스의 parameter에 default value를 적용해주어 adjust에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -&gt; (coeff + terms(exp)))<br>그리고 둘째는 새로운 Poly를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial하게 들어오면 이를 Map으로 바꿔주도록 하였다.</p><h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><p>위에서 보았던 ‘++’ 연산과 foldLeft를 이용한 연산중 어느것이 더 효율적일까?</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def + (other: Poly) =</div><div class=\"line\">  new Poly((other.terms foldLeft terms)(addTerm))</div><div class=\"line\"></div><div class=\"line\">def addTerm(terms: Map[<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>], term: (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>)): Map[<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>] = &#123;</div><div class=\"line\">  val (<span class=\"built_in\">exp</span>, coeff) = term</div><div class=\"line\">  terms + (<span class=\"built_in\">exp</span> -&gt; (coeff + terms(<span class=\"built_in\">exp</span>)))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>fold를 이용하면 위에서처럼 Map을 생성하여 각 exponent를 비교해서 값을 넣는게 아니라 기존부터 있던 terms에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.</p><h2 id=\"6-5-Putting-the-Pieces-Together\"><a href=\"#6-5-Putting-the-Pieces-Together\" class=\"headerlink\" title=\"6.5 Putting the Pieces Together\"></a>6.5 Putting the Pieces Together</h2><p>전화번호를 문자로 바꾸는 예제를 살펴보자.<br>참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300라인정도의 코드가 나왔다고 한다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val mnemonics = Map(</div><div class=\"line\">       <span class=\"string\">'2'</span> -&gt; <span class=\"string\">\"ABC\"</span>, <span class=\"string\">'3'</span> -&gt; <span class=\"string\">\"DEF\"</span>, <span class=\"string\">'4'</span> =&gt; <span class=\"string\">\"GHI\"</span>, <span class=\"string\">'5'</span> -&gt; <span class=\"string\">\"JKL\"</span>, </div><div class=\"line\">       <span class=\"string\">'6'</span> -&gt; <span class=\"string\">\"MNO\"</span>, <span class=\"string\">'7'</span> -&gt; <span class=\"string\">\"PQRS\"</span>, <span class=\"string\">'8'</span> -&gt; <span class=\"string\">\"TUV\"</span>, <span class=\"string\">'9'</span> -&gt; <span class=\"string\">\"WXYZ\"</span>)</div></pre></td></tr></table></figure><p>위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.</p><p>예를 들어 “7225247386”를 convert해보면 그 중 하나가 “SCALAISFUN”(Scala is fun)이 된다.</p><p>전체코드는 다음과 같다.</p><pre><code>val in = Source.fromURL(&quot;http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt&quot;)\nval words = in.getLines.toList filter (word =&gt; word forall (chr =&gt; chr.isLetter))\n\nval mnem = Map(\n  &apos;2&apos; -&gt; &quot;ABC&quot;, &apos;3&apos; -&gt; &quot;DEF&quot;, &apos;4&apos; -&gt; &quot;GHI&quot;, &apos;5&apos; -&gt; &quot;JKL&quot;,\n  &apos;6&apos; -&gt; &quot;MNO&quot;, &apos;7&apos; -&gt; &quot;PQRS&quot;, &apos;8&apos; -&gt; &quot;TUV&quot;, &apos;9&apos; -&gt; &quot;WXYZ&quot;)\n\nval charCode: Map[Char, Char] =\n  for ((digit, str) &lt;- mnem; ltr &lt;- str) yield ltr -&gt; digit\n\n/**\n * 파라미터로 들어온 문자열을 charCode로 변경함\n * @param word\n * @return\n */\ndef wordCode(word: String): String =\n  word.toUpperCase map charCode\n\n  wordCode(&quot;Java&quot;)  // res0: String = 5282\n\n/**\n * A map form digit strings to the words that represent them,\n * e,g. &quot;5282&quot; -&gt; List(&quot;Java&quot;, &quot;Kata&quot;, &quot;Lava&quot;, ...)\n * Note: A missing number should map to the empty set, e,g. &quot;11111&quot; -&gt; List()\n */\nval wordsForNum: Map[String, Seq[String]] =\n  words groupBy wordCode withDefaultValue Seq()\n\n/**\n * Return all ways to encode a number as a list of words\n */\ndef encode(number: String): Set[List[String]] =\n  if (number.isEmpty) Set(List())\n  // 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다\n  else {\n    for {\n      split &lt;- 1 to number.length\n      word &lt;- wordsForNum(number take split)\n      rest &lt;- encode(number drop split)\n    } yield word :: rest\n  }.toSet\n\nencode(&quot;7225247386&quot;)\n\ndef translate(number: String): Set[String] =\n  encode(number) map(_ mkString &quot; &quot;)\n\ntranslate(&quot;7225247386&quot;)\n</code></pre><p>지금까지 살펴본 스칼라 collection은 아래와 같이 정리 할 수 있다.</p><ul><li>easy to use: few steps to do the job.</li><li>concise: one word replaces a whole loop.</li><li>safe: type checker is really good at catching errors.</li><li>fast: collection ops art tuned, can be parallelized.</li><li>universal: one vocabulary to work on all kinds of collections.</li></ul>","excerpt":"","more":"<h2 id=\"6-1-Other-Collections\"><a href=\"#6-1-Other-Collections\" class=\"headerlink\" title=\"6.1 Other Collections\"></a>6.1 Other Collections</h2><p>이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자.</p><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>리스트의 경우에는 첫번째 element에 접근하는게 마지막 element에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector는 리스트 보다 access pattern이 훨씬 균형잡혀 있다.</p><p>벡터는 최초에 2^5(32개)의 원소를 가지는 array가 만들어 진다. 32개가 넘는 원소가 필요하게 되면, 그다음은 32개를 추가로 만드는 것이 아니라, 2^5 * 2^5개, 그러니깐 총 2^10(1024개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32개보다 커지면, 처음 만들어진 32개짜리 벡터는 각각의 32개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32개짜리 원소에서 1024개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다.</p><p>또 다른 장점으로는 map, for, filter, fold와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32개가 하나의 묶음이다보니 a single cache line에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list는 vector에 비해서 locality가 나쁘다고 할 수 있다.</p><p>vector가 이렇게 좋다는데, list를 써야하는 이유는 무엇일까? recursive data structure의 head를 취하고 나머지를 다시 연산하는 모델 안에서는 list가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head를 취하기가 훨씬 쉽기 때문이다. 하지만 vector의 경우 depth가 1일때는 몰라도 depth가 1만 더 증가해도 훨씬 복잡해진다.</p><p>list의 concat 연산 (::)은 vector에서 다음과 같이 쓰인다.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">x</span> +: xs     // xs 앞에 <span class=\"keyword\">x</span>를 포함하는 새로운 벡터를 붙인다.</div><div class=\"line\">xs :+ <span class=\"keyword\">x</span>     // xs 뒤에 <span class=\"keyword\">x</span>를 포함하는 새로운 벡터를 붙인다.</div></pre></td></tr></table></figure><p>벡터 또한 immutable하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.</p><h3 id=\"Collection-Hierachy\"><a href=\"#Collection-Hierachy\" class=\"headerlink\" title=\"Collection Hierachy\"></a>Collection Hierachy</h3><p>스칼라의 collection은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List와 Vector가 속하는 Seq, 나머지는 Set과 Map이다.</p><p><img src=\"http://docs.scala-lang.org/resources/images/collections.immutable.png\" alt=\"Collectino Hierachy\"></p><p>Array와 String는 점선으로 되어있는데, 이들도 Seq로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array</span></div><div class=\"line\">val xs = <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>)</div><div class=\"line\">xs map (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// res0 : Array[Int] = Array(2, 4, 6, 88)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// String</span></div><div class=\"line\">val s = <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">s filter (<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.isUpper)</div><div class=\"line\"><span class=\"comment\">// res1: String = HW</span></div></pre></td></tr></table></figure><h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><p>Range는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">val r: Range = <span class=\"number\">1</span> <span class=\"keyword\">until</span> <span class=\"number\">5</span>   <span class=\"comment\"> // 1, 2, 3, 4</span></div><div class=\"line\">val s: Range = <span class=\"number\">1</span> <span class=\"built_in\">to</span> <span class=\"number\">5</span>    <span class=\"comment\"> // 1, 2, 3, 4, 5</span></div><div class=\"line\"><span class=\"number\">1</span> <span class=\"built_in\">to</span> <span class=\"number\">10</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span>         <span class=\"comment\"> // 1, 4, 7, 10</span></div><div class=\"line\"><span class=\"number\">6</span> <span class=\"built_in\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">by</span> <span class=\"number\">-2</span>         <span class=\"comment\"> // 6, 4, 2</span></div></pre></td></tr></table></figure><h3 id=\"Some-more-Sequence-Operations\"><a href=\"#Some-more-Sequence-Operations\" class=\"headerlink\" title=\"Some more Sequence Operations\"></a>Some more Sequence Operations</h3><ul><li>xs exists p : p 함수의 조건을 만족하는 원소가 있는지</li><li>xs forall p : 모든 원소가 p 함수의 조건을 만족하는지</li><li>xs zip ys : 두 collection의 원소를 pair로 가지는 새로운 collection 생성, 타입은 xs</li><li><p>xs.unzip : zip 형태의 collection을 분해해서 List의 tuples을 만듦, Array는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.</p></li><li><p>xs.flatMap f : 모든 element에 collection-valued functino f를 적용</p></li><li>xs.sum : numeric collection의 요소들의 합</li><li>xs.product : numeric collection의 요소들의 곱</li><li>xs.max : 최고값</li><li>xs.min : 최소값</li></ul><h3 id=\"Scalar-Product\"><a href=\"#Scalar-Product\" class=\"headerlink\" title=\"Scalar Product\"></a>Scalar Product</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">val a: Vector[Double] = Vector<span class=\"comment\">(1.0, 2.0, 3.0)</span></div><div class=\"line\">val b: Vector[Double] = Vector<span class=\"comment\">(3.0, 4.0, 5.0)</span></div><div class=\"line\">  </div><div class=\"line\">def scalarProduct<span class=\"comment\">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</div><div class=\"line\">  <span class=\"comment\">(xs zip ys)</span>.map<span class=\"comment\">(xy =&gt; xy._1 * xy._2)</span>.sum</div><div class=\"line\"></div><div class=\"line\">scalarProduct<span class=\"comment\">(a, b)</span></div><div class=\"line\"></div><div class=\"line\">def scalarProduct<span class=\"number\">2</span><span class=\"comment\">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</div><div class=\"line\">  <span class=\"comment\">(xs zip ys)</span>.map&#123; case <span class=\"comment\">(x, y)</span> =&gt; x * y &#125;.sum</div><div class=\"line\"></div><div class=\"line\">scalarProduct<span class=\"number\">2</span><span class=\"comment\">(a, b)</span></div></pre></td></tr></table></figure><p>두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs와 ys를 zip으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case문으로 대체할 수 있다.</p><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"built_in\">case</span> p1 =&gt; e1 ... <span class=\"built_in\">case</span> pn =&gt; en&#125;</div><div class=\"line\"></div><div class=\"line\">// 위와 동일</div><div class=\"line\">x =&gt; x <span class=\"keyword\">match</span> &#123; <span class=\"built_in\">case</span> p1 =&gt; e1 ... <span class=\"built_in\">case</span> pn =&gt; en &#125;</div></pre></td></tr></table></figure><h3 id=\"isPrime\"><a href=\"#isPrime\" class=\"headerlink\" title=\"isPrime\"></a>isPrime</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"symbol\">n:</span> Int)</span></span>: Boolean = (<span class=\"number\">2</span> <span class=\"keyword\">until</span> n) forall (x =&gt; (n % x) != <span class=\"number\">0</span>)</div></pre></td></tr></table></figure><p>2부터 n 전까지의 수가 모두 n으로 나누어 떨어지지 않으면 n을 prime number(소수)라 할 수 있다.</p><h2 id=\"6-2-Combinatorial-Search-and-For-Expressions\"><a href=\"#6-2-Combinatorial-Search-and-For-Expressions\" class=\"headerlink\" title=\"6.2 Combinatorial Search and For-Expressions\"></a>6.2 Combinatorial Search and For-Expressions</h2><p>양수 n이 있고, 또다른 양수 i와 j가 1 &lt;= j &lt; i &lt; n을 만족하고 i + j가 소수라는 조건이 있다.<br>코드로 나타내면 다음과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">val n = <span class=\"number\">7</span></div><div class=\"line\">(<span class=\"number\">1</span> until n) map (<span class=\"selector-tag\">i</span> =&gt; (<span class=\"number\">1</span> until i) map (j =&gt; (<span class=\"selector-tag\">i</span>, j)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result</span></div><div class=\"line\">res0: scala<span class=\"selector-class\">.collection</span><span class=\"selector-class\">.immutable</span><span class=\"selector-class\">.IndexedSeq</span>[scala<span class=\"selector-class\">.collection</span><span class=\"selector-class\">.immutable</span><span class=\"selector-class\">.IndexedSeq</span>[(Int, Int)]] = Vector(Vector(), Vector((<span class=\"number\">2</span>,<span class=\"number\">1</span>)), Vector((<span class=\"number\">3</span>,<span class=\"number\">1</span>), (<span class=\"number\">3</span>,<span class=\"number\">2</span>)), Vector((<span class=\"number\">4</span>,<span class=\"number\">1</span>), (<span class=\"number\">4</span>,<span class=\"number\">2</span>), (<span class=\"number\">4</span>,<span class=\"number\">3</span>)), Vector((<span class=\"number\">5</span>,<span class=\"number\">1</span>), (<span class=\"number\">5</span>,<span class=\"number\">2</span>), (<span class=\"number\">5</span>,<span class=\"number\">3</span>), (<span class=\"number\">5</span>,<span class=\"number\">4</span>)), Vector((<span class=\"number\">6</span>,<span class=\"number\">1</span>), (<span class=\"number\">6</span>,<span class=\"number\">2</span>), (<span class=\"number\">6</span>,<span class=\"number\">3</span>), (<span class=\"number\">6</span>,<span class=\"number\">4</span>), (<span class=\"number\">6</span>,<span class=\"number\">5</span>)))</div></pre></td></tr></table></figure><p>음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores가 나왔다.<br>Range는 Seq의 하위 타입이지만 사실 그 중간에 IndexedSeq라는 타입이 존재한다. 결과값으로 pair가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair를 담을 가장 적합한 타입인 Vector가 선택되어 나타난것이다.</p><p>원래 우리가 찾으려고 했던 결과는 Vector의 Vector가 아니라 pair를 하나의 single list에 담아져야 한다. 그래서 모든 sub-sequences를 foldRight와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)</p><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">xss</span> foldRight Seq[<span class=\"name\">Int</span>]())(<span class=\"name\">_</span> ++ _)</div><div class=\"line\"></div><div class=\"line\">// equvalently</div><div class=\"line\">xss.flatten</div><div class=\"line\"></div><div class=\"line\">// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.</div><div class=\"line\">((<span class=\"name\">1</span> until n) map (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j)))).flatten</div><div class=\"line\"></div><div class=\"line\">// 아래의 법칙을 이용하면</div><div class=\"line\">xs flatMap f = (<span class=\"name\">xs</span> map f).flatten</div><div class=\"line\"></div><div class=\"line\">// 더 간단해질 수 있다.</div><div class=\"line\">(<span class=\"name\">1</span> until n) flatMap (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j)))</div><div class=\"line\"></div><div class=\"line\">// result </div><div class=\"line\">res0: scala.collection.immutable.IndexedSeq[(<span class=\"name\">Int</span>, Int)] = Vector((<span class=\"name\">2</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">1</span>), (<span class=\"name\">4</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">1</span>), (<span class=\"name\">5</span>,<span class=\"number\">2</span>), (<span class=\"name\">5</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">4</span>), (<span class=\"name\">6</span>,<span class=\"number\">1</span>), (<span class=\"name\">6</span>,<span class=\"number\">2</span>), (<span class=\"name\">6</span>,<span class=\"number\">3</span>), (<span class=\"name\">6</span>,<span class=\"number\">4</span>), (<span class=\"name\">6</span>,<span class=\"number\">5</span>))</div><div class=\"line\"></div><div class=\"line\">// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용</div><div class=\"line\">(<span class=\"name\">1</span> until n) flatMap (<span class=\"name\">i</span> =&gt; (<span class=\"name\">1</span> until i) map (<span class=\"name\">j</span> =&gt; (<span class=\"name\">i</span>, j))) filter (<span class=\"name\">pair</span> =&gt; isPrime(<span class=\"name\">pair._1</span> + pair._2))</div><div class=\"line\"></div><div class=\"line\">// result </div><div class=\"line\">res0: scala.collection.immutable.IndexedSeq[(<span class=\"name\">Int</span>, Int)] = Vector((<span class=\"name\">2</span>,<span class=\"number\">1</span>), (<span class=\"name\">3</span>,<span class=\"number\">2</span>), (<span class=\"name\">4</span>,<span class=\"number\">1</span>), (<span class=\"name\">4</span>,<span class=\"number\">3</span>), (<span class=\"name\">5</span>,<span class=\"number\">2</span>), (<span class=\"name\">6</span>,<span class=\"number\">1</span>), (<span class=\"name\">6</span>,<span class=\"number\">5</span>))</div></pre></td></tr></table></figure><h3 id=\"For-Expression\"><a href=\"#For-Expression\" class=\"headerlink\" title=\"For-Expression\"></a>For-Expression</h3><p>for loop에 대해서 알아보자</p><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">class</span> Person(<span class=\"keyword\">name</span>: <span class=\"keyword\">String</span>, age: Int)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 20살 이상인 사람만 가져오고 싶을때</span></div><div class=\"line\"><span class=\"keyword\">for</span> (p &lt;- persons <span class=\"keyword\">if</span> p.age &gt; <span class=\"number\">20</span>) yield p.<span class=\"keyword\">name</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 아래와 같음</span></div><div class=\"line\">persons filter (p =&gt; p.age &gt; <span class=\"number\">20</span>) map (p = &gt; p.<span class=\"keyword\">name</span>)</div></pre></td></tr></table></figure><p>기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop는 어떤 요소가 변할 수 있는 side effect가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">for</span> (s) <span class=\"built_in\">yield</span> e</div></pre></td></tr></table></figure><p>for-expression을 위와같이 단순화 시킬 수 있다.</p><blockquote><p>s is a sequence of generators and filters<br>e is an expression whose value is returned by an iteration</p></blockquote><ul><li>generator의 p &lt;- e에서 p는 하나의 패턴이고, e는 컬렉션의 값이다.</li><li>filter의 f는 boolean expression이다.</li><li>몇개의 generator가 있을때는 마지막이 처음보다 빠르다. why?</li><li>( s )는 { s }처럼 사용할 수도 있다.</li></ul><h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><p>이전에 보았던 문제를 for loop를 이용해 다시 만들어 보자.<br>첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair를 구하는 함수</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">i</span> &lt;- <span class=\"number\">1</span> until n</div><div class=\"line\">  j &lt;- <span class=\"number\">1</span> until <span class=\"selector-tag\">i</span></div><div class=\"line\">  <span class=\"keyword\">if</span> isPrime(i+j)</div><div class=\"line\">&#125; yield (<span class=\"selector-tag\">i</span>, j)</div></pre></td></tr></table></figure><p>매우 심플해졌다.</p><p>두번째는 scalarProduct</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scalarProduct</span><span class=\"params\">(<span class=\"symbol\">xs:</span> Vector[Double], <span class=\"symbol\">ys:</span> Vector[Double])</span></span>: Double =</div><div class=\"line\">  (<span class=\"keyword\">for</span> ((x, y) &lt;- xs zip ys) <span class=\"keyword\">yield</span> x * y).sum</div></pre></td></tr></table></figure><p>따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.</p><h2 id=\"6-3-Combinatorial-Search-Example\"><a href=\"#6-3-Combinatorial-Search-Example\" class=\"headerlink\" title=\"6.3 Combinatorial Search Example\"></a>6.3 Combinatorial Search Example</h2><p>이번 챕터에서는 Set에 대해 알아보자.<br>Set도 Seq와 마찬가지로 Iterable의 subclass다. 그래서 Seq에서 사용하는 대부분의 연산(map, filter 등)을 Set에서도 동일하게 사용할 수 있다.</p><h3 id=\"Sets-vs-Sequences\"><a href=\"#Sets-vs-Sequences\" class=\"headerlink\" title=\"Sets vs Sequences\"></a>Sets vs Sequences</h3><ul><li>Set은 unordered하다.</li><li>Set은 중복되는 element를 가질 수 없다.</li><li>Set의 fundamental operation은 요소가 해당 Set에 포함되는지 확인하는 contains다.</li></ul><h3 id=\"Example-N-Queens\"><a href=\"#Example-N-Queens\" class=\"headerlink\" title=\"Example: N-Queens\"></a>Example: N-Queens</h3><p>예제를 살펴보자.<br>체스보드에 서로 위협이 되지 않는 8개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal에 둘 수 없는 문제와 같다.</p><p>알고리즘을 살펴보자.</p><ul><li>사이즈 n인 보드에 k-1개의 퀸이 놓여진 모든 솔루션 추출</li><li>각 솔루션을 0에서 n-1까지의 columns 숫자로 구성된 리스트로 변환</li><li>리스트의 첫번째 요소는 k-1번째 row가 될 것이고, k-2, k-3 …의 퀸을 붙여나간다.</li><li>각 솔루션의 하나의 element와 함께 set of lists로 만들어진다.</li><li>kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.</li></ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">def queens(n: Int): <span class=\"keyword\">Set</span>[<span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]] = &#123;</div><div class=\"line\">  <span class=\"keyword\">def</span> placeQueens(k: <span class=\"built_in\">Int</span>): <span class=\"keyword\">Set</span>[<span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]] =</div><div class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) <span class=\"keyword\">Set</span>(<span class=\"keyword\">List</span>())</div><div class=\"line\">     <span class=\"keyword\">else</span></div><div class=\"line\">      <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        queens &lt;- placeQueens(k - <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">col</span> &lt;- <span class=\"number\">0</span> <span class=\"keyword\">until</span> n</div><div class=\"line\">        <span class=\"keyword\">if</span> isSafe(<span class=\"keyword\">col</span>, queens)</div><div class=\"line\">      &#125; yield <span class=\"keyword\">col</span> :: queens</div><div class=\"line\"></div><div class=\"line\">  placeQueens(n)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth씩 내려가다보면 마지막에는 빈 셋에 0에서 n까지 각각 배치될것이다. 그리고 1개의 퀸이 배치된 list들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.</p><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def isSafe(<span class=\"built_in\">col</span>: Int, queens: List[Int]): Boolean = &#123;</div><div class=\"line\">  val <span class=\"built_in\">row</span> = queens.<span class=\"built_in\">length</span></div><div class=\"line\">  val queensWithRow = (<span class=\"built_in\">row</span> -<span class=\"number\">1</span> to <span class=\"number\">0</span> by -<span class=\"number\">1</span>) zip queens</div><div class=\"line\">  queensWithRow forall &#123;</div><div class=\"line\">    case (r, c) =&gt; <span class=\"built_in\">col</span> != c &amp;&amp; math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">col</span> - c) != <span class=\"built_in\">row</span> - r</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column에 속하지 않으면서 대각선에 위치하지 않으면 safe하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">show</span>(queens: <span class=\"keyword\">List</span>[<span class=\"built_in\">Int</span>]) = &#123;</div><div class=\"line\">  val <span class=\"keyword\">lines</span> =</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">col</span> &lt;- queens)</div><div class=\"line\">    yield Vector.fill(queens.length)(<span class=\"string\">\"* \"</span>).updated(<span class=\"keyword\">col</span>, <span class=\"string\">\"X \"</span>).mkString</div><div class=\"line\">  <span class=\"string\">\"\\n\"</span> + (<span class=\"keyword\">lines</span> mkString <span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(queens(<span class=\"number\">8</span>) take <span class=\"number\">3</span> <span class=\"keyword\">map</span> <span class=\"keyword\">show</span>) mkString <span class=\"string\">\"\\n\"</span></div></pre></td></tr></table></figure><p>마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다.<br>결과는 아래와 같다.</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">res0: String = </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span>X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X </div><div class=\"line\">X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> * </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* X *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* X *</span> <span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> </div><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span> <span class=\"bullet\">* *</span> X <span class=\"bullet\">* *</span></div></pre></td></tr></table></figure><h2 id=\"6-4-Maps\"><a href=\"#6-4-Maps\" class=\"headerlink\" title=\"6.4 Maps\"></a>6.4 Maps</h2><p>Map에 대해서 알아보자.<br>Map은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value는 숫자나 문자 등 어떤 타입이든 가능하다.<br>또한 Map[Key, Value]는 Key =&gt; Value의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value를 구할 수 있다는 말과 같다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key를 이용해 value를 가져올때</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">capitalOfCountry</span><span class=\"params\">(<span class=\"string\">\"andorra\"</span>)</span></span>   <span class=\"comment\">// exception 발생</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 대신에 get을 사용한다.</span></div><div class=\"line\">capitalOfCountry get <span class=\"string\">\"andorra\"</span>  <span class=\"comment\">// None</span></div></pre></td></tr></table></figure><h3 id=\"Option-Type\"><a href=\"#Option-Type\" class=\"headerlink\" title=\"Option Type\"></a>Option Type</h3><p>Option은 covariant 하기 때문에 Option[A] &gt; Option[Nothing]이다. 즉 None</p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">trait Option[+A]</div><div class=\"line\">case class Some[<span class=\"string\">+A</span>](<span class=\"link\">value: A</span>) extend Option[A]</div><div class=\"line\">object None extend Option[Nothing]</div></pre></td></tr></table></figure><p>패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.</p><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">def showCapital(country: <span class=\"built_in\">String</span>) = capitalOfCountry.<span class=\"keyword\">get</span>(country) match &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> Some(capital) =&gt; capital</div><div class=\"line\">  <span class=\"keyword\">case</span> None =&gt; <span class=\"string\">\"missing data\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Sorted-and-GroupBy\"><a href=\"#Sorted-and-GroupBy\" class=\"headerlink\" title=\"Sorted and GroupBy\"></a>Sorted and GroupBy</h3><p>sql 쿼리의 opertaion을 사용해보자.</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> sorted</div><div class=\"line\">val fruit = List(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">fruit.sortWith (_.length &lt; _.length)  <span class=\"regexp\">//</span> List(<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">fruit.sorted    <span class=\"regexp\">//</span> List(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"pineapple\"</span>)</div><div class=\"line\">      </div><div class=\"line\"><span class=\"regexp\">//</span> groupBy</div><div class=\"line\">fruit groupBy (_.head)    </div><div class=\"line\"><span class=\"regexp\">//</span> Map(p -&gt; List(pear, pineapple)),</div><div class=\"line\"><span class=\"regexp\">//</span>     a -&gt; List(apple),</div><div class=\"line\"><span class=\"regexp\">//</span>     o -&gt; List(orange))</div></pre></td></tr></table></figure><p>groubBy 명령은 식별 함수 f에 따라 collection의 map을 만든다.</p><h3 id=\"Polynoial-Example\"><a href=\"#Polynoial-Example\" class=\"headerlink\" title=\"Polynoial Example\"></a>Polynoial Example</h3><p>from exponents to coefficient 방식으로 map을 만든다.</p><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Poly</span>(<span class=\"params\">val terms: <span class=\"type\">Map</span>[<span class=\"type\">Int</span>, <span class=\"type\">Double</span>]</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">+</span> </span>(other: <span class=\"type\">Poly</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(terms ++ other.terms)</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>=</div><div class=\"line\">    (<span class=\"keyword\">for</span> ((exp, coeff) &lt;- terms.toList.sorted.reverse) <span class=\"keyword\">yield</span> coeff+<span class=\"string\">\"x^\"</span>+exp) mkString <span class=\"string\">\" + \"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(<span class=\"type\">Map</span>(<span class=\"number\">1</span> -&gt; <span class=\"number\">2.0</span>, <span class=\"number\">3</span> -&gt; <span class=\"number\">4.0</span>, <span class=\"number\">5</span> -&gt; <span class=\"number\">6.2</span>))</div><div class=\"line\"><span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Poly</span>(<span class=\"type\">Map</span>(<span class=\"number\">0</span> -&gt; <span class=\"number\">3.0</span>, <span class=\"number\">3</span> -&gt; <span class=\"number\">7.0</span>))</div><div class=\"line\">p1 + p2</div></pre></td></tr></table></figure><p>두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents가 같은 coefficient 끼리 더해주고 나머지 exponents들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.<br>하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p<span class=\"number\">1</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">4.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span></div><div class=\"line\">p<span class=\"number\">2</span>: Poly = <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div><div class=\"line\">res<span class=\"number\">0</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div></pre></td></tr></table></figure><p>왜 그럴까??<br>맵끼리 concatenating 할때는 아마 같은 키의 value를 합치는게 아니라 뒤에 나오는 map의 key의 value로 대체하기 때문에 이렇게 나오는 것이다.<br>다음과 같이 바꿔보자.</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))</div><div class=\"line\">def adjust(term: (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>)): (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>) = &#123;</div><div class=\"line\">  val (<span class=\"built_in\">exp</span>, coeff) = term</div><div class=\"line\">  terms get <span class=\"built_in\">exp</span> match &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> Some(coeff1) =&gt; <span class=\"built_in\">exp</span> -&gt; (coeff + coeff1)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">None</span> =&gt; <span class=\"built_in\">exp</span> -&gt; coeff</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>뒤에 오는 other에 adjust 함수를 매핑해보자.<br>adjust 함수는 other의 term 하나를 뽑아다가 terms에 해당 exponent가 있는지 확인하고 있으면 terms와 other(term)의 coefficient를 더해준다. 만약 없다면, othe의 coeff를 그대로 리턴한다.<br>결과를 보자.</p><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p<span class=\"number\">1</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">4.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span></div><div class=\"line\">p<span class=\"number\">2</span>: Poly = <span class=\"number\">7.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div><div class=\"line\">res<span class=\"number\">0</span>: Poly = <span class=\"number\">6.2</span><span class=\"keyword\">x</span>^<span class=\"number\">5</span> + <span class=\"number\">11.0</span><span class=\"keyword\">x</span>^<span class=\"number\">3</span> + <span class=\"number\">2.0</span><span class=\"keyword\">x</span>^<span class=\"number\">1</span> + <span class=\"number\">3.0</span><span class=\"keyword\">x</span>^<span class=\"number\">0</span></div></pre></td></tr></table></figure><h3 id=\"Default-Values\"><a href=\"#Default-Values\" class=\"headerlink\" title=\"Default Values\"></a>Default Values</h3><p>심플한 방법이 있었다.<br>withDefaultValue operation을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.<br>withDefaultValue를 이용해 좀더 개선해보자.</p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Poly</span>(<span class=\"title\">terms0</span>: <span class=\"type\">Map</span>[<span class=\"type\">Int</span>, <span class=\"type\">Double</span>]) &#123;</span></div><div class=\"line\">  def this(<span class=\"title\">bindings</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>)*) = this(<span class=\"title\">bindings</span>.<span class=\"title\">toMap</span>)</div><div class=\"line\">  val terms = terms0 withDefaultValue 0.0</div><div class=\"line\">  def + (<span class=\"title\">other</span>: <span class=\"type\">Poly</span>) = new <span class=\"type\">Poly</span>(<span class=\"title\">terms</span> ++ (<span class=\"title\">other</span>.<span class=\"title\">terms</span> <span class=\"title\">map</span> <span class=\"title\">adjust</span>))</div><div class=\"line\">  def adjust(<span class=\"title\">term</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>)): (<span class=\"type\">Int</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    val (<span class=\"title\">exp</span>, <span class=\"title\">coeff</span>) = term</div><div class=\"line\">    exp -&gt; (<span class=\"title\">coeff</span> + <span class=\"title\">terms</span>(<span class=\"title\">exp</span>))</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  override def toString =</div><div class=\"line\">    (<span class=\"title\">for</span> ((<span class=\"title\">exp</span>, <span class=\"title\">coeff</span>) &lt;- terms.toList.sorted.reverse) yield coeff+\"x^\"+exp) mkString \" + \"</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">val p1 = new <span class=\"type\">Poly</span>(1 -&gt; 2.0, 3 -&gt; 4.0, 5 -&gt; 6.2)</div><div class=\"line\">val p2 = new <span class=\"type\">Poly</span>(0 -&gt; 3.0, 3 -&gt; 7.0)</div><div class=\"line\">p1 + p2</div><div class=\"line\">p1.terms(8)</div></pre></td></tr></table></figure><p>크게 두가지가 바뀌었다.<br>첫째는 Poly 클래스의 parameter에 default value를 적용해주어 adjust에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -&gt; (coeff + terms(exp)))<br>그리고 둘째는 새로운 Poly를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial하게 들어오면 이를 Map으로 바꿔주도록 하였다.</p><h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><p>위에서 보았던 ‘++’ 연산과 foldLeft를 이용한 연산중 어느것이 더 효율적일까?</p><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">def + (other: Poly) =</div><div class=\"line\">  new Poly((other.terms foldLeft terms)(addTerm))</div><div class=\"line\"></div><div class=\"line\">def addTerm(terms: Map[<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>], term: (<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>)): Map[<span class=\"built_in\">Int</span>, <span class=\"keyword\">Double</span>] = &#123;</div><div class=\"line\">  val (<span class=\"built_in\">exp</span>, coeff) = term</div><div class=\"line\">  terms + (<span class=\"built_in\">exp</span> -&gt; (coeff + terms(<span class=\"built_in\">exp</span>)))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>fold를 이용하면 위에서처럼 Map을 생성하여 각 exponent를 비교해서 값을 넣는게 아니라 기존부터 있던 terms에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.</p><h2 id=\"6-5-Putting-the-Pieces-Together\"><a href=\"#6-5-Putting-the-Pieces-Together\" class=\"headerlink\" title=\"6.5 Putting the Pieces Together\"></a>6.5 Putting the Pieces Together</h2><p>전화번호를 문자로 바꾸는 예제를 살펴보자.<br>참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300라인정도의 코드가 나왔다고 한다.</p><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val mnemonics = Map(</div><div class=\"line\">       <span class=\"string\">'2'</span> -&gt; <span class=\"string\">\"ABC\"</span>, <span class=\"string\">'3'</span> -&gt; <span class=\"string\">\"DEF\"</span>, <span class=\"string\">'4'</span> =&gt; <span class=\"string\">\"GHI\"</span>, <span class=\"string\">'5'</span> -&gt; <span class=\"string\">\"JKL\"</span>, </div><div class=\"line\">       <span class=\"string\">'6'</span> -&gt; <span class=\"string\">\"MNO\"</span>, <span class=\"string\">'7'</span> -&gt; <span class=\"string\">\"PQRS\"</span>, <span class=\"string\">'8'</span> -&gt; <span class=\"string\">\"TUV\"</span>, <span class=\"string\">'9'</span> -&gt; <span class=\"string\">\"WXYZ\"</span>)</div></pre></td></tr></table></figure><p>위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.</p><p>예를 들어 “7225247386”를 convert해보면 그 중 하나가 “SCALAISFUN”(Scala is fun)이 된다.</p><p>전체코드는 다음과 같다.</p><pre><code>val in = Source.fromURL(&quot;http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt&quot;)\nval words = in.getLines.toList filter (word =&gt; word forall (chr =&gt; chr.isLetter))\n\nval mnem = Map(\n  &apos;2&apos; -&gt; &quot;ABC&quot;, &apos;3&apos; -&gt; &quot;DEF&quot;, &apos;4&apos; -&gt; &quot;GHI&quot;, &apos;5&apos; -&gt; &quot;JKL&quot;,\n  &apos;6&apos; -&gt; &quot;MNO&quot;, &apos;7&apos; -&gt; &quot;PQRS&quot;, &apos;8&apos; -&gt; &quot;TUV&quot;, &apos;9&apos; -&gt; &quot;WXYZ&quot;)\n\nval charCode: Map[Char, Char] =\n  for ((digit, str) &lt;- mnem; ltr &lt;- str) yield ltr -&gt; digit\n\n/**\n * 파라미터로 들어온 문자열을 charCode로 변경함\n * @param word\n * @return\n */\ndef wordCode(word: String): String =\n  word.toUpperCase map charCode\n\n  wordCode(&quot;Java&quot;)  // res0: String = 5282\n\n/**\n * A map form digit strings to the words that represent them,\n * e,g. &quot;5282&quot; -&gt; List(&quot;Java&quot;, &quot;Kata&quot;, &quot;Lava&quot;, ...)\n * Note: A missing number should map to the empty set, e,g. &quot;11111&quot; -&gt; List()\n */\nval wordsForNum: Map[String, Seq[String]] =\n  words groupBy wordCode withDefaultValue Seq()\n\n/**\n * Return all ways to encode a number as a list of words\n */\ndef encode(number: String): Set[List[String]] =\n  if (number.isEmpty) Set(List())\n  // 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다\n  else {\n    for {\n      split &lt;- 1 to number.length\n      word &lt;- wordsForNum(number take split)\n      rest &lt;- encode(number drop split)\n    } yield word :: rest\n  }.toSet\n\nencode(&quot;7225247386&quot;)\n\ndef translate(number: String): Set[String] =\n  encode(number) map(_ mkString &quot; &quot;)\n\ntranslate(&quot;7225247386&quot;)\n</code></pre><p>지금까지 살펴본 스칼라 collection은 아래와 같이 정리 할 수 있다.</p><ul><li>easy to use: few steps to do the job.</li><li>concise: one word replaces a whole loop.</li><li>safe: type checker is really good at catching errors.</li><li>fast: collection ops art tuned, can be parallelized.</li><li>universal: one vocabulary to work on all kinds of collections.</li></ul>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 2-1","date":"2016-08-24T17:30:10.000Z","_content":"## Task Runners, Angular Scope, Forms and Form Validation-1\n\n\n### Web Tools: Grunt and Gulp\n\n#### Task-Runners\n\n웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.\n\nCSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.\n\nJavascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.\n\n이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.\n\n위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다. \n\n\n### Grunt\n\nGrunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.\n\n```\nnpm install -g grunt-cli\n```\n\nGrunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.\nfunction의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.\n\n```\nmodule.exports = function(grunt) {\n\t// do requires here\n\trequire('jit-grunt')(grunt);\n\n\t// do grunt task configurations here\n\tgrunt.initConfig({\n\n\t});\n\n\t// register tasks here\n\tgrunt.registerTask('build', ['jshint']);\n\tgrunt.registerTask('default', ['build']);\n}\n```\n\n#### File Globbing Patterns\n\nGrunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.\n\n* \\* 문자열, but not /\n* ? 문자 하나, but not /\n* \\*\\* 문자열 including /\n* {} comma로 or 를 표현함\n* ! 패턴매치가 negative함 \n\n몇가지 예제를 살펴보자\n우선 jshint와 jshint-stylish 모듈을 install 한다.\njshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.\n\n```\nnpm install grunt-contrib-jshint --save-dev\nnpm install jshint-stylish --save-dev\n```\n\n그리고 Configuration을 다음과 같이 작성하자.\nConfiguration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.\n\n```\njshint: {\n\toptions: {\n\t\tjshintrc: '.jshintrc',\n\t\treporter: require('jshint-stylish')\n\t},\n\tall: {\n\t\t// 실제 체크할 자바스크립트 파일의 경로를 지정한다.\n\t\t// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.\n\t\tsrc: ['Gruntfile.js', 'app/scripts/{,*/}*.js']\n\t}\n}\n```\n\n설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.\n\n\n#### Greating a Distribution Folder\n\n수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.\n\n다음의 모듈을 설치한다.\nglobal(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.\n\n\n#### usemin module\n\n```\n// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.\nnpm install grunt-contrib-copy --save-dev\n\n// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.\nnpm install grunt-contrib-clean --save-dev\n\n// js, css 파일들을 하나로 합쳐준다.\nnpm install grunt-contrib-concat --save-dev\n\n// css 파일 minification\nnpm install grunt-contrib-cssmin --save-dev\n\n// 자바스크립트 변수를 문자열 => 문자로 변경한다.\nnpm install grunt-contrib-uglify --save-dev\n\n// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)\n// 해싱 알고리즘과 length등을 선택할 수 있다.\nnpm insatll grunt-filerev --save-dev\n\n// css, js 파일을 minification 해준다.\n// useminPrepare -> concat -> cssmin -> uglify -> filerev -> usemin의 순서로 태스크가 진행된다. \nnpm insatll grunt-usemin --save-dev\n```\n\nusemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.\n\n> useminPrepare -> concat -> cssmin -> uglify -> filerev -> usemin\n\n우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.\n\n#### watch\n\noriginal 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.\n설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.\nreload는 모든 파일들을 복사하는것과 같다고 보면 된다.\n그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.\n\n```\nnpm install grunt-contrib-watch --save-dev\n```\n\n#### connect\n\n브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.\nwatch 모듈과 같이 사용하면 이렇게 사용할 수 있다.\n\n> 파일 변경 -> livereload (build and copy) -> open(update) browse\n\n```\nnpm install grunt-contlib-connect --save-dev\n```\n\n#### Gruntfile.js\n\n```\n'use strict';\n\nmodule.exports = function (grunt) {\n\n\trequire('time-grunt')(grunt);\n\trequire('jit-grunt')(grunt, {\n\t\tuseminPrepare: 'grunt-usemin'\n\t});\n\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc',\n\t\t\t\treporter: require('jshint-stylish')\n\t\t\t},\n\t\t\tall: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'Gruntfile.js',\n\t\t\t\t\t'app/scripts/{,*/}*.js'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tuseminPrepare: {\n\t\t\thtml: 'app/menu.html',\n\t\t\toptions: {\n\t\t\t\tdest: 'dist'\n\t\t\t}\n\t\t},\n\t\tconcat: {\n\t\t\toptions: {\n\t\t\t\tseparator: ';'\n\t\t\t},\n\t\t\tdist: {}\n\t\t},\n\t\tuglify: {\n\t\t\tdist: {}\n\t\t},\n\t\tcssmin: {\n\t\t\tdist: {}\n\t\t},\n\t\tfilerev: {\n\t\t\toptions: {\n\t\t\t\tencoding: 'utf8',\n\t\t\t\talgorithm: 'md5',\n\t\t\t\tlength: 20\n\t\t\t},\n\t\t\trelease: {\n\t\t\t\tfiles: [{\n\t\t\t\t\tsrc: [\n\t\t\t\t\t\t'dist/scripts/*js',\n\t\t\t\t\t\t'dist/styles/*.css'\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tusemin: {\n\t\t\thtml: ['dist/*.html'],\n\t\t\tcss: ['dist/styles/*.css'],\n\t\t\toptions: {\n\t\t\t\tassetsDirs: ['dist', 'dist/styles']\n\t\t\t}\n\t\t},\n\n\t\tcopy: {\n\t\t\tdist: {\n\t\t\t\tcwd: 'app',\n\t\t\t\tsrc: ['**', '!styles/**/*.css', '!scripts/**/*.js'],\n\t\t\t\tdest: 'dist',\n\t\t\t\texpand: true\n\t\t\t},\n\t\t\tfonts: {\n\t\t\t\tfiles:[\n\t\t\t\t\t{\n\t\t\t\t\t\texpand: true,\n\t\t\t\t\t\tdot: true,\n\t\t\t\t\t\tcwd: 'bower_components/bootstrap/dist',\n\t\t\t\t\t\tsrc: ['fonts/*.*'],\n\t\t\t\t\t\tdest: 'dist'\n\t\t\t\t\t}, {\n\t\t\t\t\t\texpand: true,\n\t\t\t\t\t\tdot: true,\n\t\t\t\t\t\tcwd: 'bower_components/font-awesome',\n\t\t\t\t\t\tsrc: ['fonts/*.*'],\n\t\t\t\t\t\tdest: 'dist'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\tcopy: {\n\t\t\t\tfiles: ['app/**', '!app/**/*.css', '!app/**/*.js'],\n\t\t\t\ttasks: ['build']\n\t\t\t},\n\t\t\tscripts: {\n\t\t\t\tfiles: ['app/scripts/app.js'],\n\t\t\t\ttasks: ['build']\n\t\t\t},\n\t\t\tstyles: {\n\t\t\t\tfiles: ['app/styles/mystyles.css'],\n\t\t\t\ttasks:['build']\n\t\t\t},\n\t\t\tlivereload: {\n\t\t\t\toptions: {\n\t\t\t\t\tlivereload: '<%= connect.options.livereload %>'\n\t\t\t\t},\n\t\t\t\tfiles: [\n\t\t\t\t\t'app/{,*/}*.html',\n\t\t\t\t\t'.tmp/styles/{,*/}*.css',\n\t\t\t\t\t'app/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tconnect: {\n\t\t\toptions: {\n\t\t\t\tport: 9000,\n\t\t\t\thostname: 'localhost',\n\t\t\t\tlivereload: 35729\n\t\t\t},\n\t\t\tdist: {\n\t\t\t\toptions: {\n\t\t\t\t\topen: true, \n\t\t\t\t\tbase: {\n\t\t\t\t\t\tpath: 'dist',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tindex: 'menu.html',\n\t\t\t\t\t\t\tmaxAge: 300000\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclean: {\n\t\t\tbuild: {\n\t\t\t\tsrc: ['dist/']\n\t\t\t}\n\t\t}\n\t});\n\n\t// 태스크 등록\n\t// 순서가 중요하다.\n\t// jshint로 모든 .js 파일을 검사하게 된다.\n\tgrunt.registerTask('build', [\n\t\t'clean',\n\t\t'jshint',\n\t\t'useminPrepare',\n\t\t'concat',\n\t\t'cssmin',\n\t\t'uglify',\n\t\t'copy',\n\t\t'filerev',\n\t\t'usemin'\n\t]);\n\n\t// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch\n\t// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.\n\tgrunt.registerTask('serve', ['build','connect:dist','watch']);\n\tgrunt.registerTask('default', ['build']);\n};\n```\n\n\n\n### Gulp\n\nGrunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지). \n\n일단 global로 설치하자.\n\n```\nnpm install -g gulp\n```\n\nGrunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.\n\n```\nnpm install \n\tgulp-jshint jshint-stylish\n\tgulp-imagemin gulp-concat gulp-uglify gulp-minify-css gulp-usemin\n\tgulp-cache gulp-rev gulp-rename gulp-notify\n\tbrowser-sync del\n--save-dev\n```\n\n플러그인을 로드하는 방법은 다음과 같다.\n직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.\n\n```\nvar gulp = require('gulp'),\n  jshint = require('gulp-jshint')\n  sylish = require('jshint-stylish')\n  \n  ...\n\n\n```\n\n#### Gulp Streams\n\nGulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자\n\n```\ngulp.task('jshint', function() {\n\tgulp.src('app/scripts/**/*.js')\n\t.pipe(jshint())\n\t.pipe(jshint.reporter(stylish));\n});\n```\n\n우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.\n\nWatch 태스크 예제를 살펴보자\n\n```\ngulp.task('watch', ['browser-sync'], function() {\n\tgulp.watch('{app/scripts/**/*.js, app/style/**/*.css, app/**/*.html}', ['usemin']);\n\tgulp.watch('app/images/**/*', ['imagemin']);\n});\n```\n\n태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.\n\n#### Default Task\n\n```\ngulp.task('default', ['clean'], function() {\n\tgulp.start('usemin', 'imagemin', 'copyfonts');\n});\n```\n\ndefault 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.\n\n\n#### gulpfile.js\n\n콤마(,)와 띄어쓰기에 유의해야 한다. \n\n```\nvar gulp = require('gulp'),\n\tminifycss = require('gulp-minify-css'),\n\tjshint = require('gulp-jshint'),\n\tstylish = require('jshint-stylish'),\n\tuglify = require('gulp-uglify'),\n\tusemin = require('gulp-usemin'),\n\timagemin = require('gulp-imagemin'),\n\trename = require('gulp-rename'),\n\tconcat = require('gulp-concat'),\n\tnotify = require('gulp-notify'),\n\tcache = require('gulp-cache'),\n\tchanged = require('gulp-changed'),\n\trev = require('gulp-rev'),\n\tbrowserSync = require('browser-sync'),\n\tdel = require('del');\n\ngulp.task('jshint', function() {\n\treturn gulp.src('app/scripts/**/*.js')\n\t\t.pipe(jshint())\n\t\t.pipe(jshint.reporter(stylish));\n});\n\ngulp.task('usemin', ['jshint'], function() {\n\treturn gulp.src('./app/menu.html')\n\t\t.pipe(usemin({\n\t\t\tcss:[minifycss(),rev()],\n\t\t\tjs: [uglify(),rev()]\n\t\t}))\n\t\t.pipe(gulp.dest('dist/'));\n});\n\ngulp.task('imagemin', function() {\n\treturn del(['dist/images']), gulp.src('app/images/**/*')\n\t\t.pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))\n\t\t.pipe(gulp.dest('dist/images'))\n\t\t.pipe(notify({ message: 'Images task complete' }));\n});\n\ngulp.task('clean', function() {\n\treturn del(['dist'])\n});\n\ngulp.task('copyfonts', ['clean'], function() {\n\tgulp.src('./bower_components/font-awesome/fonts/**/*.{ttf,woff,eof,svg}*')\n\t\t.pipe(gulp.dest('./dist/fonts'));\n\tgulp.src('./bower_components/bootstrap/dist/fonts/**/*.{ttf,woff,eof,svg}*')\n\t\t.pipe(gulp.dest('./dist/fonts'));\n});\n\ngulp.task('watch', ['browser-sync'], function() {\n\tgulp.watch('{app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html}', ['usemin']);\n\tgulp.watch('app/images/**/*', ['imagemin']);\n});\n\ngulp.task('browser-sync', ['default'], function() {\n\tvar files = [\n\t\t'app/**/*.html',\n\t\t'app/styles/**/*.css',\n\t\t'app/images/**/*.png',\n\t\t'app/scripts/**/*.js',\n\t\t'dist/**/*'\n\t];\n\n\tbrowserSync.init(files, {\n\t\tserver: {\n\t\t\tbaseDir: \"dist\",\n\t\t\tindex: \"menu.html\"\n\t\t}\n\t});\n\n\tgulp.watch(['dist/**']).on('change', browserSync.reload);\n});\n\ngulp.task('default', ['clean'], function() {\n\tgulp.start('usemin', 'imagemin', 'copyfonts');\n});\n```\n","source":"_posts/2016-08-25-frontend-javascript-framework-angularjs-week2-1.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 2-1\"\ncategories: programming\ndate:   2016-08-25 02:30:10 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n## Task Runners, Angular Scope, Forms and Form Validation-1\n\n\n### Web Tools: Grunt and Gulp\n\n#### Task-Runners\n\n웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.\n\nCSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.\n\nJavascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.\n\n이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.\n\n위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다. \n\n\n### Grunt\n\nGrunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.\n\n```\nnpm install -g grunt-cli\n```\n\nGrunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.\nfunction의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.\n\n```\nmodule.exports = function(grunt) {\n\t// do requires here\n\trequire('jit-grunt')(grunt);\n\n\t// do grunt task configurations here\n\tgrunt.initConfig({\n\n\t});\n\n\t// register tasks here\n\tgrunt.registerTask('build', ['jshint']);\n\tgrunt.registerTask('default', ['build']);\n}\n```\n\n#### File Globbing Patterns\n\nGrunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.\n\n* \\* 문자열, but not /\n* ? 문자 하나, but not /\n* \\*\\* 문자열 including /\n* {} comma로 or 를 표현함\n* ! 패턴매치가 negative함 \n\n몇가지 예제를 살펴보자\n우선 jshint와 jshint-stylish 모듈을 install 한다.\njshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.\n\n```\nnpm install grunt-contrib-jshint --save-dev\nnpm install jshint-stylish --save-dev\n```\n\n그리고 Configuration을 다음과 같이 작성하자.\nConfiguration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.\n\n```\njshint: {\n\toptions: {\n\t\tjshintrc: '.jshintrc',\n\t\treporter: require('jshint-stylish')\n\t},\n\tall: {\n\t\t// 실제 체크할 자바스크립트 파일의 경로를 지정한다.\n\t\t// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.\n\t\tsrc: ['Gruntfile.js', 'app/scripts/{,*/}*.js']\n\t}\n}\n```\n\n설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.\n\n\n#### Greating a Distribution Folder\n\n수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.\n\n다음의 모듈을 설치한다.\nglobal(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.\n\n\n#### usemin module\n\n```\n// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.\nnpm install grunt-contrib-copy --save-dev\n\n// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.\nnpm install grunt-contrib-clean --save-dev\n\n// js, css 파일들을 하나로 합쳐준다.\nnpm install grunt-contrib-concat --save-dev\n\n// css 파일 minification\nnpm install grunt-contrib-cssmin --save-dev\n\n// 자바스크립트 변수를 문자열 => 문자로 변경한다.\nnpm install grunt-contrib-uglify --save-dev\n\n// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)\n// 해싱 알고리즘과 length등을 선택할 수 있다.\nnpm insatll grunt-filerev --save-dev\n\n// css, js 파일을 minification 해준다.\n// useminPrepare -> concat -> cssmin -> uglify -> filerev -> usemin의 순서로 태스크가 진행된다. \nnpm insatll grunt-usemin --save-dev\n```\n\nusemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.\n\n> useminPrepare -> concat -> cssmin -> uglify -> filerev -> usemin\n\n우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.\n\n#### watch\n\noriginal 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.\n설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.\nreload는 모든 파일들을 복사하는것과 같다고 보면 된다.\n그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.\n\n```\nnpm install grunt-contrib-watch --save-dev\n```\n\n#### connect\n\n브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.\nwatch 모듈과 같이 사용하면 이렇게 사용할 수 있다.\n\n> 파일 변경 -> livereload (build and copy) -> open(update) browse\n\n```\nnpm install grunt-contlib-connect --save-dev\n```\n\n#### Gruntfile.js\n\n```\n'use strict';\n\nmodule.exports = function (grunt) {\n\n\trequire('time-grunt')(grunt);\n\trequire('jit-grunt')(grunt, {\n\t\tuseminPrepare: 'grunt-usemin'\n\t});\n\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc',\n\t\t\t\treporter: require('jshint-stylish')\n\t\t\t},\n\t\t\tall: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'Gruntfile.js',\n\t\t\t\t\t'app/scripts/{,*/}*.js'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tuseminPrepare: {\n\t\t\thtml: 'app/menu.html',\n\t\t\toptions: {\n\t\t\t\tdest: 'dist'\n\t\t\t}\n\t\t},\n\t\tconcat: {\n\t\t\toptions: {\n\t\t\t\tseparator: ';'\n\t\t\t},\n\t\t\tdist: {}\n\t\t},\n\t\tuglify: {\n\t\t\tdist: {}\n\t\t},\n\t\tcssmin: {\n\t\t\tdist: {}\n\t\t},\n\t\tfilerev: {\n\t\t\toptions: {\n\t\t\t\tencoding: 'utf8',\n\t\t\t\talgorithm: 'md5',\n\t\t\t\tlength: 20\n\t\t\t},\n\t\t\trelease: {\n\t\t\t\tfiles: [{\n\t\t\t\t\tsrc: [\n\t\t\t\t\t\t'dist/scripts/*js',\n\t\t\t\t\t\t'dist/styles/*.css'\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tusemin: {\n\t\t\thtml: ['dist/*.html'],\n\t\t\tcss: ['dist/styles/*.css'],\n\t\t\toptions: {\n\t\t\t\tassetsDirs: ['dist', 'dist/styles']\n\t\t\t}\n\t\t},\n\n\t\tcopy: {\n\t\t\tdist: {\n\t\t\t\tcwd: 'app',\n\t\t\t\tsrc: ['**', '!styles/**/*.css', '!scripts/**/*.js'],\n\t\t\t\tdest: 'dist',\n\t\t\t\texpand: true\n\t\t\t},\n\t\t\tfonts: {\n\t\t\t\tfiles:[\n\t\t\t\t\t{\n\t\t\t\t\t\texpand: true,\n\t\t\t\t\t\tdot: true,\n\t\t\t\t\t\tcwd: 'bower_components/bootstrap/dist',\n\t\t\t\t\t\tsrc: ['fonts/*.*'],\n\t\t\t\t\t\tdest: 'dist'\n\t\t\t\t\t}, {\n\t\t\t\t\t\texpand: true,\n\t\t\t\t\t\tdot: true,\n\t\t\t\t\t\tcwd: 'bower_components/font-awesome',\n\t\t\t\t\t\tsrc: ['fonts/*.*'],\n\t\t\t\t\t\tdest: 'dist'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\tcopy: {\n\t\t\t\tfiles: ['app/**', '!app/**/*.css', '!app/**/*.js'],\n\t\t\t\ttasks: ['build']\n\t\t\t},\n\t\t\tscripts: {\n\t\t\t\tfiles: ['app/scripts/app.js'],\n\t\t\t\ttasks: ['build']\n\t\t\t},\n\t\t\tstyles: {\n\t\t\t\tfiles: ['app/styles/mystyles.css'],\n\t\t\t\ttasks:['build']\n\t\t\t},\n\t\t\tlivereload: {\n\t\t\t\toptions: {\n\t\t\t\t\tlivereload: '<%= connect.options.livereload %>'\n\t\t\t\t},\n\t\t\t\tfiles: [\n\t\t\t\t\t'app/{,*/}*.html',\n\t\t\t\t\t'.tmp/styles/{,*/}*.css',\n\t\t\t\t\t'app/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tconnect: {\n\t\t\toptions: {\n\t\t\t\tport: 9000,\n\t\t\t\thostname: 'localhost',\n\t\t\t\tlivereload: 35729\n\t\t\t},\n\t\t\tdist: {\n\t\t\t\toptions: {\n\t\t\t\t\topen: true, \n\t\t\t\t\tbase: {\n\t\t\t\t\t\tpath: 'dist',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tindex: 'menu.html',\n\t\t\t\t\t\t\tmaxAge: 300000\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclean: {\n\t\t\tbuild: {\n\t\t\t\tsrc: ['dist/']\n\t\t\t}\n\t\t}\n\t});\n\n\t// 태스크 등록\n\t// 순서가 중요하다.\n\t// jshint로 모든 .js 파일을 검사하게 된다.\n\tgrunt.registerTask('build', [\n\t\t'clean',\n\t\t'jshint',\n\t\t'useminPrepare',\n\t\t'concat',\n\t\t'cssmin',\n\t\t'uglify',\n\t\t'copy',\n\t\t'filerev',\n\t\t'usemin'\n\t]);\n\n\t// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch\n\t// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.\n\tgrunt.registerTask('serve', ['build','connect:dist','watch']);\n\tgrunt.registerTask('default', ['build']);\n};\n```\n\n\n\n### Gulp\n\nGrunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지). \n\n일단 global로 설치하자.\n\n```\nnpm install -g gulp\n```\n\nGrunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.\n\n```\nnpm install \n\tgulp-jshint jshint-stylish\n\tgulp-imagemin gulp-concat gulp-uglify gulp-minify-css gulp-usemin\n\tgulp-cache gulp-rev gulp-rename gulp-notify\n\tbrowser-sync del\n--save-dev\n```\n\n플러그인을 로드하는 방법은 다음과 같다.\n직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.\n\n```\nvar gulp = require('gulp'),\n  jshint = require('gulp-jshint')\n  sylish = require('jshint-stylish')\n  \n  ...\n\n\n```\n\n#### Gulp Streams\n\nGulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자\n\n```\ngulp.task('jshint', function() {\n\tgulp.src('app/scripts/**/*.js')\n\t.pipe(jshint())\n\t.pipe(jshint.reporter(stylish));\n});\n```\n\n우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.\n\nWatch 태스크 예제를 살펴보자\n\n```\ngulp.task('watch', ['browser-sync'], function() {\n\tgulp.watch('{app/scripts/**/*.js, app/style/**/*.css, app/**/*.html}', ['usemin']);\n\tgulp.watch('app/images/**/*', ['imagemin']);\n});\n```\n\n태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.\n\n#### Default Task\n\n```\ngulp.task('default', ['clean'], function() {\n\tgulp.start('usemin', 'imagemin', 'copyfonts');\n});\n```\n\ndefault 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.\n\n\n#### gulpfile.js\n\n콤마(,)와 띄어쓰기에 유의해야 한다. \n\n```\nvar gulp = require('gulp'),\n\tminifycss = require('gulp-minify-css'),\n\tjshint = require('gulp-jshint'),\n\tstylish = require('jshint-stylish'),\n\tuglify = require('gulp-uglify'),\n\tusemin = require('gulp-usemin'),\n\timagemin = require('gulp-imagemin'),\n\trename = require('gulp-rename'),\n\tconcat = require('gulp-concat'),\n\tnotify = require('gulp-notify'),\n\tcache = require('gulp-cache'),\n\tchanged = require('gulp-changed'),\n\trev = require('gulp-rev'),\n\tbrowserSync = require('browser-sync'),\n\tdel = require('del');\n\ngulp.task('jshint', function() {\n\treturn gulp.src('app/scripts/**/*.js')\n\t\t.pipe(jshint())\n\t\t.pipe(jshint.reporter(stylish));\n});\n\ngulp.task('usemin', ['jshint'], function() {\n\treturn gulp.src('./app/menu.html')\n\t\t.pipe(usemin({\n\t\t\tcss:[minifycss(),rev()],\n\t\t\tjs: [uglify(),rev()]\n\t\t}))\n\t\t.pipe(gulp.dest('dist/'));\n});\n\ngulp.task('imagemin', function() {\n\treturn del(['dist/images']), gulp.src('app/images/**/*')\n\t\t.pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))\n\t\t.pipe(gulp.dest('dist/images'))\n\t\t.pipe(notify({ message: 'Images task complete' }));\n});\n\ngulp.task('clean', function() {\n\treturn del(['dist'])\n});\n\ngulp.task('copyfonts', ['clean'], function() {\n\tgulp.src('./bower_components/font-awesome/fonts/**/*.{ttf,woff,eof,svg}*')\n\t\t.pipe(gulp.dest('./dist/fonts'));\n\tgulp.src('./bower_components/bootstrap/dist/fonts/**/*.{ttf,woff,eof,svg}*')\n\t\t.pipe(gulp.dest('./dist/fonts'));\n});\n\ngulp.task('watch', ['browser-sync'], function() {\n\tgulp.watch('{app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html}', ['usemin']);\n\tgulp.watch('app/images/**/*', ['imagemin']);\n});\n\ngulp.task('browser-sync', ['default'], function() {\n\tvar files = [\n\t\t'app/**/*.html',\n\t\t'app/styles/**/*.css',\n\t\t'app/images/**/*.png',\n\t\t'app/scripts/**/*.js',\n\t\t'dist/**/*'\n\t];\n\n\tbrowserSync.init(files, {\n\t\tserver: {\n\t\t\tbaseDir: \"dist\",\n\t\t\tindex: \"menu.html\"\n\t\t}\n\t});\n\n\tgulp.watch(['dist/**']).on('change', browserSync.reload);\n});\n\ngulp.task('default', ['clean'], function() {\n\tgulp.start('usemin', 'imagemin', 'copyfonts');\n});\n```\n","slug":"2016-08-25-frontend-javascript-framework-angularjs-week2-1","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7g001ywxt4195t4rph","content":"<h2 id=\"Task-Runners-Angular-Scope-Forms-and-Form-Validation-1\"><a href=\"#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1\" class=\"headerlink\" title=\"Task Runners, Angular Scope, Forms and Form Validation-1\"></a>Task Runners, Angular Scope, Forms and Form Validation-1</h2><h3 id=\"Web-Tools-Grunt-and-Gulp\"><a href=\"#Web-Tools-Grunt-and-Gulp\" class=\"headerlink\" title=\"Web Tools: Grunt and Gulp\"></a>Web Tools: Grunt and Gulp</h3><h4 id=\"Task-Runners\"><a href=\"#Task-Runners\" class=\"headerlink\" title=\"Task-Runners\"></a>Task-Runners</h4><p>웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.</p><p>CSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.</p><p>Javascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.</p><p>이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.</p><p>위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다.</p><h3 id=\"Grunt\"><a href=\"#Grunt\" class=\"headerlink\" title=\"Grunt\"></a>Grunt</h3><p>Grunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.</p><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g grunt-<span class=\"keyword\">cli</span></div></pre></td></tr></table></figure><p>Grunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.<br>function의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// do requires here</span></div><div class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'jit-grunt'</span>)(grunt);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// do grunt task configurations here</span></div><div class=\"line\">\tgrunt.initConfig(&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// register tasks here</span></div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'build'</span>, [<span class=\"string\">'jshint'</span>]);</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'build'</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"File-Globbing-Patterns\"><a href=\"#File-Globbing-Patterns\" class=\"headerlink\" title=\"File Globbing Patterns\"></a>File Globbing Patterns</h4><p>Grunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.</p><ul><li>* 문자열, but not /</li><li>? 문자 하나, but not /</li><li>** 문자열 including /</li><li>{} comma로 or 를 표현함</li><li>! 패턴매치가 negative함</li></ul><p>몇가지 예제를 살펴보자<br>우선 jshint와 jshint-stylish 모듈을 install 한다.<br>jshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install </span>grunt-contrib-<span class=\"keyword\">jshint </span>--save-dev</div><div class=\"line\">npm <span class=\"keyword\">install </span><span class=\"keyword\">jshint-stylish </span>--save-dev</div></pre></td></tr></table></figure><p>그리고 Configuration을 다음과 같이 작성하자.<br>Configuration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">jshint</span>: &#123;</div><div class=\"line\">\t<span class=\"attribute\">options</span>: &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">jshintrc</span>: <span class=\"string\">'.jshintrc'</span>,</div><div class=\"line\">\t\t<span class=\"attribute\">reporter</span>: require(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attribute\">all</span>: &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 실제 체크할 자바스크립트 파일의 경로를 지정한다.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.</span></div><div class=\"line\">\t\t<span class=\"attribute\">src</span>: [<span class=\"string\">'Gruntfile.js'</span>, <span class=\"string\">'app/scripts/&#123;,*/&#125;*.js'</span>]</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.</p><h4 id=\"Greating-a-Distribution-Folder\"><a href=\"#Greating-a-Distribution-Folder\" class=\"headerlink\" title=\"Greating a Distribution Folder\"></a>Greating a Distribution Folder</h4><p>수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.</p><p>다음의 모듈을 설치한다.<br>global(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.</p><h4 id=\"usemin-module\"><a href=\"#usemin-module\" class=\"headerlink\" title=\"usemin module\"></a>usemin module</h4><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.</span></div><div class=\"line\">npm install grunt-contrib-copy --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.</span></div><div class=\"line\">npm install grunt-contrib-clean --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// js, css 파일들을 하나로 합쳐준다.</span></div><div class=\"line\">npm install grunt-contrib-concat --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// css 파일 minification</span></div><div class=\"line\">npm install grunt-contrib-cssmin --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 자바스크립트 변수를 문자열 =&gt; 문자로 변경한다.</span></div><div class=\"line\">npm install grunt-contrib-uglify --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)</span></div><div class=\"line\"><span class=\"comment\">// 해싱 알고리즘과 length등을 선택할 수 있다.</span></div><div class=\"line\">npm insatll grunt-filerev --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// css, js 파일을 minification 해준다.</span></div><div class=\"line\"><span class=\"comment\">// useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin의 순서로 태스크가 진행된다. </span></div><div class=\"line\">npm insatll grunt-usemin --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure><p>usemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.</p><blockquote><p>useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin</p></blockquote><p>우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.</p><h4 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h4><p>original 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.<br>설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.<br>reload는 모든 파일들을 복사하는것과 같다고 보면 된다.<br>그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.</p><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install grunt-contrib-watch --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure><h4 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h4><p>브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.<br>watch 모듈과 같이 사용하면 이렇게 사용할 수 있다.</p><blockquote><p>파일 변경 -&gt; livereload (build and copy) -&gt; open(update) browse</p></blockquote><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> grunt-contlib-<span class=\"keyword\">connect</span> <span class=\"comment\">--save-dev</span></div></pre></td></tr></table></figure><h4 id=\"Gruntfile-js\"><a href=\"#Gruntfile-js\" class=\"headerlink\" title=\"Gruntfile.js\"></a>Gruntfile.js</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">module.exports = <span class=\"keyword\">function</span> (grunt) &#123;</div><div class=\"line\"></div><div class=\"line\">\trequire(<span class=\"string\">'time-grunt'</span>)(grunt);</div><div class=\"line\">\trequire(<span class=\"string\">'jit-grunt'</span>)(grunt, &#123;</div><div class=\"line\">\t\tuseminPrepare: <span class=\"string\">'grunt-usemin'</span></div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tgrunt.initConfig(&#123;</div><div class=\"line\">\t\tpkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">\t\tjshint: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tjshintrc: <span class=\"string\">'.jshintrc'</span>,</div><div class=\"line\">\t\t\t\treporter: require(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tall: &#123;</div><div class=\"line\">\t\t\t\tsrc: [</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'Gruntfile.js'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/scripts/&#123;,*/&#125;*.js'</span></div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tuseminPrepare: &#123;</div><div class=\"line\">\t\t\thtml: <span class=\"string\">'app/menu.html'</span>,</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tconcat: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tseparator: <span class=\"string\">';'</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tuglify: &#123;</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tcssmin: &#123;</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfilerev: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tencoding: <span class=\"string\">'utf8'</span>,</div><div class=\"line\">\t\t\t\talgorithm: <span class=\"string\">'md5'</span>,</div><div class=\"line\">\t\t\t\tlength: <span class=\"number\">20</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\trelease: &#123;</div><div class=\"line\">\t\t\t\tfiles: [&#123;</div><div class=\"line\">\t\t\t\t\tsrc: [</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">'dist/scripts/*js'</span>,</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">'dist/styles/*.css'</span></div><div class=\"line\">\t\t\t\t\t]</div><div class=\"line\">\t\t\t\t&#125;]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tusemin: &#123;</div><div class=\"line\">\t\t\thtml: [<span class=\"string\">'dist/*.html'</span>],</div><div class=\"line\">\t\t\tcss: [<span class=\"string\">'dist/styles/*.css'</span>],</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tassetsDirs: [<span class=\"string\">'dist'</span>, <span class=\"string\">'dist/styles'</span>]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\tcopy: &#123;</div><div class=\"line\">\t\t\tdist: &#123;</div><div class=\"line\">\t\t\t\tcwd: <span class=\"string\">'app'</span>,</div><div class=\"line\">\t\t\t\tsrc: [<span class=\"string\">'**'</span>, <span class=\"string\">'!styles/**/*.css'</span>, <span class=\"string\">'!scripts/**/*.js'</span>],</div><div class=\"line\">\t\t\t\tdest: <span class=\"string\">'dist'</span>,</div><div class=\"line\">\t\t\t\texpand: true</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tfonts: &#123;</div><div class=\"line\">\t\t\t\tfiles:[</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\texpand: true,</div><div class=\"line\">\t\t\t\t\t\tdot: true,</div><div class=\"line\">\t\t\t\t\t\tcwd: <span class=\"string\">'bower_components/bootstrap/dist'</span>,</div><div class=\"line\">\t\t\t\t\t\tsrc: [<span class=\"string\">'fonts/*.*'</span>],</div><div class=\"line\">\t\t\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t\t\t&#125;, &#123;</div><div class=\"line\">\t\t\t\t\t\texpand: true,</div><div class=\"line\">\t\t\t\t\t\tdot: true,</div><div class=\"line\">\t\t\t\t\t\tcwd: <span class=\"string\">'bower_components/font-awesome'</span>,</div><div class=\"line\">\t\t\t\t\t\tsrc: [<span class=\"string\">'fonts/*.*'</span>],</div><div class=\"line\">\t\t\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\twatch: &#123;</div><div class=\"line\">\t\t\tcopy: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/**'</span>, <span class=\"string\">'!app/**/*.css'</span>, <span class=\"string\">'!app/**/*.js'</span>],</div><div class=\"line\">\t\t\t\ttasks: [<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tscripts: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/scripts/app.js'</span>],</div><div class=\"line\">\t\t\t\ttasks: [<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tstyles: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/styles/mystyles.css'</span>],</div><div class=\"line\">\t\t\t\ttasks:[<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tlivereload: &#123;</div><div class=\"line\">\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\tlivereload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\tfiles: [</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/&#123;,*/&#125;*.html'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'.tmp/styles/&#123;,*/&#125;*.css'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/images/&#123;,*/&#125;*.&#123;png,jpg,jpeg,gif,webp,svg&#125;'</span></div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tconnect: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tport: <span class=\"number\">9000</span>,</div><div class=\"line\">\t\t\t\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\t\t\t\tlivereload: <span class=\"number\">35729</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tdist: &#123;</div><div class=\"line\">\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\topen: true, </div><div class=\"line\">\t\t\t\t\tbase: &#123;</div><div class=\"line\">\t\t\t\t\t\tpath: <span class=\"string\">'dist'</span>,</div><div class=\"line\">\t\t\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\t\t\tindex: <span class=\"string\">'menu.html'</span>,</div><div class=\"line\">\t\t\t\t\t\t\tmaxAge: <span class=\"number\">300000</span></div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tclean: &#123;</div><div class=\"line\">\t\t\tbuild: &#123;</div><div class=\"line\">\t\t\t\tsrc: [<span class=\"string\">'dist/'</span>]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t// 태스크 등록</div><div class=\"line\">\t// 순서가 중요하다.</div><div class=\"line\">\t// jshint로 모든 .js 파일을 검사하게 된다.</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'build'</span>, [</div><div class=\"line\">\t\t<span class=\"string\">'clean'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'jshint'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'useminPrepare'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'concat'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'cssmin'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'uglify'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'copy'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'filerev'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'usemin'</span></div><div class=\"line\">\t]);</div><div class=\"line\"></div><div class=\"line\">\t// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch</div><div class=\"line\">\t// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'serve'</span>, [<span class=\"string\">'build'</span>,<span class=\"string\">'connect:dist'</span>,<span class=\"string\">'watch'</span>]);</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'build'</span>]);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure><h3 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h3><p>Grunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지).</p><p>일단 global로 설치하자.</p><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g gulp</div></pre></td></tr></table></figure><p>Grunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> </div><div class=\"line\">\tgulp-jshint jshint-stylish</div><div class=\"line\">\tgulp-imagemin gulp-<span class=\"keyword\">concat</span> gulp-uglify gulp-minify-css gulp-usemin</div><div class=\"line\">\tgulp-<span class=\"keyword\">cache</span> gulp-rev gulp-<span class=\"keyword\">rename</span> gulp-notify</div><div class=\"line\">\tbrowser-<span class=\"keyword\">sync</span> del</div><div class=\"line\"><span class=\"comment\">--save-dev</span></div></pre></td></tr></table></figure><p>플러그인을 로드하는 방법은 다음과 같다.<br>직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">  jshint = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-jshint'</span>)</div><div class=\"line\">  sylish = <span class=\"keyword\">require</span>(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"params\">...</span></div></pre></td></tr></table></figure><h4 id=\"Gulp-Streams\"><a href=\"#Gulp-Streams\" class=\"headerlink\" title=\"Gulp Streams\"></a>Gulp Streams</h4><p>Gulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'jshint'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'app/scripts/**/*.js'</span>)</div><div class=\"line\">\t.pipe(jshint())</div><div class=\"line\">\t.pipe(jshint.reporter(stylish));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.</p><p>Watch 태스크 예제를 살펴보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'browser-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'&#123;app/scripts/**/*.js, app/style/**/*.css, app/**/*.html&#125;'</span>, [<span class=\"string\">'usemin'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'app/images/**/*'</span>, [<span class=\"string\">'imagemin'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.</p><h4 id=\"Default-Task\"><a href=\"#Default-Task\" class=\"headerlink\" title=\"Default Task\"></a>Default Task</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.start(<span class=\"string\">'usemin'</span>, <span class=\"string\">'imagemin'</span>, <span class=\"string\">'copyfonts'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>default 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.</p><h4 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h4><p>콤마(,)와 띄어쓰기에 유의해야 한다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">\tminifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</div><div class=\"line\">\tstylish = <span class=\"built_in\">require</span>(<span class=\"string\">'jshint-stylish'</span>),</div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tusemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-usemin'</span>),</div><div class=\"line\">\timagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\tnotify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>),</div><div class=\"line\">\tcache = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cache'</span>),</div><div class=\"line\">\tchanged = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-changed'</span>),</div><div class=\"line\">\trev = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev'</span>),</div><div class=\"line\">\tbrowserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>),</div><div class=\"line\">\tdel = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'jshint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'app/scripts/**/*.js'</span>)</div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(stylish));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'usemin'</span>, [<span class=\"string\">'jshint'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./app/menu.html'</span>)</div><div class=\"line\">\t\t.pipe(usemin(&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">css</span>:[minifycss(),rev()],</div><div class=\"line\">\t\t\t<span class=\"attr\">js</span>: [uglify(),rev()]</div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'dist/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'imagemin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> del([<span class=\"string\">'dist/images'</span>]), gulp.src(<span class=\"string\">'app/images/**/*'</span>)</div><div class=\"line\">\t\t.pipe(cache(imagemin(&#123; <span class=\"attr\">optimizationLevel</span>: <span class=\"number\">3</span>, <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span>, <span class=\"attr\">interlaced</span>: <span class=\"literal\">true</span> &#125;)))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</div><div class=\"line\">\t\t.pipe(notify(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'Images task complete'</span> &#125;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> del([<span class=\"string\">'dist'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'copyfonts'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./bower_components/font-awesome/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./dist/fonts'</span>));</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./bower_components/bootstrap/dist/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./dist/fonts'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'browser-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'&#123;app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html&#125;'</span>, [<span class=\"string\">'usemin'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'app/images/**/*'</span>, [<span class=\"string\">'imagemin'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'browser-sync'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> files = [</div><div class=\"line\">\t\t<span class=\"string\">'app/**/*.html'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/styles/**/*.css'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/images/**/*.png'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/scripts/**/*.js'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'dist/**/*'</span></div><div class=\"line\">\t];</div><div class=\"line\"></div><div class=\"line\">\tbrowserSync.init(files, &#123;</div><div class=\"line\">\t\t<span class=\"attr\">server</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">baseDir</span>: <span class=\"string\">\"dist\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">\"menu.html\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tgulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.start(<span class=\"string\">'usemin'</span>, <span class=\"string\">'imagemin'</span>, <span class=\"string\">'copyfonts'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Task-Runners-Angular-Scope-Forms-and-Form-Validation-1\"><a href=\"#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1\" class=\"headerlink\" title=\"Task Runners, Angular Scope, Forms and Form Validation-1\"></a>Task Runners, Angular Scope, Forms and Form Validation-1</h2><h3 id=\"Web-Tools-Grunt-and-Gulp\"><a href=\"#Web-Tools-Grunt-and-Gulp\" class=\"headerlink\" title=\"Web Tools: Grunt and Gulp\"></a>Web Tools: Grunt and Gulp</h3><h4 id=\"Task-Runners\"><a href=\"#Task-Runners\" class=\"headerlink\" title=\"Task-Runners\"></a>Task-Runners</h4><p>웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.</p><p>CSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.</p><p>Javascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.</p><p>이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.</p><p>위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다.</p><h3 id=\"Grunt\"><a href=\"#Grunt\" class=\"headerlink\" title=\"Grunt\"></a>Grunt</h3><p>Grunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.</p><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g grunt-<span class=\"keyword\">cli</span></div></pre></td></tr></table></figure><p>Grunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.<br>function의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// do requires here</span></div><div class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'jit-grunt'</span>)(grunt);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// do grunt task configurations here</span></div><div class=\"line\">\tgrunt.initConfig(&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// register tasks here</span></div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'build'</span>, [<span class=\"string\">'jshint'</span>]);</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'build'</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"File-Globbing-Patterns\"><a href=\"#File-Globbing-Patterns\" class=\"headerlink\" title=\"File Globbing Patterns\"></a>File Globbing Patterns</h4><p>Grunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.</p><ul><li>* 문자열, but not /</li><li>? 문자 하나, but not /</li><li>** 문자열 including /</li><li>{} comma로 or 를 표현함</li><li>! 패턴매치가 negative함</li></ul><p>몇가지 예제를 살펴보자<br>우선 jshint와 jshint-stylish 모듈을 install 한다.<br>jshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install </span>grunt-contrib-<span class=\"keyword\">jshint </span>--save-dev</div><div class=\"line\">npm <span class=\"keyword\">install </span><span class=\"keyword\">jshint-stylish </span>--save-dev</div></pre></td></tr></table></figure><p>그리고 Configuration을 다음과 같이 작성하자.<br>Configuration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">jshint</span>: &#123;</div><div class=\"line\">\t<span class=\"attribute\">options</span>: &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">jshintrc</span>: <span class=\"string\">'.jshintrc'</span>,</div><div class=\"line\">\t\t<span class=\"attribute\">reporter</span>: require(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attribute\">all</span>: &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 실제 체크할 자바스크립트 파일의 경로를 지정한다.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.</span></div><div class=\"line\">\t\t<span class=\"attribute\">src</span>: [<span class=\"string\">'Gruntfile.js'</span>, <span class=\"string\">'app/scripts/&#123;,*/&#125;*.js'</span>]</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.</p><h4 id=\"Greating-a-Distribution-Folder\"><a href=\"#Greating-a-Distribution-Folder\" class=\"headerlink\" title=\"Greating a Distribution Folder\"></a>Greating a Distribution Folder</h4><p>수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.</p><p>다음의 모듈을 설치한다.<br>global(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.</p><h4 id=\"usemin-module\"><a href=\"#usemin-module\" class=\"headerlink\" title=\"usemin module\"></a>usemin module</h4><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.</span></div><div class=\"line\">npm install grunt-contrib-copy --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.</span></div><div class=\"line\">npm install grunt-contrib-clean --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// js, css 파일들을 하나로 합쳐준다.</span></div><div class=\"line\">npm install grunt-contrib-concat --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// css 파일 minification</span></div><div class=\"line\">npm install grunt-contrib-cssmin --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 자바스크립트 변수를 문자열 =&gt; 문자로 변경한다.</span></div><div class=\"line\">npm install grunt-contrib-uglify --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)</span></div><div class=\"line\"><span class=\"comment\">// 해싱 알고리즘과 length등을 선택할 수 있다.</span></div><div class=\"line\">npm insatll grunt-filerev --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// css, js 파일을 minification 해준다.</span></div><div class=\"line\"><span class=\"comment\">// useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin의 순서로 태스크가 진행된다. </span></div><div class=\"line\">npm insatll grunt-usemin --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure><p>usemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.</p><blockquote><p>useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin</p></blockquote><p>우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.</p><h4 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h4><p>original 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.<br>설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.<br>reload는 모든 파일들을 복사하는것과 같다고 보면 된다.<br>그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.</p><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install grunt-contrib-watch --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure><h4 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h4><p>브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.<br>watch 모듈과 같이 사용하면 이렇게 사용할 수 있다.</p><blockquote><p>파일 변경 -&gt; livereload (build and copy) -&gt; open(update) browse</p></blockquote><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> grunt-contlib-<span class=\"keyword\">connect</span> <span class=\"comment\">--save-dev</span></div></pre></td></tr></table></figure><h4 id=\"Gruntfile-js\"><a href=\"#Gruntfile-js\" class=\"headerlink\" title=\"Gruntfile.js\"></a>Gruntfile.js</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">module.exports = <span class=\"keyword\">function</span> (grunt) &#123;</div><div class=\"line\"></div><div class=\"line\">\trequire(<span class=\"string\">'time-grunt'</span>)(grunt);</div><div class=\"line\">\trequire(<span class=\"string\">'jit-grunt'</span>)(grunt, &#123;</div><div class=\"line\">\t\tuseminPrepare: <span class=\"string\">'grunt-usemin'</span></div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tgrunt.initConfig(&#123;</div><div class=\"line\">\t\tpkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">\t\tjshint: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tjshintrc: <span class=\"string\">'.jshintrc'</span>,</div><div class=\"line\">\t\t\t\treporter: require(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tall: &#123;</div><div class=\"line\">\t\t\t\tsrc: [</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'Gruntfile.js'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/scripts/&#123;,*/&#125;*.js'</span></div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tuseminPrepare: &#123;</div><div class=\"line\">\t\t\thtml: <span class=\"string\">'app/menu.html'</span>,</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tconcat: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tseparator: <span class=\"string\">';'</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tuglify: &#123;</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tcssmin: &#123;</div><div class=\"line\">\t\t\tdist: &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfilerev: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tencoding: <span class=\"string\">'utf8'</span>,</div><div class=\"line\">\t\t\t\talgorithm: <span class=\"string\">'md5'</span>,</div><div class=\"line\">\t\t\t\tlength: <span class=\"number\">20</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\trelease: &#123;</div><div class=\"line\">\t\t\t\tfiles: [&#123;</div><div class=\"line\">\t\t\t\t\tsrc: [</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">'dist/scripts/*js'</span>,</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">'dist/styles/*.css'</span></div><div class=\"line\">\t\t\t\t\t]</div><div class=\"line\">\t\t\t\t&#125;]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tusemin: &#123;</div><div class=\"line\">\t\t\thtml: [<span class=\"string\">'dist/*.html'</span>],</div><div class=\"line\">\t\t\tcss: [<span class=\"string\">'dist/styles/*.css'</span>],</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tassetsDirs: [<span class=\"string\">'dist'</span>, <span class=\"string\">'dist/styles'</span>]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\tcopy: &#123;</div><div class=\"line\">\t\t\tdist: &#123;</div><div class=\"line\">\t\t\t\tcwd: <span class=\"string\">'app'</span>,</div><div class=\"line\">\t\t\t\tsrc: [<span class=\"string\">'**'</span>, <span class=\"string\">'!styles/**/*.css'</span>, <span class=\"string\">'!scripts/**/*.js'</span>],</div><div class=\"line\">\t\t\t\tdest: <span class=\"string\">'dist'</span>,</div><div class=\"line\">\t\t\t\texpand: true</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tfonts: &#123;</div><div class=\"line\">\t\t\t\tfiles:[</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\texpand: true,</div><div class=\"line\">\t\t\t\t\t\tdot: true,</div><div class=\"line\">\t\t\t\t\t\tcwd: <span class=\"string\">'bower_components/bootstrap/dist'</span>,</div><div class=\"line\">\t\t\t\t\t\tsrc: [<span class=\"string\">'fonts/*.*'</span>],</div><div class=\"line\">\t\t\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t\t\t&#125;, &#123;</div><div class=\"line\">\t\t\t\t\t\texpand: true,</div><div class=\"line\">\t\t\t\t\t\tdot: true,</div><div class=\"line\">\t\t\t\t\t\tcwd: <span class=\"string\">'bower_components/font-awesome'</span>,</div><div class=\"line\">\t\t\t\t\t\tsrc: [<span class=\"string\">'fonts/*.*'</span>],</div><div class=\"line\">\t\t\t\t\t\tdest: <span class=\"string\">'dist'</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\twatch: &#123;</div><div class=\"line\">\t\t\tcopy: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/**'</span>, <span class=\"string\">'!app/**/*.css'</span>, <span class=\"string\">'!app/**/*.js'</span>],</div><div class=\"line\">\t\t\t\ttasks: [<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tscripts: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/scripts/app.js'</span>],</div><div class=\"line\">\t\t\t\ttasks: [<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tstyles: &#123;</div><div class=\"line\">\t\t\t\tfiles: [<span class=\"string\">'app/styles/mystyles.css'</span>],</div><div class=\"line\">\t\t\t\ttasks:[<span class=\"string\">'build'</span>]</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tlivereload: &#123;</div><div class=\"line\">\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\tlivereload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\tfiles: [</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/&#123;,*/&#125;*.html'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'.tmp/styles/&#123;,*/&#125;*.css'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'app/images/&#123;,*/&#125;*.&#123;png,jpg,jpeg,gif,webp,svg&#125;'</span></div><div class=\"line\">\t\t\t\t]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tconnect: &#123;</div><div class=\"line\">\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\tport: <span class=\"number\">9000</span>,</div><div class=\"line\">\t\t\t\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\t\t\t\tlivereload: <span class=\"number\">35729</span></div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\tdist: &#123;</div><div class=\"line\">\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\topen: true, </div><div class=\"line\">\t\t\t\t\tbase: &#123;</div><div class=\"line\">\t\t\t\t\t\tpath: <span class=\"string\">'dist'</span>,</div><div class=\"line\">\t\t\t\t\t\toptions: &#123;</div><div class=\"line\">\t\t\t\t\t\t\tindex: <span class=\"string\">'menu.html'</span>,</div><div class=\"line\">\t\t\t\t\t\t\tmaxAge: <span class=\"number\">300000</span></div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tclean: &#123;</div><div class=\"line\">\t\t\tbuild: &#123;</div><div class=\"line\">\t\t\t\tsrc: [<span class=\"string\">'dist/'</span>]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t// 태스크 등록</div><div class=\"line\">\t// 순서가 중요하다.</div><div class=\"line\">\t// jshint로 모든 .js 파일을 검사하게 된다.</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'build'</span>, [</div><div class=\"line\">\t\t<span class=\"string\">'clean'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'jshint'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'useminPrepare'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'concat'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'cssmin'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'uglify'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'copy'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'filerev'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'usemin'</span></div><div class=\"line\">\t]);</div><div class=\"line\"></div><div class=\"line\">\t// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch</div><div class=\"line\">\t// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'serve'</span>, [<span class=\"string\">'build'</span>,<span class=\"string\">'connect:dist'</span>,<span class=\"string\">'watch'</span>]);</div><div class=\"line\">\tgrunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'build'</span>]);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure><h3 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h3><p>Grunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지).</p><p>일단 global로 설치하자.</p><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g gulp</div></pre></td></tr></table></figure><p>Grunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> </div><div class=\"line\">\tgulp-jshint jshint-stylish</div><div class=\"line\">\tgulp-imagemin gulp-<span class=\"keyword\">concat</span> gulp-uglify gulp-minify-css gulp-usemin</div><div class=\"line\">\tgulp-<span class=\"keyword\">cache</span> gulp-rev gulp-<span class=\"keyword\">rename</span> gulp-notify</div><div class=\"line\">\tbrowser-<span class=\"keyword\">sync</span> del</div><div class=\"line\"><span class=\"comment\">--save-dev</span></div></pre></td></tr></table></figure><p>플러그인을 로드하는 방법은 다음과 같다.<br>직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.</p><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">  jshint = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-jshint'</span>)</div><div class=\"line\">  sylish = <span class=\"keyword\">require</span>(<span class=\"string\">'jshint-stylish'</span>)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"params\">...</span></div></pre></td></tr></table></figure><h4 id=\"Gulp-Streams\"><a href=\"#Gulp-Streams\" class=\"headerlink\" title=\"Gulp Streams\"></a>Gulp Streams</h4><p>Gulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'jshint'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'app/scripts/**/*.js'</span>)</div><div class=\"line\">\t.pipe(jshint())</div><div class=\"line\">\t.pipe(jshint.reporter(stylish));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.</p><p>Watch 태스크 예제를 살펴보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'browser-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'&#123;app/scripts/**/*.js, app/style/**/*.css, app/**/*.html&#125;'</span>, [<span class=\"string\">'usemin'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'app/images/**/*'</span>, [<span class=\"string\">'imagemin'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.</p><h4 id=\"Default-Task\"><a href=\"#Default-Task\" class=\"headerlink\" title=\"Default Task\"></a>Default Task</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tgulp.start(<span class=\"string\">'usemin'</span>, <span class=\"string\">'imagemin'</span>, <span class=\"string\">'copyfonts'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>default 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.</p><h4 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h4><p>콤마(,)와 띄어쓰기에 유의해야 한다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">\tminifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</div><div class=\"line\">\tstylish = <span class=\"built_in\">require</span>(<span class=\"string\">'jshint-stylish'</span>),</div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tusemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-usemin'</span>),</div><div class=\"line\">\timagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\tnotify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>),</div><div class=\"line\">\tcache = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cache'</span>),</div><div class=\"line\">\tchanged = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-changed'</span>),</div><div class=\"line\">\trev = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev'</span>),</div><div class=\"line\">\tbrowserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>),</div><div class=\"line\">\tdel = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'jshint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'app/scripts/**/*.js'</span>)</div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(stylish));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'usemin'</span>, [<span class=\"string\">'jshint'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./app/menu.html'</span>)</div><div class=\"line\">\t\t.pipe(usemin(&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">css</span>:[minifycss(),rev()],</div><div class=\"line\">\t\t\t<span class=\"attr\">js</span>: [uglify(),rev()]</div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'dist/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'imagemin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> del([<span class=\"string\">'dist/images'</span>]), gulp.src(<span class=\"string\">'app/images/**/*'</span>)</div><div class=\"line\">\t\t.pipe(cache(imagemin(&#123; <span class=\"attr\">optimizationLevel</span>: <span class=\"number\">3</span>, <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span>, <span class=\"attr\">interlaced</span>: <span class=\"literal\">true</span> &#125;)))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</div><div class=\"line\">\t\t.pipe(notify(&#123; <span class=\"attr\">message</span>: <span class=\"string\">'Images task complete'</span> &#125;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> del([<span class=\"string\">'dist'</span>])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'copyfonts'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./bower_components/font-awesome/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./dist/fonts'</span>));</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./bower_components/bootstrap/dist/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./dist/fonts'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'browser-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'&#123;app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html&#125;'</span>, [<span class=\"string\">'usemin'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'app/images/**/*'</span>, [<span class=\"string\">'imagemin'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'browser-sync'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> files = [</div><div class=\"line\">\t\t<span class=\"string\">'app/**/*.html'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/styles/**/*.css'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/images/**/*.png'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'app/scripts/**/*.js'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'dist/**/*'</span></div><div class=\"line\">\t];</div><div class=\"line\"></div><div class=\"line\">\tbrowserSync.init(files, &#123;</div><div class=\"line\">\t\t<span class=\"attr\">server</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">baseDir</span>: <span class=\"string\">\"dist\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">\"menu.html\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tgulp.watch([<span class=\"string\">'dist/**'</span>]).on(<span class=\"string\">'change'</span>, browserSync.reload);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.start(<span class=\"string\">'usemin'</span>, <span class=\"string\">'imagemin'</span>, <span class=\"string\">'copyfonts'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 2-2","date":"2016-08-27T16:46:10.000Z","_content":"## Task Runners, Angular Scope, Forms and Form Validation-2\n\n### Angular Scope\n\n스코프는 다음과 같이 정의된다.\n\n> 스코프는 application model과 관련된 object다.\n> This is at the core of Angular's two-way data binding\n> view와 controller 사이를 연결해주는 역할을 한다.\n\n우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.\n\n#### $rootScope\n\n가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.\n\n\n#### app.js\n\n```\n// 기존 코드\nangular.module('confusionApp', [])\n    .controller('MenuController',function(){\n        this.tab = 1;\n        this.filtText = '';\n        \n        ...\n\n\t});\t\n\n// scope 적용 코드\nangular.module('confusionApp', [])\n\t// scope 정의\n    .controller('MenuController', ['$scope',function($scope){\n        $scope.tab = 1;\n        $scope.filtText = '';\n\n        ...\n\n    )]};\n```\n\n기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다. \n\n\n#### menu.html\n\n```\n<!-- 기존 코드 -->\n<div class=\"container\">\n    <div class=\"row row-content\" ng-controller=\"MenuController as menuCtrl\">\n        <div class=\"col-xs-12\">\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n                <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(1)}\">\n                    <a ng-click=\"menuCtrl.select(1)\" aria-controls=\"all menu\"\n                     role=\"tab\">The Menu</a>\n                     ...\n                </li>\n            </ul>\n            <div class=\"tab-content\">\n                <ul class=\"media-list tab-pane fade in active\">\n                    <li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">\n                    ...\n\t                </li>\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n\n\n<!-- scope 적용 코드 -->\n<div class=\"container\">\n    <div class=\"row row-content\" ng-controller=\"MenuController\">\n        <div class=\"col-xs-12\">\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n                <li role=\"presentation\" ng-class=\"{active:isSelected(1)}\">\n                    <a ng-click=\"select(1)\" aria-controls=\"all menu\"\n                     role=\"tab\">The Menu</a>\n                     ...\n                </li>\n            </ul>\n            <div class=\"tab-content\">\n                <ul class=\"media-list tab-pane fade in active\">\n                    <li class=\"media\" ng-repeat=\"dish in dishes | filter:filtText\">\n                    ...\n\t                </li>\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n```\n\n기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다. \n\n\n#### ng-show\n\nng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자\n\n```\n<div class=\"col-xs-12\">\n    <button ng-click=\"toggleDetails()\" class=\"btn btn-xs btn-primary pull-right\" type=\"button\">\n        {{showDetails ? 'Hide Details':'Show Details'}}\n    </button>\n    <ul class=\"nav nav-tabs\" role=\"tablist\">\n\t    ...\n\t</ul>\n\t...\n        <p ng-show=\"showDetails\">{{dish.description}}</p>\n    ...\n</div>\n```\n\n$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.\n\n\n\n### Angular Forms and Form Validation\n\n#### Forms \nform은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.\n\nform에서는 two-way data binding이 중요하게 사용되는데, \n넘어가기 앞서 잠깐 짚고 넘어가야할게 있다. \nng-model의 개념이 약간 모호해서 한번 찾아봤다.\n\n> _ng-model_\n> \n> html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함\n> 반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.\n> 이를 two-way data binding이라 한다.\n> 참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.\n\nform과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다. \n예를들어보자.\n\n```\n// javascript code\n.controller('ContactController', ['$scope', function($scope){\n    $scope.feedback = {mychannel:\"\", firstname:\"\",\n                       lastname:\"\", agree:\"\", email:\"\"};\n}]);\n\n// html code\n<input type=\"text\" class=\"form-control\" id=\"firstname\" \n\tname=\"firstname\" placeholder=\"Enter First Name\" \n\tng-model=\"feedback.firstname\" required>\n```\n\n위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.\n\nselect의 경우에는 어떤가 보자\n\n```\n// javascript code\nvar channels = [{value:\"tel\", label:\"Tel.\"}, {value:\"Email\", label:\"Email\"}];\n\n// html code\n<select class=\"form-control\" ng-model=\"feedback.mychannel\" \n\t\tng-options=\"channel.value as channel.label for channel in channels\">\n\t<option value=\"\">Tel. or Email?</option>\n</select>\n```\n\n우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.\n\n위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다. \n\n\n#### Form Validation\n\n우선 HTML5 form validation을 끄자\n그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.\n\n```\n<form class=\"form-horizontal\" name=\"feedbackForm\" ng-submit=\"sendFeedback()\" novalidate>\n```\n\nvalidation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.\n\n| property | Description |\n|---|---|\n| $pristine | true if form has not been changed (form의 변경사항이 없다면,) |\n| $dirty | reverse of $pristine |\n| $valid | true if form field/whole form is valid (form이 valid 하면,) |\n| $invalid | reverse of $valid |\n\n예를 들어보자.\n* feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true\n* feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true\n\n에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.\n\n> .has-error, .has-warning, .has-success\n> .help-block to display helpful messages below the field\n\n\n#### app.js\n\n```\n...\n\n\t.controller('ContactController', ['$scope', function($scope){\n\t    $scope.feedback = {mychannel:\"\", firstname:\"\",\n\t                       lastname:\"\", agree:\"\", email:\"\"};\n\t    var channels = [{value:\"tel\", label:\"Tel.\"}, \n\t                    {values:\"Email\", label:\"Email\"}];\n\t    $scope.channels = channels;\n\t    $scope.invalidChannelSelection = false;\n\n\t}])\n\t.controller('FeedbackController', ['$scope', function($scope){\n\t    $scope.sendFeedback = function() {\n\t        console.log($scope.feedback);\n\n\t        if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n\t            $scope.invalidChannelSelection = true;\n\t            console.log('incorrent');\n\t        } else {\n\t            $scope.invalidChannelSelection = false;\n\t            $scope.feedback = {\n\t                mychannel:\"\", firstname:\"\",\n\t                lastname:\"\", agree:false, email:\"\" \n\t            };\n\t            $scope.feedback.mychannel = \"\";\n\t            $scope.feedbackForm.$setPristine();\n\t            console.log($scope.feedback);\n\t        }\n\t    };\n\t}]);\n    \n...\n\n```\n\n#### contactus.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n\n...\n\n<body>\n    <div class=\"container\" ng-controller=\"ContactController\">\n    \t...\n                <form class=\"form-horizontal\" role=\"form\" name=\"feedbackForm\" ng-submit=\"sendFeedback()\" novalidate>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.firstname.$error.required && !feedbackForm.firstname.$pristine }\">\n                        <label for=\"firstname\" class=\"col-sm-2 control-label\">First Name</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"firstname\" name=\"firstname\" placeholder=\"Enter First Name\" ng-model=\"feedback.firstname\" required>\n                            <span ng-show=\"feedback.firstname.$error.required && !feedbackForm.firstname.$pristine\" class=\"help-block\">Your First name is required</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.lastname.$error.required && !feedbackForm.lastname.$pristine }\">\n                        <label for=\"lastname\" class=\"col-sm-2 control-label\">Last Name</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"lastname\" name=\"lastname\" placeholder=\"Enter Last Name\" ng-model=\"feedback.lastname\" required>\n                            <span ng-show=\"feedback.lastname.$error.required && !feedbackForm.lastname.$pristine\" class=\"help-block\">Your Last name is required</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"telnum\" class=\"col-sm-2 control-label\">Contact Tel.</label>\n                        <div class=\"col-xs-5 col-sm-4 col-md-3\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-addon\">(</div>\n                                    <input type=\"tel\" class=\"form-control\" id=\"areacode\" name=\"areacode\" placeholder=\"Area code\" ng-model=\"feedback.tel.areacode\">\n                                <div class=\"input-group-addon\">)</div>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-7 col-sm-6 col-md-7\">\n                                    <input type=\"tel\" class=\"form-control\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. number\" ng-model=\"feedback.tel.number\">\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine }\">\n                        <label for=\"emailid\" class=\"col-sm-2 control-label\">Email</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"email\" class=\"form-control\" id=\"emailid\" name=\"emailid\" placeholder=\"Email\" ng-model=\"feedback.email\" required>\n                            <span ng-show=\"feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine\" class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\n                            <span ng-show=\"feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine\" class=\"help-block\">Enter a valid email address.</span>\n                            <span ng-show=\"feedbackForm.emailid.$error.required && !feedbackForm.emailid.$pristine\" class=\"help-block\">Enter a valid email address.</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : invalidChannelSelection }\">\n                       <div class=\"checkbox col-sm-5 col-sm-offset-2\">\n                            <label class=\"checkbox-inline\">\n                                <input type=\"checkbox\" name=\"approve\" value=\"\" ng-model=\"feedback.agree\">\n                                <strong>May we contact you?</strong>\n                            </label>\n                        </div>\n                        <div class=\"col-sm-3 col-sm-offset-1\" ng-show=\"feedback.agree\">\n                            <select class=\"form-control\" ng-model=\"feedback.mychannel\" ng-options=\"channel.value as channel.label for channel in channels\">\n                                <option value=\"\">Tel. or Email?</option>\n                            </select>\n                            <span ng-show=\"invalidChannelSelection\" class=\"help-block\">Select an option.</span>\n                        </div>\n                    </div>                    \n                    <div class=\"form-group\">\n                        <label for=\"feedback\" class=\"col-sm-2 control-label\">Your Feedback</label>\n                        <div class=\"col-sm-10\">\n                            <textarea class=\"form-control\" id=\"feedback\" name=\"feedback\" rows=\"12\" ng-model=\"feedback.comments\"></textarea>\n                        </div>\n                    </div> \n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                            <button type=\"submit\" class=\"btn btn-primary\" ng-disabled=\"feedbackForm.$invalid\">Send Feedback</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-xs-12 col-sm-3\">\n                <h3>Your Current Feedback:</h3>\n                <p>{{feedback.firstname}} {{feedback.lastname | uppercase }}</p>\n                <p>Contact Tel.: ({{feedback.tel.areacode}}){{feedback.tel.number}}</p>\n                <p>Contact Email: {{feedback.email}}</p>\n                <p ng-show=\"feedback.agree\">Contact by:{{feedback.mychannel}}</p>\n                <p>Comments: {{feedback.comments}}</p>\n            </div>\n       </div>\n    </div>\n</body></html>\n```\n","source":"_posts/2016-08-28-frontend-javascript-framework-angularjs-week2-2.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 2-2\"\ncategories: programming\ndate:   2016-08-28 01:46:10 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n## Task Runners, Angular Scope, Forms and Form Validation-2\n\n### Angular Scope\n\n스코프는 다음과 같이 정의된다.\n\n> 스코프는 application model과 관련된 object다.\n> This is at the core of Angular's two-way data binding\n> view와 controller 사이를 연결해주는 역할을 한다.\n\n우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.\n\n#### $rootScope\n\n가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.\n\n\n#### app.js\n\n```\n// 기존 코드\nangular.module('confusionApp', [])\n    .controller('MenuController',function(){\n        this.tab = 1;\n        this.filtText = '';\n        \n        ...\n\n\t});\t\n\n// scope 적용 코드\nangular.module('confusionApp', [])\n\t// scope 정의\n    .controller('MenuController', ['$scope',function($scope){\n        $scope.tab = 1;\n        $scope.filtText = '';\n\n        ...\n\n    )]};\n```\n\n기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다. \n\n\n#### menu.html\n\n```\n<!-- 기존 코드 -->\n<div class=\"container\">\n    <div class=\"row row-content\" ng-controller=\"MenuController as menuCtrl\">\n        <div class=\"col-xs-12\">\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n                <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(1)}\">\n                    <a ng-click=\"menuCtrl.select(1)\" aria-controls=\"all menu\"\n                     role=\"tab\">The Menu</a>\n                     ...\n                </li>\n            </ul>\n            <div class=\"tab-content\">\n                <ul class=\"media-list tab-pane fade in active\">\n                    <li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">\n                    ...\n\t                </li>\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n\n\n<!-- scope 적용 코드 -->\n<div class=\"container\">\n    <div class=\"row row-content\" ng-controller=\"MenuController\">\n        <div class=\"col-xs-12\">\n            <ul class=\"nav nav-tabs\" role=\"tablist\">\n                <li role=\"presentation\" ng-class=\"{active:isSelected(1)}\">\n                    <a ng-click=\"select(1)\" aria-controls=\"all menu\"\n                     role=\"tab\">The Menu</a>\n                     ...\n                </li>\n            </ul>\n            <div class=\"tab-content\">\n                <ul class=\"media-list tab-pane fade in active\">\n                    <li class=\"media\" ng-repeat=\"dish in dishes | filter:filtText\">\n                    ...\n\t                </li>\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n```\n\n기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다. \n\n\n#### ng-show\n\nng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자\n\n```\n<div class=\"col-xs-12\">\n    <button ng-click=\"toggleDetails()\" class=\"btn btn-xs btn-primary pull-right\" type=\"button\">\n        {{showDetails ? 'Hide Details':'Show Details'}}\n    </button>\n    <ul class=\"nav nav-tabs\" role=\"tablist\">\n\t    ...\n\t</ul>\n\t...\n        <p ng-show=\"showDetails\">{{dish.description}}</p>\n    ...\n</div>\n```\n\n$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.\n\n\n\n### Angular Forms and Form Validation\n\n#### Forms \nform은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.\n\nform에서는 two-way data binding이 중요하게 사용되는데, \n넘어가기 앞서 잠깐 짚고 넘어가야할게 있다. \nng-model의 개념이 약간 모호해서 한번 찾아봤다.\n\n> _ng-model_\n> \n> html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함\n> 반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.\n> 이를 two-way data binding이라 한다.\n> 참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.\n\nform과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다. \n예를들어보자.\n\n```\n// javascript code\n.controller('ContactController', ['$scope', function($scope){\n    $scope.feedback = {mychannel:\"\", firstname:\"\",\n                       lastname:\"\", agree:\"\", email:\"\"};\n}]);\n\n// html code\n<input type=\"text\" class=\"form-control\" id=\"firstname\" \n\tname=\"firstname\" placeholder=\"Enter First Name\" \n\tng-model=\"feedback.firstname\" required>\n```\n\n위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.\n\nselect의 경우에는 어떤가 보자\n\n```\n// javascript code\nvar channels = [{value:\"tel\", label:\"Tel.\"}, {value:\"Email\", label:\"Email\"}];\n\n// html code\n<select class=\"form-control\" ng-model=\"feedback.mychannel\" \n\t\tng-options=\"channel.value as channel.label for channel in channels\">\n\t<option value=\"\">Tel. or Email?</option>\n</select>\n```\n\n우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.\n\n위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다. \n\n\n#### Form Validation\n\n우선 HTML5 form validation을 끄자\n그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.\n\n```\n<form class=\"form-horizontal\" name=\"feedbackForm\" ng-submit=\"sendFeedback()\" novalidate>\n```\n\nvalidation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.\n\n| property | Description |\n|---|---|\n| $pristine | true if form has not been changed (form의 변경사항이 없다면,) |\n| $dirty | reverse of $pristine |\n| $valid | true if form field/whole form is valid (form이 valid 하면,) |\n| $invalid | reverse of $valid |\n\n예를 들어보자.\n* feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true\n* feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true\n\n에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.\n\n> .has-error, .has-warning, .has-success\n> .help-block to display helpful messages below the field\n\n\n#### app.js\n\n```\n...\n\n\t.controller('ContactController', ['$scope', function($scope){\n\t    $scope.feedback = {mychannel:\"\", firstname:\"\",\n\t                       lastname:\"\", agree:\"\", email:\"\"};\n\t    var channels = [{value:\"tel\", label:\"Tel.\"}, \n\t                    {values:\"Email\", label:\"Email\"}];\n\t    $scope.channels = channels;\n\t    $scope.invalidChannelSelection = false;\n\n\t}])\n\t.controller('FeedbackController', ['$scope', function($scope){\n\t    $scope.sendFeedback = function() {\n\t        console.log($scope.feedback);\n\n\t        if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n\t            $scope.invalidChannelSelection = true;\n\t            console.log('incorrent');\n\t        } else {\n\t            $scope.invalidChannelSelection = false;\n\t            $scope.feedback = {\n\t                mychannel:\"\", firstname:\"\",\n\t                lastname:\"\", agree:false, email:\"\" \n\t            };\n\t            $scope.feedback.mychannel = \"\";\n\t            $scope.feedbackForm.$setPristine();\n\t            console.log($scope.feedback);\n\t        }\n\t    };\n\t}]);\n    \n...\n\n```\n\n#### contactus.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n\n...\n\n<body>\n    <div class=\"container\" ng-controller=\"ContactController\">\n    \t...\n                <form class=\"form-horizontal\" role=\"form\" name=\"feedbackForm\" ng-submit=\"sendFeedback()\" novalidate>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.firstname.$error.required && !feedbackForm.firstname.$pristine }\">\n                        <label for=\"firstname\" class=\"col-sm-2 control-label\">First Name</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"firstname\" name=\"firstname\" placeholder=\"Enter First Name\" ng-model=\"feedback.firstname\" required>\n                            <span ng-show=\"feedback.firstname.$error.required && !feedbackForm.firstname.$pristine\" class=\"help-block\">Your First name is required</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.lastname.$error.required && !feedbackForm.lastname.$pristine }\">\n                        <label for=\"lastname\" class=\"col-sm-2 control-label\">Last Name</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"lastname\" name=\"lastname\" placeholder=\"Enter Last Name\" ng-model=\"feedback.lastname\" required>\n                            <span ng-show=\"feedback.lastname.$error.required && !feedbackForm.lastname.$pristine\" class=\"help-block\">Your Last name is required</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"telnum\" class=\"col-sm-2 control-label\">Contact Tel.</label>\n                        <div class=\"col-xs-5 col-sm-4 col-md-3\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-addon\">(</div>\n                                    <input type=\"tel\" class=\"form-control\" id=\"areacode\" name=\"areacode\" placeholder=\"Area code\" ng-model=\"feedback.tel.areacode\">\n                                <div class=\"input-group-addon\">)</div>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-7 col-sm-6 col-md-7\">\n                                    <input type=\"tel\" class=\"form-control\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. number\" ng-model=\"feedback.tel.number\">\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine }\">\n                        <label for=\"emailid\" class=\"col-sm-2 control-label\">Email</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"email\" class=\"form-control\" id=\"emailid\" name=\"emailid\" placeholder=\"Email\" ng-model=\"feedback.email\" required>\n                            <span ng-show=\"feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine\" class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\n                            <span ng-show=\"feedbackForm.emailid.$invalid && !feedbackForm.emailid.$pristine\" class=\"help-block\">Enter a valid email address.</span>\n                            <span ng-show=\"feedbackForm.emailid.$error.required && !feedbackForm.emailid.$pristine\" class=\"help-block\">Enter a valid email address.</span>\n                        </div>\n                    </div>\n                    <div class=\"form-group\" ng-class=\"{ 'has-error' : invalidChannelSelection }\">\n                       <div class=\"checkbox col-sm-5 col-sm-offset-2\">\n                            <label class=\"checkbox-inline\">\n                                <input type=\"checkbox\" name=\"approve\" value=\"\" ng-model=\"feedback.agree\">\n                                <strong>May we contact you?</strong>\n                            </label>\n                        </div>\n                        <div class=\"col-sm-3 col-sm-offset-1\" ng-show=\"feedback.agree\">\n                            <select class=\"form-control\" ng-model=\"feedback.mychannel\" ng-options=\"channel.value as channel.label for channel in channels\">\n                                <option value=\"\">Tel. or Email?</option>\n                            </select>\n                            <span ng-show=\"invalidChannelSelection\" class=\"help-block\">Select an option.</span>\n                        </div>\n                    </div>                    \n                    <div class=\"form-group\">\n                        <label for=\"feedback\" class=\"col-sm-2 control-label\">Your Feedback</label>\n                        <div class=\"col-sm-10\">\n                            <textarea class=\"form-control\" id=\"feedback\" name=\"feedback\" rows=\"12\" ng-model=\"feedback.comments\"></textarea>\n                        </div>\n                    </div> \n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                            <button type=\"submit\" class=\"btn btn-primary\" ng-disabled=\"feedbackForm.$invalid\">Send Feedback</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-xs-12 col-sm-3\">\n                <h3>Your Current Feedback:</h3>\n                <p>{{feedback.firstname}} {{feedback.lastname | uppercase }}</p>\n                <p>Contact Tel.: ({{feedback.tel.areacode}}){{feedback.tel.number}}</p>\n                <p>Contact Email: {{feedback.email}}</p>\n                <p ng-show=\"feedback.agree\">Contact by:{{feedback.mychannel}}</p>\n                <p>Comments: {{feedback.comments}}</p>\n            </div>\n       </div>\n    </div>\n</body></html>\n```\n","slug":"2016-08-28-frontend-javascript-framework-angularjs-week2-2","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7j0022wxt4866h3l7w","content":"<h2 id=\"Task-Runners-Angular-Scope-Forms-and-Form-Validation-2\"><a href=\"#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2\" class=\"headerlink\" title=\"Task Runners, Angular Scope, Forms and Form Validation-2\"></a>Task Runners, Angular Scope, Forms and Form Validation-2</h2><h3 id=\"Angular-Scope\"><a href=\"#Angular-Scope\" class=\"headerlink\" title=\"Angular Scope\"></a>Angular Scope</h3><p>스코프는 다음과 같이 정의된다.</p><blockquote><p>스코프는 application model과 관련된 object다.<br>This is at the core of Angular’s two-way data binding<br>view와 controller 사이를 연결해주는 역할을 한다.</p></blockquote><p>우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.</p><h4 id=\"rootScope\"><a href=\"#rootScope\" class=\"headerlink\" title=\"$rootScope\"></a>$rootScope</h4><p>가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.</p><h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 기존 코드</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        this.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        this.filtText = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">\t&#125;);\t</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// scope 적용 코드</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\">\t<span class=\"comment\">// scope 정의</span></div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">        $scope.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        $scope.filtText = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    )]&#125;;</div></pre></td></tr></table></figure><p>기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다.</p><h4 id=\"menu-html\"><a href=\"#menu-html\" class=\"headerlink\" title=\"menu.html\"></a>menu.html</h4><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 기존 코드 --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MenuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;active:menuCtrl.isSelected(1)&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span></span></div><div class=\"line\">                     <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                     ...</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\"</span>&gt;</span></div><div class=\"line\">                    ...</div><div class=\"line\">\t                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- scope 적용 코드 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MenuController\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;active:isSelected(1)&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span></span></div><div class=\"line\">                     <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                     ...</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in dishes | filter:filtText\"</span>&gt;</span></div><div class=\"line\">                    ...</div><div class=\"line\">\t                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p>기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다.</p><h4 id=\"ng-show\"><a href=\"#ng-show\" class=\"headerlink\" title=\"ng-show\"></a>ng-show</h4><p>ng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"toggleDetails()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-xs btn-primary pull-right\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;showDetails ? 'Hide Details':'Show Details'&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">\t    ...</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"showDetails\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p>$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.</p><h3 id=\"Angular-Forms-and-Form-Validation\"><a href=\"#Angular-Forms-and-Form-Validation\" class=\"headerlink\" title=\"Angular Forms and Form Validation\"></a>Angular Forms and Form Validation</h3><h4 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h4><p>form은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.</p><p>form에서는 two-way data binding이 중요하게 사용되는데,<br>넘어가기 앞서 잠깐 짚고 넘어가야할게 있다.<br>ng-model의 개념이 약간 모호해서 한번 찾아봤다.</p><blockquote><p><em>ng-model</em></p><p>html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함<br>반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.<br>이를 two-way data binding이라 한다.<br>참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.</p></blockquote><p>form과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다.<br>예를들어보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// javascript code</span></div><div class=\"line\">.controller(<span class=\"string\">'ContactController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstname</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">                       <span class=\"attr\">lastname</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">&#125;]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// html code</span></div><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"firstname\"</span> </div><div class=\"line\">\tname=<span class=\"string\">\"firstname\"</span> placeholder=<span class=\"string\">\"Enter First Name\"</span> </div><div class=\"line\">\tng-model=<span class=\"string\">\"feedback.firstname\"</span> required&gt;</div></pre></td></tr></table></figure><p>위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.</p><p>select의 경우에는 어떤가 보자</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// javascript code</span></div><div class=\"line\"><span class=\"keyword\">var</span> channels = [&#123;<span class=\"keyword\">value</span>:<span class=\"string\">\"tel\"</span>, label:<span class=\"string\">\"Tel.\"</span>&#125;, &#123;<span class=\"keyword\">value</span>:<span class=\"string\">\"Email\"</span>, label:<span class=\"string\">\"Email\"</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// html code</span></div><div class=\"line\">&lt;<span class=\"keyword\">select</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"form-control\"</span> ng-model=<span class=\"string\">\"feedback.mychannel\"</span> </div><div class=\"line\">\t\tng-options=<span class=\"string\">\"channel.value as channel.label for channel in channels\"</span>&gt;</div><div class=\"line\">\t&lt;option <span class=\"keyword\">value</span>=<span class=\"string\">\"\"</span>&gt;Tel. or Email?&lt;/option&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">select</span>&gt;</div></pre></td></tr></table></figure><p>우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.</p><p>위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다.</p><h4 id=\"Form-Validation\"><a href=\"#Form-Validation\" class=\"headerlink\" title=\"Form Validation\"></a>Form Validation</h4><p>우선 HTML5 form validation을 끄자<br>그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.</p><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form <span class=\"built_in\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"feedbackForm\"</span> ng-submit=<span class=\"string\">\"sendFeedback()\"</span> novalidate&gt;</div></pre></td></tr></table></figure><p>validation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.</p><table><thead><tr><th>property</th><th>Description</th></tr></thead><tbody><tr><td>$pristine</td><td>true if form has not been changed (form의 변경사항이 없다면,)</td></tr><tr><td>$dirty</td><td>reverse of $pristine</td></tr><tr><td>$valid</td><td>true if form field/whole form is valid (form이 valid 하면,)</td></tr><tr><td>$invalid</td><td>reverse of $valid</td></tr></tbody></table><p>예를 들어보자.</p><ul><li>feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true</li><li>feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true</li></ul><p>에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.</p><blockquote><p>.has-error, .has-warning, .has-success<br>.help-block to display helpful messages below the field</p></blockquote><h4 id=\"app-js-1\"><a href=\"#app-js-1\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">\t.controller(<span class=\"string\">'ContactController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">\t    $scope.feedback = &#123;mychannel:<span class=\"string\">\"\"</span>, firstname:<span class=\"string\">\"\"</span>,</div><div class=\"line\">\t                       lastname:<span class=\"string\">\"\"</span>, agree:<span class=\"string\">\"\"</span>, email:<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">\t    <span class=\"keyword\">var</span> channels = [&#123;value:<span class=\"string\">\"tel\"</span>, label:<span class=\"string\">\"Tel.\"</span>&#125;, </div><div class=\"line\">\t                    &#123;values:<span class=\"string\">\"Email\"</span>, label:<span class=\"string\">\"Email\"</span>&#125;];</div><div class=\"line\">\t    $scope.channels = channels;</div><div class=\"line\">\t    $scope.invalidChannelSelection = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">\t&#125;])</div><div class=\"line\">\t.controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">\t    $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        console.log($scope.feedback);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">\t            $scope.invalidChannelSelection = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t            console.log(<span class=\"string\">'incorrent'</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t            $scope.invalidChannelSelection = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t            $scope.feedback = &#123;</div><div class=\"line\">\t                mychannel:<span class=\"string\">\"\"</span>, firstname:<span class=\"string\">\"\"</span>,</div><div class=\"line\">\t                lastname:<span class=\"string\">\"\"</span>, agree:<span class=\"keyword\">false</span>, email:<span class=\"string\">\"\"</span> </div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t            $scope.feedback.mychannel = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t            $scope.feedbackForm.$setPristine();</div><div class=\"line\">\t            console.log($scope.feedback);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;;</div><div class=\"line\">\t&#125;]);</div><div class=\"line\">    </div><div class=\"line\">...</div></pre></td></tr></table></figure><h4 id=\"contactus-html\"><a href=\"#contactus-html\" class=\"headerlink\" title=\"contactus.html\"></a>contactus.html</h4><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ContactController\"</span>&gt;</span></div><div class=\"line\">    \t...</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"feedbackForm\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"sendFeedback()\"</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>First Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter First Name\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.firstname\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Your First name is required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Last Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter Last Name\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.lastname\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Your Last name is required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Contact Tel.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-5 col-sm-4 col-md-3\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-addon\"</span>&gt;</span>(<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"areacode\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"areacode\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Area code\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.tel.areacode\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-addon\"</span>&gt;</span>)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-7 col-sm-6 col-md-7\"</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Tel. number\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.tel.number\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove form-control-feedback\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Enter a valid email address.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$error.required &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Enter a valid email address.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : invalidChannelSelection &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox col-sm-5 col-sm-offset-2\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox-inline\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"approve\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>May we contact you?<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-3 col-sm-offset-1\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.mychannel\"</span> <span class=\"attr\">ng-options</span>=<span class=\"string\">\"channel.value as channel.label for channel in channels\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>Tel. or Email?<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"invalidChannelSelection\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Select an option.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>                    </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Your Feedback<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-offset-2 col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"feedbackForm.$invalid\"</span>&gt;</span>Send Feedback<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12 col-sm-3\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Your Current Feedback:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;feedback.firstname&#125;</span><span class=\"xml\">&#125; </span><span class=\"template-variable\">&#123;&#123;feedback.lastname | uppercase &#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Contact Tel.: (<span class=\"template-variable\">&#123;&#123;feedback.tel.areacode&#125;</span><span class=\"xml\">&#125;)</span><span class=\"template-variable\">&#123;&#123;feedback.tel.number&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Contact Email: <span class=\"template-variable\">&#123;&#123;feedback.email&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span>Contact by:<span class=\"template-variable\">&#123;&#123;feedback.mychannel&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Comments: <span class=\"template-variable\">&#123;&#123;feedback.comments&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Task-Runners-Angular-Scope-Forms-and-Form-Validation-2\"><a href=\"#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2\" class=\"headerlink\" title=\"Task Runners, Angular Scope, Forms and Form Validation-2\"></a>Task Runners, Angular Scope, Forms and Form Validation-2</h2><h3 id=\"Angular-Scope\"><a href=\"#Angular-Scope\" class=\"headerlink\" title=\"Angular Scope\"></a>Angular Scope</h3><p>스코프는 다음과 같이 정의된다.</p><blockquote><p>스코프는 application model과 관련된 object다.<br>This is at the core of Angular’s two-way data binding<br>view와 controller 사이를 연결해주는 역할을 한다.</p></blockquote><p>우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.</p><h4 id=\"rootScope\"><a href=\"#rootScope\" class=\"headerlink\" title=\"$rootScope\"></a>$rootScope</h4><p>가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.</p><h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 기존 코드</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        this.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        this.filtText = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">\t&#125;);\t</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// scope 적용 코드</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\">\t<span class=\"comment\">// scope 정의</span></div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">        $scope.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        $scope.filtText = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    )]&#125;;</div></pre></td></tr></table></figure><p>기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다.</p><h4 id=\"menu-html\"><a href=\"#menu-html\" class=\"headerlink\" title=\"menu.html\"></a>menu.html</h4><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 기존 코드 --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MenuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;active:menuCtrl.isSelected(1)&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span></span></div><div class=\"line\">                     <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                     ...</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\"</span>&gt;</span></div><div class=\"line\">                    ...</div><div class=\"line\">\t                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- scope 적용 코드 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MenuController\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;active:isSelected(1)&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span></span></div><div class=\"line\">                     <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                     ...</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in dishes | filter:filtText\"</span>&gt;</span></div><div class=\"line\">                    ...</div><div class=\"line\">\t                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p>기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다.</p><h4 id=\"ng-show\"><a href=\"#ng-show\" class=\"headerlink\" title=\"ng-show\"></a>ng-show</h4><p>ng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"toggleDetails()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-xs btn-primary pull-right\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></div><div class=\"line\">        <span class=\"template-variable\">&#123;&#123;showDetails ? 'Hide Details':'Show Details'&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">\t    ...</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t...</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"showDetails\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p>$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.</p><h3 id=\"Angular-Forms-and-Form-Validation\"><a href=\"#Angular-Forms-and-Form-Validation\" class=\"headerlink\" title=\"Angular Forms and Form Validation\"></a>Angular Forms and Form Validation</h3><h4 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h4><p>form은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.</p><p>form에서는 two-way data binding이 중요하게 사용되는데,<br>넘어가기 앞서 잠깐 짚고 넘어가야할게 있다.<br>ng-model의 개념이 약간 모호해서 한번 찾아봤다.</p><blockquote><p><em>ng-model</em></p><p>html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함<br>반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.<br>이를 two-way data binding이라 한다.<br>참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.</p></blockquote><p>form과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다.<br>예를들어보자.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// javascript code</span></div><div class=\"line\">.controller(<span class=\"string\">'ContactController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstname</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">                       <span class=\"attr\">lastname</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">&#125;]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// html code</span></div><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"firstname\"</span> </div><div class=\"line\">\tname=<span class=\"string\">\"firstname\"</span> placeholder=<span class=\"string\">\"Enter First Name\"</span> </div><div class=\"line\">\tng-model=<span class=\"string\">\"feedback.firstname\"</span> required&gt;</div></pre></td></tr></table></figure><p>위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.</p><p>select의 경우에는 어떤가 보자</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// javascript code</span></div><div class=\"line\"><span class=\"keyword\">var</span> channels = [&#123;<span class=\"keyword\">value</span>:<span class=\"string\">\"tel\"</span>, label:<span class=\"string\">\"Tel.\"</span>&#125;, &#123;<span class=\"keyword\">value</span>:<span class=\"string\">\"Email\"</span>, label:<span class=\"string\">\"Email\"</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// html code</span></div><div class=\"line\">&lt;<span class=\"keyword\">select</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"form-control\"</span> ng-model=<span class=\"string\">\"feedback.mychannel\"</span> </div><div class=\"line\">\t\tng-options=<span class=\"string\">\"channel.value as channel.label for channel in channels\"</span>&gt;</div><div class=\"line\">\t&lt;option <span class=\"keyword\">value</span>=<span class=\"string\">\"\"</span>&gt;Tel. or Email?&lt;/option&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">select</span>&gt;</div></pre></td></tr></table></figure><p>우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.</p><p>위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다.</p><h4 id=\"Form-Validation\"><a href=\"#Form-Validation\" class=\"headerlink\" title=\"Form Validation\"></a>Form Validation</h4><p>우선 HTML5 form validation을 끄자<br>그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.</p><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form <span class=\"built_in\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"feedbackForm\"</span> ng-submit=<span class=\"string\">\"sendFeedback()\"</span> novalidate&gt;</div></pre></td></tr></table></figure><p>validation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.</p><table><thead><tr><th>property</th><th>Description</th></tr></thead><tbody><tr><td>$pristine</td><td>true if form has not been changed (form의 변경사항이 없다면,)</td></tr><tr><td>$dirty</td><td>reverse of $pristine</td></tr><tr><td>$valid</td><td>true if form field/whole form is valid (form이 valid 하면,)</td></tr><tr><td>$invalid</td><td>reverse of $valid</td></tr></tbody></table><p>예를 들어보자.</p><ul><li>feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true</li><li>feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true</li></ul><p>에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.</p><blockquote><p>.has-error, .has-warning, .has-success<br>.help-block to display helpful messages below the field</p></blockquote><h4 id=\"app-js-1\"><a href=\"#app-js-1\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">\t.controller(<span class=\"string\">'ContactController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">\t    $scope.feedback = &#123;mychannel:<span class=\"string\">\"\"</span>, firstname:<span class=\"string\">\"\"</span>,</div><div class=\"line\">\t                       lastname:<span class=\"string\">\"\"</span>, agree:<span class=\"string\">\"\"</span>, email:<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">\t    <span class=\"keyword\">var</span> channels = [&#123;value:<span class=\"string\">\"tel\"</span>, label:<span class=\"string\">\"Tel.\"</span>&#125;, </div><div class=\"line\">\t                    &#123;values:<span class=\"string\">\"Email\"</span>, label:<span class=\"string\">\"Email\"</span>&#125;];</div><div class=\"line\">\t    $scope.channels = channels;</div><div class=\"line\">\t    $scope.invalidChannelSelection = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">\t&#125;])</div><div class=\"line\">\t.controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">\t    $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t        console.log($scope.feedback);</div><div class=\"line\"></div><div class=\"line\">\t        <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">\t            $scope.invalidChannelSelection = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t            console.log(<span class=\"string\">'incorrent'</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t            $scope.invalidChannelSelection = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t            $scope.feedback = &#123;</div><div class=\"line\">\t                mychannel:<span class=\"string\">\"\"</span>, firstname:<span class=\"string\">\"\"</span>,</div><div class=\"line\">\t                lastname:<span class=\"string\">\"\"</span>, agree:<span class=\"keyword\">false</span>, email:<span class=\"string\">\"\"</span> </div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t            $scope.feedback.mychannel = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t            $scope.feedbackForm.$setPristine();</div><div class=\"line\">\t            console.log($scope.feedback);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;;</div><div class=\"line\">\t&#125;]);</div><div class=\"line\">    </div><div class=\"line\">...</div></pre></td></tr></table></figure><h4 id=\"contactus-html\"><a href=\"#contactus-html\" class=\"headerlink\" title=\"contactus.html\"></a>contactus.html</h4><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ContactController\"</span>&gt;</span></div><div class=\"line\">    \t...</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"feedbackForm\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"sendFeedback()\"</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>First Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter First Name\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.firstname\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Your First name is required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Last Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter Last Name\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.lastname\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Your Last name is required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Contact Tel.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-5 col-sm-4 col-md-3\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-addon\"</span>&gt;</span>(<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"areacode\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"areacode\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Area code\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.tel.areacode\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-addon\"</span>&gt;</span>)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-7 col-sm-6 col-md-7\"</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"telnum\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Tel. number\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.tel.number\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"emailid\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Email\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.email\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove form-control-feedback\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Enter a valid email address.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedbackForm.emailid.$error.required &amp;&amp; !feedbackForm.emailid.$pristine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Enter a valid email address.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123; 'has-error' : invalidChannelSelection &#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox col-sm-5 col-sm-offset-2\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox-inline\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"approve\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>May we contact you?<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-3 col-sm-offset-1\"</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.mychannel\"</span> <span class=\"attr\">ng-options</span>=<span class=\"string\">\"channel.value as channel.label for channel in channels\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>Tel. or Email?<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"invalidChannelSelection\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"help-block\"</span>&gt;</span>Select an option.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>                    </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Your Feedback<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"feedback\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"feedback.comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-offset-2 col-sm-10\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"feedbackForm.$invalid\"</span>&gt;</span>Send Feedback<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12 col-sm-3\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Your Current Feedback:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;feedback.firstname&#125;</span><span class=\"xml\">&#125; </span><span class=\"template-variable\">&#123;&#123;feedback.lastname | uppercase &#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Contact Tel.: (<span class=\"template-variable\">&#123;&#123;feedback.tel.areacode&#125;</span><span class=\"xml\">&#125;)</span><span class=\"template-variable\">&#123;&#123;feedback.tel.number&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Contact Email: <span class=\"template-variable\">&#123;&#123;feedback.email&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"feedback.agree\"</span>&gt;</span>Contact by:<span class=\"template-variable\">&#123;&#123;feedback.mychannel&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Comments: <span class=\"template-variable\">&#123;&#123;feedback.comments&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 1","date":"2016-08-18T14:10:50.000Z","_content":"## Full-Stack Web Development: The Big Picture\n\n### Three Tier Architecture\n\n보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.\n\n* Presentaion Layer : HTML, CSS, JS\n* Business Layer : Ruby, Python, Java, C++\n* Data Access Layer : DBMS\n\n반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.\n\n이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.\n\n### Course Overview\n\n이번 강의에서 다루는 주제는 다음과 같다.\n \n* AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)\n* Web Tools : Grunt, Gulp, Yo and Yeoman\n\t\t\n \n## Introduction to AngularJS\n\n### Front-End JavaScript Frameworks OverView\n\n> 소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.\n\n> 소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.\n\n#### 10가지 Javascript Framework\n\n* Angular : one of the three Major JS framework\n* Ember : one of the three Major JS framework\n* Backbone : one of the three Major JS framework\n* React : 프레임웍이라기 보다 라이브러리에 가까움\n* Aurelia\n* Meteor : 요즘 각광받기 시작\n* Polymer\n* Knockout\n* Vue\n* Mercury\n\n#### 3가지 메이저 JS Frameworks 비교 (3 > 2 > 1)\n\n|                 | Ember     | Angular   | Backbone  |\n| :-------------- | :-------: | :-------: | :-------: |\n| Opinionated     | 1         | 2         | 3         |\n| Ease of Use     | 3         | 2         | 1         |\n| Learning Curve  | 1         | 2         | 3         |\n| Popularity      | -         | 3         | -         |\n\n\n\n### Introduction to AngularJS\n\nHTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.\n\n> Solving the impedance mismatch\n\nback end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다. \n\n> Designed with CRUD applications (data-driven) in mind\n\n데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.\n\n> Declarative approach\n\nAngular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘...)\n\n\n#### Angular Vocabulary\n\n앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.\n\n* Two-way Data Binding\n* Scope\n* Directives\n* Templates\n* Routing\n* Testing\n* Modules\n* Controllers\n* Filters\n* Factory\n* Service\n* Provider\n\n우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자\n\n#### Directives\n\nAngular Directives는 ng-* or data-ng-* 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자\n\n* ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.\n\n* ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.  \n\n```\n<p ng-init=\"index=1\"></p>\n<div ng-init=\"dish={name:'example', ...}\"></div>\n```\n\n* ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.\n\n```\n<p>Comment: {{dish.comment}}</p>\n<p>Type your comment:\n\t<input type=\"text\" ng-model=\"dish.comment\" />\n</p>\n```\n\ndish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.\n\n양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.\n\n* ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.\n\n#### Angular Expressions\n\n* Evaluated against an Angular scope object\nAngular 스코프에 맞게 value가 평가된다.\n\n* No conditionals, loops, or exceptions\n위의 사항들은 expression으로 사용이 불가하다.\n\n* Expressions enclosed in {{ expression }}\n중괄호 두개를 겹쳐서 사용한다.\n\n```\n<p>6 + 5 = {{ 6 + 5 }}</p>\n<h2>{{ dish.name }}</h2>\n```\n\n\n\n## Models, Views and Controllers\n\n### The Model View Controller Framework\n\n> Design pattern is ell-documented solution to a recurring problem\n\n디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.\n\n#### MVC\n\nMVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다. \n\n* Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.\n\n* View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.  \n\n* Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다. \n\n#### MVVM (Model View View-Model)\n\nMVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.  \n\n### Angular Modules and Controllers\n\n일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.\n\n#### Angular Modules\n\nAngular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.\n\n```\n<html ngApp=\"confusionApp\">\n\n...\n\n<body>\n\n...\n\n\t<script>\n\t\tvar app = angular.module('confusionApp',[]);\n\t</script>\n\n</body>\n\n</html>\n```\n\n#### Angular Controller\n\nAngular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.\n\n```\n<div class=\"row row-content\" ng-controller=\"menuController as menuCtrl\">\n\n</div>\n\n<script>\nvar app = angular.module('confusionApp', []);\n\napp.controller('menuController', function() {\n\tvar dishes = [item, ... ];\n\tthis.dishes = dishes;\n});\n\n</script>\n```\n\n모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 __this.dishes = dishes__ 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.\n\n\n\n## Angular Filters\n\n필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.\n\n```\n<div class=\"media-body\">\n\t<h2 class=\"media-headgin\">{{dish.name}}\n\t\t<span class=\"label label-danger label-xs\">{{dish.label}}</span>\n\t\t<!-- currency 필터는 price에 $를 붙여준다.-->\n\t\t<span class=\"badge\">{{dish.price | currency}}</span>\n\t</h2>\n\t<p>{{dish.description}}</p>\n</div>\n```\n\n#### Angluar의 Built-in Filters\n\n* uppercase / lowercase : converts the text\n* currency : $를 붙여준다.\n* date : 날짜 포맷을 변경한다.\n* filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.\n* orderBy : 조건에 맞게 정렬한다. \n* json, limitTo 등도 있다.\n\n```\n<!-- filter 예제, HTML 코드 -->\n<li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">...</li>\n\n<!-- javascript 코드 -->\nvar filtText = \"\";\n\nthis.select = function(setTab) {\n\tthis.tab = setTab;\n\tif (setTab === 2)\n\t\tthis.filtText = \"appetizer\"\n\telse if (setTab === 3)\n\t\tthis.filtText = \"mains\"\n\telse if (setTab === 4)\n\t\tthis.filtText = \"dessert\"\n\telse\n\t\tthis.filtText = \"\"\n}\n```\n\n위와 같이 HTML과 javascript 코드를 작성한다.\n그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).\n그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.\n미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.\n\n\n\n## Excercise Code\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n\n<head>\n     <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- The above 3 meta tags *must* come first in the head; any other head\n         content must come *after* these tags -->\n    <title>Ristorante Con Fusion: Menu</title>\n        <!-- Bootstrap -->\n    <link href=\"../bower_components/bootstrap/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n    <link href=\"../bower_components/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <link href=\"styles/bootstrap-social.css\" rel=\"stylesheet\">\n    <link href=\"styles/mystyles.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n</head>\n\n<body>\n\n    <div class=\"container\">\n        <div class=\"row row-content\" ng-controller=\"menuController as menuCtrl\">\n            <div class=\"col-xs-12\">\n                <ul class=\"nav nav-tabs\" role=\"tablist\">\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(1)}\">\n                        <a ng-click=\"menuCtrl.select(1)\" aria-controls=\"all menu\" role=\"tab\">The Menu</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(2)}\">\n                        <a ng-click=\"menuCtrl.select(2)\" aria-controls=\"appetizers\" role=\"tab\">Appetizers</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(3)}\">\n                        <a ng-click=\"menuCtrl.select(3)\" aria-controls=\"mains\" role=\"tab\">Mains</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(4)}\">\n                        <a ng-click=\"menuCtrl.select(4)\" aria-controls=\"desserts\" role=\"tab\">Desserts</a>\n                    </li>\n                </ul>\n                <div class=\"tab-content\">\n                    <ul class=\"media-list tab-pane fade in active\">\n                        <li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">\n                            <div class=\"media-left media-middle\">\n                                <a href=\"#\">\n                                <img class=\"media-object img-thumbnail\" ng-src=\"{{dish.image}}\" alt=\"Uthapizza\">\n                                </a>\n                            </div>\n                            <div class=\"media-body\">\n                                <h2 class=\"media-heading\">{{dish.name}}\n                                    <span class=\"label label-danger\">{{dish.label}}</span>\n                                    <span class=\"badge\">{{dish.price | currency}}</span>\n                                </h2>\n                                <p>{{dish.description}}</p>\n                                <!-- <p>Comment: {{dish.comment}}</p> -->\n                                <!-- <p>Type your comment: -->\n                                    <!-- <input type=\"text\" ng-model=\"dish.comment\"> -->\n                                </p>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"../bower_components/angular/angular.min.js\"></script>\n    <script>\n        var app = angular.module('confusionApp', []);\n        app.controller('menuController', function(){\n\n            this.tab = 1;\n            this.filtText = '';\n\n            var dished = [\n                              {\n                                name: 'Uthapizza',\n                                image: 'images/uthapizza.png',\n                                category: 'mains',\n                                label: 'Hot',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: 'aaaaaaa'\n                              },\n                              {\n                                name: 'Uthapizza2',\n                                image: 'images/zucchipakoda.png',\n                                category: 'mains',\n                                label: '',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                              {\n                                name: 'Uthapizza3',\n                                image: 'images/vadonut.png',\n                                category: 'appetizer',\n                                label: 'New',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                              {\n                                name: 'Uthapizza4',\n                                image: 'images/elaicheesecake.png',\n                                category: 'dessert',\n                                label: '',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                            ];\n            this.dishes = dished;\n\n            this.select = function(setTab) {\n                this.tab = setTab;\n\n                if (setTab === 2)\n                    this.filtText = \"appetizer\";\n                else if (setTab === 3)\n                    this.filtText = \"mains\"\n                else if (setTab === 4)\n                    this.filtText = \"dessert\"\n                else \n                    this.filtText = \"\";\n            }\n\n            this.isSelected = function(checkTab) {\n                return (this.tab === checkTab)\n            }\n        });\n    </script>\n</body>\n\n</html>\n```\n","source":"_posts/2016-08-18-frontend-javascript-framework-angularjs-week1.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 1\"\ncategories: programming\ndate:   2016-08-18 23:10:50 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n## Full-Stack Web Development: The Big Picture\n\n### Three Tier Architecture\n\n보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.\n\n* Presentaion Layer : HTML, CSS, JS\n* Business Layer : Ruby, Python, Java, C++\n* Data Access Layer : DBMS\n\n반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.\n\n이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.\n\n### Course Overview\n\n이번 강의에서 다루는 주제는 다음과 같다.\n \n* AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)\n* Web Tools : Grunt, Gulp, Yo and Yeoman\n\t\t\n \n## Introduction to AngularJS\n\n### Front-End JavaScript Frameworks OverView\n\n> 소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.\n\n> 소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.\n\n#### 10가지 Javascript Framework\n\n* Angular : one of the three Major JS framework\n* Ember : one of the three Major JS framework\n* Backbone : one of the three Major JS framework\n* React : 프레임웍이라기 보다 라이브러리에 가까움\n* Aurelia\n* Meteor : 요즘 각광받기 시작\n* Polymer\n* Knockout\n* Vue\n* Mercury\n\n#### 3가지 메이저 JS Frameworks 비교 (3 > 2 > 1)\n\n|                 | Ember     | Angular   | Backbone  |\n| :-------------- | :-------: | :-------: | :-------: |\n| Opinionated     | 1         | 2         | 3         |\n| Ease of Use     | 3         | 2         | 1         |\n| Learning Curve  | 1         | 2         | 3         |\n| Popularity      | -         | 3         | -         |\n\n\n\n### Introduction to AngularJS\n\nHTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.\n\n> Solving the impedance mismatch\n\nback end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다. \n\n> Designed with CRUD applications (data-driven) in mind\n\n데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.\n\n> Declarative approach\n\nAngular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘...)\n\n\n#### Angular Vocabulary\n\n앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.\n\n* Two-way Data Binding\n* Scope\n* Directives\n* Templates\n* Routing\n* Testing\n* Modules\n* Controllers\n* Filters\n* Factory\n* Service\n* Provider\n\n우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자\n\n#### Directives\n\nAngular Directives는 ng-* or data-ng-* 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자\n\n* ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.\n\n* ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.  \n\n```\n<p ng-init=\"index=1\"></p>\n<div ng-init=\"dish={name:'example', ...}\"></div>\n```\n\n* ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.\n\n```\n<p>Comment: {{dish.comment}}</p>\n<p>Type your comment:\n\t<input type=\"text\" ng-model=\"dish.comment\" />\n</p>\n```\n\ndish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.\n\n양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.\n\n* ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.\n\n#### Angular Expressions\n\n* Evaluated against an Angular scope object\nAngular 스코프에 맞게 value가 평가된다.\n\n* No conditionals, loops, or exceptions\n위의 사항들은 expression으로 사용이 불가하다.\n\n* Expressions enclosed in {{ expression }}\n중괄호 두개를 겹쳐서 사용한다.\n\n```\n<p>6 + 5 = {{ 6 + 5 }}</p>\n<h2>{{ dish.name }}</h2>\n```\n\n\n\n## Models, Views and Controllers\n\n### The Model View Controller Framework\n\n> Design pattern is ell-documented solution to a recurring problem\n\n디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.\n\n#### MVC\n\nMVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다. \n\n* Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.\n\n* View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.  \n\n* Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다. \n\n#### MVVM (Model View View-Model)\n\nMVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.  \n\n### Angular Modules and Controllers\n\n일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.\n\n#### Angular Modules\n\nAngular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.\n\n```\n<html ngApp=\"confusionApp\">\n\n...\n\n<body>\n\n...\n\n\t<script>\n\t\tvar app = angular.module('confusionApp',[]);\n\t</script>\n\n</body>\n\n</html>\n```\n\n#### Angular Controller\n\nAngular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.\n\n```\n<div class=\"row row-content\" ng-controller=\"menuController as menuCtrl\">\n\n</div>\n\n<script>\nvar app = angular.module('confusionApp', []);\n\napp.controller('menuController', function() {\n\tvar dishes = [item, ... ];\n\tthis.dishes = dishes;\n});\n\n</script>\n```\n\n모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 __this.dishes = dishes__ 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.\n\n\n\n## Angular Filters\n\n필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.\n\n```\n<div class=\"media-body\">\n\t<h2 class=\"media-headgin\">{{dish.name}}\n\t\t<span class=\"label label-danger label-xs\">{{dish.label}}</span>\n\t\t<!-- currency 필터는 price에 $를 붙여준다.-->\n\t\t<span class=\"badge\">{{dish.price | currency}}</span>\n\t</h2>\n\t<p>{{dish.description}}</p>\n</div>\n```\n\n#### Angluar의 Built-in Filters\n\n* uppercase / lowercase : converts the text\n* currency : $를 붙여준다.\n* date : 날짜 포맷을 변경한다.\n* filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.\n* orderBy : 조건에 맞게 정렬한다. \n* json, limitTo 등도 있다.\n\n```\n<!-- filter 예제, HTML 코드 -->\n<li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">...</li>\n\n<!-- javascript 코드 -->\nvar filtText = \"\";\n\nthis.select = function(setTab) {\n\tthis.tab = setTab;\n\tif (setTab === 2)\n\t\tthis.filtText = \"appetizer\"\n\telse if (setTab === 3)\n\t\tthis.filtText = \"mains\"\n\telse if (setTab === 4)\n\t\tthis.filtText = \"dessert\"\n\telse\n\t\tthis.filtText = \"\"\n}\n```\n\n위와 같이 HTML과 javascript 코드를 작성한다.\n그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).\n그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.\n미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.\n\n\n\n## Excercise Code\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n\n<head>\n     <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- The above 3 meta tags *must* come first in the head; any other head\n         content must come *after* these tags -->\n    <title>Ristorante Con Fusion: Menu</title>\n        <!-- Bootstrap -->\n    <link href=\"../bower_components/bootstrap/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n    <link href=\"../bower_components/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\">\n    <link href=\"styles/bootstrap-social.css\" rel=\"stylesheet\">\n    <link href=\"styles/mystyles.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n</head>\n\n<body>\n\n    <div class=\"container\">\n        <div class=\"row row-content\" ng-controller=\"menuController as menuCtrl\">\n            <div class=\"col-xs-12\">\n                <ul class=\"nav nav-tabs\" role=\"tablist\">\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(1)}\">\n                        <a ng-click=\"menuCtrl.select(1)\" aria-controls=\"all menu\" role=\"tab\">The Menu</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(2)}\">\n                        <a ng-click=\"menuCtrl.select(2)\" aria-controls=\"appetizers\" role=\"tab\">Appetizers</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(3)}\">\n                        <a ng-click=\"menuCtrl.select(3)\" aria-controls=\"mains\" role=\"tab\">Mains</a>\n                    </li>\n                    <li role=\"presentation\" ng-class=\"{active:menuCtrl.isSelected(4)}\">\n                        <a ng-click=\"menuCtrl.select(4)\" aria-controls=\"desserts\" role=\"tab\">Desserts</a>\n                    </li>\n                </ul>\n                <div class=\"tab-content\">\n                    <ul class=\"media-list tab-pane fade in active\">\n                        <li class=\"media\" ng-repeat=\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\">\n                            <div class=\"media-left media-middle\">\n                                <a href=\"#\">\n                                <img class=\"media-object img-thumbnail\" ng-src=\"{{dish.image}}\" alt=\"Uthapizza\">\n                                </a>\n                            </div>\n                            <div class=\"media-body\">\n                                <h2 class=\"media-heading\">{{dish.name}}\n                                    <span class=\"label label-danger\">{{dish.label}}</span>\n                                    <span class=\"badge\">{{dish.price | currency}}</span>\n                                </h2>\n                                <p>{{dish.description}}</p>\n                                <!-- <p>Comment: {{dish.comment}}</p> -->\n                                <!-- <p>Type your comment: -->\n                                    <!-- <input type=\"text\" ng-model=\"dish.comment\"> -->\n                                </p>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"../bower_components/angular/angular.min.js\"></script>\n    <script>\n        var app = angular.module('confusionApp', []);\n        app.controller('menuController', function(){\n\n            this.tab = 1;\n            this.filtText = '';\n\n            var dished = [\n                              {\n                                name: 'Uthapizza',\n                                image: 'images/uthapizza.png',\n                                category: 'mains',\n                                label: 'Hot',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: 'aaaaaaa'\n                              },\n                              {\n                                name: 'Uthapizza2',\n                                image: 'images/zucchipakoda.png',\n                                category: 'mains',\n                                label: '',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                              {\n                                name: 'Uthapizza3',\n                                image: 'images/vadonut.png',\n                                category: 'appetizer',\n                                label: 'New',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                              {\n                                name: 'Uthapizza4',\n                                image: 'images/elaicheesecake.png',\n                                category: 'dessert',\n                                label: '',\n                                price: '4.99',\n                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n                                comment: ''\n                              },\n                            ];\n            this.dishes = dished;\n\n            this.select = function(setTab) {\n                this.tab = setTab;\n\n                if (setTab === 2)\n                    this.filtText = \"appetizer\";\n                else if (setTab === 3)\n                    this.filtText = \"mains\"\n                else if (setTab === 4)\n                    this.filtText = \"dessert\"\n                else \n                    this.filtText = \"\";\n            }\n\n            this.isSelected = function(checkTab) {\n                return (this.tab === checkTab)\n            }\n        });\n    </script>\n</body>\n\n</html>\n```\n","slug":"2016-08-18-frontend-javascript-framework-angularjs-week1","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7l0026wxt4ouitx8xj","content":"<h2 id=\"Full-Stack-Web-Development-The-Big-Picture\"><a href=\"#Full-Stack-Web-Development-The-Big-Picture\" class=\"headerlink\" title=\"Full-Stack Web Development: The Big Picture\"></a>Full-Stack Web Development: The Big Picture</h2><h3 id=\"Three-Tier-Architecture\"><a href=\"#Three-Tier-Architecture\" class=\"headerlink\" title=\"Three Tier Architecture\"></a>Three Tier Architecture</h3><p>보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.</p><ul><li>Presentaion Layer : HTML, CSS, JS</li><li>Business Layer : Ruby, Python, Java, C++</li><li>Data Access Layer : DBMS</li></ul><p>반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.</p><p>이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.</p><h3 id=\"Course-Overview\"><a href=\"#Course-Overview\" class=\"headerlink\" title=\"Course Overview\"></a>Course Overview</h3><p>이번 강의에서 다루는 주제는 다음과 같다.</p><ul><li>AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)</li><li>Web Tools : Grunt, Gulp, Yo and Yeoman</li></ul><h2 id=\"Introduction-to-AngularJS\"><a href=\"#Introduction-to-AngularJS\" class=\"headerlink\" title=\"Introduction to AngularJS\"></a>Introduction to AngularJS</h2><h3 id=\"Front-End-JavaScript-Frameworks-OverView\"><a href=\"#Front-End-JavaScript-Frameworks-OverView\" class=\"headerlink\" title=\"Front-End JavaScript Frameworks OverView\"></a>Front-End JavaScript Frameworks OverView</h3><blockquote><p>소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.</p><p>소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.</p></blockquote><h4 id=\"10가지-Javascript-Framework\"><a href=\"#10가지-Javascript-Framework\" class=\"headerlink\" title=\"10가지 Javascript Framework\"></a>10가지 Javascript Framework</h4><ul><li>Angular : one of the three Major JS framework</li><li>Ember : one of the three Major JS framework</li><li>Backbone : one of the three Major JS framework</li><li>React : 프레임웍이라기 보다 라이브러리에 가까움</li><li>Aurelia</li><li>Meteor : 요즘 각광받기 시작</li><li>Polymer</li><li>Knockout</li><li>Vue</li><li>Mercury</li></ul><h4 id=\"3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1\"><a href=\"#3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1\" class=\"headerlink\" title=\"3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)\"></a>3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)</h4><table><thead><tr><th style=\"text-align:left\"></th><th style=\"text-align:center\">Ember</th><th style=\"text-align:center\">Angular</th><th style=\"text-align:center\">Backbone</th></tr></thead><tbody><tr><td style=\"text-align:left\">Opinionated</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td></tr><tr><td style=\"text-align:left\">Ease of Use</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">1</td></tr><tr><td style=\"text-align:left\">Learning Curve</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td></tr><tr><td style=\"text-align:left\">Popularity</td><td style=\"text-align:center\">-</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">-</td></tr></tbody></table><h3 id=\"Introduction-to-AngularJS-1\"><a href=\"#Introduction-to-AngularJS-1\" class=\"headerlink\" title=\"Introduction to AngularJS\"></a>Introduction to AngularJS</h3><p>HTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.</p><blockquote><p>Solving the impedance mismatch</p></blockquote><p>back end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다.</p><blockquote><p>Designed with CRUD applications (data-driven) in mind</p></blockquote><p>데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.</p><blockquote><p>Declarative approach</p></blockquote><p>Angular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘…)</p><h4 id=\"Angular-Vocabulary\"><a href=\"#Angular-Vocabulary\" class=\"headerlink\" title=\"Angular Vocabulary\"></a>Angular Vocabulary</h4><p>앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.</p><ul><li>Two-way Data Binding</li><li>Scope</li><li>Directives</li><li>Templates</li><li>Routing</li><li>Testing</li><li>Modules</li><li>Controllers</li><li>Filters</li><li>Factory</li><li>Service</li><li>Provider</li></ul><p>우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자</p><h4 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h4><p>Angular Directives는 ng-<em> or data-ng-</em> 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자</p><ul><li><p>ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.</p></li><li><p>ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.</p></li></ul><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">\"index=1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">\"dish=</span></span><span class=\"template-variable\">&#123;name:'example', ...&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure><ul><li>ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.</li></ul><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Comment: </span><span class=\"template-variable\">&#123;&#123;dish.comment&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Type your comment:</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"dish.comment\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure><p>dish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.</p><p>양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.</p><ul><li>ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.</li></ul><h4 id=\"Angular-Expressions\"><a href=\"#Angular-Expressions\" class=\"headerlink\" title=\"Angular Expressions\"></a>Angular Expressions</h4><ul><li><p>Evaluated against an Angular scope object<br>Angular 스코프에 맞게 value가 평가된다.</p></li><li><p>No conditionals, loops, or exceptions<br>위의 사항들은 expression으로 사용이 불가하다.</p></li><li><p>Expressions enclosed in<br>중괄호 두개를 겹쳐서 사용한다.</p></li></ul><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6 + 5 = </span><span class=\"template-variable\">&#123;&#123; 6 + 5 &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"template-variable\">&#123;&#123; dish.name &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id=\"Models-Views-and-Controllers\"><a href=\"#Models-Views-and-Controllers\" class=\"headerlink\" title=\"Models, Views and Controllers\"></a>Models, Views and Controllers</h2><h3 id=\"The-Model-View-Controller-Framework\"><a href=\"#The-Model-View-Controller-Framework\" class=\"headerlink\" title=\"The Model View Controller Framework\"></a>The Model View Controller Framework</h3><blockquote><p>Design pattern is ell-documented solution to a recurring problem</p></blockquote><p>디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.</p><h4 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h4><p>MVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다.</p><ul><li><p>Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.</p></li><li><p>View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.</p></li><li><p>Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다.</p></li></ul><h4 id=\"MVVM-Model-View-View-Model\"><a href=\"#MVVM-Model-View-View-Model\" class=\"headerlink\" title=\"MVVM (Model View View-Model)\"></a>MVVM (Model View View-Model)</h4><p>MVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.</p><h3 id=\"Angular-Modules-and-Controllers\"><a href=\"#Angular-Modules-and-Controllers\" class=\"headerlink\" title=\"Angular Modules and Controllers\"></a>Angular Modules and Controllers</h3><p>일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.</p><h4 id=\"Angular-Modules\"><a href=\"#Angular-Modules\" class=\"headerlink\" title=\"Angular Modules\"></a>Angular Modules</h4><p>Angular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ngApp</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>,[]);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"Angular-Controller\"><a href=\"#Angular-Controller\" class=\"headerlink\" title=\"Angular Controller\"></a>Angular Controller</h4><p>Angular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"menuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>, []);</div><div class=\"line\"></div><div class=\"line\">app.controller(<span class=\"string\">'menuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> dishes = [item, ... ];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.dishes = dishes;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 <strong>this.dishes = dishes</strong> 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.</p><h2 id=\"Angular-Filters\"><a href=\"#Angular-Filters\" class=\"headerlink\" title=\"Angular Filters\"></a>Angular Filters</h2><p>필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-body\"</span>&gt;</span></span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-headgin\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.name&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-danger label-xs\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.label&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- currency 필터는 price에 $를 붙여준다.--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.price | currency&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"Angluar의-Built-in-Filters\"><a href=\"#Angluar의-Built-in-Filters\" class=\"headerlink\" title=\"Angluar의 Built-in Filters\"></a>Angluar의 Built-in Filters</h4><ul><li>uppercase / lowercase : converts the text</li><li>currency : $를 붙여준다.</li><li>date : 날짜 포맷을 변경한다.</li><li>filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.</li><li>orderBy : 조건에 맞게 정렬한다.</li><li>json, limitTo 등도 있다.</li></ul><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- filter 예제, HTML 코드 --&gt;</div><div class=\"line\">&lt;li <span class=\"class\"><span class=\"keyword\">class</span>=\"<span class=\"title\">media</span>\" <span class=\"title\">ng</span>-<span class=\"title\">repeat</span>=\"<span class=\"title\">dish</span> <span class=\"title\">in</span> <span class=\"title\">menuCtrl</span>.<span class=\"title\">dishes</span> | <span class=\"title\">filter</span>:<span class=\"type\">menuCtrl.filtText\"&gt;...</span>&lt;<span class=\"type\">/li</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- javascript 코드 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> filtText = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.select = function(setTab) &#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.tab = setTab;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (setTab === <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"appetizer\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"mains\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">4</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"dessert\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>위와 같이 HTML과 javascript 코드를 작성한다.<br>그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).<br>그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.<br>미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.</p><h2 id=\"Excercise-Code\"><a href=\"#Excercise-Code\" class=\"headerlink\" title=\"Excercise Code\"></a>Excercise Code</h2><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- The above 3 meta tags *must* come first in the head; any other head</span></div><div class=\"line\">         content must come *after* these tags --&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ristorante Con Fusion: Menu<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/bootstrap/dist/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/font-awesome/css/font-awesome.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/bootstrap-social.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/mystyles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;![endif]--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"menuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(1)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(2)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(2)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"appetizers\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Appetizers<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(3)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(3)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"mains\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Mains<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(4)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(4)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"desserts\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Desserts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-left media-middle\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-object img-thumbnail\"</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;dish.image&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Uthapizza\"</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-body\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-heading\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.name&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-danger\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.label&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.price | currency&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"comment\">&lt;!-- &lt;p&gt;Comment: </span><span class=\"template-variable\">&#123;&#123;dish.comment&#125;&#125;</span><span class=\"xml\"><span class=\"comment\">&lt;/p&gt; --&gt;</span></span></div><div class=\"line\">                                <span class=\"comment\">&lt;!-- &lt;p&gt;Type your comment: --&gt;</span></div><div class=\"line\">                                    <span class=\"comment\">&lt;!-- &lt;input type=\"text\" ng-model=\"dish.comment\"&gt; --&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>, []);</div><div class=\"line\">        app.controller(<span class=\"string\">'menuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.tab = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.filtText = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> dished = [</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/uthapizza.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'mains'</span>,</div><div class=\"line\">                                label: <span class=\"string\">'Hot'</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">'aaaaaaa'</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza2'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/zucchipakoda.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'mains'</span>,</div><div class=\"line\">                                label: <span class=\"string\">''</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza3'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/vadonut.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'appetizer'</span>,</div><div class=\"line\">                                label: <span class=\"string\">'New'</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza4'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/elaicheesecake.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'dessert'</span>,</div><div class=\"line\">                                label: <span class=\"string\">''</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                            ];</div><div class=\"line\">            <span class=\"keyword\">this</span>.dishes = dished;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.select = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(setTab)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.tab = setTab;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (setTab === <span class=\"number\">2</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"appetizer\"</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">3</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"mains\"</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">4</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"dessert\"</span></div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.isSelected = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(checkTab)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.tab === checkTab)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Full-Stack-Web-Development-The-Big-Picture\"><a href=\"#Full-Stack-Web-Development-The-Big-Picture\" class=\"headerlink\" title=\"Full-Stack Web Development: The Big Picture\"></a>Full-Stack Web Development: The Big Picture</h2><h3 id=\"Three-Tier-Architecture\"><a href=\"#Three-Tier-Architecture\" class=\"headerlink\" title=\"Three Tier Architecture\"></a>Three Tier Architecture</h3><p>보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.</p><ul><li>Presentaion Layer : HTML, CSS, JS</li><li>Business Layer : Ruby, Python, Java, C++</li><li>Data Access Layer : DBMS</li></ul><p>반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.</p><p>이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.</p><h3 id=\"Course-Overview\"><a href=\"#Course-Overview\" class=\"headerlink\" title=\"Course Overview\"></a>Course Overview</h3><p>이번 강의에서 다루는 주제는 다음과 같다.</p><ul><li>AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)</li><li>Web Tools : Grunt, Gulp, Yo and Yeoman</li></ul><h2 id=\"Introduction-to-AngularJS\"><a href=\"#Introduction-to-AngularJS\" class=\"headerlink\" title=\"Introduction to AngularJS\"></a>Introduction to AngularJS</h2><h3 id=\"Front-End-JavaScript-Frameworks-OverView\"><a href=\"#Front-End-JavaScript-Frameworks-OverView\" class=\"headerlink\" title=\"Front-End JavaScript Frameworks OverView\"></a>Front-End JavaScript Frameworks OverView</h3><blockquote><p>소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.</p><p>소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.</p></blockquote><h4 id=\"10가지-Javascript-Framework\"><a href=\"#10가지-Javascript-Framework\" class=\"headerlink\" title=\"10가지 Javascript Framework\"></a>10가지 Javascript Framework</h4><ul><li>Angular : one of the three Major JS framework</li><li>Ember : one of the three Major JS framework</li><li>Backbone : one of the three Major JS framework</li><li>React : 프레임웍이라기 보다 라이브러리에 가까움</li><li>Aurelia</li><li>Meteor : 요즘 각광받기 시작</li><li>Polymer</li><li>Knockout</li><li>Vue</li><li>Mercury</li></ul><h4 id=\"3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1\"><a href=\"#3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1\" class=\"headerlink\" title=\"3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)\"></a>3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)</h4><table><thead><tr><th style=\"text-align:left\"></th><th style=\"text-align:center\">Ember</th><th style=\"text-align:center\">Angular</th><th style=\"text-align:center\">Backbone</th></tr></thead><tbody><tr><td style=\"text-align:left\">Opinionated</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td></tr><tr><td style=\"text-align:left\">Ease of Use</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">1</td></tr><tr><td style=\"text-align:left\">Learning Curve</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td></tr><tr><td style=\"text-align:left\">Popularity</td><td style=\"text-align:center\">-</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">-</td></tr></tbody></table><h3 id=\"Introduction-to-AngularJS-1\"><a href=\"#Introduction-to-AngularJS-1\" class=\"headerlink\" title=\"Introduction to AngularJS\"></a>Introduction to AngularJS</h3><p>HTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.</p><blockquote><p>Solving the impedance mismatch</p></blockquote><p>back end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다.</p><blockquote><p>Designed with CRUD applications (data-driven) in mind</p></blockquote><p>데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.</p><blockquote><p>Declarative approach</p></blockquote><p>Angular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘…)</p><h4 id=\"Angular-Vocabulary\"><a href=\"#Angular-Vocabulary\" class=\"headerlink\" title=\"Angular Vocabulary\"></a>Angular Vocabulary</h4><p>앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.</p><ul><li>Two-way Data Binding</li><li>Scope</li><li>Directives</li><li>Templates</li><li>Routing</li><li>Testing</li><li>Modules</li><li>Controllers</li><li>Filters</li><li>Factory</li><li>Service</li><li>Provider</li></ul><p>우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자</p><h4 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h4><p>Angular Directives는 ng-<em> or data-ng-</em> 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자</p><ul><li><p>ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.</p></li><li><p>ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.</p></li></ul><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">\"index=1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">\"dish=</span></span><span class=\"template-variable\">&#123;name:'example', ...&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure><ul><li>ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.</li></ul><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Comment: </span><span class=\"template-variable\">&#123;&#123;dish.comment&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Type your comment:</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"dish.comment\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure><p>dish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.</p><p>양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.</p><ul><li>ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.</li></ul><h4 id=\"Angular-Expressions\"><a href=\"#Angular-Expressions\" class=\"headerlink\" title=\"Angular Expressions\"></a>Angular Expressions</h4><ul><li><p>Evaluated against an Angular scope object<br>Angular 스코프에 맞게 value가 평가된다.</p></li><li><p>No conditionals, loops, or exceptions<br>위의 사항들은 expression으로 사용이 불가하다.</p></li><li><p>Expressions enclosed in<br>중괄호 두개를 겹쳐서 사용한다.</p></li></ul><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6 + 5 = </span><span class=\"template-variable\">&#123;&#123; 6 + 5 &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"template-variable\">&#123;&#123; dish.name &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id=\"Models-Views-and-Controllers\"><a href=\"#Models-Views-and-Controllers\" class=\"headerlink\" title=\"Models, Views and Controllers\"></a>Models, Views and Controllers</h2><h3 id=\"The-Model-View-Controller-Framework\"><a href=\"#The-Model-View-Controller-Framework\" class=\"headerlink\" title=\"The Model View Controller Framework\"></a>The Model View Controller Framework</h3><blockquote><p>Design pattern is ell-documented solution to a recurring problem</p></blockquote><p>디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.</p><h4 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h4><p>MVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다.</p><ul><li><p>Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.</p></li><li><p>View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.</p></li><li><p>Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다.</p></li></ul><h4 id=\"MVVM-Model-View-View-Model\"><a href=\"#MVVM-Model-View-View-Model\" class=\"headerlink\" title=\"MVVM (Model View View-Model)\"></a>MVVM (Model View View-Model)</h4><p>MVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.</p><h3 id=\"Angular-Modules-and-Controllers\"><a href=\"#Angular-Modules-and-Controllers\" class=\"headerlink\" title=\"Angular Modules and Controllers\"></a>Angular Modules and Controllers</h3><p>일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.</p><h4 id=\"Angular-Modules\"><a href=\"#Angular-Modules\" class=\"headerlink\" title=\"Angular Modules\"></a>Angular Modules</h4><p>Angular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ngApp</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>,[]);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"Angular-Controller\"><a href=\"#Angular-Controller\" class=\"headerlink\" title=\"Angular Controller\"></a>Angular Controller</h4><p>Angular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"menuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>, []);</div><div class=\"line\"></div><div class=\"line\">app.controller(<span class=\"string\">'menuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> dishes = [item, ... ];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.dishes = dishes;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 <strong>this.dishes = dishes</strong> 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.</p><h2 id=\"Angular-Filters\"><a href=\"#Angular-Filters\" class=\"headerlink\" title=\"Angular Filters\"></a>Angular Filters</h2><p>필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-body\"</span>&gt;</span></span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-headgin\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.name&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-danger label-xs\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.label&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- currency 필터는 price에 $를 붙여준다.--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.price | currency&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"Angluar의-Built-in-Filters\"><a href=\"#Angluar의-Built-in-Filters\" class=\"headerlink\" title=\"Angluar의 Built-in Filters\"></a>Angluar의 Built-in Filters</h4><ul><li>uppercase / lowercase : converts the text</li><li>currency : $를 붙여준다.</li><li>date : 날짜 포맷을 변경한다.</li><li>filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.</li><li>orderBy : 조건에 맞게 정렬한다.</li><li>json, limitTo 등도 있다.</li></ul><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- filter 예제, HTML 코드 --&gt;</div><div class=\"line\">&lt;li <span class=\"class\"><span class=\"keyword\">class</span>=\"<span class=\"title\">media</span>\" <span class=\"title\">ng</span>-<span class=\"title\">repeat</span>=\"<span class=\"title\">dish</span> <span class=\"title\">in</span> <span class=\"title\">menuCtrl</span>.<span class=\"title\">dishes</span> | <span class=\"title\">filter</span>:<span class=\"type\">menuCtrl.filtText\"&gt;...</span>&lt;<span class=\"type\">/li</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- javascript 코드 --&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> filtText = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.select = function(setTab) &#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.tab = setTab;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (setTab === <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"appetizer\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"mains\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">4</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"dessert\"</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>위와 같이 HTML과 javascript 코드를 작성한다.<br>그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).<br>그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.<br>미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.</p><h2 id=\"Excercise-Code\"><a href=\"#Excercise-Code\" class=\"headerlink\" title=\"Excercise Code\"></a>Excercise Code</h2><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- The above 3 meta tags *must* come first in the head; any other head</span></div><div class=\"line\">         content must come *after* these tags --&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ristorante Con Fusion: Menu<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/bootstrap/dist/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../bower_components/font-awesome/css/font-awesome.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/bootstrap-social.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles/mystyles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;![endif]--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row row-content\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"menuController as menuCtrl\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-12\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(1)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(1)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"all menu\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>The Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(2)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(2)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"appetizers\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Appetizers<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(3)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(3)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"mains\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Mains<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:menuCtrl.isSelected(4)&#125;\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"menuCtrl.select(4)\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"desserts\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span>Desserts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab-content\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-list tab-pane fade in active\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"dish in menuCtrl.dishes | filter:menuCtrl.filtText\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-left media-middle\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-object img-thumbnail\"</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;dish.image&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Uthapizza\"</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-body\"</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-heading\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.name&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-danger\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.label&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.price | currency&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"template-variable\">&#123;&#123;dish.description&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"comment\">&lt;!-- &lt;p&gt;Comment: </span><span class=\"template-variable\">&#123;&#123;dish.comment&#125;&#125;</span><span class=\"xml\"><span class=\"comment\">&lt;/p&gt; --&gt;</span></span></div><div class=\"line\">                                <span class=\"comment\">&lt;!-- &lt;p&gt;Type your comment: --&gt;</span></div><div class=\"line\">                                    <span class=\"comment\">&lt;!-- &lt;input type=\"text\" ng-model=\"dish.comment\"&gt; --&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'confusionApp'</span>, []);</div><div class=\"line\">        app.controller(<span class=\"string\">'menuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.tab = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.filtText = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> dished = [</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/uthapizza.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'mains'</span>,</div><div class=\"line\">                                label: <span class=\"string\">'Hot'</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">'aaaaaaa'</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza2'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/zucchipakoda.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'mains'</span>,</div><div class=\"line\">                                label: <span class=\"string\">''</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza3'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/vadonut.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'appetizer'</span>,</div><div class=\"line\">                                label: <span class=\"string\">'New'</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                              &#123;</div><div class=\"line\">                                name: <span class=\"string\">'Uthapizza4'</span>,</div><div class=\"line\">                                image: <span class=\"string\">'images/elaicheesecake.png'</span>,</div><div class=\"line\">                                category: <span class=\"string\">'dessert'</span>,</div><div class=\"line\">                                label: <span class=\"string\">''</span>,</div><div class=\"line\">                                price: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">                                description:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">                                comment: <span class=\"string\">''</span></div><div class=\"line\">                              &#125;,</div><div class=\"line\">                            ];</div><div class=\"line\">            <span class=\"keyword\">this</span>.dishes = dished;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.select = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(setTab)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.tab = setTab;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (setTab === <span class=\"number\">2</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"appetizer\"</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">3</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"mains\"</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setTab === <span class=\"number\">4</span>)</div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"dessert\"</span></div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                    <span class=\"keyword\">this</span>.filtText = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.isSelected = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(checkTab)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.tab === checkTab)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 3-2","date":"2016-09-05T14:10:10.000Z","_content":"## Single Page Applications\n\n### Angular ngRoute and Single Page Applications\n\n#### Single Page Applications(SPA)\n\nSingle Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).\n하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다. \n\n하지만 SPA도 극복해야할 문제들이 있다.\n\n> 검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?\n> SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제\n> 단일 페이지이기 때문에 history 관리가 어려운 문제\n> 페이지의 데이터를 모으기 어려운 문제\n> 필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제\n\n\n#### Angular and SPA\n\n지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다. \n> one-way and two-way 바인딩\n> MVC/MVVM/MVW 프레임워크\n> view -> template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render\n> location and routing을 제공\n\nSPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.\n\n\n#### Deep Linking\n\n검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다. \n예를들면,\n\n```\nhttp://www.conFusion.food/index.html#/menu/0\n```\n\n해시태그(#)가 url에 왜 붙었느냐??\nurl에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.\n\n즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.\n\n#### $location service\n\n* 현재 주소창의 URL을 보여준다.\n* back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.\n* url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.\n\n#### ngRoute Module\n\n우선 install한다. conFusion 폴더에서 실행한다.\n\n```\nbower install angular-route -S\n```\nngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.\n\n다음과 괕이 angular module에서 사용된다.\n\n```\n// 의존적으로 주입한다.\nangular.module('confusionApp', ['ngRoute'])\n```\n\nngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.\n\n```\nangular.module('confusionApp', ['ngRoute'])\n\t// 라우팅을 위해 config 함수를 사용한다.\n\t// 파라미터로 $routeProvider가 들어간다.\n    .config(function($routeProvider) {\n\n      $routeProvider\n        .when('/contactus', {\n          templateUrl : 'contactus.html',\n          controller : 'ContactController'\n        })\n\n        .when('/menu', {\n          templateUrl : 'menu.html',\n          controller : 'MenuController'\n        })\n \n        .when('/menu/:id', {\n          templateUrl : 'dishDetail.html',\n          controller : 'DishDetailController'\n        })\n        // 디폴트, 아무것도 매치가 안되면 otherwise 실행\n        .otherwise('/contactus')\n    })\n;\n```\n\nurl이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.\n\n$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.\n예를 보자\n\n```\n// menu.html\n<div class=\"media-left media-middle\">\n\t<a ng-href=\"#/menu/{{dish._id}}\">\n\n// controllers.js\n.controller('DishDetailController', ['$scope', '$routeParams',\n\t'menuFactory', function($scope, $routeParams, menuFactory) {\n\t\tvar dish = menuFactory.getDish(parseInt($routeParams.id, 10));\n\t}]);\n```\n\n/menu/\\[id\\]와 같은 url이 들어왔을때 \\[id\\] 부분은 파라미터로 처리한다.\n만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.\n\n이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.\n\n마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다. \n\n\n### Angular UI-Router for Single Page Applications\n\n이전 강의에서 살펴본 ngRoute는 한계가 있다.\n\n* 한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)\n* view가 url에 종속적이다.\n\n이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)\n\n우선 설치부터 하자\n\n```\nbower install angular-ui-router -S\n```\n\n사용법은 이전과 비슷하다.\n\n```\nangular.module('confusionApp', ['ui.router'])\n\t.config(function($stateProvider, $urlRouterProvider) {\n\t\t$stateProvider\n\t\t\t.state('app', {\n\t\t\t\turl:'/',\n\t\t\t\tviews: {\n\t\t\t\t\t'header': {templateUrl: 'views/header'html},\n\t\t\t\t\t'content': {template: '<h1>To be Completed</h1>', controller : 'IndexController'}\n\t\t\t\t\t'footer': {templateUrl: 'views/footer.html'}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.state('app.aboutus', {\n\t\t\t\turl:'aboutus',\n\t\t\t\tviews: {\n\t\t\t\t\t'content@': {template: '<h1>To be Completed</h1>', controller : 'AboutController'}\n\n\t\t\t});\n\t\t\t// default\n\t\t\t$urlRouterProvider.otherwise('/');\n\t})\n\n```\n\nstate에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다. \n\n두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 '@' 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.\n\n위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다. \n그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.\n\n```\n<div ui-view=\"header\"></div>\n<div ui-view=\"content\"></div>\n<div ui-view=\"footer\"></div>\n\n<a ui-sref=\"app\"></a>\n<a ui-sref=\"app.aboutus\"></a>\n<a ui-sref=\"app.menu\"></a>\n```\n\n$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.\n사용법은 기존과 거의 같다.\n\n```\n// menu.html\n<a ui-sref=\"app.dishdetails({id:dish._id})\"> ... </a>\n\n// DishDetailController\n.controller('DishDetailController', ['$scope', '$stateParams',\n\t'menuFactory', function($scope, $stateParams, menuFactory) {\n\t\tvar dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,10));\n\t\t$scope.dish = dish;\n\t}\n])\n```\n","source":"_posts/2016-09-05-frontend-javascript-framework-angularjs-week3-2.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 3-2\"\ncategories: programming\ndate:   2016-09-05 23:10:10 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n## Single Page Applications\n\n### Angular ngRoute and Single Page Applications\n\n#### Single Page Applications(SPA)\n\nSingle Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).\n하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다. \n\n하지만 SPA도 극복해야할 문제들이 있다.\n\n> 검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?\n> SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제\n> 단일 페이지이기 때문에 history 관리가 어려운 문제\n> 페이지의 데이터를 모으기 어려운 문제\n> 필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제\n\n\n#### Angular and SPA\n\n지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다. \n> one-way and two-way 바인딩\n> MVC/MVVM/MVW 프레임워크\n> view -> template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render\n> location and routing을 제공\n\nSPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.\n\n\n#### Deep Linking\n\n검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다. \n예를들면,\n\n```\nhttp://www.conFusion.food/index.html#/menu/0\n```\n\n해시태그(#)가 url에 왜 붙었느냐??\nurl에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.\n\n즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.\n\n#### $location service\n\n* 현재 주소창의 URL을 보여준다.\n* back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.\n* url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.\n\n#### ngRoute Module\n\n우선 install한다. conFusion 폴더에서 실행한다.\n\n```\nbower install angular-route -S\n```\nngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.\n\n다음과 괕이 angular module에서 사용된다.\n\n```\n// 의존적으로 주입한다.\nangular.module('confusionApp', ['ngRoute'])\n```\n\nngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.\n\n```\nangular.module('confusionApp', ['ngRoute'])\n\t// 라우팅을 위해 config 함수를 사용한다.\n\t// 파라미터로 $routeProvider가 들어간다.\n    .config(function($routeProvider) {\n\n      $routeProvider\n        .when('/contactus', {\n          templateUrl : 'contactus.html',\n          controller : 'ContactController'\n        })\n\n        .when('/menu', {\n          templateUrl : 'menu.html',\n          controller : 'MenuController'\n        })\n \n        .when('/menu/:id', {\n          templateUrl : 'dishDetail.html',\n          controller : 'DishDetailController'\n        })\n        // 디폴트, 아무것도 매치가 안되면 otherwise 실행\n        .otherwise('/contactus')\n    })\n;\n```\n\nurl이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.\n\n$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.\n예를 보자\n\n```\n// menu.html\n<div class=\"media-left media-middle\">\n\t<a ng-href=\"#/menu/{{dish._id}}\">\n\n// controllers.js\n.controller('DishDetailController', ['$scope', '$routeParams',\n\t'menuFactory', function($scope, $routeParams, menuFactory) {\n\t\tvar dish = menuFactory.getDish(parseInt($routeParams.id, 10));\n\t}]);\n```\n\n/menu/\\[id\\]와 같은 url이 들어왔을때 \\[id\\] 부분은 파라미터로 처리한다.\n만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.\n\n이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.\n\n마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다. \n\n\n### Angular UI-Router for Single Page Applications\n\n이전 강의에서 살펴본 ngRoute는 한계가 있다.\n\n* 한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)\n* view가 url에 종속적이다.\n\n이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)\n\n우선 설치부터 하자\n\n```\nbower install angular-ui-router -S\n```\n\n사용법은 이전과 비슷하다.\n\n```\nangular.module('confusionApp', ['ui.router'])\n\t.config(function($stateProvider, $urlRouterProvider) {\n\t\t$stateProvider\n\t\t\t.state('app', {\n\t\t\t\turl:'/',\n\t\t\t\tviews: {\n\t\t\t\t\t'header': {templateUrl: 'views/header'html},\n\t\t\t\t\t'content': {template: '<h1>To be Completed</h1>', controller : 'IndexController'}\n\t\t\t\t\t'footer': {templateUrl: 'views/footer.html'}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.state('app.aboutus', {\n\t\t\t\turl:'aboutus',\n\t\t\t\tviews: {\n\t\t\t\t\t'content@': {template: '<h1>To be Completed</h1>', controller : 'AboutController'}\n\n\t\t\t});\n\t\t\t// default\n\t\t\t$urlRouterProvider.otherwise('/');\n\t})\n\n```\n\nstate에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다. \n\n두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 '@' 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.\n\n위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다. \n그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.\n\n```\n<div ui-view=\"header\"></div>\n<div ui-view=\"content\"></div>\n<div ui-view=\"footer\"></div>\n\n<a ui-sref=\"app\"></a>\n<a ui-sref=\"app.aboutus\"></a>\n<a ui-sref=\"app.menu\"></a>\n```\n\n$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.\n사용법은 기존과 거의 같다.\n\n```\n// menu.html\n<a ui-sref=\"app.dishdetails({id:dish._id})\"> ... </a>\n\n// DishDetailController\n.controller('DishDetailController', ['$scope', '$stateParams',\n\t'menuFactory', function($scope, $stateParams, menuFactory) {\n\t\tvar dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,10));\n\t\t$scope.dish = dish;\n\t}\n])\n```\n","slug":"2016-09-05-frontend-javascript-framework-angularjs-week3-2","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7m0028wxt44799l0fi","content":"<h2 id=\"Single-Page-Applications\"><a href=\"#Single-Page-Applications\" class=\"headerlink\" title=\"Single Page Applications\"></a>Single Page Applications</h2><h3 id=\"Angular-ngRoute-and-Single-Page-Applications\"><a href=\"#Angular-ngRoute-and-Single-Page-Applications\" class=\"headerlink\" title=\"Angular ngRoute and Single Page Applications\"></a>Angular ngRoute and Single Page Applications</h3><h4 id=\"Single-Page-Applications-SPA\"><a href=\"#Single-Page-Applications-SPA\" class=\"headerlink\" title=\"Single Page Applications(SPA)\"></a>Single Page Applications(SPA)</h4><p>Single Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).<br>하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다.</p><p>하지만 SPA도 극복해야할 문제들이 있다.</p><blockquote><p>검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?<br>SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제<br>단일 페이지이기 때문에 history 관리가 어려운 문제<br>페이지의 데이터를 모으기 어려운 문제<br>필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제</p></blockquote><h4 id=\"Angular-and-SPA\"><a href=\"#Angular-and-SPA\" class=\"headerlink\" title=\"Angular and SPA\"></a>Angular and SPA</h4><p>지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다.</p><blockquote><p>one-way and two-way 바인딩<br>MVC/MVVM/MVW 프레임워크<br>view -&gt; template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render<br>location and routing을 제공</p></blockquote><p>SPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.</p><h4 id=\"Deep-Linking\"><a href=\"#Deep-Linking\" class=\"headerlink\" title=\"Deep Linking\"></a>Deep Linking</h4><p>검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다.<br>예를들면,</p><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//www.conFusion.food/index.html<span class=\"meta\">#/menu/0</span></div></pre></td></tr></table></figure><p>해시태그(#)가 url에 왜 붙었느냐??<br>url에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.</p><p>즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.</p><h4 id=\"location-service\"><a href=\"#location-service\" class=\"headerlink\" title=\"$location service\"></a>$location service</h4><ul><li>현재 주소창의 URL을 보여준다.</li><li>back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.</li><li>url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.</li></ul><h4 id=\"ngRoute-Module\"><a href=\"#ngRoute-Module\" class=\"headerlink\" title=\"ngRoute Module\"></a>ngRoute Module</h4><p>우선 install한다. conFusion 폴더에서 실행한다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-route -S</div></pre></td></tr></table></figure><p>ngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.</p><p>다음과 괕이 angular module에서 사용된다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 의존적으로 주입한다.</span></div><div class=\"line\">angular.<span class=\"keyword\">module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ngRoute'</span>])</div></pre></td></tr></table></figure><p>ngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">angular</span><span class=\"selector-class\">.module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ngRoute'</span>])</div><div class=\"line\">\t<span class=\"comment\">// 라우팅을 위해 config 함수를 사용한다.</span></div><div class=\"line\">\t<span class=\"comment\">// 파라미터로 $routeProvider가 들어간다.</span></div><div class=\"line\">    <span class=\"selector-class\">.config</span>(function($routeProvider) &#123;</div><div class=\"line\"></div><div class=\"line\">      $<span class=\"selector-tag\">routeProvider</span></div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/contactus'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'contactus.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'ContactController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/menu'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'menu.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'MenuController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/menu/:id'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'dishDetail.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'DishDetailController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"comment\">// 디폴트, 아무것도 매치가 안되면 otherwise 실행</span></div><div class=\"line\">        <span class=\"selector-class\">.otherwise</span>(<span class=\"string\">'/contactus'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">;</div></pre></td></tr></table></figure><p>url이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.</p><p>$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.<br>예를 보자</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// menu.html</span></div><div class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"media-left media-middle\"</span>&gt;</div><div class=\"line\">\t&lt;a ng-href=<span class=\"string\">\"#/menu/&#123;&#123;dish._id&#125;&#125;\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// controllers.js</span></div><div class=\"line\">.controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$routeParams'</span>,</div><div class=\"line\">\t<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $routeParams, menuFactory</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> dish = menuFactory.getDish(<span class=\"built_in\">parseInt</span>($routeParams.id, <span class=\"number\">10</span>));</div><div class=\"line\">\t&#125;]);</div></pre></td></tr></table></figure><p>/menu/[id]와 같은 url이 들어왔을때 [id] 부분은 파라미터로 처리한다.<br>만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.</p><p>이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.</p><p>마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다.</p><h3 id=\"Angular-UI-Router-for-Single-Page-Applications\"><a href=\"#Angular-UI-Router-for-Single-Page-Applications\" class=\"headerlink\" title=\"Angular UI-Router for Single Page Applications\"></a>Angular UI-Router for Single Page Applications</h3><p>이전 강의에서 살펴본 ngRoute는 한계가 있다.</p><ul><li>한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)</li><li>view가 url에 종속적이다.</li></ul><p>이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)</p><p>우선 설치부터 하자</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-ui-router -S</div></pre></td></tr></table></figure><p>사용법은 이전과 비슷하다.</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ui.router'</span>])</div><div class=\"line\">\t.config(<span class=\"keyword\">function</span>($stateProvider, $urlRouterProvider) &#123;</div><div class=\"line\">\t\t$stateProvider</div><div class=\"line\">\t\t\t.state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">\t\t\t\turl:<span class=\"string\">'/'</span>,</div><div class=\"line\">\t\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'header'</span>: &#123;templateUrl: <span class=\"string\">'views/header'</span>html&#125;,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'content'</span>: &#123;template: <span class=\"string\">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class=\"string\">'IndexController'</span>&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'footer'</span>: &#123;templateUrl: <span class=\"string\">'views/footer.html'</span>&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t\t.state(<span class=\"string\">'app.aboutus'</span>, &#123;</div><div class=\"line\">\t\t\t\turl:<span class=\"string\">'aboutus'</span>,</div><div class=\"line\">\t\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'content@'</span>: &#123;template: <span class=\"string\">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class=\"string\">'AboutController'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t// default</div><div class=\"line\">\t\t\t$urlRouterProvider.otherwise(<span class=\"string\">'/'</span>);</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure><p>state에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다.</p><p>두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 ‘@’ 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.</p><p>위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다.<br>그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app.aboutus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app.menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure><p>$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.<br>사용법은 기존과 거의 같다.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// menu.html</span></div><div class=\"line\">&lt;a ui-sref=<span class=\"string\">\"app.dishdetails(&#123;id:dish._id&#125;)\"</span>&gt; ... &lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// DishDetailController</span></div><div class=\"line\">.controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$stateParams'</span>,</div><div class=\"line\">\t<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $stateParams, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,<span class=\"number\">10</span>));</div><div class=\"line\">\t\t$scope.dish = dish;</div><div class=\"line\">\t&#125;</div><div class=\"line\">])</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Single-Page-Applications\"><a href=\"#Single-Page-Applications\" class=\"headerlink\" title=\"Single Page Applications\"></a>Single Page Applications</h2><h3 id=\"Angular-ngRoute-and-Single-Page-Applications\"><a href=\"#Angular-ngRoute-and-Single-Page-Applications\" class=\"headerlink\" title=\"Angular ngRoute and Single Page Applications\"></a>Angular ngRoute and Single Page Applications</h3><h4 id=\"Single-Page-Applications-SPA\"><a href=\"#Single-Page-Applications-SPA\" class=\"headerlink\" title=\"Single Page Applications(SPA)\"></a>Single Page Applications(SPA)</h4><p>Single Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).<br>하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다.</p><p>하지만 SPA도 극복해야할 문제들이 있다.</p><blockquote><p>검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?<br>SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제<br>단일 페이지이기 때문에 history 관리가 어려운 문제<br>페이지의 데이터를 모으기 어려운 문제<br>필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제</p></blockquote><h4 id=\"Angular-and-SPA\"><a href=\"#Angular-and-SPA\" class=\"headerlink\" title=\"Angular and SPA\"></a>Angular and SPA</h4><p>지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다.</p><blockquote><p>one-way and two-way 바인딩<br>MVC/MVVM/MVW 프레임워크<br>view -&gt; template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render<br>location and routing을 제공</p></blockquote><p>SPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.</p><h4 id=\"Deep-Linking\"><a href=\"#Deep-Linking\" class=\"headerlink\" title=\"Deep Linking\"></a>Deep Linking</h4><p>검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다.<br>예를들면,</p><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//www.conFusion.food/index.html<span class=\"meta\">#/menu/0</span></div></pre></td></tr></table></figure><p>해시태그(#)가 url에 왜 붙었느냐??<br>url에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.</p><p>즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.</p><h4 id=\"location-service\"><a href=\"#location-service\" class=\"headerlink\" title=\"$location service\"></a>$location service</h4><ul><li>현재 주소창의 URL을 보여준다.</li><li>back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.</li><li>url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.</li></ul><h4 id=\"ngRoute-Module\"><a href=\"#ngRoute-Module\" class=\"headerlink\" title=\"ngRoute Module\"></a>ngRoute Module</h4><p>우선 install한다. conFusion 폴더에서 실행한다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-route -S</div></pre></td></tr></table></figure><p>ngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.</p><p>다음과 괕이 angular module에서 사용된다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 의존적으로 주입한다.</span></div><div class=\"line\">angular.<span class=\"keyword\">module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ngRoute'</span>])</div></pre></td></tr></table></figure><p>ngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">angular</span><span class=\"selector-class\">.module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ngRoute'</span>])</div><div class=\"line\">\t<span class=\"comment\">// 라우팅을 위해 config 함수를 사용한다.</span></div><div class=\"line\">\t<span class=\"comment\">// 파라미터로 $routeProvider가 들어간다.</span></div><div class=\"line\">    <span class=\"selector-class\">.config</span>(function($routeProvider) &#123;</div><div class=\"line\"></div><div class=\"line\">      $<span class=\"selector-tag\">routeProvider</span></div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/contactus'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'contactus.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'ContactController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/menu'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'menu.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'MenuController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"selector-class\">.when</span>(<span class=\"string\">'/menu/:id'</span>, &#123;</div><div class=\"line\">          <span class=\"attribute\">templateUrl </span>: <span class=\"string\">'dishDetail.html'</span>,</div><div class=\"line\">          <span class=\"attribute\">controller </span>: <span class=\"string\">'DishDetailController'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"comment\">// 디폴트, 아무것도 매치가 안되면 otherwise 실행</span></div><div class=\"line\">        <span class=\"selector-class\">.otherwise</span>(<span class=\"string\">'/contactus'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">;</div></pre></td></tr></table></figure><p>url이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.</p><p>$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.<br>예를 보자</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// menu.html</span></div><div class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"media-left media-middle\"</span>&gt;</div><div class=\"line\">\t&lt;a ng-href=<span class=\"string\">\"#/menu/&#123;&#123;dish._id&#125;&#125;\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// controllers.js</span></div><div class=\"line\">.controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$routeParams'</span>,</div><div class=\"line\">\t<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $routeParams, menuFactory</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> dish = menuFactory.getDish(<span class=\"built_in\">parseInt</span>($routeParams.id, <span class=\"number\">10</span>));</div><div class=\"line\">\t&#125;]);</div></pre></td></tr></table></figure><p>/menu/[id]와 같은 url이 들어왔을때 [id] 부분은 파라미터로 처리한다.<br>만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.</p><p>이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.</p><p>마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다.</p><h3 id=\"Angular-UI-Router-for-Single-Page-Applications\"><a href=\"#Angular-UI-Router-for-Single-Page-Applications\" class=\"headerlink\" title=\"Angular UI-Router for Single Page Applications\"></a>Angular UI-Router for Single Page Applications</h3><p>이전 강의에서 살펴본 ngRoute는 한계가 있다.</p><ul><li>한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)</li><li>view가 url에 종속적이다.</li></ul><p>이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)</p><p>우선 설치부터 하자</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-ui-router -S</div></pre></td></tr></table></figure><p>사용법은 이전과 비슷하다.</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ui.router'</span>])</div><div class=\"line\">\t.config(<span class=\"keyword\">function</span>($stateProvider, $urlRouterProvider) &#123;</div><div class=\"line\">\t\t$stateProvider</div><div class=\"line\">\t\t\t.state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">\t\t\t\turl:<span class=\"string\">'/'</span>,</div><div class=\"line\">\t\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'header'</span>: &#123;templateUrl: <span class=\"string\">'views/header'</span>html&#125;,</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'content'</span>: &#123;template: <span class=\"string\">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class=\"string\">'IndexController'</span>&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'footer'</span>: &#123;templateUrl: <span class=\"string\">'views/footer.html'</span>&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t\t.state(<span class=\"string\">'app.aboutus'</span>, &#123;</div><div class=\"line\">\t\t\t\turl:<span class=\"string\">'aboutus'</span>,</div><div class=\"line\">\t\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">'content@'</span>: &#123;template: <span class=\"string\">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class=\"string\">'AboutController'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t// default</div><div class=\"line\">\t\t\t$urlRouterProvider.otherwise(<span class=\"string\">'/'</span>);</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure><p>state에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다.</p><p>두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 ‘@’ 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.</p><p>위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다.<br>그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app.aboutus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"app.menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure><p>$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.<br>사용법은 기존과 거의 같다.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// menu.html</span></div><div class=\"line\">&lt;a ui-sref=<span class=\"string\">\"app.dishdetails(&#123;id:dish._id&#125;)\"</span>&gt; ... &lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// DishDetailController</span></div><div class=\"line\">.controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$stateParams'</span>,</div><div class=\"line\">\t<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $stateParams, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,<span class=\"number\">10</span>));</div><div class=\"line\">\t\t$scope.dish = dish;</div><div class=\"line\">\t&#125;</div><div class=\"line\">])</div></pre></td></tr></table></figure>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 3-1","date":"2016-09-02T11:46:10.000Z","_content":"## Single Page Applications\n\n### Angular Factory, Service and Dependency Injection\n\n#### Dependency Injection\n\nDependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다. \n\n마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.\n\n* Create dependency using new operator\n* Look up dependency using a global variable\n* Have dependency passed to it where needed \n\n위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.\n\n#### Angular and DI\n\nAngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.\n\nservices, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.\n\n또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.\n몇가지 예를 들어보자.\n\n```\n// 첫번째 방법은 array에 명시\nmodule.controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n\t\n}]);\n\n// 두번째 방법은 property 추가\nvar MenuController = funciton($scope, menuFactory) {\n\t\n};\nMenuController.$Inject = ['$scope', 'menuFactory'];\nmodule.controller('MenuController', MenuController);\n\n// 세번째 방법은 Implicit annotation\nmodule.controller('MenuController', function($scope, menuFactory) {\n\t\n});\n```\n\n\n#### Angular Factory and Service\n\nfactory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.\n\n#### Angular Services\n\nservice는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다. \n\n$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.\n\n#### Angular Factory\n\nfactory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.\n\n우선 factory 사용 예를 보자\n\n```\n// factory code\nangular.module('confusionApp')\n    .factory('menuFactory', function() {\n    \tvar menufac = {};\n    \tvar dishes = [ ... ];\n\n    \tmenufac.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tmenufac.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    \t// 객체를 리턴한다.\n    \treturn menufac;\n    });\n\n// usage\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);\n\n```\n\nservice 사용과 비교해보자\n\n```\n// service code\nangular.module('confusionApp')\n    .service('menuFactory', function() {\n    \t// 객체선언, 리턴이 필요없다. \n    \tvar dishes = [ ... ];\n\n    \tthis.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tthis.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    });\n\n// usage\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);\n\n```\n\nservice와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.\n\n#### exercise\n\napp.js\n\n모든 컨트롤러 코드는 controllers.js로 이동한다.\n\n```\n'use strict';\n\nangular.module('confusionApp', [])\n\n;\n```\n\ncontrollers.js\n\ncontroller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동\n\n```\n'use strict';\n\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory){\n\n        $scope.tab = 1;\n        $scope.filtText = '';\n        $scope.showDetails = false;\n\n        $scope.dishes = menuFactory.getDishes();\n\n        ...\n\n    }])\n\n    ...\n\n    .controller('DishDetailController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n        var dish = menuFactory.getDish(3);        \n        $scope.dish = dish;\n        \n    }])\n\n    ...\n\n    ;\n```\n\nservices.js\n\n데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)\n아래는 service를 사용한 예제임.\n그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용\n각 dish의 comment 속성에 리스트로 선언\n\n```\n'use strict';\n\nangular.module('confusionApp')\n\t\t.service('menuFactory', function() {\n\t        var dishes = [\n\t\t\t\t{\n\t\t\t\t\tname: 'Uthapizza',\n\t\t\t\t\timage: 'images/uthapizza.png',\n\t\t\t\t\tcategory: 'mains',\n\t\t\t\t\tlabel: 'Hot',\n\t\t\t\t\tprice: '4.99',\n\t\t\t\t\tdescription:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n\t\t\t\t\tcomment: 'aaaaaaa'\n\t\t\t\t},\n\n\t\t\t\t...\n\t\t\t];\n\n\t\t\tthis.getDishes = function() {\n\t\t\t\treturn dishes;\n\t\t\t};\n\n\t\t\tthis.getDish = function(index) {\n\t\t\t\treturn dishes[index];\n\t\t\t};\n\n\t\t});\n\n```\n\n### Angular Templates\n\nAngular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.\n\nAngular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:{{expression}}, Filter, Form controls 등이 대표적이다.\n\n#### ng-include directive\n\nexternal HTML 조각을 HTML 내에 포함하기 위해 directive다.\n사용방법은 간단하다. \n\n```\n<div ng-include=\"'menu.html'\"></div>\n<ng-include src=\"'menu.html'\"></ng-include>\n```\n\n두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.\n\n그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.\n\n#### exercise\n\nindex.html\n\nheader, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n<head>\n\n...\n\n</head>\n\n<body>\n    <header class=\"jumbotron\">\n\n    \t...\n\n    </header>\n\n    <ng-include src=\"'menu.html'\"></ng-include>\n    \n    <footer class=\"row-footer\">\n    \t\n    \t...\n\n    </footer>\n\n    ...\n\n</body>\n</html>\n```\n\nsingle page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.\n","source":"_posts/2016-09-02-frontend-javascript-framework-angularjs-week3-1.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 3-1\"\ncategories: programming\ndate:   2016-09-02 20:46:10 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n## Single Page Applications\n\n### Angular Factory, Service and Dependency Injection\n\n#### Dependency Injection\n\nDependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다. \n\n마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.\n\n* Create dependency using new operator\n* Look up dependency using a global variable\n* Have dependency passed to it where needed \n\n위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.\n\n#### Angular and DI\n\nAngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.\n\nservices, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.\n\n또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.\n몇가지 예를 들어보자.\n\n```\n// 첫번째 방법은 array에 명시\nmodule.controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n\t\n}]);\n\n// 두번째 방법은 property 추가\nvar MenuController = funciton($scope, menuFactory) {\n\t\n};\nMenuController.$Inject = ['$scope', 'menuFactory'];\nmodule.controller('MenuController', MenuController);\n\n// 세번째 방법은 Implicit annotation\nmodule.controller('MenuController', function($scope, menuFactory) {\n\t\n});\n```\n\n\n#### Angular Factory and Service\n\nfactory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.\n\n#### Angular Services\n\nservice는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다. \n\n$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.\n\n#### Angular Factory\n\nfactory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.\n\n우선 factory 사용 예를 보자\n\n```\n// factory code\nangular.module('confusionApp')\n    .factory('menuFactory', function() {\n    \tvar menufac = {};\n    \tvar dishes = [ ... ];\n\n    \tmenufac.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tmenufac.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    \t// 객체를 리턴한다.\n    \treturn menufac;\n    });\n\n// usage\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);\n\n```\n\nservice 사용과 비교해보자\n\n```\n// service code\nangular.module('confusionApp')\n    .service('menuFactory', function() {\n    \t// 객체선언, 리턴이 필요없다. \n    \tvar dishes = [ ... ];\n\n    \tthis.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tthis.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    });\n\n// usage\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);\n\n```\n\nservice와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.\n\n#### exercise\n\napp.js\n\n모든 컨트롤러 코드는 controllers.js로 이동한다.\n\n```\n'use strict';\n\nangular.module('confusionApp', [])\n\n;\n```\n\ncontrollers.js\n\ncontroller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동\n\n```\n'use strict';\n\nangular.module('confusionApp')\n    .controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory){\n\n        $scope.tab = 1;\n        $scope.filtText = '';\n        $scope.showDetails = false;\n\n        $scope.dishes = menuFactory.getDishes();\n\n        ...\n\n    }])\n\n    ...\n\n    .controller('DishDetailController', ['$scope', 'menuFactory', function($scope, menuFactory) {\n        var dish = menuFactory.getDish(3);        \n        $scope.dish = dish;\n        \n    }])\n\n    ...\n\n    ;\n```\n\nservices.js\n\n데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)\n아래는 service를 사용한 예제임.\n그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용\n각 dish의 comment 속성에 리스트로 선언\n\n```\n'use strict';\n\nangular.module('confusionApp')\n\t\t.service('menuFactory', function() {\n\t        var dishes = [\n\t\t\t\t{\n\t\t\t\t\tname: 'Uthapizza',\n\t\t\t\t\timage: 'images/uthapizza.png',\n\t\t\t\t\tcategory: 'mains',\n\t\t\t\t\tlabel: 'Hot',\n\t\t\t\t\tprice: '4.99',\n\t\t\t\t\tdescription:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',\n\t\t\t\t\tcomment: 'aaaaaaa'\n\t\t\t\t},\n\n\t\t\t\t...\n\t\t\t];\n\n\t\t\tthis.getDishes = function() {\n\t\t\t\treturn dishes;\n\t\t\t};\n\n\t\t\tthis.getDish = function(index) {\n\t\t\t\treturn dishes[index];\n\t\t\t};\n\n\t\t});\n\n```\n\n### Angular Templates\n\nAngular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.\n\nAngular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:{{expression}}, Filter, Form controls 등이 대표적이다.\n\n#### ng-include directive\n\nexternal HTML 조각을 HTML 내에 포함하기 위해 directive다.\n사용방법은 간단하다. \n\n```\n<div ng-include=\"'menu.html'\"></div>\n<ng-include src=\"'menu.html'\"></ng-include>\n```\n\n두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.\n\n그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.\n\n#### exercise\n\nindex.html\n\nheader, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"confusionApp\">\n<head>\n\n...\n\n</head>\n\n<body>\n    <header class=\"jumbotron\">\n\n    \t...\n\n    </header>\n\n    <ng-include src=\"'menu.html'\"></ng-include>\n    \n    <footer class=\"row-footer\">\n    \t\n    \t...\n\n    </footer>\n\n    ...\n\n</body>\n</html>\n```\n\nsingle page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.\n","slug":"2016-09-02-frontend-javascript-framework-angularjs-week3-1","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7o002bwxt4trut7i4s","content":"<h2 id=\"Single-Page-Applications\"><a href=\"#Single-Page-Applications\" class=\"headerlink\" title=\"Single Page Applications\"></a>Single Page Applications</h2><h3 id=\"Angular-Factory-Service-and-Dependency-Injection\"><a href=\"#Angular-Factory-Service-and-Dependency-Injection\" class=\"headerlink\" title=\"Angular Factory, Service and Dependency Injection\"></a>Angular Factory, Service and Dependency Injection</h3><h4 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h4><p>Dependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다.</p><p>마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.</p><ul><li>Create dependency using new operator</li><li>Look up dependency using a global variable</li><li>Have dependency passed to it where needed</li></ul><p>위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.</p><h4 id=\"Angular-and-DI\"><a href=\"#Angular-and-DI\" class=\"headerlink\" title=\"Angular and DI\"></a>Angular and DI</h4><p>AngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.</p><p>services, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.</p><p>또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.<br>몇가지 예를 들어보자.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 첫번째 방법은 array에 명시</span></div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 두번째 방법은 property 추가</span></div><div class=\"line\"><span class=\"keyword\">var</span> MenuController = funciton($scope, menuFactory) &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;;</div><div class=\"line\">MenuController.$Inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>];</div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, MenuController);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 세번째 방법은 Implicit annotation</span></div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><h4 id=\"Angular-Factory-and-Service\"><a href=\"#Angular-Factory-and-Service\" class=\"headerlink\" title=\"Angular Factory and Service\"></a>Angular Factory and Service</h4><p>factory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.</p><h4 id=\"Angular-Services\"><a href=\"#Angular-Services\" class=\"headerlink\" title=\"Angular Services\"></a>Angular Services</h4><p>service는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다.</p><p>$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.</p><h4 id=\"Angular-Factory\"><a href=\"#Angular-Factory\" class=\"headerlink\" title=\"Angular Factory\"></a>Angular Factory</h4><p>factory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.</p><p>우선 factory 사용 예를 보자</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// factory code</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .factory(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">var</span> menufac = &#123;&#125;;</div><div class=\"line\">    \t<span class=\"keyword\">var</span> dishes = [ ... ];</div><div class=\"line\"></div><div class=\"line\">    \tmenufac.getDishes = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">    \t&#125;;</div><div class=\"line\"></div><div class=\"line\">    \tmenufac.getDish = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(index)</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">    \t&#125;;</div><div class=\"line\">    \t<span class=\"comment\">// 객체를 리턴한다.</span></div><div class=\"line\">    \t<span class=\"keyword\">return</span> menufac;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// usage</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">    \t$scope.dishes = menuFactory.getDishes();</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure><p>service 사용과 비교해보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// service code</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .service(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">// 객체선언, 리턴이 필요없다. </span></div><div class=\"line\">    \t<span class=\"keyword\">var</span> dishes = [ ... ];</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">this</span>.getDishes = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">    \t&#125;;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">this</span>.getDish = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(index)</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">    \t&#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// usage</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">    \t$scope.dishes = menuFactory.getDishes();</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure><p>service와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.</p><h4 id=\"exercise\"><a href=\"#exercise\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>app.js</p><p>모든 컨트롤러 코드는 controllers.js로 이동한다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\"></div><div class=\"line\">;</div></pre></td></tr></table></figure><p>controllers.js</p><p>controller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, menuFactory</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        $scope.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        $scope.filtText = <span class=\"string\">''</span>;</div><div class=\"line\">        $scope.showDetails = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        $scope.dishes = menuFactory.getDishes();</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    &#125;])</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    .controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, menuFactory</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dish = menuFactory.getDish(<span class=\"number\">3</span>);        </div><div class=\"line\">        $scope.dish = dish;</div><div class=\"line\">        </div><div class=\"line\">    &#125;])</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    ;</div></pre></td></tr></table></figure><p>services.js</p><p>데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)<br>아래는 service를 사용한 예제임.<br>그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용<br>각 dish의 comment 속성에 리스트로 선언</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">\t\t.service(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> dishes = [</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">'Uthapizza'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">image</span>: <span class=\"string\">'images/uthapizza.png'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">category</span>: <span class=\"string\">'mains'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">label</span>: <span class=\"string\">'Hot'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">price</span>: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">description</span>:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">comment</span>: <span class=\"string\">'aaaaaaa'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t...</div><div class=\"line\">\t\t\t];</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.getDishes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.getDish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure><h3 id=\"Angular-Templates\"><a href=\"#Angular-Templates\" class=\"headerlink\" title=\"Angular Templates\"></a>Angular Templates</h3><p>Angular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.</p><p>Angular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:, Filter, Form controls 등이 대표적이다.</p><h4 id=\"ng-include-directive\"><a href=\"#ng-include-directive\" class=\"headerlink\" title=\"ng-include directive\"></a>ng-include directive</h4><p>external HTML 조각을 HTML 내에 포함하기 위해 directive다.<br>사용방법은 간단하다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> ng-<span class=\"built_in\">include</span>=<span class=\"string\">\"'menu.html'\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;ng-<span class=\"built_in\">include</span> src=<span class=\"string\">\"'menu.html'\"</span>&gt;&lt;/ng-<span class=\"built_in\">include</span>&gt;</div></pre></td></tr></table></figure><p>두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.</p><p>그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.</p><h4 id=\"exercise-1\"><a href=\"#exercise-1\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>index.html</p><p>header, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    \t...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-include</span> <span class=\"attr\">src</span>=<span class=\"string\">\"'menu.html'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-include</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row-footer\"</span>&gt;</span></div><div class=\"line\">    \t</div><div class=\"line\">    \t...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>single page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.</p>","excerpt":"","more":"<h2 id=\"Single-Page-Applications\"><a href=\"#Single-Page-Applications\" class=\"headerlink\" title=\"Single Page Applications\"></a>Single Page Applications</h2><h3 id=\"Angular-Factory-Service-and-Dependency-Injection\"><a href=\"#Angular-Factory-Service-and-Dependency-Injection\" class=\"headerlink\" title=\"Angular Factory, Service and Dependency Injection\"></a>Angular Factory, Service and Dependency Injection</h3><h4 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h4><p>Dependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다.</p><p>마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.</p><ul><li>Create dependency using new operator</li><li>Look up dependency using a global variable</li><li>Have dependency passed to it where needed</li></ul><p>위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.</p><h4 id=\"Angular-and-DI\"><a href=\"#Angular-and-DI\" class=\"headerlink\" title=\"Angular and DI\"></a>Angular and DI</h4><p>AngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.</p><p>services, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.</p><p>또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.<br>몇가지 예를 들어보자.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 첫번째 방법은 array에 명시</span></div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 두번째 방법은 property 추가</span></div><div class=\"line\"><span class=\"keyword\">var</span> MenuController = funciton($scope, menuFactory) &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;;</div><div class=\"line\">MenuController.$Inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>];</div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, MenuController);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 세번째 방법은 Implicit annotation</span></div><div class=\"line\">module.controller(<span class=\"string\">'MenuController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><h4 id=\"Angular-Factory-and-Service\"><a href=\"#Angular-Factory-and-Service\" class=\"headerlink\" title=\"Angular Factory and Service\"></a>Angular Factory and Service</h4><p>factory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.</p><h4 id=\"Angular-Services\"><a href=\"#Angular-Services\" class=\"headerlink\" title=\"Angular Services\"></a>Angular Services</h4><p>service는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다.</p><p>$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.</p><h4 id=\"Angular-Factory\"><a href=\"#Angular-Factory\" class=\"headerlink\" title=\"Angular Factory\"></a>Angular Factory</h4><p>factory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.</p><p>우선 factory 사용 예를 보자</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// factory code</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .factory(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">var</span> menufac = &#123;&#125;;</div><div class=\"line\">    \t<span class=\"keyword\">var</span> dishes = [ ... ];</div><div class=\"line\"></div><div class=\"line\">    \tmenufac.getDishes = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">    \t&#125;;</div><div class=\"line\"></div><div class=\"line\">    \tmenufac.getDish = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(index)</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">    \t&#125;;</div><div class=\"line\">    \t<span class=\"comment\">// 객체를 리턴한다.</span></div><div class=\"line\">    \t<span class=\"keyword\">return</span> menufac;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// usage</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">    \t$scope.dishes = menuFactory.getDishes();</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure><p>service 사용과 비교해보자</p><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// service code</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .service(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">// 객체선언, 리턴이 필요없다. </span></div><div class=\"line\">    \t<span class=\"keyword\">var</span> dishes = [ ... ];</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">this</span>.getDishes = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">    \t&#125;;</div><div class=\"line\"></div><div class=\"line\">    \t<span class=\"keyword\">this</span>.getDish = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(index)</span> </span>&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">    \t&#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// usage</span></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, menuFactory)</span> </span>&#123;</div><div class=\"line\">    \t$scope.dishes = menuFactory.getDishes();</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure><p>service와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.</p><h4 id=\"exercise\"><a href=\"#exercise\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>app.js</p><p>모든 컨트롤러 코드는 controllers.js로 이동한다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>, [])</div><div class=\"line\"></div><div class=\"line\">;</div></pre></td></tr></table></figure><p>controllers.js</p><p>controller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">    .controller(<span class=\"string\">'MenuController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, menuFactory</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        $scope.tab = <span class=\"number\">1</span>;</div><div class=\"line\">        $scope.filtText = <span class=\"string\">''</span>;</div><div class=\"line\">        $scope.showDetails = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        $scope.dishes = menuFactory.getDishes();</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">    &#125;])</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    .controller(<span class=\"string\">'DishDetailController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, menuFactory</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dish = menuFactory.getDish(<span class=\"number\">3</span>);        </div><div class=\"line\">        $scope.dish = dish;</div><div class=\"line\">        </div><div class=\"line\">    &#125;])</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    ;</div></pre></td></tr></table></figure><p>services.js</p><p>데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)<br>아래는 service를 사용한 예제임.<br>그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용<br>각 dish의 comment 속성에 리스트로 선언</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'confusionApp'</span>)</div><div class=\"line\">\t\t.service(<span class=\"string\">'menuFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> dishes = [</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">'Uthapizza'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">image</span>: <span class=\"string\">'images/uthapizza.png'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">category</span>: <span class=\"string\">'mains'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">label</span>: <span class=\"string\">'Hot'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">price</span>: <span class=\"string\">'4.99'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">description</span>:<span class=\"string\">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">comment</span>: <span class=\"string\">'aaaaaaa'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t...</div><div class=\"line\">\t\t\t];</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.getDishes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> dishes;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.getDish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> dishes[index];</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure><h3 id=\"Angular-Templates\"><a href=\"#Angular-Templates\" class=\"headerlink\" title=\"Angular Templates\"></a>Angular Templates</h3><p>Angular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.</p><p>Angular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:, Filter, Form controls 등이 대표적이다.</p><h4 id=\"ng-include-directive\"><a href=\"#ng-include-directive\" class=\"headerlink\" title=\"ng-include directive\"></a>ng-include directive</h4><p>external HTML 조각을 HTML 내에 포함하기 위해 directive다.<br>사용방법은 간단하다.</p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> ng-<span class=\"built_in\">include</span>=<span class=\"string\">\"'menu.html'\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;ng-<span class=\"built_in\">include</span> src=<span class=\"string\">\"'menu.html'\"</span>&gt;&lt;/ng-<span class=\"built_in\">include</span>&gt;</div></pre></td></tr></table></figure><p>두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.</p><p>그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.</p><h4 id=\"exercise-1\"><a href=\"#exercise-1\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>index.html</p><p>header, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"confusionApp\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    \t...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-include</span> <span class=\"attr\">src</span>=<span class=\"string\">\"'menu.html'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-include</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row-footer\"</span>&gt;</span></div><div class=\"line\">    \t</div><div class=\"line\">    \t...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>single page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.</p>"},{"layout":"post","comments":1,"title":"[coursera] AngularJS week 4","date":"2016-10-02T08:38:30.000Z","_content":"\n## Client-Server Communication and Angular Testing\n\n### Networking Essentials\n\n이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.\n요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).\n\nHTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.\n\nJSON 데이터 구조를 간단히 살펴보자\n자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.\n\n```\n{\"promotion\":\n\t[\n\t\t{\n\t\t\t\"id\": 0,\n\t\t\t\"name\": \"weekend buffet\",\n\t\t\t\"image\": \"images/buffet.png\",\n\t\t\t\"label\": \"New\",\n\t\t\t\"price\": \"19.99\",\n\t\t\t\"description\": \"asdjfkljaskdlfjas...\"\n\t\t}\n\t]\n}\n```\n\n### Client-Server Communication using $http\n\n#### Angular $http\n\n$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.\n\n#### Promise\n\n자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.\n\n```\n$http({method: 'GET', url:'/dishes'})\n\t.then(function() { ... }, function() { ... });\n```\n\nthen 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, 'success', 'error' 속성을 사용하는 것과 비슷하다.\n\n#### HTTP Response\n\n요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.\n\n* response.data : 메세지 바디를 포함하느 string / object\n* response.status : 상태 코드 (200, 400 등)\n* response.headers : 헤더정보\n* response.config : configuration object\n* response.statusText : response 상태 텍스트 값 \n\n#### ng-if directive\n\nhtml 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.\n\n```\n<div class=\"col-xs-12\" ng-if=\"!showMenu\">\n\t<h3>{{message}}</h3>\n</div>\n```\n\nshowMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.\n\n\n### Brief Representational State Transfer (REST)\n\n본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.\n\n* SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용 \n\n* REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.\n\nREST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다. \n\n#### REST의 기본 법칙\n\n* HTTP 메소드를 사용하며 (Use HTTP methods explicitly)\n* 상태를 저장하지 않는다 (Be stateless)\n* 리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)\n* 통신의 매개체로 XML, JSON 등이 사용된다.\n\nREST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 _Nouns(Resources)_, GET or POST 등의 HTTP 메소드인 _Verbs_, XML or JSON 등으로 표현하는 _Representaions_\n\n#### Resources\n\nREST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.\n\n```\nhttp://www.conFusion.food/dishes/\t\t\t# Retrieve all dishses\nhttp://www.conFusion.food/dishes/123\t\t# Retrieve information about the specific dish (id:123)\nhttp://www.conFusion.food/promotions/\nhttp://www.conFusion.food/leadership/\nhttp://www.conFusion.food/leadership/456\n```\n\n#### Verbs\n\nVerb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.\n\n* GET -> READ\n* POST -> CREATE\n* PUT -> UPDATE \n* DELETE -> DELETE\n\nGET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.\n\n#### Representaions\n\n표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다. \n\n#### Stateless\n\nREST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.\n\n\n### Clint-Server Communication using $resource\n\n#### Angular ngResource \n\nngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠...). angular core가 아니기 때문에 따로 설치해 줘야 한다. \n\n```\nbower install angular-resource -S\n```\n\nDI를 이용해서 ngResource를 사용할 수 있다.\n\n```\nangular.module('confusionApp', ['ui.router', 'ngResource'])\n```\n\n#### Angular $resource Service\n\n$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.\n\n```\n.service('menuFactory', ['$resouce', 'baseURL', function($resource, baseURL) {\n\t\n\t...\n\n\t$scope.dishes = $resouce(baseURL + \"dishes/:id\", null, {'update':{method:'PUT'}}).query();\n\t\n\tvar dish = $resource(baseURL + \"dishes/:id\", null, {'update':{method:'PUT'}}).get({id:0}, function() {\n\t\t\tdish.name = \"dovanut\";\n\t\t\tdish.$save();\n\t\t})\n\t...\n\n}])\n```\n\n$resource의 기본 action들은 다음과 있다.\n\n> {'get':{method:'GET'},\n> 'save':{method:'POST'},\n> 'query':{method:'GET', isArray:true},\n> 'remove':{method:'DELETE'},\n> 'delete':{method:'DELETE'}};\n\naction을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자\n\n```\n$resource(baseURL+\"dishes/:id\", null, {'update':{method:'PUT'}}).update({id:$scope.dish.id},$scope.dish);\n```\n\n\n### Angular Testing\n\nAngular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.\n\n#### Jasmine\n\nangularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 \"describe\" 함수를 이용하고, 개별테스트를 위해서 \"it\" 함수를 이용한다.\n\n다음의 예를 보자\n\n```\ndescribe('Controller:MenuController', function() {\n\tit('should create \"dishes\" with 2 dishes fetched from xhr', function() {\n\t\t// showMenu가 true이길 기대함\n\t\texpect(scope.showMenu).toBeTruthy();\n\t\t// dishes가 정의됨을 기대함\n\t\texpect(scope.dishes).toBeDefined();\n\t\t// dishes의 개수가 2개임을 기대함\n\t\texpect(scope.dishes.length).toBe(2);\n\t});\n});\n```\n\ndescribe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.\n\n#### Karma\n\n카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.\n\n#### angular-mocks\n\nngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.\n\n#### exercise\n\n우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.\n\n```\n# 자스민 코어 설치\nsudo npm install jasmine-core --save-dev\n\n# karma-jasmine 설치\nsudo npm install karma-jasmine --save-dev\n\n# 카르마, 클라이언트 설치\nsudo npm install karma --save-dev\nsudo npm install karma-cli -g\nsudo npm install karma-cli --save-dev\n\n# 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치\nsudo npm install phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev\n\n# angular mocks 설치\nbower install angular-mocks -S\n```\n\n/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.\n\n```\nmodule.exports = function(config) {\n\tconfig.set({\n\t\tbasePath: '../',\n\t\tframeworks: ['jasmine'],\n\t\t// list of files, 테스트하려는 파일 목록\n\t\tfiles: [\n\t\t\t'bower_components/angular/angular.js',\n\t\t\t'bower_components/angular-resource/angular-resource.js',\n\t\t\t'bower_components/angular-ui-router/release/angular-ui-router.js',\n\t\t\t'bower_components/angular-mocks/angular-mocks.js',\n\t\t\t'app/scripts/*.js',\n\t\t\t'test/unit/**/*.js'\n\t\t],\n\t\t// list of files to exclude, 테스트 제외 목록\n\t\texclude: [\n\t\t\t'test/protractor.conf.js', 'test/e2e/*.js'\n\t\t],\n\t\tpreprocessors: {\n\n\t\t},\n\t\t// test results reporter to use\n\t\t// possible values: 'dots', 'progress'\n\t\treporters: ['progress'],\n\t\tport: 9876,\n\t\t// colors in the output (reporters and logs)\n\t\tcolors: true,\n\t\t// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n\t\tlogLevel: config.LOG_INFO,\n\t\t// 파일 변경시 auto reload\n\t\tautoWatch: true,\n\t\t// browser, available browser launchers\n\t\tbrowsers: ['Chrome', 'PhantomJS', 'PhantomJS_custom'],\n\t\tcustomLaunchers: {\n\t\t\t'PhantomJS_custom': {\n\t\t\t\tbase: 'PhantomJS',\n\t\t\t\toptions: {\n\t\t\t\t\twindowName: 'my-window',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\twebSecurityEnabled: false\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tflags: ['--load-images=true'],\n\t\t\t\tdebug: true\n\t\t\t}\n\t\t},\n\t\tphantomjsLauncher: {\n\t\t\t// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함\n\t\t\texitOnResourceError: true\n\t\t},\n\t\t// Continuous Integration mode\n\t\t// if true, Karma captures browsers, runs the tests and exits\n\t\tsingleRun: false,\n\t\t// Concurrency level\n\t\tconcurrency: Infinity\n\n\t})\n}\n```\n\nconFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.\n","source":"_posts/2016-10-02-frontend-javascript-framework-angularjs-week4.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[coursera] AngularJS week 4\"\ncategories: programming\ndate:   2016-10-02 17:38:30 +0900\ntags:\n- angularjs\n- javascript\n- coursera\n---\n\n## Client-Server Communication and Angular Testing\n\n### Networking Essentials\n\n이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.\n요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).\n\nHTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.\n\nJSON 데이터 구조를 간단히 살펴보자\n자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.\n\n```\n{\"promotion\":\n\t[\n\t\t{\n\t\t\t\"id\": 0,\n\t\t\t\"name\": \"weekend buffet\",\n\t\t\t\"image\": \"images/buffet.png\",\n\t\t\t\"label\": \"New\",\n\t\t\t\"price\": \"19.99\",\n\t\t\t\"description\": \"asdjfkljaskdlfjas...\"\n\t\t}\n\t]\n}\n```\n\n### Client-Server Communication using $http\n\n#### Angular $http\n\n$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.\n\n#### Promise\n\n자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.\n\n```\n$http({method: 'GET', url:'/dishes'})\n\t.then(function() { ... }, function() { ... });\n```\n\nthen 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, 'success', 'error' 속성을 사용하는 것과 비슷하다.\n\n#### HTTP Response\n\n요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.\n\n* response.data : 메세지 바디를 포함하느 string / object\n* response.status : 상태 코드 (200, 400 등)\n* response.headers : 헤더정보\n* response.config : configuration object\n* response.statusText : response 상태 텍스트 값 \n\n#### ng-if directive\n\nhtml 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.\n\n```\n<div class=\"col-xs-12\" ng-if=\"!showMenu\">\n\t<h3>{{message}}</h3>\n</div>\n```\n\nshowMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.\n\n\n### Brief Representational State Transfer (REST)\n\n본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.\n\n* SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용 \n\n* REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.\n\nREST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다. \n\n#### REST의 기본 법칙\n\n* HTTP 메소드를 사용하며 (Use HTTP methods explicitly)\n* 상태를 저장하지 않는다 (Be stateless)\n* 리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)\n* 통신의 매개체로 XML, JSON 등이 사용된다.\n\nREST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 _Nouns(Resources)_, GET or POST 등의 HTTP 메소드인 _Verbs_, XML or JSON 등으로 표현하는 _Representaions_\n\n#### Resources\n\nREST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.\n\n```\nhttp://www.conFusion.food/dishes/\t\t\t# Retrieve all dishses\nhttp://www.conFusion.food/dishes/123\t\t# Retrieve information about the specific dish (id:123)\nhttp://www.conFusion.food/promotions/\nhttp://www.conFusion.food/leadership/\nhttp://www.conFusion.food/leadership/456\n```\n\n#### Verbs\n\nVerb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.\n\n* GET -> READ\n* POST -> CREATE\n* PUT -> UPDATE \n* DELETE -> DELETE\n\nGET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.\n\n#### Representaions\n\n표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다. \n\n#### Stateless\n\nREST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.\n\n\n### Clint-Server Communication using $resource\n\n#### Angular ngResource \n\nngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠...). angular core가 아니기 때문에 따로 설치해 줘야 한다. \n\n```\nbower install angular-resource -S\n```\n\nDI를 이용해서 ngResource를 사용할 수 있다.\n\n```\nangular.module('confusionApp', ['ui.router', 'ngResource'])\n```\n\n#### Angular $resource Service\n\n$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.\n\n```\n.service('menuFactory', ['$resouce', 'baseURL', function($resource, baseURL) {\n\t\n\t...\n\n\t$scope.dishes = $resouce(baseURL + \"dishes/:id\", null, {'update':{method:'PUT'}}).query();\n\t\n\tvar dish = $resource(baseURL + \"dishes/:id\", null, {'update':{method:'PUT'}}).get({id:0}, function() {\n\t\t\tdish.name = \"dovanut\";\n\t\t\tdish.$save();\n\t\t})\n\t...\n\n}])\n```\n\n$resource의 기본 action들은 다음과 있다.\n\n> {'get':{method:'GET'},\n> 'save':{method:'POST'},\n> 'query':{method:'GET', isArray:true},\n> 'remove':{method:'DELETE'},\n> 'delete':{method:'DELETE'}};\n\naction을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자\n\n```\n$resource(baseURL+\"dishes/:id\", null, {'update':{method:'PUT'}}).update({id:$scope.dish.id},$scope.dish);\n```\n\n\n### Angular Testing\n\nAngular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.\n\n#### Jasmine\n\nangularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 \"describe\" 함수를 이용하고, 개별테스트를 위해서 \"it\" 함수를 이용한다.\n\n다음의 예를 보자\n\n```\ndescribe('Controller:MenuController', function() {\n\tit('should create \"dishes\" with 2 dishes fetched from xhr', function() {\n\t\t// showMenu가 true이길 기대함\n\t\texpect(scope.showMenu).toBeTruthy();\n\t\t// dishes가 정의됨을 기대함\n\t\texpect(scope.dishes).toBeDefined();\n\t\t// dishes의 개수가 2개임을 기대함\n\t\texpect(scope.dishes.length).toBe(2);\n\t});\n});\n```\n\ndescribe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.\n\n#### Karma\n\n카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.\n\n#### angular-mocks\n\nngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.\n\n#### exercise\n\n우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.\n\n```\n# 자스민 코어 설치\nsudo npm install jasmine-core --save-dev\n\n# karma-jasmine 설치\nsudo npm install karma-jasmine --save-dev\n\n# 카르마, 클라이언트 설치\nsudo npm install karma --save-dev\nsudo npm install karma-cli -g\nsudo npm install karma-cli --save-dev\n\n# 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치\nsudo npm install phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev\n\n# angular mocks 설치\nbower install angular-mocks -S\n```\n\n/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.\n\n```\nmodule.exports = function(config) {\n\tconfig.set({\n\t\tbasePath: '../',\n\t\tframeworks: ['jasmine'],\n\t\t// list of files, 테스트하려는 파일 목록\n\t\tfiles: [\n\t\t\t'bower_components/angular/angular.js',\n\t\t\t'bower_components/angular-resource/angular-resource.js',\n\t\t\t'bower_components/angular-ui-router/release/angular-ui-router.js',\n\t\t\t'bower_components/angular-mocks/angular-mocks.js',\n\t\t\t'app/scripts/*.js',\n\t\t\t'test/unit/**/*.js'\n\t\t],\n\t\t// list of files to exclude, 테스트 제외 목록\n\t\texclude: [\n\t\t\t'test/protractor.conf.js', 'test/e2e/*.js'\n\t\t],\n\t\tpreprocessors: {\n\n\t\t},\n\t\t// test results reporter to use\n\t\t// possible values: 'dots', 'progress'\n\t\treporters: ['progress'],\n\t\tport: 9876,\n\t\t// colors in the output (reporters and logs)\n\t\tcolors: true,\n\t\t// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n\t\tlogLevel: config.LOG_INFO,\n\t\t// 파일 변경시 auto reload\n\t\tautoWatch: true,\n\t\t// browser, available browser launchers\n\t\tbrowsers: ['Chrome', 'PhantomJS', 'PhantomJS_custom'],\n\t\tcustomLaunchers: {\n\t\t\t'PhantomJS_custom': {\n\t\t\t\tbase: 'PhantomJS',\n\t\t\t\toptions: {\n\t\t\t\t\twindowName: 'my-window',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\twebSecurityEnabled: false\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tflags: ['--load-images=true'],\n\t\t\t\tdebug: true\n\t\t\t}\n\t\t},\n\t\tphantomjsLauncher: {\n\t\t\t// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함\n\t\t\texitOnResourceError: true\n\t\t},\n\t\t// Continuous Integration mode\n\t\t// if true, Karma captures browsers, runs the tests and exits\n\t\tsingleRun: false,\n\t\t// Concurrency level\n\t\tconcurrency: Infinity\n\n\t})\n}\n```\n\nconFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.\n","slug":"2016-10-02-frontend-javascript-framework-angularjs-week4","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7q002dwxt4un7dkex1","content":"<h2 id=\"Client-Server-Communication-and-Angular-Testing\"><a href=\"#Client-Server-Communication-and-Angular-Testing\" class=\"headerlink\" title=\"Client-Server Communication and Angular Testing\"></a>Client-Server Communication and Angular Testing</h2><h3 id=\"Networking-Essentials\"><a href=\"#Networking-Essentials\" class=\"headerlink\" title=\"Networking Essentials\"></a>Networking Essentials</h3><p>이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.<br>요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).</p><p>HTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.</p><p>JSON 데이터 구조를 간단히 살펴보자<br>자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"promotion\"</span>:</div><div class=\"line\">\t[</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"id\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"weekend buffet\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"image\"</span>: <span class=\"string\">\"images/buffet.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"label\"</span>: <span class=\"string\">\"New\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"price\"</span>: <span class=\"string\">\"19.99\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"asdjfkljaskdlfjas...\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Client-Server-Communication-using-http\"><a href=\"#Client-Server-Communication-using-http\" class=\"headerlink\" title=\"Client-Server Communication using $http\"></a>Client-Server Communication using $http</h3><h4 id=\"Angular-http\"><a href=\"#Angular-http\" class=\"headerlink\" title=\"Angular $http\"></a>Angular $http</h4><p>$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.</p><h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.</p><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http(&#123;method: <span class=\"string\">'GET'</span>, url:<span class=\"string\">'/dishes'</span>&#125;)</div><div class=\"line\">\t.<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123; ... &#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123; ... &#125;);</div></pre></td></tr></table></figure><p>then 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, ‘success’, ‘error’ 속성을 사용하는 것과 비슷하다.</p><h4 id=\"HTTP-Response\"><a href=\"#HTTP-Response\" class=\"headerlink\" title=\"HTTP Response\"></a>HTTP Response</h4><p>요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.</p><ul><li>response.data : 메세지 바디를 포함하느 string / object</li><li>response.status : 상태 코드 (200, 400 등)</li><li>response.headers : 헤더정보</li><li>response.config : configuration object</li><li>response.statusText : response 상태 텍스트 값</li></ul><h4 id=\"ng-if-directive\"><a href=\"#ng-if-directive\" class=\"headerlink\" title=\"ng-if directive\"></a>ng-if directive</h4><p>html 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"col-xs-12\"</span> ng-<span class=\"keyword\">if</span>=<span class=\"string\">\"!showMenu\"</span>&gt;</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure><p>showMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.</p><h3 id=\"Brief-Representational-State-Transfer-REST\"><a href=\"#Brief-Representational-State-Transfer-REST\" class=\"headerlink\" title=\"Brief Representational State Transfer (REST)\"></a>Brief Representational State Transfer (REST)</h3><p>본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.</p><ul><li><p>SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용</p></li><li><p>REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.</p></li></ul><p>REST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다.</p><h4 id=\"REST의-기본-법칙\"><a href=\"#REST의-기본-법칙\" class=\"headerlink\" title=\"REST의 기본 법칙\"></a>REST의 기본 법칙</h4><ul><li>HTTP 메소드를 사용하며 (Use HTTP methods explicitly)</li><li>상태를 저장하지 않는다 (Be stateless)</li><li>리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)</li><li>통신의 매개체로 XML, JSON 등이 사용된다.</li></ul><p>REST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 <em>Nouns(Resources)</em>, GET or POST 등의 HTTP 메소드인 <em>Verbs</em>, XML or JSON 등으로 표현하는 <em>Representaions</em></p><h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><p>REST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/dishes/</span>\t\t\t<span class=\"comment\"># Retrieve all dishses</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/dishes/</span><span class=\"number\">123</span>\t\t<span class=\"comment\"># Retrieve information about the specific dish (id:123)</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/promotions/</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/leadership/</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/leadership/</span><span class=\"number\">456</span></div></pre></td></tr></table></figure><h4 id=\"Verbs\"><a href=\"#Verbs\" class=\"headerlink\" title=\"Verbs\"></a>Verbs</h4><p>Verb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.</p><ul><li>GET -&gt; READ</li><li>POST -&gt; CREATE</li><li>PUT -&gt; UPDATE</li><li>DELETE -&gt; DELETE</li></ul><p>GET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.</p><h4 id=\"Representaions\"><a href=\"#Representaions\" class=\"headerlink\" title=\"Representaions\"></a>Representaions</h4><p>표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다.</p><h4 id=\"Stateless\"><a href=\"#Stateless\" class=\"headerlink\" title=\"Stateless\"></a>Stateless</h4><p>REST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.</p><h3 id=\"Clint-Server-Communication-using-resource\"><a href=\"#Clint-Server-Communication-using-resource\" class=\"headerlink\" title=\"Clint-Server Communication using $resource\"></a>Clint-Server Communication using $resource</h3><h4 id=\"Angular-ngResource\"><a href=\"#Angular-ngResource\" class=\"headerlink\" title=\"Angular ngResource\"></a>Angular ngResource</h4><p>ngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠…). angular core가 아니기 때문에 따로 설치해 줘야 한다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-resource -S</div></pre></td></tr></table></figure><p>DI를 이용해서 ngResource를 사용할 수 있다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.<span class=\"keyword\">module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ui.router'</span>, <span class=\"string\">'ngResource'</span>])</div></pre></td></tr></table></figure><h4 id=\"Angular-resource-Service\"><a href=\"#Angular-resource-Service\" class=\"headerlink\" title=\"Angular $resource Service\"></a>Angular $resource Service</h4><p>$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.service(<span class=\"string\">'menuFactory'</span>, [<span class=\"string\">'$resouce'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($resource, baseURL)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\t$scope.dishes = $resouce(baseURL + <span class=\"string\">\"dishes/:id\"</span>, <span class=\"keyword\">null</span>, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).query();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> dish = $resource(baseURL + <span class=\"string\">\"dishes/:id\"</span>, <span class=\"keyword\">null</span>, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).get(&#123;id:<span class=\"number\">0</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tdish.name = <span class=\"string\">\"dovanut\"</span>;</div><div class=\"line\">\t\t\tdish.$save();</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure><p>$resource의 기본 action들은 다음과 있다.</p><blockquote><p>{‘get’:{method:’GET’},<br>‘save’:{method:’POST’},<br>‘query’:{method:’GET’, isArray:true},<br>‘remove’:{method:’DELETE’},<br>‘delete’:{method:’DELETE’}};</p></blockquote><p>action을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$resource(baseURL+<span class=\"string\">\"dishes/:id\"</span>, null, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).<span class=\"keyword\">update</span>(&#123;id:$scope.dish.id&#125;,$scope.dish);</div></pre></td></tr></table></figure><h3 id=\"Angular-Testing\"><a href=\"#Angular-Testing\" class=\"headerlink\" title=\"Angular Testing\"></a>Angular Testing</h3><p>Angular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.</p><h4 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h4><p>angularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 “describe” 함수를 이용하고, 개별테스트를 위해서 “it” 함수를 이용한다.</p><p>다음의 예를 보자</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe('Controller<span class=\"symbol\">:MenuController</span>', function() &#123;</div><div class=\"line\">\tit('should create <span class=\"string\">\"dishes\"</span> with <span class=\"number\">2</span> dishes fetched from xhr', function() &#123;</div><div class=\"line\">\t\t// showMenu가 true이길 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.showMenu).toBeTruthy()<span class=\"comment\">;</span></div><div class=\"line\">\t\t// dishes가 정의됨을 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.dishes).toBeDefined()<span class=\"comment\">;</span></div><div class=\"line\">\t\t// dishes의 개수가 <span class=\"number\">2</span>개임을 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.dishes.length).toBe(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure><p>describe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.</p><h4 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h4><p>카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.</p><h4 id=\"angular-mocks\"><a href=\"#angular-mocks\" class=\"headerlink\" title=\"angular-mocks\"></a>angular-mocks</h4><p>ngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.</p><h4 id=\"exercise\"><a href=\"#exercise\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 자스민 코어 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span><span class=\"keyword\">jasmine-core </span>--save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># karma-jasmine 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-<span class=\"keyword\">jasmine </span>--save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 카르마, 클라이언트 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma --save-dev</div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-cli -g</div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-cli --save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># angular mocks 설치</span></div><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-mocks -S</div></pre></td></tr></table></figure><p>/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.</p><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(config)</span> &#123;</span></div><div class=\"line\">\tconfig.<span class=\"keyword\">set</span>(&#123;</div><div class=\"line\">\t\tbasePath: <span class=\"string\">'../'</span>,</div><div class=\"line\">\t\tframework<span class=\"variable\">s:</span> [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\">\t\t// <span class=\"keyword\">list</span> of <span class=\"keyword\">files</span>, 테스트하려는 파일 목록</div><div class=\"line\">\t\t<span class=\"keyword\">file</span><span class=\"variable\">s:</span> [</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular/angular.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-resource/angular-resource.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-ui-router/release/angular-ui-router.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-mocks/angular-mocks.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'app/scripts/*.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'test/unit/**/*.js'</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t// <span class=\"keyword\">list</span> of <span class=\"keyword\">files</span> <span class=\"keyword\">to</span> exclude, 테스트 제외 목록</div><div class=\"line\">\t\texclude: [</div><div class=\"line\">\t\t\t<span class=\"string\">'test/protractor.conf.js'</span>, <span class=\"string\">'test/e2e/*.js'</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\tpreprocessor<span class=\"variable\">s:</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t// test results reporter <span class=\"keyword\">to</span> use</div><div class=\"line\">\t\t// possible value<span class=\"variable\">s:</span> <span class=\"string\">'dots'</span>, <span class=\"string\">'progress'</span></div><div class=\"line\">\t\treporter<span class=\"variable\">s:</span> [<span class=\"string\">'progress'</span>],</div><div class=\"line\">\t\tpor<span class=\"variable\">t:</span> <span class=\"number\">9876</span>,</div><div class=\"line\">\t\t// colors in the output (reporters <span class=\"built_in\">and</span> logs)</div><div class=\"line\">\t\tcolor<span class=\"variable\">s:</span> true,</div><div class=\"line\">\t\t// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</div><div class=\"line\">\t\tlogLeve<span class=\"variable\">l:</span> config.LOG_INFO,</div><div class=\"line\">\t\t// 파일 변경시 auto reload</div><div class=\"line\">\t\tautoWatch: true,</div><div class=\"line\">\t\t// browser, available browser launchers</div><div class=\"line\">\t\tbrowser<span class=\"variable\">s:</span> [<span class=\"string\">'Chrome'</span>, <span class=\"string\">'PhantomJS'</span>, <span class=\"string\">'PhantomJS_custom'</span>],</div><div class=\"line\">\t\tcustomLauncher<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">'PhantomJS_custom'</span>: &#123;</div><div class=\"line\">\t\t\t\tbase: <span class=\"string\">'PhantomJS'</span>,</div><div class=\"line\">\t\t\t\toption<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t\t\twindowName: <span class=\"string\">'my-window'</span>,</div><div class=\"line\">\t\t\t\t\tsetting<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t\t\t\twebSecurityEnabled: false</div><div class=\"line\">\t\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\tflag<span class=\"variable\">s:</span> [<span class=\"string\">'--load-images=true'</span>],</div><div class=\"line\">\t\t\t\tdebu<span class=\"variable\">g:</span> true</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tphantomjsLauncher: &#123;</div><div class=\"line\">\t\t\t// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함</div><div class=\"line\">\t\t\texitOnResourceError: true</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t// Continuous Integration <span class=\"keyword\">mode</span></div><div class=\"line\">\t\t// <span class=\"keyword\">if</span> true, Karma captures browsers, runs the tests <span class=\"built_in\">and</span> exits</div><div class=\"line\">\t\tsingleRun: false,</div><div class=\"line\">\t\t// Concurrency level</div><div class=\"line\">\t\tconcurrency: Infinity</div><div class=\"line\"></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>conFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.</p>","excerpt":"","more":"<h2 id=\"Client-Server-Communication-and-Angular-Testing\"><a href=\"#Client-Server-Communication-and-Angular-Testing\" class=\"headerlink\" title=\"Client-Server Communication and Angular Testing\"></a>Client-Server Communication and Angular Testing</h2><h3 id=\"Networking-Essentials\"><a href=\"#Networking-Essentials\" class=\"headerlink\" title=\"Networking Essentials\"></a>Networking Essentials</h3><p>이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.<br>요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).</p><p>HTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.</p><p>JSON 데이터 구조를 간단히 살펴보자<br>자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"promotion\"</span>:</div><div class=\"line\">\t[</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"id\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"weekend buffet\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"image\"</span>: <span class=\"string\">\"images/buffet.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"label\"</span>: <span class=\"string\">\"New\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"price\"</span>: <span class=\"string\">\"19.99\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"asdjfkljaskdlfjas...\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Client-Server-Communication-using-http\"><a href=\"#Client-Server-Communication-using-http\" class=\"headerlink\" title=\"Client-Server Communication using $http\"></a>Client-Server Communication using $http</h3><h4 id=\"Angular-http\"><a href=\"#Angular-http\" class=\"headerlink\" title=\"Angular $http\"></a>Angular $http</h4><p>$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.</p><h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.</p><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http(&#123;method: <span class=\"string\">'GET'</span>, url:<span class=\"string\">'/dishes'</span>&#125;)</div><div class=\"line\">\t.<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123; ... &#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123; ... &#125;);</div></pre></td></tr></table></figure><p>then 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, ‘success’, ‘error’ 속성을 사용하는 것과 비슷하다.</p><h4 id=\"HTTP-Response\"><a href=\"#HTTP-Response\" class=\"headerlink\" title=\"HTTP Response\"></a>HTTP Response</h4><p>요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.</p><ul><li>response.data : 메세지 바디를 포함하느 string / object</li><li>response.status : 상태 코드 (200, 400 등)</li><li>response.headers : 헤더정보</li><li>response.config : configuration object</li><li>response.statusText : response 상태 텍스트 값</li></ul><h4 id=\"ng-if-directive\"><a href=\"#ng-if-directive\" class=\"headerlink\" title=\"ng-if directive\"></a>ng-if directive</h4><p>html 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"col-xs-12\"</span> ng-<span class=\"keyword\">if</span>=<span class=\"string\">\"!showMenu\"</span>&gt;</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure><p>showMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.</p><h3 id=\"Brief-Representational-State-Transfer-REST\"><a href=\"#Brief-Representational-State-Transfer-REST\" class=\"headerlink\" title=\"Brief Representational State Transfer (REST)\"></a>Brief Representational State Transfer (REST)</h3><p>본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.</p><ul><li><p>SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용</p></li><li><p>REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.</p></li></ul><p>REST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다.</p><h4 id=\"REST의-기본-법칙\"><a href=\"#REST의-기본-법칙\" class=\"headerlink\" title=\"REST의 기본 법칙\"></a>REST의 기본 법칙</h4><ul><li>HTTP 메소드를 사용하며 (Use HTTP methods explicitly)</li><li>상태를 저장하지 않는다 (Be stateless)</li><li>리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)</li><li>통신의 매개체로 XML, JSON 등이 사용된다.</li></ul><p>REST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 <em>Nouns(Resources)</em>, GET or POST 등의 HTTP 메소드인 <em>Verbs</em>, XML or JSON 등으로 표현하는 <em>Representaions</em></p><h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><p>REST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/dishes/</span>\t\t\t<span class=\"comment\"># Retrieve all dishses</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/dishes/</span><span class=\"number\">123</span>\t\t<span class=\"comment\"># Retrieve information about the specific dish (id:123)</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/promotions/</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/leadership/</span></div><div class=\"line\">http:<span class=\"regexp\">//</span>www.conFusion.food<span class=\"regexp\">/leadership/</span><span class=\"number\">456</span></div></pre></td></tr></table></figure><h4 id=\"Verbs\"><a href=\"#Verbs\" class=\"headerlink\" title=\"Verbs\"></a>Verbs</h4><p>Verb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.</p><ul><li>GET -&gt; READ</li><li>POST -&gt; CREATE</li><li>PUT -&gt; UPDATE</li><li>DELETE -&gt; DELETE</li></ul><p>GET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.</p><h4 id=\"Representaions\"><a href=\"#Representaions\" class=\"headerlink\" title=\"Representaions\"></a>Representaions</h4><p>표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다.</p><h4 id=\"Stateless\"><a href=\"#Stateless\" class=\"headerlink\" title=\"Stateless\"></a>Stateless</h4><p>REST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.</p><h3 id=\"Clint-Server-Communication-using-resource\"><a href=\"#Clint-Server-Communication-using-resource\" class=\"headerlink\" title=\"Clint-Server Communication using $resource\"></a>Clint-Server Communication using $resource</h3><h4 id=\"Angular-ngResource\"><a href=\"#Angular-ngResource\" class=\"headerlink\" title=\"Angular ngResource\"></a>Angular ngResource</h4><p>ngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠…). angular core가 아니기 때문에 따로 설치해 줘야 한다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-resource -S</div></pre></td></tr></table></figure><p>DI를 이용해서 ngResource를 사용할 수 있다.</p><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.<span class=\"keyword\">module</span>(<span class=\"string\">'confusionApp'</span>, [<span class=\"string\">'ui.router'</span>, <span class=\"string\">'ngResource'</span>])</div></pre></td></tr></table></figure><h4 id=\"Angular-resource-Service\"><a href=\"#Angular-resource-Service\" class=\"headerlink\" title=\"Angular $resource Service\"></a>Angular $resource Service</h4><p>$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.service(<span class=\"string\">'menuFactory'</span>, [<span class=\"string\">'$resouce'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($resource, baseURL)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\t$scope.dishes = $resouce(baseURL + <span class=\"string\">\"dishes/:id\"</span>, <span class=\"keyword\">null</span>, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).query();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> dish = $resource(baseURL + <span class=\"string\">\"dishes/:id\"</span>, <span class=\"keyword\">null</span>, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).get(&#123;id:<span class=\"number\">0</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tdish.name = <span class=\"string\">\"dovanut\"</span>;</div><div class=\"line\">\t\t\tdish.$save();</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure><p>$resource의 기본 action들은 다음과 있다.</p><blockquote><p>{‘get’:{method:’GET’},<br>‘save’:{method:’POST’},<br>‘query’:{method:’GET’, isArray:true},<br>‘remove’:{method:’DELETE’},<br>‘delete’:{method:’DELETE’}};</p></blockquote><p>action을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$resource(baseURL+<span class=\"string\">\"dishes/:id\"</span>, null, &#123;<span class=\"string\">'update'</span>:&#123;method:<span class=\"string\">'PUT'</span>&#125;&#125;).<span class=\"keyword\">update</span>(&#123;id:$scope.dish.id&#125;,$scope.dish);</div></pre></td></tr></table></figure><h3 id=\"Angular-Testing\"><a href=\"#Angular-Testing\" class=\"headerlink\" title=\"Angular Testing\"></a>Angular Testing</h3><p>Angular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.</p><h4 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h4><p>angularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 “describe” 함수를 이용하고, 개별테스트를 위해서 “it” 함수를 이용한다.</p><p>다음의 예를 보자</p><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe('Controller<span class=\"symbol\">:MenuController</span>', function() &#123;</div><div class=\"line\">\tit('should create <span class=\"string\">\"dishes\"</span> with <span class=\"number\">2</span> dishes fetched from xhr', function() &#123;</div><div class=\"line\">\t\t// showMenu가 true이길 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.showMenu).toBeTruthy()<span class=\"comment\">;</span></div><div class=\"line\">\t\t// dishes가 정의됨을 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.dishes).toBeDefined()<span class=\"comment\">;</span></div><div class=\"line\">\t\t// dishes의 개수가 <span class=\"number\">2</span>개임을 기대함</div><div class=\"line\">\t\texpect(<span class=\"name\">scope</span>.dishes.length).toBe(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure><p>describe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.</p><h4 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h4><p>카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.</p><h4 id=\"angular-mocks\"><a href=\"#angular-mocks\" class=\"headerlink\" title=\"angular-mocks\"></a>angular-mocks</h4><p>ngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.</p><h4 id=\"exercise\"><a href=\"#exercise\" class=\"headerlink\" title=\"exercise\"></a>exercise</h4><p>우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 자스민 코어 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span><span class=\"keyword\">jasmine-core </span>--save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># karma-jasmine 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-<span class=\"keyword\">jasmine </span>--save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 카르마, 클라이언트 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma --save-dev</div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-cli -g</div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>karma-cli --save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치</span></div><div class=\"line\">sudo npm <span class=\"keyword\">install </span>phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># angular mocks 설치</span></div><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-mocks -S</div></pre></td></tr></table></figure><p>/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.</p><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(config)</span> &#123;</span></div><div class=\"line\">\tconfig.<span class=\"keyword\">set</span>(&#123;</div><div class=\"line\">\t\tbasePath: <span class=\"string\">'../'</span>,</div><div class=\"line\">\t\tframework<span class=\"variable\">s:</span> [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\">\t\t// <span class=\"keyword\">list</span> of <span class=\"keyword\">files</span>, 테스트하려는 파일 목록</div><div class=\"line\">\t\t<span class=\"keyword\">file</span><span class=\"variable\">s:</span> [</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular/angular.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-resource/angular-resource.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-ui-router/release/angular-ui-router.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'bower_components/angular-mocks/angular-mocks.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'app/scripts/*.js'</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">'test/unit/**/*.js'</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t// <span class=\"keyword\">list</span> of <span class=\"keyword\">files</span> <span class=\"keyword\">to</span> exclude, 테스트 제외 목록</div><div class=\"line\">\t\texclude: [</div><div class=\"line\">\t\t\t<span class=\"string\">'test/protractor.conf.js'</span>, <span class=\"string\">'test/e2e/*.js'</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\tpreprocessor<span class=\"variable\">s:</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t// test results reporter <span class=\"keyword\">to</span> use</div><div class=\"line\">\t\t// possible value<span class=\"variable\">s:</span> <span class=\"string\">'dots'</span>, <span class=\"string\">'progress'</span></div><div class=\"line\">\t\treporter<span class=\"variable\">s:</span> [<span class=\"string\">'progress'</span>],</div><div class=\"line\">\t\tpor<span class=\"variable\">t:</span> <span class=\"number\">9876</span>,</div><div class=\"line\">\t\t// colors in the output (reporters <span class=\"built_in\">and</span> logs)</div><div class=\"line\">\t\tcolor<span class=\"variable\">s:</span> true,</div><div class=\"line\">\t\t// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</div><div class=\"line\">\t\tlogLeve<span class=\"variable\">l:</span> config.LOG_INFO,</div><div class=\"line\">\t\t// 파일 변경시 auto reload</div><div class=\"line\">\t\tautoWatch: true,</div><div class=\"line\">\t\t// browser, available browser launchers</div><div class=\"line\">\t\tbrowser<span class=\"variable\">s:</span> [<span class=\"string\">'Chrome'</span>, <span class=\"string\">'PhantomJS'</span>, <span class=\"string\">'PhantomJS_custom'</span>],</div><div class=\"line\">\t\tcustomLauncher<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">'PhantomJS_custom'</span>: &#123;</div><div class=\"line\">\t\t\t\tbase: <span class=\"string\">'PhantomJS'</span>,</div><div class=\"line\">\t\t\t\toption<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t\t\twindowName: <span class=\"string\">'my-window'</span>,</div><div class=\"line\">\t\t\t\t\tsetting<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\t\t\t\t\t\twebSecurityEnabled: false</div><div class=\"line\">\t\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\tflag<span class=\"variable\">s:</span> [<span class=\"string\">'--load-images=true'</span>],</div><div class=\"line\">\t\t\t\tdebu<span class=\"variable\">g:</span> true</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tphantomjsLauncher: &#123;</div><div class=\"line\">\t\t\t// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함</div><div class=\"line\">\t\t\texitOnResourceError: true</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t// Continuous Integration <span class=\"keyword\">mode</span></div><div class=\"line\">\t\t// <span class=\"keyword\">if</span> true, Karma captures browsers, runs the tests <span class=\"built_in\">and</span> exits</div><div class=\"line\">\t\tsingleRun: false,</div><div class=\"line\">\t\t// Concurrency level</div><div class=\"line\">\t\tconcurrency: Infinity</div><div class=\"line\"></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>conFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.</p>"},{"layout":"post","comments":1,"title":"[ionic] ionic 개발에 필요한 것들","date":"2016-11-15T16:14:00.000Z","_content":"## ionic 개발에 필요한 것들\n\n기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다. \n\n참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.\n\n\n#### JAVA\n\n* http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n* 안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.\n* JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.\n\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n#### Android SDK\n\n* Android 에뮬레이터 설치, 디버깅 등에 필요하다.\n* Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.\n* ANDROID_HOME 경로도 지정해준다.\n\n```\nexport ANDROID_HOME=/Projects/Libraries/adt-bundle-mac-x86_64/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n#### Node.js\n\n* 우선 설치부터, https://nodejs.org/en/download/ 사이트에서 원하는 os, version을 선택하여 설치한다.\n* 또는 맥 사용자라면, 아래 명령어로 설치한다.\n\n```\nbrew install node\n```\n\n* NODE_HOME도 경로설정 해준다.\n\n```\nexport NODE_HOME=p/Projects/Libraries/node/node-v0.12.7-darwin-x64\nexport NODE_PATH=$NODE_HOME/lib/node_modules\nexport PATH=$PATH:$NODE_HOME/bin:$NODE_PATH\n```\n\n#### cordova\n\n* npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)\n* ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).\n\n#### gulp\n\n* npm install -g gulp\n* ionic 빌드 시스템\n\n#### bower\n\n* npm install -g bower\n* ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.\n\n#### ios-sim\n\n* npm install -g ios-sim\n* 폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지\n* 다음 명령어로 타겟을 지정해줄수 있다.\n\n```\n# 가능한 device 확인\nios-sim showdevices\n\n# 타겟 지정 실행\nionic emualte ios --target=\"iPhone-5s\"\n```\n\n#### ios-deploy\n\n* npm imstall -g ios-deploy\n* PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지\n* ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).\n\n#### ionic\n\n* npm install -g ionic\n* 드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.\n* 몇가지 명령어를 살펴보자\n\n```\n# sidemenu 형식의 프로젝트 생성\nionic start testApp sidemenu\n\n# ionic 서버 실행\nionic serve \n\n# ionic ios 앱 빌드\nionic build\n\n# ios 에뮬레이터 실행\nionic emulate ios (--target=\"iPhone-6s\")\n\n# ios real 디바이스에서 실행\nionic run ios\n\n# android 추가\nionic platform add android\n```\n\n\n\n참고자료 : http://blog.saltfactory.net/ionic/start-ionic-edge-book.html\n\n\n","source":"_posts/2016-11-16-ionic-install.markdown","raw":"---\nlayout: post\ncomments: true\ntitle:  \"[ionic] ionic 개발에 필요한 것들\"\ncategories: programming\ndate:   2016-11-16 01:14:00 +0900\ntags:\n- ionic\n- javascript\n- 모바일앱\n---\n## ionic 개발에 필요한 것들\n\n기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다. \n\n참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.\n\n\n#### JAVA\n\n* http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n* 안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.\n* JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.\n\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n#### Android SDK\n\n* Android 에뮬레이터 설치, 디버깅 등에 필요하다.\n* Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.\n* ANDROID_HOME 경로도 지정해준다.\n\n```\nexport ANDROID_HOME=/Projects/Libraries/adt-bundle-mac-x86_64/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n#### Node.js\n\n* 우선 설치부터, https://nodejs.org/en/download/ 사이트에서 원하는 os, version을 선택하여 설치한다.\n* 또는 맥 사용자라면, 아래 명령어로 설치한다.\n\n```\nbrew install node\n```\n\n* NODE_HOME도 경로설정 해준다.\n\n```\nexport NODE_HOME=p/Projects/Libraries/node/node-v0.12.7-darwin-x64\nexport NODE_PATH=$NODE_HOME/lib/node_modules\nexport PATH=$PATH:$NODE_HOME/bin:$NODE_PATH\n```\n\n#### cordova\n\n* npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)\n* ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).\n\n#### gulp\n\n* npm install -g gulp\n* ionic 빌드 시스템\n\n#### bower\n\n* npm install -g bower\n* ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.\n\n#### ios-sim\n\n* npm install -g ios-sim\n* 폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지\n* 다음 명령어로 타겟을 지정해줄수 있다.\n\n```\n# 가능한 device 확인\nios-sim showdevices\n\n# 타겟 지정 실행\nionic emualte ios --target=\"iPhone-5s\"\n```\n\n#### ios-deploy\n\n* npm imstall -g ios-deploy\n* PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지\n* ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).\n\n#### ionic\n\n* npm install -g ionic\n* 드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.\n* 몇가지 명령어를 살펴보자\n\n```\n# sidemenu 형식의 프로젝트 생성\nionic start testApp sidemenu\n\n# ionic 서버 실행\nionic serve \n\n# ionic ios 앱 빌드\nionic build\n\n# ios 에뮬레이터 실행\nionic emulate ios (--target=\"iPhone-6s\")\n\n# ios real 디바이스에서 실행\nionic run ios\n\n# android 추가\nionic platform add android\n```\n\n\n\n참고자료 : http://blog.saltfactory.net/ionic/start-ionic-edge-book.html\n\n\n","slug":"2016-11-16-ionic-install","published":1,"updated":"2017-04-06T01:14:11.000Z","photos":[],"link":"","_id":"cj1eebv7s002fwxt4c4ngmjx0","content":"<h2 id=\"ionic-개발에-필요한-것들\"><a href=\"#ionic-개발에-필요한-것들\" class=\"headerlink\" title=\"ionic 개발에 필요한 것들\"></a>ionic 개발에 필요한 것들</h2><p>기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다.</p><p>참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.</p><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><ul><li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.</li><li>JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.</li></ul><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1.<span class=\"number\">8.0</span>_25.jdk<span class=\"regexp\">/Contents/</span>Home</div><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span><span class=\"regexp\">/bin</span></div></pre></td></tr></table></figure><h4 id=\"Android-SDK\"><a href=\"#Android-SDK\" class=\"headerlink\" title=\"Android SDK\"></a>Android SDK</h4><ul><li>Android 에뮬레이터 설치, 디버깅 등에 필요하다.</li><li>Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.</li><li>ANDROID_HOME 경로도 지정해준다.</li></ul><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=<span class=\"regexp\">/Projects/</span>Libraries<span class=\"regexp\">/adt-bundle-mac-x86_64/</span>sdk</div><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span><span class=\"regexp\">/tools:$ANDROID_HOME/</span>platform-tools</div></pre></td></tr></table></figure><h4 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h4><ul><li>우선 설치부터, <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/download/</a> 사이트에서 원하는 os, version을 선택하여 설치한다.</li><li>또는 맥 사용자라면, 아래 명령어로 설치한다.</li></ul><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install <span class=\"keyword\">node</span><span class=\"title\"></span></div></pre></td></tr></table></figure><ul><li>NODE_HOME도 경로설정 해준다.</li></ul><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NODE_HOME=p/Projects/Libraries/node/node-v0.<span class=\"number\">12.7</span>-darwin-x64</div><div class=\"line\">export NODE_PATH=$NODE_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">node_modules</span></span></div><div class=\"line\">export PATH=$<span class=\"symbol\">PATH:</span>$NODE_HOME/<span class=\"symbol\">bin:</span>$NODE_PATH</div></pre></td></tr></table></figure><h4 id=\"cordova\"><a href=\"#cordova\" class=\"headerlink\" title=\"cordova\"></a>cordova</h4><ul><li>npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)</li><li>ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).</li></ul><h4 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h4><ul><li>npm install -g gulp</li><li>ionic 빌드 시스템</li></ul><h4 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h4><ul><li>npm install -g bower</li><li>ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.</li></ul><h4 id=\"ios-sim\"><a href=\"#ios-sim\" class=\"headerlink\" title=\"ios-sim\"></a>ios-sim</h4><ul><li>npm install -g ios-sim</li><li>폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지</li><li>다음 명령어로 타겟을 지정해줄수 있다.</li></ul><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 가능한 device 확인</span></div><div class=\"line\">ios-sim showdevices</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 타겟 지정 실행</span></div><div class=\"line\">ionic emualte ios --target=<span class=\"string\">\"iPhone-5s\"</span></div></pre></td></tr></table></figure><h4 id=\"ios-deploy\"><a href=\"#ios-deploy\" class=\"headerlink\" title=\"ios-deploy\"></a>ios-deploy</h4><ul><li>npm imstall -g ios-deploy</li><li>PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지</li><li>ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).</li></ul><h4 id=\"ionic\"><a href=\"#ionic\" class=\"headerlink\" title=\"ionic\"></a>ionic</h4><ul><li>npm install -g ionic</li><li>드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.</li><li>몇가지 명령어를 살펴보자</li></ul><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># sidemenu 형식의 프로젝트 생성</span></div><div class=\"line\">ionic start testApp sidemenu</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ionic 서버 실행</span></div><div class=\"line\">ionic serve </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ionic ios 앱 빌드</span></div><div class=\"line\">ionic build</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ios 에뮬레이터 실행</span></div><div class=\"line\">ionic emulate ios (--target=<span class=\"string\">\"iPhone-6s\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ios real 디바이스에서 실행</span></div><div class=\"line\">ionic run ios</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># android 추가</span></div><div class=\"line\">ionic platform add android</div></pre></td></tr></table></figure><p>참고자료 : <a href=\"http://blog.saltfactory.net/ionic/start-ionic-edge-book.html\" target=\"_blank\" rel=\"external\">http://blog.saltfactory.net/ionic/start-ionic-edge-book.html</a></p>","excerpt":"","more":"<h2 id=\"ionic-개발에-필요한-것들\"><a href=\"#ionic-개발에-필요한-것들\" class=\"headerlink\" title=\"ionic 개발에 필요한 것들\"></a>ionic 개발에 필요한 것들</h2><p>기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다.</p><p>참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.</p><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><ul><li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.</li><li>JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.</li></ul><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1.<span class=\"number\">8.0</span>_25.jdk<span class=\"regexp\">/Contents/</span>Home</div><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span><span class=\"regexp\">/bin</span></div></pre></td></tr></table></figure><h4 id=\"Android-SDK\"><a href=\"#Android-SDK\" class=\"headerlink\" title=\"Android SDK\"></a>Android SDK</h4><ul><li>Android 에뮬레이터 설치, 디버깅 등에 필요하다.</li><li>Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.</li><li>ANDROID_HOME 경로도 지정해준다.</li></ul><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=<span class=\"regexp\">/Projects/</span>Libraries<span class=\"regexp\">/adt-bundle-mac-x86_64/</span>sdk</div><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$ANDROID_HOME</span><span class=\"regexp\">/tools:$ANDROID_HOME/</span>platform-tools</div></pre></td></tr></table></figure><h4 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h4><ul><li>우선 설치부터, <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a> 사이트에서 원하는 os, version을 선택하여 설치한다.</li><li>또는 맥 사용자라면, 아래 명령어로 설치한다.</li></ul><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install <span class=\"keyword\">node</span><span class=\"title\"></span></div></pre></td></tr></table></figure><ul><li>NODE_HOME도 경로설정 해준다.</li></ul><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NODE_HOME=p/Projects/Libraries/node/node-v0.<span class=\"number\">12.7</span>-darwin-x64</div><div class=\"line\">export NODE_PATH=$NODE_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">node_modules</span></span></div><div class=\"line\">export PATH=$<span class=\"symbol\">PATH:</span>$NODE_HOME/<span class=\"symbol\">bin:</span>$NODE_PATH</div></pre></td></tr></table></figure><h4 id=\"cordova\"><a href=\"#cordova\" class=\"headerlink\" title=\"cordova\"></a>cordova</h4><ul><li>npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)</li><li>ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).</li></ul><h4 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h4><ul><li>npm install -g gulp</li><li>ionic 빌드 시스템</li></ul><h4 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h4><ul><li>npm install -g bower</li><li>ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.</li></ul><h4 id=\"ios-sim\"><a href=\"#ios-sim\" class=\"headerlink\" title=\"ios-sim\"></a>ios-sim</h4><ul><li>npm install -g ios-sim</li><li>폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지</li><li>다음 명령어로 타겟을 지정해줄수 있다.</li></ul><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 가능한 device 확인</span></div><div class=\"line\">ios-sim showdevices</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 타겟 지정 실행</span></div><div class=\"line\">ionic emualte ios --target=<span class=\"string\">\"iPhone-5s\"</span></div></pre></td></tr></table></figure><h4 id=\"ios-deploy\"><a href=\"#ios-deploy\" class=\"headerlink\" title=\"ios-deploy\"></a>ios-deploy</h4><ul><li>npm imstall -g ios-deploy</li><li>PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지</li><li>ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).</li></ul><h4 id=\"ionic\"><a href=\"#ionic\" class=\"headerlink\" title=\"ionic\"></a>ionic</h4><ul><li>npm install -g ionic</li><li>드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.</li><li>몇가지 명령어를 살펴보자</li></ul><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># sidemenu 형식의 프로젝트 생성</span></div><div class=\"line\">ionic start testApp sidemenu</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ionic 서버 실행</span></div><div class=\"line\">ionic serve </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ionic ios 앱 빌드</span></div><div class=\"line\">ionic build</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ios 에뮬레이터 실행</span></div><div class=\"line\">ionic emulate ios (--target=<span class=\"string\">\"iPhone-6s\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># ios real 디바이스에서 실행</span></div><div class=\"line\">ionic run ios</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># android 추가</span></div><div class=\"line\">ionic platform add android</div></pre></td></tr></table></figure><p>참고자료 : <a href=\"http://blog.saltfactory.net/ionic/start-ionic-edge-book.html\">http://blog.saltfactory.net/ionic/start-ionic-edge-book.html</a></p>"},{"title":"Sublime Text 3 패키지 공유하기","date":"2017-03-22T15:37:32.000Z","_content":"### SublimeText 3 환경 설정 공유하기\n\n서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 *[package Control](https://packagecontrol.io/installation)*부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.\n\n방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.\n\n\n### [Syncing](https://packagecontrol.io/docs/syncing)\n\n위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.\n\n> 1. Using Git (Git을 이용하는 방법)\n> 2. Using Dropbox (Dropbox를 이용하는 방법)\n\nGit을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.\n\n\n### Using Dropbox (mac)\n\n* Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)\n\n* Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.\n\n```\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\nmkdir ~/Dropbox/Sublime\nmv User ~/Dropbox/Sublime/\nln -s ~/Dropbox/Sublime/User\n```\n\n* Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다\n\n```\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\nrm -r User\nln -s ~/Dropbox/Sublime/User\n```\n\n이렇게 초기의 환경에서\n\n![](/img/sublime-before.png)\n\n이렇게 변합니다.\n\n![](/img/sublime-after.png)\n\n\n### 결론\n\n이게 끝입니다. 간단하죠?\n혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요. \n서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐 \n간단히 요약해보면, 아래와 같습니다.\n\n> 패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.\n> 이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.\n","source":"_posts/2017-03-23-migration-packages-sublime-text-3.md","raw":"---\ntitle: \"Sublime Text 3 패키지 공유하기\"\ndate: 2017-03-23 00:37:32\ntags: \n- SublimeText\n- tool\ncategories: tool\n---\n### SublimeText 3 환경 설정 공유하기\n\n서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 *[package Control](https://packagecontrol.io/installation)*부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.\n\n방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.\n\n\n### [Syncing](https://packagecontrol.io/docs/syncing)\n\n위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.\n\n> 1. Using Git (Git을 이용하는 방법)\n> 2. Using Dropbox (Dropbox를 이용하는 방법)\n\nGit을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.\n\n\n### Using Dropbox (mac)\n\n* Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)\n\n* Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.\n\n```\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\nmkdir ~/Dropbox/Sublime\nmv User ~/Dropbox/Sublime/\nln -s ~/Dropbox/Sublime/User\n```\n\n* Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다\n\n```\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\nrm -r User\nln -s ~/Dropbox/Sublime/User\n```\n\n이렇게 초기의 환경에서\n\n![](/img/sublime-before.png)\n\n이렇게 변합니다.\n\n![](/img/sublime-after.png)\n\n\n### 결론\n\n이게 끝입니다. 간단하죠?\n혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요. \n서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐 \n간단히 요약해보면, 아래와 같습니다.\n\n> 패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.\n> 이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.\n","slug":"2017-03-23-migration-packages-sublime-text-3","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv7u002iwxt4pqixrulo","content":"<h3 id=\"SublimeText-3-환경-설정-공유하기\"><a href=\"#SublimeText-3-환경-설정-공유하기\" class=\"headerlink\" title=\"SublimeText 3 환경 설정 공유하기\"></a>SublimeText 3 환경 설정 공유하기</h3><p>서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 <em><a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">package Control</a></em>부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.</p><p>방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.</p><h3 id=\"Syncing\"><a href=\"#Syncing\" class=\"headerlink\" title=\"Syncing\"></a><a href=\"https://packagecontrol.io/docs/syncing\" target=\"_blank\" rel=\"external\">Syncing</a></h3><p>위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.</p><blockquote><ol><li>Using Git (Git을 이용하는 방법)</li><li>Using Dropbox (Dropbox를 이용하는 방법)</li></ol></blockquote><p>Git을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.</p><h3 id=\"Using-Dropbox-mac\"><a href=\"#Using-Dropbox-mac\" class=\"headerlink\" title=\"Using Dropbox (mac)\"></a>Using Dropbox (mac)</h3><ul><li><p>Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)</p></li><li><p>Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.</p></li></ul><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"regexp\">~/Library/</span>Application\\ Support<span class=\"regexp\">/Sublime\\ Text\\ 3/</span>Packages/</div><div class=\"line\">mkdir <span class=\"regexp\">~/Dropbox/</span>Sublime</div><div class=\"line\">mv User <span class=\"regexp\">~/Dropbox/</span>Sublime/</div><div class=\"line\">ln -s <span class=\"regexp\">~/Dropbox/</span>Sublime/User</div></pre></td></tr></table></figure><ul><li>Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다</li></ul><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Library/Application\\ Support/Sublime\\ Text\\ <span class=\"number\">3</span>/Packages/</div><div class=\"line\">rm -r <span class=\"keyword\">User</span></div><div class=\"line\"><span class=\"title\">ln</span> -s ~/Dropbox/Sublime/User</div></pre></td></tr></table></figure><p>이렇게 초기의 환경에서</p><p><img src=\"/img/sublime-before.png\" alt=\"\"></p><p>이렇게 변합니다.</p><p><img src=\"/img/sublime-after.png\" alt=\"\"></p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><p>이게 끝입니다. 간단하죠?<br>혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요.<br>서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐<br>간단히 요약해보면, 아래와 같습니다.</p><blockquote><p>패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.<br>이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.</p></blockquote>","excerpt":"","more":"<h3 id=\"SublimeText-3-환경-설정-공유하기\"><a href=\"#SublimeText-3-환경-설정-공유하기\" class=\"headerlink\" title=\"SublimeText 3 환경 설정 공유하기\"></a>SublimeText 3 환경 설정 공유하기</h3><p>서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 <em><a href=\"https://packagecontrol.io/installation\">package Control</a></em>부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.</p><p>방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.</p><h3 id=\"Syncing\"><a href=\"#Syncing\" class=\"headerlink\" title=\"Syncing\"></a><a href=\"https://packagecontrol.io/docs/syncing\">Syncing</a></h3><p>위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.</p><blockquote><ol><li>Using Git (Git을 이용하는 방법)</li><li>Using Dropbox (Dropbox를 이용하는 방법)</li></ol></blockquote><p>Git을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.</p><h3 id=\"Using-Dropbox-mac\"><a href=\"#Using-Dropbox-mac\" class=\"headerlink\" title=\"Using Dropbox (mac)\"></a>Using Dropbox (mac)</h3><ul><li><p>Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)</p></li><li><p>Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.</p></li></ul><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"regexp\">~/Library/</span>Application\\ Support<span class=\"regexp\">/Sublime\\ Text\\ 3/</span>Packages/</div><div class=\"line\">mkdir <span class=\"regexp\">~/Dropbox/</span>Sublime</div><div class=\"line\">mv User <span class=\"regexp\">~/Dropbox/</span>Sublime/</div><div class=\"line\">ln -s <span class=\"regexp\">~/Dropbox/</span>Sublime/User</div></pre></td></tr></table></figure><ul><li>Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다</li></ul><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Library/Application\\ Support/Sublime\\ Text\\ <span class=\"number\">3</span>/Packages/</div><div class=\"line\">rm -r <span class=\"keyword\">User</span></div><div class=\"line\"><span class=\"title\">ln</span> -s ~/Dropbox/Sublime/User</div></pre></td></tr></table></figure><p>이렇게 초기의 환경에서</p><p><img src=\"/img/sublime-before.png\" alt=\"\"></p><p>이렇게 변합니다.</p><p><img src=\"/img/sublime-after.png\" alt=\"\"></p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><p>이게 끝입니다. 간단하죠?<br>혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요.<br>서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐<br>간단히 요약해보면, 아래와 같습니다.</p><blockquote><p>패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.<br>이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.</p></blockquote>"},{"title":"[ES6] var VS const VS let","date":"2017-03-28T14:52:49.000Z","_content":"ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 *var*에다 *const*와 *let*이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.\n\n기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다. \n\n이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.\n\n\n### 재할당 및 재선언하기\n\n```\n// var의 경우\nvar a = 1;\na = 2;\nconsole.log(a); // 2\nvar a = 3;\nconsole.log(a); // 3\n\n// let의 경우\nlet b = 1;\nb = 2;\nconsole.log(b)\t// 2\nlet b = 3; \t\t// SyntaxError: Identifier 'b' has already been declared\n\n// const의 경우\nconst c = 1;\nc = 2; \t\t\t// TypeError: Assignment to constant variable\n```\n\nvar의 경우 굉장히 유연합니다. *var a = 1;*로 선언한 뒤, 2를 재할당하고 다시 *var = 3;*으로 재선언(?) 해도 문제될게 없습니다.\n그런데 let의 경우 재할당은 문제 없습니다만, *let b = 3;*으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.\n마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.\n\n\n### 스코프 (Scope)\n\n```\nvar a = 1;\nlet b = 2;\n\nif(true) {\n\tvar a = 11;\n\tlet b = 22;\n\tconsole.log(\"a = \" + a);\t\t// 11\n\tconsole.log(\"b = \" + b);\t\t// 22\n}\n\nconsole.log(\"a = \" + a);\t\t\t// 11\nconsole.log(\"b = \" + b);\t\t\t// 2\n\nfunction func() {\n\tvar a = 111;\n\tlet b = 222; \n\tconsole.log(\"a = \" + a);\t\t// 111\n\tconsole.log(\"b = \" + b);\t\t// 222\n}\n\nfunc();\n\nconsole.log(\"a = \" + a);\t\t\t// 11\nconsole.log(\"b = \" + b);\t\t\t// 2\n```\n\n전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.\n\n함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.\n\n\n### let vs const\n\n위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.\n\n```\nlet a = 1;\nconst b = 2;\n\na = 11;\nb = 22;\t\t\t\t// TypeError: Assignment to constant variable.\n\nlet obj_a = {\n\tname: 'obj_a'\n};\n\nconst obj_b = {\n\tname: 'obj_b'\n}\n\nobj_a['name'] = 'a';\nobj_b['name'] = 'b';\n\nobj_a['number'] = 1;\nobj_b['number'] = 2;\n\nobj_a = {}\nobj_b = {}\t\t\t// TypeError: Assignment to constant variable.\n```\n\n기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 'name' 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠. \n\n\n### 결론\n\n> - ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)\n> - 객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다. \n","source":"_posts/ES-var-VS-const-VS-let.md","raw":"---\ntitle: \"[ES6] var VS const VS let\"\ndate: 2017-03-28 23:52:49\ntags:\n- javascript\n- ES6\n- var\n- const\n- let\n---\nES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 *var*에다 *const*와 *let*이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.\n\n기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다. \n\n이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.\n\n\n### 재할당 및 재선언하기\n\n```\n// var의 경우\nvar a = 1;\na = 2;\nconsole.log(a); // 2\nvar a = 3;\nconsole.log(a); // 3\n\n// let의 경우\nlet b = 1;\nb = 2;\nconsole.log(b)\t// 2\nlet b = 3; \t\t// SyntaxError: Identifier 'b' has already been declared\n\n// const의 경우\nconst c = 1;\nc = 2; \t\t\t// TypeError: Assignment to constant variable\n```\n\nvar의 경우 굉장히 유연합니다. *var a = 1;*로 선언한 뒤, 2를 재할당하고 다시 *var = 3;*으로 재선언(?) 해도 문제될게 없습니다.\n그런데 let의 경우 재할당은 문제 없습니다만, *let b = 3;*으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.\n마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.\n\n\n### 스코프 (Scope)\n\n```\nvar a = 1;\nlet b = 2;\n\nif(true) {\n\tvar a = 11;\n\tlet b = 22;\n\tconsole.log(\"a = \" + a);\t\t// 11\n\tconsole.log(\"b = \" + b);\t\t// 22\n}\n\nconsole.log(\"a = \" + a);\t\t\t// 11\nconsole.log(\"b = \" + b);\t\t\t// 2\n\nfunction func() {\n\tvar a = 111;\n\tlet b = 222; \n\tconsole.log(\"a = \" + a);\t\t// 111\n\tconsole.log(\"b = \" + b);\t\t// 222\n}\n\nfunc();\n\nconsole.log(\"a = \" + a);\t\t\t// 11\nconsole.log(\"b = \" + b);\t\t\t// 2\n```\n\n전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.\n\n함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.\n\n\n### let vs const\n\n위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.\n\n```\nlet a = 1;\nconst b = 2;\n\na = 11;\nb = 22;\t\t\t\t// TypeError: Assignment to constant variable.\n\nlet obj_a = {\n\tname: 'obj_a'\n};\n\nconst obj_b = {\n\tname: 'obj_b'\n}\n\nobj_a['name'] = 'a';\nobj_b['name'] = 'b';\n\nobj_a['number'] = 1;\nobj_b['number'] = 2;\n\nobj_a = {}\nobj_b = {}\t\t\t// TypeError: Assignment to constant variable.\n```\n\n기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 'name' 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠. \n\n\n### 결론\n\n> - ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)\n> - 객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다. \n","slug":"ES-var-VS-const-VS-let","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv7v002kwxt47vapab2h","content":"<p>ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 <em>var</em>에다 <em>const</em>와 <em>let</em>이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.</p><p>기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다.</p><p>이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.</p><h3 id=\"재할당-및-재선언하기\"><a href=\"#재할당-및-재선언하기\" class=\"headerlink\" title=\"재할당 및 재선언하기\"></a>재할당 및 재선언하기</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var의 경우</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let의 경우</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</div><div class=\"line\">b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b)\t<span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span>; \t\t<span class=\"comment\">// SyntaxError: Identifier 'b' has already been declared</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// const의 경우</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</div><div class=\"line\">c = <span class=\"number\">2</span>; \t\t\t<span class=\"comment\">// TypeError: Assignment to constant variable</span></div></pre></td></tr></table></figure><p>var의 경우 굉장히 유연합니다. <em>var a = 1;</em>로 선언한 뒤, 2를 재할당하고 다시 <em>var = 3;</em>으로 재선언(?) 해도 문제될게 없습니다.<br>그런데 let의 경우 재할당은 문제 없습니다만, <em>let b = 3;</em>으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.<br>마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.</p><h3 id=\"스코프-Scope\"><a href=\"#스코프-Scope\" class=\"headerlink\" title=\"스코프 (Scope)\"></a>스코프 (Scope)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">11</span>;</div><div class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">22</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t<span class=\"comment\">// 11</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t<span class=\"comment\">// 22</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t\t<span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t\t<span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">111</span>;</div><div class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">222</span>; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t<span class=\"comment\">// 111</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t<span class=\"comment\">// 222</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t\t<span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t\t<span class=\"comment\">// 2</span></div></pre></td></tr></table></figure><p>전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.</p><p>함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.</p><h3 id=\"let-vs-const\"><a href=\"#let-vs-const\" class=\"headerlink\" title=\"let vs const\"></a>let vs const</h3><p>위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">const b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">11</span>;</div><div class=\"line\">b = <span class=\"number\">22</span>;\t\t\t\t// TypeError: Assignment <span class=\"keyword\">to</span> constant variable.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj_a = &#123;</div><div class=\"line\">\tname: <span class=\"string\">'obj_a'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const obj_b = &#123;</div><div class=\"line\">\tname: <span class=\"string\">'obj_b'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj_a[<span class=\"string\">'name'</span>] = <span class=\"string\">'a'</span>;</div><div class=\"line\">obj_b[<span class=\"string\">'name'</span>] = <span class=\"string\">'b'</span>;</div><div class=\"line\"></div><div class=\"line\">obj_a[<span class=\"string\">'number'</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">obj_b[<span class=\"string\">'number'</span>] = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">obj_a = &#123;&#125;</div><div class=\"line\">obj_b = &#123;&#125;\t\t\t// TypeError: Assignment <span class=\"keyword\">to</span> constant variable.</div></pre></td></tr></table></figure><p>기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 ‘name’ 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><blockquote><ul><li>ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)</li><li>객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다.</li></ul></blockquote>","excerpt":"","more":"<p>ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 <em>var</em>에다 <em>const</em>와 <em>let</em>이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.</p><p>기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다.</p><p>이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.</p><h3 id=\"재할당-및-재선언하기\"><a href=\"#재할당-및-재선언하기\" class=\"headerlink\" title=\"재할당 및 재선언하기\"></a>재할당 및 재선언하기</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var의 경우</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let의 경우</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</div><div class=\"line\">b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b)\t<span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span>; \t\t<span class=\"comment\">// SyntaxError: Identifier 'b' has already been declared</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// const의 경우</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</div><div class=\"line\">c = <span class=\"number\">2</span>; \t\t\t<span class=\"comment\">// TypeError: Assignment to constant variable</span></div></pre></td></tr></table></figure><p>var의 경우 굉장히 유연합니다. <em>var a = 1;</em>로 선언한 뒤, 2를 재할당하고 다시 <em>var = 3;</em>으로 재선언(?) 해도 문제될게 없습니다.<br>그런데 let의 경우 재할당은 문제 없습니다만, <em>let b = 3;</em>으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.<br>마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.</p><h3 id=\"스코프-Scope\"><a href=\"#스코프-Scope\" class=\"headerlink\" title=\"스코프 (Scope)\"></a>스코프 (Scope)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">11</span>;</div><div class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">22</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t<span class=\"comment\">// 11</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t<span class=\"comment\">// 22</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t\t<span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t\t<span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">111</span>;</div><div class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">222</span>; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t<span class=\"comment\">// 111</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t<span class=\"comment\">// 222</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a = \"</span> + a);\t\t\t<span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"b = \"</span> + b);\t\t\t<span class=\"comment\">// 2</span></div></pre></td></tr></table></figure><p>전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.</p><p>함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.</p><h3 id=\"let-vs-const\"><a href=\"#let-vs-const\" class=\"headerlink\" title=\"let vs const\"></a>let vs const</h3><p>위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">const b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">11</span>;</div><div class=\"line\">b = <span class=\"number\">22</span>;\t\t\t\t// TypeError: Assignment <span class=\"keyword\">to</span> constant variable.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj_a = &#123;</div><div class=\"line\">\tname: <span class=\"string\">'obj_a'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const obj_b = &#123;</div><div class=\"line\">\tname: <span class=\"string\">'obj_b'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj_a[<span class=\"string\">'name'</span>] = <span class=\"string\">'a'</span>;</div><div class=\"line\">obj_b[<span class=\"string\">'name'</span>] = <span class=\"string\">'b'</span>;</div><div class=\"line\"></div><div class=\"line\">obj_a[<span class=\"string\">'number'</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">obj_b[<span class=\"string\">'number'</span>] = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">obj_a = &#123;&#125;</div><div class=\"line\">obj_b = &#123;&#125;\t\t\t// TypeError: Assignment <span class=\"keyword\">to</span> constant variable.</div></pre></td></tr></table></figure><p>기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 ‘name’ 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><blockquote><ul><li>ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)</li><li>객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다.</li></ul></blockquote>"},{"title":"[django] Mixin을 이용한 View 확장하기","date":"2016-03-08T14:17:30.000Z","_content":"장고 프로젝트는 다양한 방법으로 구현이 가능합니다. \n그 중에서 view에서 처리할 수 있는 방법으로 크게 두 가지가 있는데, \n하나는 함수를 기반으로 만드는 방법, 그리고 또 한가지는 클래스를 기반으로 만드는 방법입니다.\n\n지금까지 장고를 사용하면서 느꼈던 두 방법의 차이점은(지극히 개인적인 견해입니다),\n함수를 기반으로 만드는 방법은 쉽고 빠르게 만들 수 있지만 확장성이 떨어지고,\n클래스를 기반으로 만드는 방법은 함수를 기반으로 만드는 방법에 비해서 시간이 좀 더 필요하지만 확장성 면에서는 훨씬 뛰어나다는 것입니다.\n그 중 클래스 기반의 방법의 확장성을 극대화 시켜주는 녀석이 바로 Mixin이라는 놈입니다.\nMixin이라는 개념은 루비와 같은 타 언어에서도 많이 쓰이고 있는데, 클래스에 부가적인 기능이나 정보를 추가해주기 위한 모듈을 뜻합니다.\n함수 기반으로 만든 앱 같은 경우에 추가적인 기능이 필요하면 코드를 직접 구현하거나, 함수를 덧붙이는 형태가 되야할 것입니다.\n반면에 클래스의 경우에는 추가적인 기능이 필요하때 Mixin을 추가하면 간단히 해결됩니다.\n몇 개를 추가해도 상관없으며 클래스에 의존적이지 않기 때문에 확장성 면에서 굉장히 자유롭다 할 수 있습니다.\n\n루비 언어에서의 믹스인은 다중 상속이 지원되지 않아 이를 해결하기 위한 방안으로 등장했다고 볼 수 있는데요.\n파이썬처럼 다중상속이 지원되는 언어에서 굳이 Mixin(실제로는 다중상속)이라는 개념이 따로 있는 이유는,\n다중상속이 주는 모호함을 피하기 위함이라는 생각이듭니다.\n명확하게 기능을 암시하는 이름(mixin)을 줌으로써 상속받는 클래스와 혼동하지 않도록 하는 것이죠.\n\n```\nclass FirstMixin(object):\n    def test1(self):\n        print(\"first mixin!!!\")\n\n\nclass SecondMixin(object):\n    def test2(self):\n        print(\"second mixin!!!\")\n\n\nclass TestClass(ParentClass, FirstMixin, SecondMixin):\n    pass\n```\n\n위의 코드에서도 알 수 있듯이 믹스인이라는 것은 상속받는 ParentClass와 다를 것 없는 클래스입니다.\n이렇게 TestClass는 실제로 ParentClass, FirstMixin, SecondMixin이라는 세가지 클래스를 상속하는 것이지만,\nParentClass를 상속하고 FirstMixin과 SecondMixin의 기능을 추가로 확장한 것이라 말할 수 있습니다.\n\n그렇다면, 장고(django)에서는 믹스인을 어떻게 사용하고 있을까요?\n대표적으로 View같은 경우가 믹스인을 많이 사용하고 있는데요.\n예를 한번 살펴보겠습니다.\n\n### views.py \n\n```\nfrom django.views.generic import TemplateView\n\n\nclass TestTemplateView(TemplateView):\n    template_name = \"test.html\"\n```\n\nviews.py는 urls.py에서 호출되는 url에 매핑된 클래스(또는 메서드)를 모아놓은 파일입니다\n(기본파일일뿐 반드시 views.py에 있을 필요는 없습니다.) \n보통 클래스들은 View를 상속받아서 나머지 코드를 구현하지만, \n장고는 개발자들의 편의를 위해 몇가지 유용한 View를 만들어 두었습니다.\n\n가장 쉬운 예로 TemplateView라는 클래스가 있습니다.\n이 클래스는 template_name이라는 변수에 template 파일명(또는 패스)만 넣어주면, \n클라이언트로부터 호출된 요청을 처리할 수 있습니다. \n별다른 로직은 없고 다만, 해당 temlate으로 화면을 이동하는 역할을 할 뿐입니다.\n\n어떻게 이런게 가능한지를 보기위해 TemplateView를 열어봅니다.\n\n\n### generic/base.py\n\n```\nclass TemplateView(TemplateResponseMixin, ContextMixin, View):\n    \"\"\"\n    A view that renders a template.  This view will also pass into the context\n    any keyword arguments passed by the url conf.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        return self.render_to_response(context)\n```\n\n주석을 대충 해석해보면, \n\n> template을 그려주는 view이다. 또한 이 view는 url conf를 통해서 kwargs에 어떠한 값이라도  context를 추가해줄수 있다.\n\nTemplateView는 위와 같이 세가지 클래스를 상속받고 있습니다. \nTempalteResponseMixin, ContextMixin 그리고 View입니다.\n여기에 바로 우리가 찾고 있던 mixin이 있습니다!!\n\n기본적으로 사용되는 View에다가 기능을 확장하기 위해 두가지 mixin을 덧붙였습니다.\n그럼 각 믹스인이 어떤 역할을 하는지 살펴보겠습니다.\n\n\n### TemplateResponseMixin\n\n```\nclass TemplateResponseMixin(object):\n    template_name = None\n    template_engine = None\n    response_class = TemplateResponse\n    content_type = None\n\n    def render_to_response(self, context, **response_kwargs):\n        response_kwargs.setdefault('content_type', self.content_type)\n        return self.response_class(\n            request=self.request,\n            template=self.get_template_names(),\n            context=context,\n            using=self.template_engine,\n            **response_kwargs\n        )\n\n    def get_template_names(self):\n        if self.template_name is None:\n            raise ImproperlyConfigured(\n                \"TemplateResponseMixin requires either a definition of \"\n                \"'template_name' or an implementation of 'get_template_names()'\")\n        else:\n            return [self.template_name]\n```\n\nTemplateView에서  \n\n> return self.render_to_response(context)\n\n위의 부분이 호출하면, 실제로 TemplateResponseMixin 클래스의 render_to_response(context)가 호출됩니다.\n이 메서드는 request, template, context 등을 세팅한 다음 TemplateResponse 클래스를 리턴하게 됩니다.\nTemplateResponse 클래스에 대해서 자세히 설명하진 않겠지만, \n간략히 설명하면 get 메서드에서 리턴할때 template과 context를 실어서 클라이언트에 응답을 보내는 역할을 합니다.\n\n결과적으로 TemplateView에서는  template 변수만 설정하면(request는 get 메서드에서 가져옴, context는 ContextMixin에서 가져옴) \n응답에 필요한 모든 값을 설정하여 클라이언트에 응답을 보낼수 있게 되는 것입니다.\n\n\n### ContextMixin\n\n```\nclass ContextMixin(object):\n    def get_context_data(self, **kwargs):\n        if 'view' not in kwargs:\n            kwargs['view'] = self\n        return kwargs\n```\n\nTemplateResponseMixin에서 설명했듯이 context를 가져오기 위한 역할을 하는것이 ContextMixin입니다.\ncontext는, 클라이언트에 응답을 보낼 때 keyword argument(dict)로 값을 실어서 보낼 수 있는 역할을 하는 변수입니다(이름도 바꿀 수 있음).\nTemplateView의 구현부분을 살펴보면, \n\n> context = self.get_context_data(**kwargs)\n\n바로 이 부분을 통해서 context를 생성하여 클라이언트에 보낼 수 있게 됩니다.\n만약 views.py 구현부에서 추가적으로 context에 추가할 필요가 있을때는\n아래처럼 오버라이딩하여 context를 추가해주면 됩니다.\n\n\n### views.py - 2 \n\n```\nfrom django.views.generic import TemplateView\n\n\nclass TestTemplateView(TemplateView):\n    template_name = \"test.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super(TestTemplateView, self).get_context_data(**kwargs)\n        context['extra_value'] = 100\n        return context\n```\n\n믹스인은 사용함에 따라서 거의  무한하게 확장할 수 있습니다.\nTemplateView와 같이 기능이 단순한 경우에는 두개 정도의 믹스인만 사용되었지만, \nListView같은 View들은 TemplateView 보다 다양하고 복잡한 믹스인을 사용하여 기능을 확장시켰습니다.\n검색해보면, ListView 외에도 대부분의 확장된 View들이 믹스인을 확장하여 다양한 기능을 가지는 View를 만들어 내고 있습니다.\n\n이처럼 믹스인을 잘 이용하면 자기 입맛에 딱 맞는 CustomView를 만드는데 큰 도움이 될 수 있습니다.\n","source":"_posts/django-extend-view-using-mixin.md","raw":"---\ntitle: \"[django] Mixin을 이용한 View 확장하기\"\ndate: 2016-03-08 23:17:30\ntags:\n- django\n- python\n- mixin\n---\n장고 프로젝트는 다양한 방법으로 구현이 가능합니다. \n그 중에서 view에서 처리할 수 있는 방법으로 크게 두 가지가 있는데, \n하나는 함수를 기반으로 만드는 방법, 그리고 또 한가지는 클래스를 기반으로 만드는 방법입니다.\n\n지금까지 장고를 사용하면서 느꼈던 두 방법의 차이점은(지극히 개인적인 견해입니다),\n함수를 기반으로 만드는 방법은 쉽고 빠르게 만들 수 있지만 확장성이 떨어지고,\n클래스를 기반으로 만드는 방법은 함수를 기반으로 만드는 방법에 비해서 시간이 좀 더 필요하지만 확장성 면에서는 훨씬 뛰어나다는 것입니다.\n그 중 클래스 기반의 방법의 확장성을 극대화 시켜주는 녀석이 바로 Mixin이라는 놈입니다.\nMixin이라는 개념은 루비와 같은 타 언어에서도 많이 쓰이고 있는데, 클래스에 부가적인 기능이나 정보를 추가해주기 위한 모듈을 뜻합니다.\n함수 기반으로 만든 앱 같은 경우에 추가적인 기능이 필요하면 코드를 직접 구현하거나, 함수를 덧붙이는 형태가 되야할 것입니다.\n반면에 클래스의 경우에는 추가적인 기능이 필요하때 Mixin을 추가하면 간단히 해결됩니다.\n몇 개를 추가해도 상관없으며 클래스에 의존적이지 않기 때문에 확장성 면에서 굉장히 자유롭다 할 수 있습니다.\n\n루비 언어에서의 믹스인은 다중 상속이 지원되지 않아 이를 해결하기 위한 방안으로 등장했다고 볼 수 있는데요.\n파이썬처럼 다중상속이 지원되는 언어에서 굳이 Mixin(실제로는 다중상속)이라는 개념이 따로 있는 이유는,\n다중상속이 주는 모호함을 피하기 위함이라는 생각이듭니다.\n명확하게 기능을 암시하는 이름(mixin)을 줌으로써 상속받는 클래스와 혼동하지 않도록 하는 것이죠.\n\n```\nclass FirstMixin(object):\n    def test1(self):\n        print(\"first mixin!!!\")\n\n\nclass SecondMixin(object):\n    def test2(self):\n        print(\"second mixin!!!\")\n\n\nclass TestClass(ParentClass, FirstMixin, SecondMixin):\n    pass\n```\n\n위의 코드에서도 알 수 있듯이 믹스인이라는 것은 상속받는 ParentClass와 다를 것 없는 클래스입니다.\n이렇게 TestClass는 실제로 ParentClass, FirstMixin, SecondMixin이라는 세가지 클래스를 상속하는 것이지만,\nParentClass를 상속하고 FirstMixin과 SecondMixin의 기능을 추가로 확장한 것이라 말할 수 있습니다.\n\n그렇다면, 장고(django)에서는 믹스인을 어떻게 사용하고 있을까요?\n대표적으로 View같은 경우가 믹스인을 많이 사용하고 있는데요.\n예를 한번 살펴보겠습니다.\n\n### views.py \n\n```\nfrom django.views.generic import TemplateView\n\n\nclass TestTemplateView(TemplateView):\n    template_name = \"test.html\"\n```\n\nviews.py는 urls.py에서 호출되는 url에 매핑된 클래스(또는 메서드)를 모아놓은 파일입니다\n(기본파일일뿐 반드시 views.py에 있을 필요는 없습니다.) \n보통 클래스들은 View를 상속받아서 나머지 코드를 구현하지만, \n장고는 개발자들의 편의를 위해 몇가지 유용한 View를 만들어 두었습니다.\n\n가장 쉬운 예로 TemplateView라는 클래스가 있습니다.\n이 클래스는 template_name이라는 변수에 template 파일명(또는 패스)만 넣어주면, \n클라이언트로부터 호출된 요청을 처리할 수 있습니다. \n별다른 로직은 없고 다만, 해당 temlate으로 화면을 이동하는 역할을 할 뿐입니다.\n\n어떻게 이런게 가능한지를 보기위해 TemplateView를 열어봅니다.\n\n\n### generic/base.py\n\n```\nclass TemplateView(TemplateResponseMixin, ContextMixin, View):\n    \"\"\"\n    A view that renders a template.  This view will also pass into the context\n    any keyword arguments passed by the url conf.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        return self.render_to_response(context)\n```\n\n주석을 대충 해석해보면, \n\n> template을 그려주는 view이다. 또한 이 view는 url conf를 통해서 kwargs에 어떠한 값이라도  context를 추가해줄수 있다.\n\nTemplateView는 위와 같이 세가지 클래스를 상속받고 있습니다. \nTempalteResponseMixin, ContextMixin 그리고 View입니다.\n여기에 바로 우리가 찾고 있던 mixin이 있습니다!!\n\n기본적으로 사용되는 View에다가 기능을 확장하기 위해 두가지 mixin을 덧붙였습니다.\n그럼 각 믹스인이 어떤 역할을 하는지 살펴보겠습니다.\n\n\n### TemplateResponseMixin\n\n```\nclass TemplateResponseMixin(object):\n    template_name = None\n    template_engine = None\n    response_class = TemplateResponse\n    content_type = None\n\n    def render_to_response(self, context, **response_kwargs):\n        response_kwargs.setdefault('content_type', self.content_type)\n        return self.response_class(\n            request=self.request,\n            template=self.get_template_names(),\n            context=context,\n            using=self.template_engine,\n            **response_kwargs\n        )\n\n    def get_template_names(self):\n        if self.template_name is None:\n            raise ImproperlyConfigured(\n                \"TemplateResponseMixin requires either a definition of \"\n                \"'template_name' or an implementation of 'get_template_names()'\")\n        else:\n            return [self.template_name]\n```\n\nTemplateView에서  \n\n> return self.render_to_response(context)\n\n위의 부분이 호출하면, 실제로 TemplateResponseMixin 클래스의 render_to_response(context)가 호출됩니다.\n이 메서드는 request, template, context 등을 세팅한 다음 TemplateResponse 클래스를 리턴하게 됩니다.\nTemplateResponse 클래스에 대해서 자세히 설명하진 않겠지만, \n간략히 설명하면 get 메서드에서 리턴할때 template과 context를 실어서 클라이언트에 응답을 보내는 역할을 합니다.\n\n결과적으로 TemplateView에서는  template 변수만 설정하면(request는 get 메서드에서 가져옴, context는 ContextMixin에서 가져옴) \n응답에 필요한 모든 값을 설정하여 클라이언트에 응답을 보낼수 있게 되는 것입니다.\n\n\n### ContextMixin\n\n```\nclass ContextMixin(object):\n    def get_context_data(self, **kwargs):\n        if 'view' not in kwargs:\n            kwargs['view'] = self\n        return kwargs\n```\n\nTemplateResponseMixin에서 설명했듯이 context를 가져오기 위한 역할을 하는것이 ContextMixin입니다.\ncontext는, 클라이언트에 응답을 보낼 때 keyword argument(dict)로 값을 실어서 보낼 수 있는 역할을 하는 변수입니다(이름도 바꿀 수 있음).\nTemplateView의 구현부분을 살펴보면, \n\n> context = self.get_context_data(**kwargs)\n\n바로 이 부분을 통해서 context를 생성하여 클라이언트에 보낼 수 있게 됩니다.\n만약 views.py 구현부에서 추가적으로 context에 추가할 필요가 있을때는\n아래처럼 오버라이딩하여 context를 추가해주면 됩니다.\n\n\n### views.py - 2 \n\n```\nfrom django.views.generic import TemplateView\n\n\nclass TestTemplateView(TemplateView):\n    template_name = \"test.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super(TestTemplateView, self).get_context_data(**kwargs)\n        context['extra_value'] = 100\n        return context\n```\n\n믹스인은 사용함에 따라서 거의  무한하게 확장할 수 있습니다.\nTemplateView와 같이 기능이 단순한 경우에는 두개 정도의 믹스인만 사용되었지만, \nListView같은 View들은 TemplateView 보다 다양하고 복잡한 믹스인을 사용하여 기능을 확장시켰습니다.\n검색해보면, ListView 외에도 대부분의 확장된 View들이 믹스인을 확장하여 다양한 기능을 가지는 View를 만들어 내고 있습니다.\n\n이처럼 믹스인을 잘 이용하면 자기 입맛에 딱 맞는 CustomView를 만드는데 큰 도움이 될 수 있습니다.\n","slug":"django-extend-view-using-mixin","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv7x002owxt4fzlcl9xe","content":"<p>장고 프로젝트는 다양한 방법으로 구현이 가능합니다.<br>그 중에서 view에서 처리할 수 있는 방법으로 크게 두 가지가 있는데,<br>하나는 함수를 기반으로 만드는 방법, 그리고 또 한가지는 클래스를 기반으로 만드는 방법입니다.</p><p>지금까지 장고를 사용하면서 느꼈던 두 방법의 차이점은(지극히 개인적인 견해입니다),<br>함수를 기반으로 만드는 방법은 쉽고 빠르게 만들 수 있지만 확장성이 떨어지고,<br>클래스를 기반으로 만드는 방법은 함수를 기반으로 만드는 방법에 비해서 시간이 좀 더 필요하지만 확장성 면에서는 훨씬 뛰어나다는 것입니다.<br>그 중 클래스 기반의 방법의 확장성을 극대화 시켜주는 녀석이 바로 Mixin이라는 놈입니다.<br>Mixin이라는 개념은 루비와 같은 타 언어에서도 많이 쓰이고 있는데, 클래스에 부가적인 기능이나 정보를 추가해주기 위한 모듈을 뜻합니다.<br>함수 기반으로 만든 앱 같은 경우에 추가적인 기능이 필요하면 코드를 직접 구현하거나, 함수를 덧붙이는 형태가 되야할 것입니다.<br>반면에 클래스의 경우에는 추가적인 기능이 필요하때 Mixin을 추가하면 간단히 해결됩니다.<br>몇 개를 추가해도 상관없으며 클래스에 의존적이지 않기 때문에 확장성 면에서 굉장히 자유롭다 할 수 있습니다.</p><p>루비 언어에서의 믹스인은 다중 상속이 지원되지 않아 이를 해결하기 위한 방안으로 등장했다고 볼 수 있는데요.<br>파이썬처럼 다중상속이 지원되는 언어에서 굳이 Mixin(실제로는 다중상속)이라는 개념이 따로 있는 이유는,<br>다중상속이 주는 모호함을 피하기 위함이라는 생각이듭니다.<br>명확하게 기능을 암시하는 이름(mixin)을 줌으로써 상속받는 클래스와 혼동하지 않도록 하는 것이죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstMixin</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"first mixin!!!\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondMixin</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"second mixin!!!\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span><span class=\"params\">(ParentClass, FirstMixin, SecondMixin)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure><p>위의 코드에서도 알 수 있듯이 믹스인이라는 것은 상속받는 ParentClass와 다를 것 없는 클래스입니다.<br>이렇게 TestClass는 실제로 ParentClass, FirstMixin, SecondMixin이라는 세가지 클래스를 상속하는 것이지만,<br>ParentClass를 상속하고 FirstMixin과 SecondMixin의 기능을 추가로 확장한 것이라 말할 수 있습니다.</p><p>그렇다면, 장고(django)에서는 믹스인을 어떻게 사용하고 있을까요?<br>대표적으로 View같은 경우가 믹스인을 많이 사용하고 있는데요.<br>예를 한번 살펴보겠습니다.</p><h3 id=\"views-py\"><a href=\"#views-py\" class=\"headerlink\" title=\"views.py\"></a>views.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.views.generic <span class=\"keyword\">import</span> TemplateView</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTemplateView</span><span class=\"params\">(TemplateView)</span>:</span></div><div class=\"line\">    template_name = <span class=\"string\">\"test.html\"</span></div></pre></td></tr></table></figure><p>views.py는 urls.py에서 호출되는 url에 매핑된 클래스(또는 메서드)를 모아놓은 파일입니다<br>(기본파일일뿐 반드시 views.py에 있을 필요는 없습니다.)<br>보통 클래스들은 View를 상속받아서 나머지 코드를 구현하지만,<br>장고는 개발자들의 편의를 위해 몇가지 유용한 View를 만들어 두었습니다.</p><p>가장 쉬운 예로 TemplateView라는 클래스가 있습니다.<br>이 클래스는 template_name이라는 변수에 template 파일명(또는 패스)만 넣어주면,<br>클라이언트로부터 호출된 요청을 처리할 수 있습니다.<br>별다른 로직은 없고 다만, 해당 temlate으로 화면을 이동하는 역할을 할 뿐입니다.</p><p>어떻게 이런게 가능한지를 보기위해 TemplateView를 열어봅니다.</p><h3 id=\"generic-base-py\"><a href=\"#generic-base-py\" class=\"headerlink\" title=\"generic/base.py\"></a>generic/base.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateView</span><span class=\"params\">(TemplateResponseMixin, ContextMixin, View)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    A view that renders a template.  This view will also pass into the context</div><div class=\"line\">    any keyword arguments passed by the url conf.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        context = self.get_context_data(**kwargs)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.render_to_response(context)</div></pre></td></tr></table></figure><p>주석을 대충 해석해보면,</p><blockquote><p>template을 그려주는 view이다. 또한 이 view는 url conf를 통해서 kwargs에 어떠한 값이라도 context를 추가해줄수 있다.</p></blockquote><p>TemplateView는 위와 같이 세가지 클래스를 상속받고 있습니다.<br>TempalteResponseMixin, ContextMixin 그리고 View입니다.<br>여기에 바로 우리가 찾고 있던 mixin이 있습니다!!</p><p>기본적으로 사용되는 View에다가 기능을 확장하기 위해 두가지 mixin을 덧붙였습니다.<br>그럼 각 믹스인이 어떤 역할을 하는지 살펴보겠습니다.</p><h3 id=\"TemplateResponseMixin\"><a href=\"#TemplateResponseMixin\" class=\"headerlink\" title=\"TemplateResponseMixin\"></a>TemplateResponseMixin</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateResponseMixin</span>(<span class=\"title\">object</span>):</span></div><div class=\"line\">    template_name = None</div><div class=\"line\">    template_engine = None</div><div class=\"line\">    response_class = TemplateResponse</div><div class=\"line\">    content_type = None</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render_to_response</span><span class=\"params\">(<span class=\"keyword\">self</span>, context, **response_kwargs)</span></span>:</div><div class=\"line\">        response_kwargs.setdefault(<span class=\"string\">'content_type'</span>, <span class=\"keyword\">self</span>.content_type)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.response_class(</div><div class=\"line\">            request=<span class=\"keyword\">self</span>.request,</div><div class=\"line\">            template=<span class=\"keyword\">self</span>.get_template_names(),</div><div class=\"line\">            context=context,</div><div class=\"line\">            using=<span class=\"keyword\">self</span>.template_engine,</div><div class=\"line\">            **response_kwargs</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_template_names</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.template_name is <span class=\"symbol\">None:</span></div><div class=\"line\">            raise ImproperlyConfigured(</div><div class=\"line\">                <span class=\"string\">\"TemplateResponseMixin requires either a definition of \"</span></div><div class=\"line\">                <span class=\"string\">\"'template_name' or an implementation of 'get_template_names()'\"</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.template_name]</div></pre></td></tr></table></figure><p>TemplateView에서</p><blockquote><p>return self.render_to_response(context)</p></blockquote><p>위의 부분이 호출하면, 실제로 TemplateResponseMixin 클래스의 render_to_response(context)가 호출됩니다.<br>이 메서드는 request, template, context 등을 세팅한 다음 TemplateResponse 클래스를 리턴하게 됩니다.<br>TemplateResponse 클래스에 대해서 자세히 설명하진 않겠지만,<br>간략히 설명하면 get 메서드에서 리턴할때 template과 context를 실어서 클라이언트에 응답을 보내는 역할을 합니다.</p><p>결과적으로 TemplateView에서는 template 변수만 설정하면(request는 get 메서드에서 가져옴, context는 ContextMixin에서 가져옴)<br>응답에 필요한 모든 값을 설정하여 클라이언트에 응답을 보낼수 있게 되는 것입니다.</p><h3 id=\"ContextMixin\"><a href=\"#ContextMixin\" class=\"headerlink\" title=\"ContextMixin\"></a>ContextMixin</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContextMixin</span>(<span class=\"title\">object</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_context_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, **kwargs)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'view'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"symbol\">kwargs:</span></div><div class=\"line\">            kwargs[<span class=\"string\">'view'</span>] = <span class=\"keyword\">self</span></div><div class=\"line\">        <span class=\"keyword\">return</span> kwargs</div></pre></td></tr></table></figure><p>TemplateResponseMixin에서 설명했듯이 context를 가져오기 위한 역할을 하는것이 ContextMixin입니다.<br>context는, 클라이언트에 응답을 보낼 때 keyword argument(dict)로 값을 실어서 보낼 수 있는 역할을 하는 변수입니다(이름도 바꿀 수 있음).<br>TemplateView의 구현부분을 살펴보면,</p><blockquote><p>context = self.get_context_data(**kwargs)</p></blockquote><p>바로 이 부분을 통해서 context를 생성하여 클라이언트에 보낼 수 있게 됩니다.<br>만약 views.py 구현부에서 추가적으로 context에 추가할 필요가 있을때는<br>아래처럼 오버라이딩하여 context를 추가해주면 됩니다.</p><h3 id=\"views-py-2\"><a href=\"#views-py-2\" class=\"headerlink\" title=\"views.py - 2\"></a>views.py - 2</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">from django.views.generic import TemplateView</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTemplateView</span>(<span class=\"title\">TemplateView</span>):</span></div><div class=\"line\">    template_name = <span class=\"string\">\"test.html\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_context_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, **kwargs)</span></span>:</div><div class=\"line\">        context = <span class=\"keyword\">super</span>(TestTemplateView, <span class=\"keyword\">self</span>).get_context_data(**kwargs)</div><div class=\"line\">        context[<span class=\"string\">'extra_value'</span>] = <span class=\"number\">100</span></div><div class=\"line\">        <span class=\"keyword\">return</span> context</div></pre></td></tr></table></figure><p>믹스인은 사용함에 따라서 거의 무한하게 확장할 수 있습니다.<br>TemplateView와 같이 기능이 단순한 경우에는 두개 정도의 믹스인만 사용되었지만,<br>ListView같은 View들은 TemplateView 보다 다양하고 복잡한 믹스인을 사용하여 기능을 확장시켰습니다.<br>검색해보면, ListView 외에도 대부분의 확장된 View들이 믹스인을 확장하여 다양한 기능을 가지는 View를 만들어 내고 있습니다.</p><p>이처럼 믹스인을 잘 이용하면 자기 입맛에 딱 맞는 CustomView를 만드는데 큰 도움이 될 수 있습니다.</p>","excerpt":"","more":"<p>장고 프로젝트는 다양한 방법으로 구현이 가능합니다.<br>그 중에서 view에서 처리할 수 있는 방법으로 크게 두 가지가 있는데,<br>하나는 함수를 기반으로 만드는 방법, 그리고 또 한가지는 클래스를 기반으로 만드는 방법입니다.</p><p>지금까지 장고를 사용하면서 느꼈던 두 방법의 차이점은(지극히 개인적인 견해입니다),<br>함수를 기반으로 만드는 방법은 쉽고 빠르게 만들 수 있지만 확장성이 떨어지고,<br>클래스를 기반으로 만드는 방법은 함수를 기반으로 만드는 방법에 비해서 시간이 좀 더 필요하지만 확장성 면에서는 훨씬 뛰어나다는 것입니다.<br>그 중 클래스 기반의 방법의 확장성을 극대화 시켜주는 녀석이 바로 Mixin이라는 놈입니다.<br>Mixin이라는 개념은 루비와 같은 타 언어에서도 많이 쓰이고 있는데, 클래스에 부가적인 기능이나 정보를 추가해주기 위한 모듈을 뜻합니다.<br>함수 기반으로 만든 앱 같은 경우에 추가적인 기능이 필요하면 코드를 직접 구현하거나, 함수를 덧붙이는 형태가 되야할 것입니다.<br>반면에 클래스의 경우에는 추가적인 기능이 필요하때 Mixin을 추가하면 간단히 해결됩니다.<br>몇 개를 추가해도 상관없으며 클래스에 의존적이지 않기 때문에 확장성 면에서 굉장히 자유롭다 할 수 있습니다.</p><p>루비 언어에서의 믹스인은 다중 상속이 지원되지 않아 이를 해결하기 위한 방안으로 등장했다고 볼 수 있는데요.<br>파이썬처럼 다중상속이 지원되는 언어에서 굳이 Mixin(실제로는 다중상속)이라는 개념이 따로 있는 이유는,<br>다중상속이 주는 모호함을 피하기 위함이라는 생각이듭니다.<br>명확하게 기능을 암시하는 이름(mixin)을 줌으로써 상속받는 클래스와 혼동하지 않도록 하는 것이죠.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstMixin</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"first mixin!!!\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondMixin</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"second mixin!!!\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span><span class=\"params\">(ParentClass, FirstMixin, SecondMixin)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure><p>위의 코드에서도 알 수 있듯이 믹스인이라는 것은 상속받는 ParentClass와 다를 것 없는 클래스입니다.<br>이렇게 TestClass는 실제로 ParentClass, FirstMixin, SecondMixin이라는 세가지 클래스를 상속하는 것이지만,<br>ParentClass를 상속하고 FirstMixin과 SecondMixin의 기능을 추가로 확장한 것이라 말할 수 있습니다.</p><p>그렇다면, 장고(django)에서는 믹스인을 어떻게 사용하고 있을까요?<br>대표적으로 View같은 경우가 믹스인을 많이 사용하고 있는데요.<br>예를 한번 살펴보겠습니다.</p><h3 id=\"views-py\"><a href=\"#views-py\" class=\"headerlink\" title=\"views.py\"></a>views.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.views.generic <span class=\"keyword\">import</span> TemplateView</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTemplateView</span><span class=\"params\">(TemplateView)</span>:</span></div><div class=\"line\">    template_name = <span class=\"string\">\"test.html\"</span></div></pre></td></tr></table></figure><p>views.py는 urls.py에서 호출되는 url에 매핑된 클래스(또는 메서드)를 모아놓은 파일입니다<br>(기본파일일뿐 반드시 views.py에 있을 필요는 없습니다.)<br>보통 클래스들은 View를 상속받아서 나머지 코드를 구현하지만,<br>장고는 개발자들의 편의를 위해 몇가지 유용한 View를 만들어 두었습니다.</p><p>가장 쉬운 예로 TemplateView라는 클래스가 있습니다.<br>이 클래스는 template_name이라는 변수에 template 파일명(또는 패스)만 넣어주면,<br>클라이언트로부터 호출된 요청을 처리할 수 있습니다.<br>별다른 로직은 없고 다만, 해당 temlate으로 화면을 이동하는 역할을 할 뿐입니다.</p><p>어떻게 이런게 가능한지를 보기위해 TemplateView를 열어봅니다.</p><h3 id=\"generic-base-py\"><a href=\"#generic-base-py\" class=\"headerlink\" title=\"generic/base.py\"></a>generic/base.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateView</span><span class=\"params\">(TemplateResponseMixin, ContextMixin, View)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    A view that renders a template.  This view will also pass into the context</div><div class=\"line\">    any keyword arguments passed by the url conf.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        context = self.get_context_data(**kwargs)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.render_to_response(context)</div></pre></td></tr></table></figure><p>주석을 대충 해석해보면,</p><blockquote><p>template을 그려주는 view이다. 또한 이 view는 url conf를 통해서 kwargs에 어떠한 값이라도 context를 추가해줄수 있다.</p></blockquote><p>TemplateView는 위와 같이 세가지 클래스를 상속받고 있습니다.<br>TempalteResponseMixin, ContextMixin 그리고 View입니다.<br>여기에 바로 우리가 찾고 있던 mixin이 있습니다!!</p><p>기본적으로 사용되는 View에다가 기능을 확장하기 위해 두가지 mixin을 덧붙였습니다.<br>그럼 각 믹스인이 어떤 역할을 하는지 살펴보겠습니다.</p><h3 id=\"TemplateResponseMixin\"><a href=\"#TemplateResponseMixin\" class=\"headerlink\" title=\"TemplateResponseMixin\"></a>TemplateResponseMixin</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateResponseMixin</span>(<span class=\"title\">object</span>):</span></div><div class=\"line\">    template_name = None</div><div class=\"line\">    template_engine = None</div><div class=\"line\">    response_class = TemplateResponse</div><div class=\"line\">    content_type = None</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render_to_response</span><span class=\"params\">(<span class=\"keyword\">self</span>, context, **response_kwargs)</span></span>:</div><div class=\"line\">        response_kwargs.setdefault(<span class=\"string\">'content_type'</span>, <span class=\"keyword\">self</span>.content_type)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.response_class(</div><div class=\"line\">            request=<span class=\"keyword\">self</span>.request,</div><div class=\"line\">            template=<span class=\"keyword\">self</span>.get_template_names(),</div><div class=\"line\">            context=context,</div><div class=\"line\">            using=<span class=\"keyword\">self</span>.template_engine,</div><div class=\"line\">            **response_kwargs</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_template_names</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.template_name is <span class=\"symbol\">None:</span></div><div class=\"line\">            raise ImproperlyConfigured(</div><div class=\"line\">                <span class=\"string\">\"TemplateResponseMixin requires either a definition of \"</span></div><div class=\"line\">                <span class=\"string\">\"'template_name' or an implementation of 'get_template_names()'\"</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.template_name]</div></pre></td></tr></table></figure><p>TemplateView에서</p><blockquote><p>return self.render_to_response(context)</p></blockquote><p>위의 부분이 호출하면, 실제로 TemplateResponseMixin 클래스의 render_to_response(context)가 호출됩니다.<br>이 메서드는 request, template, context 등을 세팅한 다음 TemplateResponse 클래스를 리턴하게 됩니다.<br>TemplateResponse 클래스에 대해서 자세히 설명하진 않겠지만,<br>간략히 설명하면 get 메서드에서 리턴할때 template과 context를 실어서 클라이언트에 응답을 보내는 역할을 합니다.</p><p>결과적으로 TemplateView에서는 template 변수만 설정하면(request는 get 메서드에서 가져옴, context는 ContextMixin에서 가져옴)<br>응답에 필요한 모든 값을 설정하여 클라이언트에 응답을 보낼수 있게 되는 것입니다.</p><h3 id=\"ContextMixin\"><a href=\"#ContextMixin\" class=\"headerlink\" title=\"ContextMixin\"></a>ContextMixin</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContextMixin</span>(<span class=\"title\">object</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_context_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, **kwargs)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'view'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"symbol\">kwargs:</span></div><div class=\"line\">            kwargs[<span class=\"string\">'view'</span>] = <span class=\"keyword\">self</span></div><div class=\"line\">        <span class=\"keyword\">return</span> kwargs</div></pre></td></tr></table></figure><p>TemplateResponseMixin에서 설명했듯이 context를 가져오기 위한 역할을 하는것이 ContextMixin입니다.<br>context는, 클라이언트에 응답을 보낼 때 keyword argument(dict)로 값을 실어서 보낼 수 있는 역할을 하는 변수입니다(이름도 바꿀 수 있음).<br>TemplateView의 구현부분을 살펴보면,</p><blockquote><p>context = self.get_context_data(**kwargs)</p></blockquote><p>바로 이 부분을 통해서 context를 생성하여 클라이언트에 보낼 수 있게 됩니다.<br>만약 views.py 구현부에서 추가적으로 context에 추가할 필요가 있을때는<br>아래처럼 오버라이딩하여 context를 추가해주면 됩니다.</p><h3 id=\"views-py-2\"><a href=\"#views-py-2\" class=\"headerlink\" title=\"views.py - 2\"></a>views.py - 2</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">from django.views.generic import TemplateView</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTemplateView</span>(<span class=\"title\">TemplateView</span>):</span></div><div class=\"line\">    template_name = <span class=\"string\">\"test.html\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_context_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, **kwargs)</span></span>:</div><div class=\"line\">        context = <span class=\"keyword\">super</span>(TestTemplateView, <span class=\"keyword\">self</span>).get_context_data(**kwargs)</div><div class=\"line\">        context[<span class=\"string\">'extra_value'</span>] = <span class=\"number\">100</span></div><div class=\"line\">        <span class=\"keyword\">return</span> context</div></pre></td></tr></table></figure><p>믹스인은 사용함에 따라서 거의 무한하게 확장할 수 있습니다.<br>TemplateView와 같이 기능이 단순한 경우에는 두개 정도의 믹스인만 사용되었지만,<br>ListView같은 View들은 TemplateView 보다 다양하고 복잡한 믹스인을 사용하여 기능을 확장시켰습니다.<br>검색해보면, ListView 외에도 대부분의 확장된 View들이 믹스인을 확장하여 다양한 기능을 가지는 View를 만들어 내고 있습니다.</p><p>이처럼 믹스인을 잘 이용하면 자기 입맛에 딱 맞는 CustomView를 만드는데 큰 도움이 될 수 있습니다.</p>"},{"title":"[django] pycharm(파이참) community 버전으로 django(장고) 프로젝트 설정","date":"2016-02-02T13:15:06.000Z","_content":"파이썬(python) + 장고(django)로 프로젝트를 진행하려고 하면, 우선 개발도구를 정해야 합니다. 콘솔 + VI로 작업해도 무관합니다만 장고를 지원해주는 IDE가 있다면 그 기능을 이용하는 것이 좋겠죠. 더불어 자동완성 등 다양한 기능을 사용할 수 있으니 작업 능률을 향상 시켜 줄수 있습니다. 몇가지 사용 가능한 IDE가 있겠지만, 파이썬(또는 장고) 프로젝트로 사용하기에는 Pycharm(Pycharm 다운로드)만한 게 없다고 생각합니다. 그런데 유료죠. 이클립스 처럼 무료면 참 좋을텐데, [JetBrains](https://www.jetbrains.com/)에서 만드는 자바 IDE인 intelliJ 또한 꽤 비싼 편이죠. \n\n비싸다고 좌절할 필요 없습니다. 저희에게는 무료버전인 파이참 커뮤니티 버전(Pycharm Community Version)이 있기 때문이죠. 비록 자바스크립트 하이라이팅, 다국어 파일 지원, html 파일 링크 등 몇가지 기능을 제외한다면 충분히 이 무료버전으로 장고 프로젝트를 진행 할 수 있습니다. 제가 처음 장고 프로젝트를 시작할때는 무료버전으로 장고 설정하는 방법에 관한 마땅한 자료를 찾지 못해서 꽤나 시간을 보냈기에 저와 같은 분이 없었으면 하는 마음에 글을 남겨봅니다.\n\n과정은 다음과 같습니다.\n\n\n### STEP 1. 장고 프로젝트 생성\n\n파이썬 가상환경이 설치(pyenv)되어 있고, 장고가 설치(가상환경 내에서 pip install django)되어 있다 가정합니다.\n참고로 pip는 파이썬 모듈을 설치하는 패키지 관리자입니다. \n위 부분이 막힌다면 다른 글들을 찾아보고 오시는게 좋을 것 같네요(나중에 저도 따로 포스팅 하려고 합니다).\n\n```\ndjango-admin.py startproject testproject\n```\n\n{% asset_img django-setting-01.jpg %}\n\n이제 프로젝트가 생성되었습니다. 프로젝트 안으로 들어가보면 testproject라는 기본 앱(장고 프로젝트는 앱의 모임)과 manage.py가 있군요. manage.py는 장고 프로젝트에서 사용할 명령어들을 위한 파일이라 생각하시면 됩니다(ex. 서버 실행이 python manage.py runserver).\n \n{% asset_img django-setting-02.jpg %}\n\n\n### STEP 2. 파이참에서 장고 프로젝트 열기\n\n다운받은 [파이참 커뮤니티 버전](https://www.jetbrains.com/pycharm/download/#section=mac)을 실행합니다.\n오른쪽 화면의 명령 중 open을 클릭해서 터미널에서 생성한 testproject를 클릭합니다. \n\n{% asset_img django-setting-03.jpg %}\n\n폴더 구조는 잠깐 말씀드린대로, testproject라는 프로젝트 안에 testproject라는 기본앱이 있구요. manage.py 명령 파일이 있습니다. 앱은 필요한 만큼 얼마든지 추가가 가능하니 앱이 필요한 경우에는 역시 터미널로 가서 \n\n```\nmanage.py startapp 앱이름\n```\n\n을 입력해주시면 됩니다.\n\n{% asset_img django-setting-04.jpg %}\n\n\n### STEP 3. 서버실행(Run) 설정\n\n거의 다 왔습니다. 프로젝트가 만들어 졌으나 바로 실행이 가능한 건 아니고(커뮤니티 버전이니까..) 간단한 실행 설정이 필요합니다.\n우선 상단 메뉴를 열어서, 아래 메뉴를 클릭해줍니다.\n\n> Run > Edit Configurations...\n\n{% asset_img django-setting-05.jpg %}\n\n다음과 같은 화면이 나타납니다. \n좌측 상단의 '+' 버튼을 클릭하고Python을 선택합니다.\n\n{% asset_img django-setting-06.jpg %}\n\nName을 적당하게 입력해주고,\nScript 부분은 manage.py의 경로를 입력합니다(우측의 '...' 버튼을 이용합시다).\nScript parameters에는 runserver를 입력합니다.\nPython interpreter에서 자신이 실행하고자 하는 파이썬 버전을 클릭해줍니다.\n실제 터미널에서 서버를 실행하는 것과 동일하다 생각하시면 됩니다.\n\n```\nmanage.py runserver\n```\n\n이렇게요.\n\n{% asset_img django-setting-07.jpg %}\n\n\n### STEP 4. 실행(Run)\n\n이제 설정은 끝입니다. 벌써 끝인거야? 라고 생각하실지 모르겠지만 파이썬 가상환경이나 모듈(패키지) 설치 등은 다 건너뛰었기 때문에 막히는 부분이 발생할 수도 있습니다. 가상환경과 모듈 설치에 대한 부분은 따로 포스팅하겠습니다.\n\n> Run > Run 'runserver'(이렇게 바뀌어 있네요)\n\n를 클릭합니다.\n\n{% asset_img django-setting-08.jpg %}\n\n아래처럼 파이참 콘솔에 로컬 8000번 포트로 프로젝트가 실행되었다는 로그가 뜨면 제대로 성공한 것입니다.\n\n{% asset_img django-setting-09.jpg %}\n\n웹에서 확인해 보시면 아래와 같은 화면이 나타날 겁니다.\n만약 이런 화면을 볼 수 없다면 차근차근 다시 해보시거나 가상환경, 패키지 설치법 등을 다시 한번 살펴보시기 바랍니다.\n\n{% asset_img django-setting-10.jpg %}\n\n그럼 재미있는 장고 프로젝트 진행하시길~\n   ","source":"_posts/django-setting-for-pycharm-community.md","raw":"---\ntitle: \"[django] pycharm(파이참) community 버전으로 django(장고) 프로젝트 설정\"\ndate: 2016-02-02 22:15:06\ntags:\n- python\n- django\n- pycharm\n---\n파이썬(python) + 장고(django)로 프로젝트를 진행하려고 하면, 우선 개발도구를 정해야 합니다. 콘솔 + VI로 작업해도 무관합니다만 장고를 지원해주는 IDE가 있다면 그 기능을 이용하는 것이 좋겠죠. 더불어 자동완성 등 다양한 기능을 사용할 수 있으니 작업 능률을 향상 시켜 줄수 있습니다. 몇가지 사용 가능한 IDE가 있겠지만, 파이썬(또는 장고) 프로젝트로 사용하기에는 Pycharm(Pycharm 다운로드)만한 게 없다고 생각합니다. 그런데 유료죠. 이클립스 처럼 무료면 참 좋을텐데, [JetBrains](https://www.jetbrains.com/)에서 만드는 자바 IDE인 intelliJ 또한 꽤 비싼 편이죠. \n\n비싸다고 좌절할 필요 없습니다. 저희에게는 무료버전인 파이참 커뮤니티 버전(Pycharm Community Version)이 있기 때문이죠. 비록 자바스크립트 하이라이팅, 다국어 파일 지원, html 파일 링크 등 몇가지 기능을 제외한다면 충분히 이 무료버전으로 장고 프로젝트를 진행 할 수 있습니다. 제가 처음 장고 프로젝트를 시작할때는 무료버전으로 장고 설정하는 방법에 관한 마땅한 자료를 찾지 못해서 꽤나 시간을 보냈기에 저와 같은 분이 없었으면 하는 마음에 글을 남겨봅니다.\n\n과정은 다음과 같습니다.\n\n\n### STEP 1. 장고 프로젝트 생성\n\n파이썬 가상환경이 설치(pyenv)되어 있고, 장고가 설치(가상환경 내에서 pip install django)되어 있다 가정합니다.\n참고로 pip는 파이썬 모듈을 설치하는 패키지 관리자입니다. \n위 부분이 막힌다면 다른 글들을 찾아보고 오시는게 좋을 것 같네요(나중에 저도 따로 포스팅 하려고 합니다).\n\n```\ndjango-admin.py startproject testproject\n```\n\n{% asset_img django-setting-01.jpg %}\n\n이제 프로젝트가 생성되었습니다. 프로젝트 안으로 들어가보면 testproject라는 기본 앱(장고 프로젝트는 앱의 모임)과 manage.py가 있군요. manage.py는 장고 프로젝트에서 사용할 명령어들을 위한 파일이라 생각하시면 됩니다(ex. 서버 실행이 python manage.py runserver).\n \n{% asset_img django-setting-02.jpg %}\n\n\n### STEP 2. 파이참에서 장고 프로젝트 열기\n\n다운받은 [파이참 커뮤니티 버전](https://www.jetbrains.com/pycharm/download/#section=mac)을 실행합니다.\n오른쪽 화면의 명령 중 open을 클릭해서 터미널에서 생성한 testproject를 클릭합니다. \n\n{% asset_img django-setting-03.jpg %}\n\n폴더 구조는 잠깐 말씀드린대로, testproject라는 프로젝트 안에 testproject라는 기본앱이 있구요. manage.py 명령 파일이 있습니다. 앱은 필요한 만큼 얼마든지 추가가 가능하니 앱이 필요한 경우에는 역시 터미널로 가서 \n\n```\nmanage.py startapp 앱이름\n```\n\n을 입력해주시면 됩니다.\n\n{% asset_img django-setting-04.jpg %}\n\n\n### STEP 3. 서버실행(Run) 설정\n\n거의 다 왔습니다. 프로젝트가 만들어 졌으나 바로 실행이 가능한 건 아니고(커뮤니티 버전이니까..) 간단한 실행 설정이 필요합니다.\n우선 상단 메뉴를 열어서, 아래 메뉴를 클릭해줍니다.\n\n> Run > Edit Configurations...\n\n{% asset_img django-setting-05.jpg %}\n\n다음과 같은 화면이 나타납니다. \n좌측 상단의 '+' 버튼을 클릭하고Python을 선택합니다.\n\n{% asset_img django-setting-06.jpg %}\n\nName을 적당하게 입력해주고,\nScript 부분은 manage.py의 경로를 입력합니다(우측의 '...' 버튼을 이용합시다).\nScript parameters에는 runserver를 입력합니다.\nPython interpreter에서 자신이 실행하고자 하는 파이썬 버전을 클릭해줍니다.\n실제 터미널에서 서버를 실행하는 것과 동일하다 생각하시면 됩니다.\n\n```\nmanage.py runserver\n```\n\n이렇게요.\n\n{% asset_img django-setting-07.jpg %}\n\n\n### STEP 4. 실행(Run)\n\n이제 설정은 끝입니다. 벌써 끝인거야? 라고 생각하실지 모르겠지만 파이썬 가상환경이나 모듈(패키지) 설치 등은 다 건너뛰었기 때문에 막히는 부분이 발생할 수도 있습니다. 가상환경과 모듈 설치에 대한 부분은 따로 포스팅하겠습니다.\n\n> Run > Run 'runserver'(이렇게 바뀌어 있네요)\n\n를 클릭합니다.\n\n{% asset_img django-setting-08.jpg %}\n\n아래처럼 파이참 콘솔에 로컬 8000번 포트로 프로젝트가 실행되었다는 로그가 뜨면 제대로 성공한 것입니다.\n\n{% asset_img django-setting-09.jpg %}\n\n웹에서 확인해 보시면 아래와 같은 화면이 나타날 겁니다.\n만약 이런 화면을 볼 수 없다면 차근차근 다시 해보시거나 가상환경, 패키지 설치법 등을 다시 한번 살펴보시기 바랍니다.\n\n{% asset_img django-setting-10.jpg %}\n\n그럼 재미있는 장고 프로젝트 진행하시길~\n   ","slug":"django-setting-for-pycharm-community","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv7z002rwxt4opqnkh04","content":"<p>파이썬(python) + 장고(django)로 프로젝트를 진행하려고 하면, 우선 개발도구를 정해야 합니다. 콘솔 + VI로 작업해도 무관합니다만 장고를 지원해주는 IDE가 있다면 그 기능을 이용하는 것이 좋겠죠. 더불어 자동완성 등 다양한 기능을 사용할 수 있으니 작업 능률을 향상 시켜 줄수 있습니다. 몇가지 사용 가능한 IDE가 있겠지만, 파이썬(또는 장고) 프로젝트로 사용하기에는 Pycharm(Pycharm 다운로드)만한 게 없다고 생각합니다. 그런데 유료죠. 이클립스 처럼 무료면 참 좋을텐데, <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"external\">JetBrains</a>에서 만드는 자바 IDE인 intelliJ 또한 꽤 비싼 편이죠.</p><p>비싸다고 좌절할 필요 없습니다. 저희에게는 무료버전인 파이참 커뮤니티 버전(Pycharm Community Version)이 있기 때문이죠. 비록 자바스크립트 하이라이팅, 다국어 파일 지원, html 파일 링크 등 몇가지 기능을 제외한다면 충분히 이 무료버전으로 장고 프로젝트를 진행 할 수 있습니다. 제가 처음 장고 프로젝트를 시작할때는 무료버전으로 장고 설정하는 방법에 관한 마땅한 자료를 찾지 못해서 꽤나 시간을 보냈기에 저와 같은 분이 없었으면 하는 마음에 글을 남겨봅니다.</p><p>과정은 다음과 같습니다.</p><h3 id=\"STEP-1-장고-프로젝트-생성\"><a href=\"#STEP-1-장고-프로젝트-생성\" class=\"headerlink\" title=\"STEP 1. 장고 프로젝트 생성\"></a>STEP 1. 장고 프로젝트 생성</h3><p>파이썬 가상환경이 설치(pyenv)되어 있고, 장고가 설치(가상환경 내에서 pip install django)되어 있다 가정합니다.<br>참고로 pip는 파이썬 모듈을 설치하는 패키지 관리자입니다.<br>위 부분이 막힌다면 다른 글들을 찾아보고 오시는게 좋을 것 같네요(나중에 저도 따로 포스팅 하려고 합니다).</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">django-admin<span class=\"selector-class\">.py</span> startproject testproject</div></pre></td></tr></table></figure><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-01.jpg\" alt=\"django-setting-01.jpg\"><p>이제 프로젝트가 생성되었습니다. 프로젝트 안으로 들어가보면 testproject라는 기본 앱(장고 프로젝트는 앱의 모임)과 manage.py가 있군요. manage.py는 장고 프로젝트에서 사용할 명령어들을 위한 파일이라 생각하시면 됩니다(ex. 서버 실행이 python manage.py runserver).</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-02.jpg\" alt=\"django-setting-02.jpg\"><h3 id=\"STEP-2-파이참에서-장고-프로젝트-열기\"><a href=\"#STEP-2-파이참에서-장고-프로젝트-열기\" class=\"headerlink\" title=\"STEP 2. 파이참에서 장고 프로젝트 열기\"></a>STEP 2. 파이참에서 장고 프로젝트 열기</h3><p>다운받은 <a href=\"https://www.jetbrains.com/pycharm/download/#section=mac\" target=\"_blank\" rel=\"external\">파이참 커뮤니티 버전</a>을 실행합니다.<br>오른쪽 화면의 명령 중 open을 클릭해서 터미널에서 생성한 testproject를 클릭합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-03.jpg\" alt=\"django-setting-03.jpg\"><p>폴더 구조는 잠깐 말씀드린대로, testproject라는 프로젝트 안에 testproject라는 기본앱이 있구요. manage.py 명령 파일이 있습니다. 앱은 필요한 만큼 얼마든지 추가가 가능하니 앱이 필요한 경우에는 역시 터미널로 가서</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">manage<span class=\"selector-class\">.py</span> startapp 앱이름</div></pre></td></tr></table></figure><p>을 입력해주시면 됩니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-04.jpg\" alt=\"django-setting-04.jpg\"><h3 id=\"STEP-3-서버실행-Run-설정\"><a href=\"#STEP-3-서버실행-Run-설정\" class=\"headerlink\" title=\"STEP 3. 서버실행(Run) 설정\"></a>STEP 3. 서버실행(Run) 설정</h3><p>거의 다 왔습니다. 프로젝트가 만들어 졌으나 바로 실행이 가능한 건 아니고(커뮤니티 버전이니까..) 간단한 실행 설정이 필요합니다.<br>우선 상단 메뉴를 열어서, 아래 메뉴를 클릭해줍니다.</p><blockquote><p>Run &gt; Edit Configurations…</p></blockquote><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-05.jpg\" alt=\"django-setting-05.jpg\"><p>다음과 같은 화면이 나타납니다.<br>좌측 상단의 ‘+’ 버튼을 클릭하고Python을 선택합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-06.jpg\" alt=\"django-setting-06.jpg\"><p>Name을 적당하게 입력해주고,<br>Script 부분은 manage.py의 경로를 입력합니다(우측의 ‘…’ 버튼을 이용합시다).<br>Script parameters에는 runserver를 입력합니다.<br>Python interpreter에서 자신이 실행하고자 하는 파이썬 버전을 클릭해줍니다.<br>실제 터미널에서 서버를 실행하는 것과 동일하다 생각하시면 됩니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">manage<span class=\"selector-class\">.py</span> runserver</div></pre></td></tr></table></figure><p>이렇게요.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-07.jpg\" alt=\"django-setting-07.jpg\"><h3 id=\"STEP-4-실행-Run\"><a href=\"#STEP-4-실행-Run\" class=\"headerlink\" title=\"STEP 4. 실행(Run)\"></a>STEP 4. 실행(Run)</h3><p>이제 설정은 끝입니다. 벌써 끝인거야? 라고 생각하실지 모르겠지만 파이썬 가상환경이나 모듈(패키지) 설치 등은 다 건너뛰었기 때문에 막히는 부분이 발생할 수도 있습니다. 가상환경과 모듈 설치에 대한 부분은 따로 포스팅하겠습니다.</p><blockquote><p>Run &gt; Run ‘runserver’(이렇게 바뀌어 있네요)</p></blockquote><p>를 클릭합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-08.jpg\" alt=\"django-setting-08.jpg\"><p>아래처럼 파이참 콘솔에 로컬 8000번 포트로 프로젝트가 실행되었다는 로그가 뜨면 제대로 성공한 것입니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-09.jpg\" alt=\"django-setting-09.jpg\"><p>웹에서 확인해 보시면 아래와 같은 화면이 나타날 겁니다.<br>만약 이런 화면을 볼 수 없다면 차근차근 다시 해보시거나 가상환경, 패키지 설치법 등을 다시 한번 살펴보시기 바랍니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-10.jpg\" alt=\"django-setting-10.jpg\"><p>그럼 재미있는 장고 프로젝트 진행하시길~</p>","excerpt":"","more":"<p>파이썬(python) + 장고(django)로 프로젝트를 진행하려고 하면, 우선 개발도구를 정해야 합니다. 콘솔 + VI로 작업해도 무관합니다만 장고를 지원해주는 IDE가 있다면 그 기능을 이용하는 것이 좋겠죠. 더불어 자동완성 등 다양한 기능을 사용할 수 있으니 작업 능률을 향상 시켜 줄수 있습니다. 몇가지 사용 가능한 IDE가 있겠지만, 파이썬(또는 장고) 프로젝트로 사용하기에는 Pycharm(Pycharm 다운로드)만한 게 없다고 생각합니다. 그런데 유료죠. 이클립스 처럼 무료면 참 좋을텐데, <a href=\"https://www.jetbrains.com/\">JetBrains</a>에서 만드는 자바 IDE인 intelliJ 또한 꽤 비싼 편이죠.</p><p>비싸다고 좌절할 필요 없습니다. 저희에게는 무료버전인 파이참 커뮤니티 버전(Pycharm Community Version)이 있기 때문이죠. 비록 자바스크립트 하이라이팅, 다국어 파일 지원, html 파일 링크 등 몇가지 기능을 제외한다면 충분히 이 무료버전으로 장고 프로젝트를 진행 할 수 있습니다. 제가 처음 장고 프로젝트를 시작할때는 무료버전으로 장고 설정하는 방법에 관한 마땅한 자료를 찾지 못해서 꽤나 시간을 보냈기에 저와 같은 분이 없었으면 하는 마음에 글을 남겨봅니다.</p><p>과정은 다음과 같습니다.</p><h3 id=\"STEP-1-장고-프로젝트-생성\"><a href=\"#STEP-1-장고-프로젝트-생성\" class=\"headerlink\" title=\"STEP 1. 장고 프로젝트 생성\"></a>STEP 1. 장고 프로젝트 생성</h3><p>파이썬 가상환경이 설치(pyenv)되어 있고, 장고가 설치(가상환경 내에서 pip install django)되어 있다 가정합니다.<br>참고로 pip는 파이썬 모듈을 설치하는 패키지 관리자입니다.<br>위 부분이 막힌다면 다른 글들을 찾아보고 오시는게 좋을 것 같네요(나중에 저도 따로 포스팅 하려고 합니다).</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">django-admin<span class=\"selector-class\">.py</span> startproject testproject</div></pre></td></tr></table></figure><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-01.jpg\" alt=\"django-setting-01.jpg\"><p>이제 프로젝트가 생성되었습니다. 프로젝트 안으로 들어가보면 testproject라는 기본 앱(장고 프로젝트는 앱의 모임)과 manage.py가 있군요. manage.py는 장고 프로젝트에서 사용할 명령어들을 위한 파일이라 생각하시면 됩니다(ex. 서버 실행이 python manage.py runserver).</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-02.jpg\" alt=\"django-setting-02.jpg\"><h3 id=\"STEP-2-파이참에서-장고-프로젝트-열기\"><a href=\"#STEP-2-파이참에서-장고-프로젝트-열기\" class=\"headerlink\" title=\"STEP 2. 파이참에서 장고 프로젝트 열기\"></a>STEP 2. 파이참에서 장고 프로젝트 열기</h3><p>다운받은 <a href=\"https://www.jetbrains.com/pycharm/download/#section=mac\">파이참 커뮤니티 버전</a>을 실행합니다.<br>오른쪽 화면의 명령 중 open을 클릭해서 터미널에서 생성한 testproject를 클릭합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-03.jpg\" alt=\"django-setting-03.jpg\"><p>폴더 구조는 잠깐 말씀드린대로, testproject라는 프로젝트 안에 testproject라는 기본앱이 있구요. manage.py 명령 파일이 있습니다. 앱은 필요한 만큼 얼마든지 추가가 가능하니 앱이 필요한 경우에는 역시 터미널로 가서</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">manage<span class=\"selector-class\">.py</span> startapp 앱이름</div></pre></td></tr></table></figure><p>을 입력해주시면 됩니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-04.jpg\" alt=\"django-setting-04.jpg\"><h3 id=\"STEP-3-서버실행-Run-설정\"><a href=\"#STEP-3-서버실행-Run-설정\" class=\"headerlink\" title=\"STEP 3. 서버실행(Run) 설정\"></a>STEP 3. 서버실행(Run) 설정</h3><p>거의 다 왔습니다. 프로젝트가 만들어 졌으나 바로 실행이 가능한 건 아니고(커뮤니티 버전이니까..) 간단한 실행 설정이 필요합니다.<br>우선 상단 메뉴를 열어서, 아래 메뉴를 클릭해줍니다.</p><blockquote><p>Run &gt; Edit Configurations…</p></blockquote><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-05.jpg\" alt=\"django-setting-05.jpg\"><p>다음과 같은 화면이 나타납니다.<br>좌측 상단의 ‘+’ 버튼을 클릭하고Python을 선택합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-06.jpg\" alt=\"django-setting-06.jpg\"><p>Name을 적당하게 입력해주고,<br>Script 부분은 manage.py의 경로를 입력합니다(우측의 ‘…’ 버튼을 이용합시다).<br>Script parameters에는 runserver를 입력합니다.<br>Python interpreter에서 자신이 실행하고자 하는 파이썬 버전을 클릭해줍니다.<br>실제 터미널에서 서버를 실행하는 것과 동일하다 생각하시면 됩니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">manage<span class=\"selector-class\">.py</span> runserver</div></pre></td></tr></table></figure><p>이렇게요.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-07.jpg\" alt=\"django-setting-07.jpg\"><h3 id=\"STEP-4-실행-Run\"><a href=\"#STEP-4-실행-Run\" class=\"headerlink\" title=\"STEP 4. 실행(Run)\"></a>STEP 4. 실행(Run)</h3><p>이제 설정은 끝입니다. 벌써 끝인거야? 라고 생각하실지 모르겠지만 파이썬 가상환경이나 모듈(패키지) 설치 등은 다 건너뛰었기 때문에 막히는 부분이 발생할 수도 있습니다. 가상환경과 모듈 설치에 대한 부분은 따로 포스팅하겠습니다.</p><blockquote><p>Run &gt; Run ‘runserver’(이렇게 바뀌어 있네요)</p></blockquote><p>를 클릭합니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-08.jpg\" alt=\"django-setting-08.jpg\"><p>아래처럼 파이참 콘솔에 로컬 8000번 포트로 프로젝트가 실행되었다는 로그가 뜨면 제대로 성공한 것입니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-09.jpg\" alt=\"django-setting-09.jpg\"><p>웹에서 확인해 보시면 아래와 같은 화면이 나타날 겁니다.<br>만약 이런 화면을 볼 수 없다면 차근차근 다시 해보시거나 가상환경, 패키지 설치법 등을 다시 한번 살펴보시기 바랍니다.</p><img src=\"/2016/02/02/django-setting-for-pycharm-community/django-setting-10.jpg\" alt=\"django-setting-10.jpg\"><p>그럼 재미있는 장고 프로젝트 진행하시길~</p>"},{"title":"[django] 테스트DB 없이 유닛테스트(unit test)하기","date":"2016-03-06T14:33:43.000Z","_content":"장고 프로젝트 역시 다른 웹 프레임워크와 마찬가지로 모듈의 로직을 검증하기 위한 유닛테스트가 존재합니다. \n테스트를 위한 추가적인 모듈을 설치해서 좀더 편리하게 유닛테스트를 진행할 수도 있지만, \n일단은 장고에서 기본적으로 지원하는 테스트 기능을 이용해서 테스트 해보았습니다.\n\n그런데, 장고에서 유닛테스트를 진행해보면, 한가지 문제가 발생합니다.\n바로 검증 데이터를 저장하기 위한 테스트DB를 생성한다는 점인데요.\n\n저도 사실 이 테스트DB가 생성되는 이유는 잘 모르겠습니다.\n테스트 DB가 새로운 테스트를 실행될 때마다 매번 지워졌다 새로 생성 되기 때문이죠.\n만약 테스트 데이터를 보존해서 테스트 결과를 누적하기 위함이라면 몰라도 실행할 때마다 사라지는 테스트DB를 굳이 만들어 내는 이유가 무엇인지 궁금하네요.\n\n```\nproj/\n\tapp/\n\t\tmigrations/\n\t\t__init__.py\n\t\tadmin.py\n\t\tmodels.py\n\t\ttests.py\n\t\tviews.py\n```\n\n앱을 새로 만들게 되면 위와 같이 다섯 개의 파일과 migrations라는 폴더가 생성됩니다.\n그 중에서 tests.py 파일이 바로 테스트 코드를 작성할 파일입니다.\n\n```\nimport unittest\n\nclass UnitTest(unittest.TestCase):\ndef test(self):\n\n\t...\n\n\tself.assertEqual(x, y)\n```\n\n위와 같이 테스트 코드를 작성한 후 테스트를 실행해봅니다.\n\n```\npython managy.py test\n```\n\n그러면, 아래와 같은 결과 화면을 볼 수 있습니다.\n\n{% asset_img 1.jpg %}\n\nCreating test database 이후, Destroying test database를 진행합니다.\n장고의 모델과 실제 DB의 sync가 잘 맞는 경우에는 위처럼 테스트 DB가 만들어 졌다가 테스트 완료 후 삭제해도 아무 문제가 없지만,\n기존 프로젝트를 장고로 마이그레이션 했거나 실제 데이터와 장고 모델을 다르게 사용하는 경우(불필요한 조인 미등록 등)에는 \n유닛테스트로 만들어진 DB가 실제 DB와 차이가 있어 테스트가 실패하는 경우가 발생할 수 있습니다.\n\n이런 문제 때문에 장고에서도 테스트 DB가 생성되지 않는 방법으로 유닛테스트를 진행할 필요가 있습니다.\n\n\n```\nproj/\n\tapp/\n\tcommon/    # 프로젝트 생성시 기본으로 생성되는 폴더\n\t\t__init__.py\n\t\tsettings.py\n\t\turls.py\n\t\twsgi.py\n\t\tsettings_test.py    # 추가\n\t\ttest_runner.py    # 추가\n```\n\n프로젝트를 만들게 되면, 기본적으로 setting과 url 등을 다루기 위한 기본 파일들이 생성됩니다.\n여기에 DB생성을 막기 위해서 test_runner.py와 setting_test.py 두 파일을 만들어 줍니다.\n\n\n### test_runner.py\n\n{% asset_img 2.jpg %}\n\ntest_runner.py 파일에는 장고 유닛테스트에서 사용되는 runner를 재정의하는 클래스인 TestRunner를 정의합니다.\nTestRunner 클래스가 상속받는 DiscoverRunner 클래스가 바로 테스트 DB를 생성을 담당하는 클래스입니다.\n새롭게 정의한 TestRunner에서 위의 세 메서드를 재정의하여 비어두면, 테스트 시 테스트 DB의 생성이 없어도 테스트가 가능해집니다.\n\n\n### settings_test.py\n\n{% asset_img 3.jpg %}\n\nsettings_test.py은 settings.py의 모든 항목을 가져옴과 동시에,\ntest_runner.py 파일에서 정의한 TestRunner 클래스를 테스트 러너로 지정하는 파일입니다.\n\n위의 두 파일을 생성하면 이제 준비는 끝났습니다.\n이제 다시한번 테스트를 진행해 보겠습니다.\n처음 실행했던 테스트 명령과는 조금 달라졌습니다.\n테스트를 진행할 구체적인 앱을 지정해 주었고(test1), TestRunner를 재지정한 settings_test.py를 테스트를 위한 환경으로 지정해주었습니다.\n\n```\npython manage.py test test1 --settings='unit_test.settings_test'\n```\n\n아래와 같은 결과를 출력합니다.\n위에서 처럼 Creating test database와 Destroying test database 과정이 없는 것을 확인할 수 있습니다.\n\n{% asset_img 4.jpg %}\n\n지금까지는 터미널에서 장고 테스트를 진행하는 과정이었습니다.\n한가지 팁으로 pycharm에서 장고 테스트를 진행하기 위한 설정에 대해서 설명드리겠습니다(Pycharm Community 버전 기준).\n우선 간단한 메서드를 만들고(생략), tests.py에 간단한 테스트 코드를 작성합니다.\n그리고 실행,\n\n{% asset_img 5.jpg %}\n\n위와 같은 에러를 뱉어내는군요. \"Requested setting DEFAULT_INDEX_TABLESPLAE......\" 와 같은 에러인데요.\n유닛테스트 설정에 환경변수를 설정해주지 않아서 생기는 문제 같습니다.\n그래서 Run > Edit Configurations.. 를 열어줍니다.\n좌측의 메뉴 중 Defaults > Python tests > Unittests 를 선택하면 아래와 같은 화면이 나타납니다.\n\n{% asset_img 6.jpg %}\n\n그 중에 Environment variables 항목이 있는데, 여기에 DJANGO_SETTINGS_MODULE=unit_test.settings_test를 입력해줍니다.\n그리고 파이썬 인터프리터를 자신이 개발하고 있는 파이썬 버전과 가상환경에 맞게 변경해줍니다(잘 모르시는 분은 가상환경 관련 글 참조).\n이제 모든 설정이 끝났습니다.\n\n그럼 테스트 진행!!\n아래와 같은 화면이 나타나면 성공한 것입니다.\n\n{% asset_img 7.jpg %}\n","source":"_posts/django-unit-test-without-testdb.md","raw":"---\ntitle: \"[django] 테스트DB 없이 유닛테스트(unit test)하기\"\ndate: 2016-03-06 23:33:43\ntags:\n- django\n- python\n- unit test\n---\n장고 프로젝트 역시 다른 웹 프레임워크와 마찬가지로 모듈의 로직을 검증하기 위한 유닛테스트가 존재합니다. \n테스트를 위한 추가적인 모듈을 설치해서 좀더 편리하게 유닛테스트를 진행할 수도 있지만, \n일단은 장고에서 기본적으로 지원하는 테스트 기능을 이용해서 테스트 해보았습니다.\n\n그런데, 장고에서 유닛테스트를 진행해보면, 한가지 문제가 발생합니다.\n바로 검증 데이터를 저장하기 위한 테스트DB를 생성한다는 점인데요.\n\n저도 사실 이 테스트DB가 생성되는 이유는 잘 모르겠습니다.\n테스트 DB가 새로운 테스트를 실행될 때마다 매번 지워졌다 새로 생성 되기 때문이죠.\n만약 테스트 데이터를 보존해서 테스트 결과를 누적하기 위함이라면 몰라도 실행할 때마다 사라지는 테스트DB를 굳이 만들어 내는 이유가 무엇인지 궁금하네요.\n\n```\nproj/\n\tapp/\n\t\tmigrations/\n\t\t__init__.py\n\t\tadmin.py\n\t\tmodels.py\n\t\ttests.py\n\t\tviews.py\n```\n\n앱을 새로 만들게 되면 위와 같이 다섯 개의 파일과 migrations라는 폴더가 생성됩니다.\n그 중에서 tests.py 파일이 바로 테스트 코드를 작성할 파일입니다.\n\n```\nimport unittest\n\nclass UnitTest(unittest.TestCase):\ndef test(self):\n\n\t...\n\n\tself.assertEqual(x, y)\n```\n\n위와 같이 테스트 코드를 작성한 후 테스트를 실행해봅니다.\n\n```\npython managy.py test\n```\n\n그러면, 아래와 같은 결과 화면을 볼 수 있습니다.\n\n{% asset_img 1.jpg %}\n\nCreating test database 이후, Destroying test database를 진행합니다.\n장고의 모델과 실제 DB의 sync가 잘 맞는 경우에는 위처럼 테스트 DB가 만들어 졌다가 테스트 완료 후 삭제해도 아무 문제가 없지만,\n기존 프로젝트를 장고로 마이그레이션 했거나 실제 데이터와 장고 모델을 다르게 사용하는 경우(불필요한 조인 미등록 등)에는 \n유닛테스트로 만들어진 DB가 실제 DB와 차이가 있어 테스트가 실패하는 경우가 발생할 수 있습니다.\n\n이런 문제 때문에 장고에서도 테스트 DB가 생성되지 않는 방법으로 유닛테스트를 진행할 필요가 있습니다.\n\n\n```\nproj/\n\tapp/\n\tcommon/    # 프로젝트 생성시 기본으로 생성되는 폴더\n\t\t__init__.py\n\t\tsettings.py\n\t\turls.py\n\t\twsgi.py\n\t\tsettings_test.py    # 추가\n\t\ttest_runner.py    # 추가\n```\n\n프로젝트를 만들게 되면, 기본적으로 setting과 url 등을 다루기 위한 기본 파일들이 생성됩니다.\n여기에 DB생성을 막기 위해서 test_runner.py와 setting_test.py 두 파일을 만들어 줍니다.\n\n\n### test_runner.py\n\n{% asset_img 2.jpg %}\n\ntest_runner.py 파일에는 장고 유닛테스트에서 사용되는 runner를 재정의하는 클래스인 TestRunner를 정의합니다.\nTestRunner 클래스가 상속받는 DiscoverRunner 클래스가 바로 테스트 DB를 생성을 담당하는 클래스입니다.\n새롭게 정의한 TestRunner에서 위의 세 메서드를 재정의하여 비어두면, 테스트 시 테스트 DB의 생성이 없어도 테스트가 가능해집니다.\n\n\n### settings_test.py\n\n{% asset_img 3.jpg %}\n\nsettings_test.py은 settings.py의 모든 항목을 가져옴과 동시에,\ntest_runner.py 파일에서 정의한 TestRunner 클래스를 테스트 러너로 지정하는 파일입니다.\n\n위의 두 파일을 생성하면 이제 준비는 끝났습니다.\n이제 다시한번 테스트를 진행해 보겠습니다.\n처음 실행했던 테스트 명령과는 조금 달라졌습니다.\n테스트를 진행할 구체적인 앱을 지정해 주었고(test1), TestRunner를 재지정한 settings_test.py를 테스트를 위한 환경으로 지정해주었습니다.\n\n```\npython manage.py test test1 --settings='unit_test.settings_test'\n```\n\n아래와 같은 결과를 출력합니다.\n위에서 처럼 Creating test database와 Destroying test database 과정이 없는 것을 확인할 수 있습니다.\n\n{% asset_img 4.jpg %}\n\n지금까지는 터미널에서 장고 테스트를 진행하는 과정이었습니다.\n한가지 팁으로 pycharm에서 장고 테스트를 진행하기 위한 설정에 대해서 설명드리겠습니다(Pycharm Community 버전 기준).\n우선 간단한 메서드를 만들고(생략), tests.py에 간단한 테스트 코드를 작성합니다.\n그리고 실행,\n\n{% asset_img 5.jpg %}\n\n위와 같은 에러를 뱉어내는군요. \"Requested setting DEFAULT_INDEX_TABLESPLAE......\" 와 같은 에러인데요.\n유닛테스트 설정에 환경변수를 설정해주지 않아서 생기는 문제 같습니다.\n그래서 Run > Edit Configurations.. 를 열어줍니다.\n좌측의 메뉴 중 Defaults > Python tests > Unittests 를 선택하면 아래와 같은 화면이 나타납니다.\n\n{% asset_img 6.jpg %}\n\n그 중에 Environment variables 항목이 있는데, 여기에 DJANGO_SETTINGS_MODULE=unit_test.settings_test를 입력해줍니다.\n그리고 파이썬 인터프리터를 자신이 개발하고 있는 파이썬 버전과 가상환경에 맞게 변경해줍니다(잘 모르시는 분은 가상환경 관련 글 참조).\n이제 모든 설정이 끝났습니다.\n\n그럼 테스트 진행!!\n아래와 같은 화면이 나타나면 성공한 것입니다.\n\n{% asset_img 7.jpg %}\n","slug":"django-unit-test-without-testdb","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv82002vwxt4ycjkr65t","content":"<p>장고 프로젝트 역시 다른 웹 프레임워크와 마찬가지로 모듈의 로직을 검증하기 위한 유닛테스트가 존재합니다.<br>테스트를 위한 추가적인 모듈을 설치해서 좀더 편리하게 유닛테스트를 진행할 수도 있지만,<br>일단은 장고에서 기본적으로 지원하는 테스트 기능을 이용해서 테스트 해보았습니다.</p><p>그런데, 장고에서 유닛테스트를 진행해보면, 한가지 문제가 발생합니다.<br>바로 검증 데이터를 저장하기 위한 테스트DB를 생성한다는 점인데요.</p><p>저도 사실 이 테스트DB가 생성되는 이유는 잘 모르겠습니다.<br>테스트 DB가 새로운 테스트를 실행될 때마다 매번 지워졌다 새로 생성 되기 때문이죠.<br>만약 테스트 데이터를 보존해서 테스트 결과를 누적하기 위함이라면 몰라도 실행할 때마다 사라지는 테스트DB를 굳이 만들어 내는 이유가 무엇인지 궁금하네요.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\tmigrations/</div><div class=\"line\">\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tadmin<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tmodels<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\ttests<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tviews.py</div></pre></td></tr></table></figure><p>앱을 새로 만들게 되면 위와 같이 다섯 개의 파일과 migrations라는 폴더가 생성됩니다.<br>그 중에서 tests.py 파일이 바로 테스트 코드를 작성할 파일입니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnitTest</span>(<span class=\"title\">unittest</span>.<span class=\"title\">TestCase</span>):</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\"></div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">self</span>.assertEqual(x, y)</div></pre></td></tr></table></figure><p>위와 같이 테스트 코드를 작성한 후 테스트를 실행해봅니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python managy<span class=\"selector-class\">.py</span> test</div></pre></td></tr></table></figure><p>그러면, 아래와 같은 결과 화면을 볼 수 있습니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/1.jpg\" alt=\"1.jpg\"><p>Creating test database 이후, Destroying test database를 진행합니다.<br>장고의 모델과 실제 DB의 sync가 잘 맞는 경우에는 위처럼 테스트 DB가 만들어 졌다가 테스트 완료 후 삭제해도 아무 문제가 없지만,<br>기존 프로젝트를 장고로 마이그레이션 했거나 실제 데이터와 장고 모델을 다르게 사용하는 경우(불필요한 조인 미등록 등)에는<br>유닛테스트로 만들어진 DB가 실제 DB와 차이가 있어 테스트가 실패하는 경우가 발생할 수 있습니다.</p><p>이런 문제 때문에 장고에서도 테스트 DB가 생성되지 않는 방법으로 유닛테스트를 진행할 필요가 있습니다.</p><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\tcommon/    # 프로젝트 생성시 기본으로 생성되는 폴더</div><div class=\"line\">\t\t__init__.<span class=\"keyword\">py</span></div><div class=\"line\">\t\tsettings.<span class=\"keyword\">py</span></div><div class=\"line\">\t\turls.<span class=\"keyword\">py</span></div><div class=\"line\">\t\twsgi.<span class=\"keyword\">py</span></div><div class=\"line\">\t\tsettings_test.<span class=\"keyword\">py</span>    # 추가</div><div class=\"line\">\t\ttest_runner.<span class=\"keyword\">py</span>    # 추가</div></pre></td></tr></table></figure><p>프로젝트를 만들게 되면, 기본적으로 setting과 url 등을 다루기 위한 기본 파일들이 생성됩니다.<br>여기에 DB생성을 막기 위해서 test_runner.py와 setting_test.py 두 파일을 만들어 줍니다.</p><h3 id=\"test-runner-py\"><a href=\"#test-runner-py\" class=\"headerlink\" title=\"test_runner.py\"></a>test_runner.py</h3><img src=\"/2016/03/06/django-unit-test-without-testdb/2.jpg\" alt=\"2.jpg\"><p>test_runner.py 파일에는 장고 유닛테스트에서 사용되는 runner를 재정의하는 클래스인 TestRunner를 정의합니다.<br>TestRunner 클래스가 상속받는 DiscoverRunner 클래스가 바로 테스트 DB를 생성을 담당하는 클래스입니다.<br>새롭게 정의한 TestRunner에서 위의 세 메서드를 재정의하여 비어두면, 테스트 시 테스트 DB의 생성이 없어도 테스트가 가능해집니다.</p><h3 id=\"settings-test-py\"><a href=\"#settings-test-py\" class=\"headerlink\" title=\"settings_test.py\"></a>settings_test.py</h3><img src=\"/2016/03/06/django-unit-test-without-testdb/3.jpg\" alt=\"3.jpg\"><p>settings_test.py은 settings.py의 모든 항목을 가져옴과 동시에,<br>test_runner.py 파일에서 정의한 TestRunner 클래스를 테스트 러너로 지정하는 파일입니다.</p><p>위의 두 파일을 생성하면 이제 준비는 끝났습니다.<br>이제 다시한번 테스트를 진행해 보겠습니다.<br>처음 실행했던 테스트 명령과는 조금 달라졌습니다.<br>테스트를 진행할 구체적인 앱을 지정해 주었고(test1), TestRunner를 재지정한 settings_test.py를 테스트를 위한 환경으로 지정해주었습니다.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>1 --settings=<span class=\"string\">'unit_test.settings_test'</span></div></pre></td></tr></table></figure><p>아래와 같은 결과를 출력합니다.<br>위에서 처럼 Creating test database와 Destroying test database 과정이 없는 것을 확인할 수 있습니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/4.jpg\" alt=\"4.jpg\"><p>지금까지는 터미널에서 장고 테스트를 진행하는 과정이었습니다.<br>한가지 팁으로 pycharm에서 장고 테스트를 진행하기 위한 설정에 대해서 설명드리겠습니다(Pycharm Community 버전 기준).<br>우선 간단한 메서드를 만들고(생략), tests.py에 간단한 테스트 코드를 작성합니다.<br>그리고 실행,</p><img src=\"/2016/03/06/django-unit-test-without-testdb/5.jpg\" alt=\"5.jpg\"><p>위와 같은 에러를 뱉어내는군요. “Requested setting DEFAULT_INDEX_TABLESPLAE……” 와 같은 에러인데요.<br>유닛테스트 설정에 환경변수를 설정해주지 않아서 생기는 문제 같습니다.<br>그래서 Run &gt; Edit Configurations.. 를 열어줍니다.<br>좌측의 메뉴 중 Defaults &gt; Python tests &gt; Unittests 를 선택하면 아래와 같은 화면이 나타납니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/6.jpg\" alt=\"6.jpg\"><p>그 중에 Environment variables 항목이 있는데, 여기에 DJANGO_SETTINGS_MODULE=unit_test.settings_test를 입력해줍니다.<br>그리고 파이썬 인터프리터를 자신이 개발하고 있는 파이썬 버전과 가상환경에 맞게 변경해줍니다(잘 모르시는 분은 가상환경 관련 글 참조).<br>이제 모든 설정이 끝났습니다.</p><p>그럼 테스트 진행!!<br>아래와 같은 화면이 나타나면 성공한 것입니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/7.jpg\" alt=\"7.jpg\">","excerpt":"","more":"<p>장고 프로젝트 역시 다른 웹 프레임워크와 마찬가지로 모듈의 로직을 검증하기 위한 유닛테스트가 존재합니다.<br>테스트를 위한 추가적인 모듈을 설치해서 좀더 편리하게 유닛테스트를 진행할 수도 있지만,<br>일단은 장고에서 기본적으로 지원하는 테스트 기능을 이용해서 테스트 해보았습니다.</p><p>그런데, 장고에서 유닛테스트를 진행해보면, 한가지 문제가 발생합니다.<br>바로 검증 데이터를 저장하기 위한 테스트DB를 생성한다는 점인데요.</p><p>저도 사실 이 테스트DB가 생성되는 이유는 잘 모르겠습니다.<br>테스트 DB가 새로운 테스트를 실행될 때마다 매번 지워졌다 새로 생성 되기 때문이죠.<br>만약 테스트 데이터를 보존해서 테스트 결과를 누적하기 위함이라면 몰라도 실행할 때마다 사라지는 테스트DB를 굳이 만들어 내는 이유가 무엇인지 궁금하네요.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\tmigrations/</div><div class=\"line\">\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tadmin<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tmodels<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\ttests<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tviews.py</div></pre></td></tr></table></figure><p>앱을 새로 만들게 되면 위와 같이 다섯 개의 파일과 migrations라는 폴더가 생성됩니다.<br>그 중에서 tests.py 파일이 바로 테스트 코드를 작성할 파일입니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnitTest</span>(<span class=\"title\">unittest</span>.<span class=\"title\">TestCase</span>):</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\"></div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">self</span>.assertEqual(x, y)</div></pre></td></tr></table></figure><p>위와 같이 테스트 코드를 작성한 후 테스트를 실행해봅니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python managy<span class=\"selector-class\">.py</span> test</div></pre></td></tr></table></figure><p>그러면, 아래와 같은 결과 화면을 볼 수 있습니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/1.jpg\" alt=\"1.jpg\"><p>Creating test database 이후, Destroying test database를 진행합니다.<br>장고의 모델과 실제 DB의 sync가 잘 맞는 경우에는 위처럼 테스트 DB가 만들어 졌다가 테스트 완료 후 삭제해도 아무 문제가 없지만,<br>기존 프로젝트를 장고로 마이그레이션 했거나 실제 데이터와 장고 모델을 다르게 사용하는 경우(불필요한 조인 미등록 등)에는<br>유닛테스트로 만들어진 DB가 실제 DB와 차이가 있어 테스트가 실패하는 경우가 발생할 수 있습니다.</p><p>이런 문제 때문에 장고에서도 테스트 DB가 생성되지 않는 방법으로 유닛테스트를 진행할 필요가 있습니다.</p><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\tcommon/    # 프로젝트 생성시 기본으로 생성되는 폴더</div><div class=\"line\">\t\t__init__.<span class=\"keyword\">py</span></div><div class=\"line\">\t\tsettings.<span class=\"keyword\">py</span></div><div class=\"line\">\t\turls.<span class=\"keyword\">py</span></div><div class=\"line\">\t\twsgi.<span class=\"keyword\">py</span></div><div class=\"line\">\t\tsettings_test.<span class=\"keyword\">py</span>    # 추가</div><div class=\"line\">\t\ttest_runner.<span class=\"keyword\">py</span>    # 추가</div></pre></td></tr></table></figure><p>프로젝트를 만들게 되면, 기본적으로 setting과 url 등을 다루기 위한 기본 파일들이 생성됩니다.<br>여기에 DB생성을 막기 위해서 test_runner.py와 setting_test.py 두 파일을 만들어 줍니다.</p><h3 id=\"test-runner-py\"><a href=\"#test-runner-py\" class=\"headerlink\" title=\"test_runner.py\"></a>test_runner.py</h3><img src=\"/2016/03/06/django-unit-test-without-testdb/2.jpg\" alt=\"2.jpg\"><p>test_runner.py 파일에는 장고 유닛테스트에서 사용되는 runner를 재정의하는 클래스인 TestRunner를 정의합니다.<br>TestRunner 클래스가 상속받는 DiscoverRunner 클래스가 바로 테스트 DB를 생성을 담당하는 클래스입니다.<br>새롭게 정의한 TestRunner에서 위의 세 메서드를 재정의하여 비어두면, 테스트 시 테스트 DB의 생성이 없어도 테스트가 가능해집니다.</p><h3 id=\"settings-test-py\"><a href=\"#settings-test-py\" class=\"headerlink\" title=\"settings_test.py\"></a>settings_test.py</h3><img src=\"/2016/03/06/django-unit-test-without-testdb/3.jpg\" alt=\"3.jpg\"><p>settings_test.py은 settings.py의 모든 항목을 가져옴과 동시에,<br>test_runner.py 파일에서 정의한 TestRunner 클래스를 테스트 러너로 지정하는 파일입니다.</p><p>위의 두 파일을 생성하면 이제 준비는 끝났습니다.<br>이제 다시한번 테스트를 진행해 보겠습니다.<br>처음 실행했던 테스트 명령과는 조금 달라졌습니다.<br>테스트를 진행할 구체적인 앱을 지정해 주었고(test1), TestRunner를 재지정한 settings_test.py를 테스트를 위한 환경으로 지정해주었습니다.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>1 --settings=<span class=\"string\">'unit_test.settings_test'</span></div></pre></td></tr></table></figure><p>아래와 같은 결과를 출력합니다.<br>위에서 처럼 Creating test database와 Destroying test database 과정이 없는 것을 확인할 수 있습니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/4.jpg\" alt=\"4.jpg\"><p>지금까지는 터미널에서 장고 테스트를 진행하는 과정이었습니다.<br>한가지 팁으로 pycharm에서 장고 테스트를 진행하기 위한 설정에 대해서 설명드리겠습니다(Pycharm Community 버전 기준).<br>우선 간단한 메서드를 만들고(생략), tests.py에 간단한 테스트 코드를 작성합니다.<br>그리고 실행,</p><img src=\"/2016/03/06/django-unit-test-without-testdb/5.jpg\" alt=\"5.jpg\"><p>위와 같은 에러를 뱉어내는군요. “Requested setting DEFAULT_INDEX_TABLESPLAE……” 와 같은 에러인데요.<br>유닛테스트 설정에 환경변수를 설정해주지 않아서 생기는 문제 같습니다.<br>그래서 Run &gt; Edit Configurations.. 를 열어줍니다.<br>좌측의 메뉴 중 Defaults &gt; Python tests &gt; Unittests 를 선택하면 아래와 같은 화면이 나타납니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/6.jpg\" alt=\"6.jpg\"><p>그 중에 Environment variables 항목이 있는데, 여기에 DJANGO_SETTINGS_MODULE=unit_test.settings_test를 입력해줍니다.<br>그리고 파이썬 인터프리터를 자신이 개발하고 있는 파이썬 버전과 가상환경에 맞게 변경해줍니다(잘 모르시는 분은 가상환경 관련 글 참조).<br>이제 모든 설정이 끝났습니다.</p><p>그럼 테스트 진행!!<br>아래와 같은 화면이 나타나면 성공한 것입니다.</p><img src=\"/2016/03/06/django-unit-test-without-testdb/7.jpg\" alt=\"7.jpg\">"},{"title":"[django] 커스텀 템플릿태그(templatetags) 활용하기","date":"2016-03-02T15:34:12.000Z","_content":"웹 개발을 하다보면, html 코드 상에서 다양한 연산을 해야하는 경우가 발생합니다.\n그래서 php, jsp, asp, jade 등 각 언어별 웹 프레임워크에서 이와 같은 경우를 처리해주기 위한 기능을 제공하고 있습니다.\n장고(django) 템플릿(template)에서도 위와 같은 웹 프레임워크와 같이 동일한 기능을 지원하는 템플릿태그(templatetags)라는 것이 있습니다.\n장고의 템플릿태그는 다른 웹 프레임워크와 마찬가지로 기본적으로 개발자가 필요한 기능은 대부분 제공하고 있습니다.\n\n웹 프레임워크가 기본적인 기능을 대부분 제공하고 있지만, 개발을 하다보면 자신이 원하는 기능이 없는 경우가 간혹 있습니다.\n그래서 장고에서는 개발자가 커스텀으로 템플릿태그를 만들수 있는 기능을 제공하고 있습니다.\n\n우선 아래와 같이 앱(app) 아래에 templatetags라는 폴더를 만들어 줍니다. \ntemaplatetags라는 폴더 이름은 고정값이므로 반드시 동일하게 생성합니다.\n\n```\nproj/\n\tapp/\n\t\t__init__.py\n\t\tmodels.py\n\t\tview.py\n\t\ttemplatetags/\n\t\t\t__init__.py\n\t\t\tcustom_tags.py    (커스텀 템플릿태그를 저장할 모듈 파일)\n```\n\n이때,  app은 반드시 setting 파일의 INSTALLED_APPS에 추가가 되어 있어야 합니다.\n그리고 한가지 주의할 점은 여러 앱에 각각 templatetags가 있는 경우, 모듈의 이름이 겹치지 않도록해야 합니다.\n이유는, template에서 커스텀 태그는 앱의 위치와 상관없이 모듈 이름으로 로드되므로 이름이 겹치게 되면 충돌이 발생하게 됩니다.\n즉,\n\n```\nproj/\n\tapp/\n\t\ttemplatetags/\n\t\t\tcustom_tags.py\n\tcommon/\n\t\ttemplatetags/\n\t\t\tcommon_tags.py    (태그모듈 이름이 겹치지 않도록 주의!!!)\n```\n\n태그 모듈을 사용하는 방법은 간단합니다.\n커스텀 태그를 사용하고자하는 템플릿 파일의 상단에 아래와 같이 한줄만 추가해주면 됩니다.\n\n```\n{% load custom_tags %}\n```\n\n그렇다면 실제로 커스텀 태그를 만들어서 사용하는 예제를 만들어 보도록 하겠습니다.\ncustom_tags.py 파일을 열어 사용하려는 태그 이름으로 메서드 이름으로 지정하여 만들어줍니다.\n\n```\n@register.filter            # 1\ndef add_str(left, right):\nreturn left + right\n\n@register.simple_tag            # 2\ndef today():\nreturn datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n\n@register.assignment_tag            # 3\ndef max_int(a, b):\nreturn max(int(a), int(b))\n\n@register.inclusion_tag(div.html, takes_context=True)            # 4\ndef include_div(context): \nreturn {\n'div_param': context['param']\n}\n```\n\n대략 위의 4가지 태그로 구분할 수 있는데, 각 태그에 따라서 사용법이 조금씩 다릅니다.\n이 4가지 커스텀 태그만 이용하면 웬만한 기능은 다 만들어 낼 수 있습니다.\n번호별 사용법은 아래와 같습니다.\n\n```\n# 1.\n# filter 태그는 앞의 값(left)에다가 뒤의 값(right)을 연산하는 태그입니다. \n# filter이기 때문에 여러개의 필터를 붙여서 사용가능합니다.\n# add_str 메서드의 left 파라미터가 prefix에 해당하고, right 파라미터가 url에 해당합니다. \n# 결과적으로 prefix + url이 add_str 메서드를 통해 div의 text가 되는 것이지요.\n\n<div>\n{{ prefix | add_str: url | add_str: name | add_str: params }}\n</div>\n\n# 2. \n# simple_tag는 단순히 어떤 특정값을 출력합니다.\n# 아래와 같이 today를 입력하면, \"2016-3-2 10:00\"과 같이 현재 시간이 출력됩니다.\n\n<div>\n{{ today }}\n</div>\n\n# 3. \n# assignment_tag는 템플릿에서 사용가능한 변수에 결과를 저장하는 역할을 합니다. \n# 어찌보면 with 태그와 유사한 형태라 할 수 있으나, with과는 다르게 {% endwith %} 처럼 끝을 맺어줄 필요가 없습니다.\n# 즉, 좀 더 간편하게 변수를 설정해 줄 수 있고, 필요한 기능을 태그 모듈에 별도로 삽입할 수 있다는 장점이 있습니다.\n\n{% max_int first_count second_count as max_count %} \n\n# 4.\n# inclusion_tag는 저도 프로젝트에 직접 사용해 보진 않았지만, 테스트는 해보았습니다.\n# 간략히 설명해서 inclusion_tag를 사용하면 데코레이터의 첫번째 파라미터인 템플릿을 호출하여 부모 템플릿에 출력합니다.\n# 이때, 호출되는 템플릿에 부모 템플릿(호출하는 템플릿)의 각종 파라미터를 전달해 줄 수 있습니다.\n# 데코레이터의 takes_context=True로 설정해주면,\n# 부모 템플릿의 context의 값을 가져와 호출하는 템플릿으로 전달할 수 있습니다.\n\nparent.html\n{{ include_div}}\n\ndiv.html\n<div>{{ div_param }}</div>\n```\n\n이상 커스텀 태그의 종류와 사용법에 대해서 알아보았습니다. \n제가 설명드린 커스텀 태그는 아주 기초적인 부분이라 제작 및 사용법이 아주 간단한데요.\n커스텀 태그 파일은 파이썬 모듈이기 때문에 파이썬에서 사용할 수 있는 내장함수와 모든 확장 모듈을 사용할 수 있기 때문에,\n얼마든지 복잡하고 파워풀한 기능을 가진 태그를 만들어 낼 수 있습니다.\n\n하지만, 복잡한 연산을 처리하는 것은 템플릿보다는 웹서버 단에서 처리하는 것이 우선이고,\n서버에서 처리가 곤란하거나 불가피한 상황인 경우에 태그를 사용해서 처리하는 것이라 생각합니다.\n아마 장고에서도 사용가능한 기본 태그를 최소한으로 만들어 놓은 것도 같은 이유 때문일 거라 생각이 드네요.\n","source":"_posts/django-using-custom-templatetags.md","raw":"---\ntitle: \"[django] 커스텀 템플릿태그(templatetags) 활용하기\"\ndate: 2016-03-03 00:34:12\ntags:\n- django\n- python\n- templatetags\n---\n웹 개발을 하다보면, html 코드 상에서 다양한 연산을 해야하는 경우가 발생합니다.\n그래서 php, jsp, asp, jade 등 각 언어별 웹 프레임워크에서 이와 같은 경우를 처리해주기 위한 기능을 제공하고 있습니다.\n장고(django) 템플릿(template)에서도 위와 같은 웹 프레임워크와 같이 동일한 기능을 지원하는 템플릿태그(templatetags)라는 것이 있습니다.\n장고의 템플릿태그는 다른 웹 프레임워크와 마찬가지로 기본적으로 개발자가 필요한 기능은 대부분 제공하고 있습니다.\n\n웹 프레임워크가 기본적인 기능을 대부분 제공하고 있지만, 개발을 하다보면 자신이 원하는 기능이 없는 경우가 간혹 있습니다.\n그래서 장고에서는 개발자가 커스텀으로 템플릿태그를 만들수 있는 기능을 제공하고 있습니다.\n\n우선 아래와 같이 앱(app) 아래에 templatetags라는 폴더를 만들어 줍니다. \ntemaplatetags라는 폴더 이름은 고정값이므로 반드시 동일하게 생성합니다.\n\n```\nproj/\n\tapp/\n\t\t__init__.py\n\t\tmodels.py\n\t\tview.py\n\t\ttemplatetags/\n\t\t\t__init__.py\n\t\t\tcustom_tags.py    (커스텀 템플릿태그를 저장할 모듈 파일)\n```\n\n이때,  app은 반드시 setting 파일의 INSTALLED_APPS에 추가가 되어 있어야 합니다.\n그리고 한가지 주의할 점은 여러 앱에 각각 templatetags가 있는 경우, 모듈의 이름이 겹치지 않도록해야 합니다.\n이유는, template에서 커스텀 태그는 앱의 위치와 상관없이 모듈 이름으로 로드되므로 이름이 겹치게 되면 충돌이 발생하게 됩니다.\n즉,\n\n```\nproj/\n\tapp/\n\t\ttemplatetags/\n\t\t\tcustom_tags.py\n\tcommon/\n\t\ttemplatetags/\n\t\t\tcommon_tags.py    (태그모듈 이름이 겹치지 않도록 주의!!!)\n```\n\n태그 모듈을 사용하는 방법은 간단합니다.\n커스텀 태그를 사용하고자하는 템플릿 파일의 상단에 아래와 같이 한줄만 추가해주면 됩니다.\n\n```\n{% load custom_tags %}\n```\n\n그렇다면 실제로 커스텀 태그를 만들어서 사용하는 예제를 만들어 보도록 하겠습니다.\ncustom_tags.py 파일을 열어 사용하려는 태그 이름으로 메서드 이름으로 지정하여 만들어줍니다.\n\n```\n@register.filter            # 1\ndef add_str(left, right):\nreturn left + right\n\n@register.simple_tag            # 2\ndef today():\nreturn datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n\n@register.assignment_tag            # 3\ndef max_int(a, b):\nreturn max(int(a), int(b))\n\n@register.inclusion_tag(div.html, takes_context=True)            # 4\ndef include_div(context): \nreturn {\n'div_param': context['param']\n}\n```\n\n대략 위의 4가지 태그로 구분할 수 있는데, 각 태그에 따라서 사용법이 조금씩 다릅니다.\n이 4가지 커스텀 태그만 이용하면 웬만한 기능은 다 만들어 낼 수 있습니다.\n번호별 사용법은 아래와 같습니다.\n\n```\n# 1.\n# filter 태그는 앞의 값(left)에다가 뒤의 값(right)을 연산하는 태그입니다. \n# filter이기 때문에 여러개의 필터를 붙여서 사용가능합니다.\n# add_str 메서드의 left 파라미터가 prefix에 해당하고, right 파라미터가 url에 해당합니다. \n# 결과적으로 prefix + url이 add_str 메서드를 통해 div의 text가 되는 것이지요.\n\n<div>\n{{ prefix | add_str: url | add_str: name | add_str: params }}\n</div>\n\n# 2. \n# simple_tag는 단순히 어떤 특정값을 출력합니다.\n# 아래와 같이 today를 입력하면, \"2016-3-2 10:00\"과 같이 현재 시간이 출력됩니다.\n\n<div>\n{{ today }}\n</div>\n\n# 3. \n# assignment_tag는 템플릿에서 사용가능한 변수에 결과를 저장하는 역할을 합니다. \n# 어찌보면 with 태그와 유사한 형태라 할 수 있으나, with과는 다르게 {% endwith %} 처럼 끝을 맺어줄 필요가 없습니다.\n# 즉, 좀 더 간편하게 변수를 설정해 줄 수 있고, 필요한 기능을 태그 모듈에 별도로 삽입할 수 있다는 장점이 있습니다.\n\n{% max_int first_count second_count as max_count %} \n\n# 4.\n# inclusion_tag는 저도 프로젝트에 직접 사용해 보진 않았지만, 테스트는 해보았습니다.\n# 간략히 설명해서 inclusion_tag를 사용하면 데코레이터의 첫번째 파라미터인 템플릿을 호출하여 부모 템플릿에 출력합니다.\n# 이때, 호출되는 템플릿에 부모 템플릿(호출하는 템플릿)의 각종 파라미터를 전달해 줄 수 있습니다.\n# 데코레이터의 takes_context=True로 설정해주면,\n# 부모 템플릿의 context의 값을 가져와 호출하는 템플릿으로 전달할 수 있습니다.\n\nparent.html\n{{ include_div}}\n\ndiv.html\n<div>{{ div_param }}</div>\n```\n\n이상 커스텀 태그의 종류와 사용법에 대해서 알아보았습니다. \n제가 설명드린 커스텀 태그는 아주 기초적인 부분이라 제작 및 사용법이 아주 간단한데요.\n커스텀 태그 파일은 파이썬 모듈이기 때문에 파이썬에서 사용할 수 있는 내장함수와 모든 확장 모듈을 사용할 수 있기 때문에,\n얼마든지 복잡하고 파워풀한 기능을 가진 태그를 만들어 낼 수 있습니다.\n\n하지만, 복잡한 연산을 처리하는 것은 템플릿보다는 웹서버 단에서 처리하는 것이 우선이고,\n서버에서 처리가 곤란하거나 불가피한 상황인 경우에 태그를 사용해서 처리하는 것이라 생각합니다.\n아마 장고에서도 사용가능한 기본 태그를 최소한으로 만들어 놓은 것도 같은 이유 때문일 거라 생각이 드네요.\n","slug":"django-using-custom-templatetags","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv85002ywxt4ood0o2o4","content":"<p>웹 개발을 하다보면, html 코드 상에서 다양한 연산을 해야하는 경우가 발생합니다.<br>그래서 php, jsp, asp, jade 등 각 언어별 웹 프레임워크에서 이와 같은 경우를 처리해주기 위한 기능을 제공하고 있습니다.<br>장고(django) 템플릿(template)에서도 위와 같은 웹 프레임워크와 같이 동일한 기능을 지원하는 템플릿태그(templatetags)라는 것이 있습니다.<br>장고의 템플릿태그는 다른 웹 프레임워크와 마찬가지로 기본적으로 개발자가 필요한 기능은 대부분 제공하고 있습니다.</p><p>웹 프레임워크가 기본적인 기능을 대부분 제공하고 있지만, 개발을 하다보면 자신이 원하는 기능이 없는 경우가 간혹 있습니다.<br>그래서 장고에서는 개발자가 커스텀으로 템플릿태그를 만들수 있는 기능을 제공하고 있습니다.</p><p>우선 아래와 같이 앱(app) 아래에 templatetags라는 폴더를 만들어 줍니다.<br>temaplatetags라는 폴더 이름은 고정값이므로 반드시 동일하게 생성합니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tmodels<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tview<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\t\tcustom_tags<span class=\"selector-class\">.py</span>    (커스텀 템플릿태그를 저장할 모듈 파일)</div></pre></td></tr></table></figure><p>이때, app은 반드시 setting 파일의 INSTALLED_APPS에 추가가 되어 있어야 합니다.<br>그리고 한가지 주의할 점은 여러 앱에 각각 templatetags가 있는 경우, 모듈의 이름이 겹치지 않도록해야 합니다.<br>이유는, template에서 커스텀 태그는 앱의 위치와 상관없이 모듈 이름으로 로드되므로 이름이 겹치게 되면 충돌이 발생하게 됩니다.<br>즉,</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\tcustom_tags<span class=\"selector-class\">.py</span></div><div class=\"line\">\tcommon/</div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\tcommon_tags<span class=\"selector-class\">.py</span>    (태그모듈 이름이 겹치지 않도록 주의!!!)</div></pre></td></tr></table></figure><p>태그 모듈을 사용하는 방법은 간단합니다.<br>커스텀 태그를 사용하고자하는 템플릿 파일의 상단에 아래와 같이 한줄만 추가해주면 됩니다.</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> custom_tags %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure><p>그렇다면 실제로 커스텀 태그를 만들어서 사용하는 예제를 만들어 보도록 하겠습니다.<br>custom_tags.py 파일을 열어 사용하려는 태그 이름으로 메서드 이름으로 지정하여 만들어줍니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@register.filter            <span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_str</span><span class=\"params\">(left, right)</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> left + right</div><div class=\"line\"></div><div class=\"line\">@register.simple_tag            <span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">today</span><span class=\"params\">()</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> datetime.now().strftime(<span class=\"string\">\"%Y-%m-%d %H:%M\"</span>)</div><div class=\"line\"></div><div class=\"line\">@register.assignment_tag            <span class=\"comment\"># 3</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_int</span><span class=\"params\">(a, b)</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> max(int(a), int(b))</div><div class=\"line\"></div><div class=\"line\">@register.inclusion_tag(div.html, takes_context=True)            <span class=\"comment\"># 4</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include_div</span><span class=\"params\">(context)</span></span>: </div><div class=\"line\"><span class=\"keyword\">return</span> &#123;</div><div class=\"line\"><span class=\"string\">'div_param'</span>: context[<span class=\"string\">'param'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>대략 위의 4가지 태그로 구분할 수 있는데, 각 태그에 따라서 사용법이 조금씩 다릅니다.<br>이 4가지 커스텀 태그만 이용하면 웬만한 기능은 다 만들어 낼 수 있습니다.<br>번호별 사용법은 아래와 같습니다.</p><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 1.</span></div><div class=\"line\"><span class=\"meta\"># filter 태그는 앞의 값(left)에다가 뒤의 값(right)을 연산하는 태그입니다. </span></div><div class=\"line\"><span class=\"meta\"># filter이기 때문에 여러개의 필터를 붙여서 사용가능합니다.</span></div><div class=\"line\"><span class=\"meta\"># add_str 메서드의 left 파라미터가 prefix에 해당하고, right 파라미터가 url에 해당합니다. </span></div><div class=\"line\"><span class=\"meta\"># 결과적으로 prefix + url이 add_str 메서드를 통해 div의 text가 되는 것이지요.</span></div><div class=\"line\"></div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&#123;&#123; prefix | add_str: url | add_str: name | add_str: params &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 2. </span></div><div class=\"line\"><span class=\"meta\"># simple_tag는 단순히 어떤 특정값을 출력합니다.</span></div><div class=\"line\"><span class=\"meta\"># 아래와 같이 today를 입력하면, \"2016-3-2 10:00\"과 같이 현재 시간이 출력됩니다.</span></div><div class=\"line\"></div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&#123;&#123; today &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 3. </span></div><div class=\"line\"><span class=\"meta\"># assignment_tag는 템플릿에서 사용가능한 변수에 결과를 저장하는 역할을 합니다. </span></div><div class=\"line\"><span class=\"meta\"># 어찌보면 with 태그와 유사한 형태라 할 수 있으나, with과는 다르게 &#123;% endwith %&#125; 처럼 끝을 맺어줄 필요가 없습니다.</span></div><div class=\"line\"><span class=\"meta\"># 즉, 좀 더 간편하게 변수를 설정해 줄 수 있고, 필요한 기능을 태그 모듈에 별도로 삽입할 수 있다는 장점이 있습니다.</span></div><div class=\"line\"></div><div class=\"line\">&#123;% max_int first_count second_count as max_count %&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 4.</span></div><div class=\"line\"><span class=\"meta\"># inclusion_tag는 저도 프로젝트에 직접 사용해 보진 않았지만, 테스트는 해보았습니다.</span></div><div class=\"line\"><span class=\"meta\"># 간략히 설명해서 inclusion_tag를 사용하면 데코레이터의 첫번째 파라미터인 템플릿을 호출하여 부모 템플릿에 출력합니다.</span></div><div class=\"line\"><span class=\"meta\"># 이때, 호출되는 템플릿에 부모 템플릿(호출하는 템플릿)의 각종 파라미터를 전달해 줄 수 있습니다.</span></div><div class=\"line\"><span class=\"meta\"># 데코레이터의 takes_context=True로 설정해주면,</span></div><div class=\"line\"><span class=\"meta\"># 부모 템플릿의 context의 값을 가져와 호출하는 템플릿으로 전달할 수 있습니다.</span></div><div class=\"line\"></div><div class=\"line\">parent.html</div><div class=\"line\">&#123;&#123; include_div&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">div.html</div><div class=\"line\">&lt;div&gt;&#123;&#123; div_param &#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure><p>이상 커스텀 태그의 종류와 사용법에 대해서 알아보았습니다.<br>제가 설명드린 커스텀 태그는 아주 기초적인 부분이라 제작 및 사용법이 아주 간단한데요.<br>커스텀 태그 파일은 파이썬 모듈이기 때문에 파이썬에서 사용할 수 있는 내장함수와 모든 확장 모듈을 사용할 수 있기 때문에,<br>얼마든지 복잡하고 파워풀한 기능을 가진 태그를 만들어 낼 수 있습니다.</p><p>하지만, 복잡한 연산을 처리하는 것은 템플릿보다는 웹서버 단에서 처리하는 것이 우선이고,<br>서버에서 처리가 곤란하거나 불가피한 상황인 경우에 태그를 사용해서 처리하는 것이라 생각합니다.<br>아마 장고에서도 사용가능한 기본 태그를 최소한으로 만들어 놓은 것도 같은 이유 때문일 거라 생각이 드네요.</p>","excerpt":"","more":"<p>웹 개발을 하다보면, html 코드 상에서 다양한 연산을 해야하는 경우가 발생합니다.<br>그래서 php, jsp, asp, jade 등 각 언어별 웹 프레임워크에서 이와 같은 경우를 처리해주기 위한 기능을 제공하고 있습니다.<br>장고(django) 템플릿(template)에서도 위와 같은 웹 프레임워크와 같이 동일한 기능을 지원하는 템플릿태그(templatetags)라는 것이 있습니다.<br>장고의 템플릿태그는 다른 웹 프레임워크와 마찬가지로 기본적으로 개발자가 필요한 기능은 대부분 제공하고 있습니다.</p><p>웹 프레임워크가 기본적인 기능을 대부분 제공하고 있지만, 개발을 하다보면 자신이 원하는 기능이 없는 경우가 간혹 있습니다.<br>그래서 장고에서는 개발자가 커스텀으로 템플릿태그를 만들수 있는 기능을 제공하고 있습니다.</p><p>우선 아래와 같이 앱(app) 아래에 templatetags라는 폴더를 만들어 줍니다.<br>temaplatetags라는 폴더 이름은 고정값이므로 반드시 동일하게 생성합니다.</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tmodels<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\tview<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\t__init__<span class=\"selector-class\">.py</span></div><div class=\"line\">\t\t\tcustom_tags<span class=\"selector-class\">.py</span>    (커스텀 템플릿태그를 저장할 모듈 파일)</div></pre></td></tr></table></figure><p>이때, app은 반드시 setting 파일의 INSTALLED_APPS에 추가가 되어 있어야 합니다.<br>그리고 한가지 주의할 점은 여러 앱에 각각 templatetags가 있는 경우, 모듈의 이름이 겹치지 않도록해야 합니다.<br>이유는, template에서 커스텀 태그는 앱의 위치와 상관없이 모듈 이름으로 로드되므로 이름이 겹치게 되면 충돌이 발생하게 됩니다.<br>즉,</p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">proj/</div><div class=\"line\">\tapp/</div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\tcustom_tags<span class=\"selector-class\">.py</span></div><div class=\"line\">\tcommon/</div><div class=\"line\">\t\ttemplatetags/</div><div class=\"line\">\t\t\tcommon_tags<span class=\"selector-class\">.py</span>    (태그모듈 이름이 겹치지 않도록 주의!!!)</div></pre></td></tr></table></figure><p>태그 모듈을 사용하는 방법은 간단합니다.<br>커스텀 태그를 사용하고자하는 템플릿 파일의 상단에 아래와 같이 한줄만 추가해주면 됩니다.</p><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> custom_tags %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure><p>그렇다면 실제로 커스텀 태그를 만들어서 사용하는 예제를 만들어 보도록 하겠습니다.<br>custom_tags.py 파일을 열어 사용하려는 태그 이름으로 메서드 이름으로 지정하여 만들어줍니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@register.filter            <span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_str</span><span class=\"params\">(left, right)</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> left + right</div><div class=\"line\"></div><div class=\"line\">@register.simple_tag            <span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">today</span><span class=\"params\">()</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> datetime.now().strftime(<span class=\"string\">\"%Y-%m-%d %H:%M\"</span>)</div><div class=\"line\"></div><div class=\"line\">@register.assignment_tag            <span class=\"comment\"># 3</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_int</span><span class=\"params\">(a, b)</span></span>:</div><div class=\"line\"><span class=\"keyword\">return</span> max(int(a), int(b))</div><div class=\"line\"></div><div class=\"line\">@register.inclusion_tag(div.html, takes_context=True)            <span class=\"comment\"># 4</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">include_div</span><span class=\"params\">(context)</span></span>: </div><div class=\"line\"><span class=\"keyword\">return</span> &#123;</div><div class=\"line\"><span class=\"string\">'div_param'</span>: context[<span class=\"string\">'param'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>대략 위의 4가지 태그로 구분할 수 있는데, 각 태그에 따라서 사용법이 조금씩 다릅니다.<br>이 4가지 커스텀 태그만 이용하면 웬만한 기능은 다 만들어 낼 수 있습니다.<br>번호별 사용법은 아래와 같습니다.</p><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 1.</span></div><div class=\"line\"><span class=\"meta\"># filter 태그는 앞의 값(left)에다가 뒤의 값(right)을 연산하는 태그입니다. </span></div><div class=\"line\"><span class=\"meta\"># filter이기 때문에 여러개의 필터를 붙여서 사용가능합니다.</span></div><div class=\"line\"><span class=\"meta\"># add_str 메서드의 left 파라미터가 prefix에 해당하고, right 파라미터가 url에 해당합니다. </span></div><div class=\"line\"><span class=\"meta\"># 결과적으로 prefix + url이 add_str 메서드를 통해 div의 text가 되는 것이지요.</span></div><div class=\"line\"></div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&#123;&#123; prefix | add_str: url | add_str: name | add_str: params &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 2. </span></div><div class=\"line\"><span class=\"meta\"># simple_tag는 단순히 어떤 특정값을 출력합니다.</span></div><div class=\"line\"><span class=\"meta\"># 아래와 같이 today를 입력하면, \"2016-3-2 10:00\"과 같이 현재 시간이 출력됩니다.</span></div><div class=\"line\"></div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&#123;&#123; today &#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 3. </span></div><div class=\"line\"><span class=\"meta\"># assignment_tag는 템플릿에서 사용가능한 변수에 결과를 저장하는 역할을 합니다. </span></div><div class=\"line\"><span class=\"meta\"># 어찌보면 with 태그와 유사한 형태라 할 수 있으나, with과는 다르게 &#123;% endwith %&#125; 처럼 끝을 맺어줄 필요가 없습니다.</span></div><div class=\"line\"><span class=\"meta\"># 즉, 좀 더 간편하게 변수를 설정해 줄 수 있고, 필요한 기능을 태그 모듈에 별도로 삽입할 수 있다는 장점이 있습니다.</span></div><div class=\"line\"></div><div class=\"line\">&#123;% max_int first_count second_count as max_count %&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 4.</span></div><div class=\"line\"><span class=\"meta\"># inclusion_tag는 저도 프로젝트에 직접 사용해 보진 않았지만, 테스트는 해보았습니다.</span></div><div class=\"line\"><span class=\"meta\"># 간략히 설명해서 inclusion_tag를 사용하면 데코레이터의 첫번째 파라미터인 템플릿을 호출하여 부모 템플릿에 출력합니다.</span></div><div class=\"line\"><span class=\"meta\"># 이때, 호출되는 템플릿에 부모 템플릿(호출하는 템플릿)의 각종 파라미터를 전달해 줄 수 있습니다.</span></div><div class=\"line\"><span class=\"meta\"># 데코레이터의 takes_context=True로 설정해주면,</span></div><div class=\"line\"><span class=\"meta\"># 부모 템플릿의 context의 값을 가져와 호출하는 템플릿으로 전달할 수 있습니다.</span></div><div class=\"line\"></div><div class=\"line\">parent.html</div><div class=\"line\">&#123;&#123; include_div&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">div.html</div><div class=\"line\">&lt;div&gt;&#123;&#123; div_param &#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure><p>이상 커스텀 태그의 종류와 사용법에 대해서 알아보았습니다.<br>제가 설명드린 커스텀 태그는 아주 기초적인 부분이라 제작 및 사용법이 아주 간단한데요.<br>커스텀 태그 파일은 파이썬 모듈이기 때문에 파이썬에서 사용할 수 있는 내장함수와 모든 확장 모듈을 사용할 수 있기 때문에,<br>얼마든지 복잡하고 파워풀한 기능을 가진 태그를 만들어 낼 수 있습니다.</p><p>하지만, 복잡한 연산을 처리하는 것은 템플릿보다는 웹서버 단에서 처리하는 것이 우선이고,<br>서버에서 처리가 곤란하거나 불가피한 상황인 경우에 태그를 사용해서 처리하는 것이라 생각합니다.<br>아마 장고에서도 사용가능한 기본 태그를 최소한으로 만들어 놓은 것도 같은 이유 때문일 거라 생각이 드네요.</p>"},{"title":"[django] 장고(django) 개발을 위한 파이썬(python) 가상환경 설정(Mac 환경)","date":"2016-03-01T14:49:35.000Z","_content":"가장 먼저 써야할 글을 이제서야 작성하네요.\n여러 개발자들과 함께 장고(django)를 개발하기 위해서는 환경이 일치해야 합니다. \n특히 python2와 python3는 서로 문법이 다르기 때문에(이에 대해서도 포스팅해야 겠네요) 개발 환경을 맞추는 것은 반드시 해야하는 작업입니다.\n\n```\nbrew install pyenv\n```\n\n우선, pyenv를 설치합니다. pyenv는 로컬 환경에 여러 버전의 파이썬 버전을 설치 할 수 있도록 해줍니다. \n기본적으로 설치되어 있는 파이썬 버전이 서로 다른 경우 개발에 제약이 생길 수 있기 때문에 파이썬 버전 의존성을 제거해주기 위해 반드시 pyenv를 설치해 줍니다.\n\n이제 실제 개발에 사용할 파이썬 버전을 설치해줍니다.\n\n```\npyenv install 3.4.3  (python 3.4.3 버전 설치)\npyenv install --list  (설치 가능한 python 버전 list 보기)\n```\n\n파이썬 버전을 설치하고 나면 versions 명령어로 새 버전의 파이썬에 제대로 설치 되었나 확인해봅니다.\n\n```\npyenv versions\n   * system\n     3.4.3    (새로 설치한 python)\n\npyenv shell 3.4.3    (3.4.3 버전 설정)\npyenv versions\n     system\n   * 3.4.3\n```\n\n위 화면처럼 나오면 정상입니다.\nsystem이란 현재 시스템에(Mac OS에는 파이썬 2.7 버전이 기본적으로 설치되어 있습니다) 설치된 파이썬을 뜻합니다.\n그리고 3.4.3이 새롭게 설치된 파이썬 버전이겠지요.\n별표는 현재 설정된 파이썬 버전을 뜻합니다. (현재는 system 버전이 설정되어 있네요)\n그리고 아래 shell 명령어를 입력한다음 다시 versions 명령어를 입력하면 설정된 버전이 바뀐 것을 볼 수 있습니다.\n\n좀 더 편한 작업을 위해 한가지 패키지를 더 설치해 줍니다.\n\n```\nbrew install pyenv-virtualenv\n```\n\npyenv-virtualenv는 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있도록 해주는 패키지입니다.\n예를들어 파이썬 3.4.3을 사용하는 django 프로젝트를 진행하는 동시에 다른 python 프로젝트를 진행하게 되었습니다.\n이때 파이썬 버전을 동일하게 3.4.3을 사용하게되면, django에서만 사용하는 모듈을 다른 프로젝트에서도 불필요하게 설치되어 있게 됩니다.\n이렇듯 잠재적인 문제를 야기하는 파이썬 모듈 의존성을 제거하기 위해 pyenv-virtualenv 패키지를 설치해줍니다.\n아래와 같은 명령어를 통해서 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있게 됩니다.\n\n```\npyenv virtualenv <버전> <가상환경 이름>\npyenv virtualenv 3.4.3 py343\npyenv versions\n     system\n   * 3.4.3\n     py343\n```\n\nvirtualenv라는 명령어가 추가되었습니다(그 외 activate 등 몇가지 추가). \n첫번째 파라미터는 사용하는 버전을 뜻하고 두번째 파라미터는 가상환경의 이름을 뜻합니다.\n다시 versions 명령어를 실행해보면, py343이라는 새로운 가상환경이 만들어진것을 확인할 수 있습니다.\n\n만들어진 가상환경을 사용할때 pyenv의 명령어인 shell을 사용해도 무방합니다만, 좀더 명시적으로 가상환경을 알 수 있도록 하기 위해서는 pyenv-virtualenv 패키지에서 제공하는 activate 명령어를 사용합니다.\n\n```\npyenv activate py343\n(py343) User-Macbook-Pro:~ user$\n\npyenv versions\n     system\n     3.4.3\n   * py343\n```\n\nactivate 명령어를 수행하게 되면, 쉘 커서 앞에 (py343)이라는 파이썬 가상환경 이름이 붙었네요.\nversions 명령어를 수행해보면, py343 환경에 별표가 되어 있는걸 확인할 수 있습니다.\n이제부터는 마음껏 모듈을 설치한 후에 다른 프로젝트를 진행할 일이 생기면, 다른 가상환경을 만들어서(예를들면 django343 등) 사용하시면 되겠습니다. \n\n가상환경에서 빠져나올때는 deactivate 명령어를 사용하면 됩니다.\n\n```\npyenv deactivate\n```\n","source":"_posts/django-virtual-env-setting-for-mac.md","raw":"---\ntitle: \"[django] 장고(django) 개발을 위한 파이썬(python) 가상환경 설정(Mac 환경)\"\ndate: 2016-03-01 23:49:35\ntags:\n- django\n- python\n- pyenv\n- virtualenv\n---\n가장 먼저 써야할 글을 이제서야 작성하네요.\n여러 개발자들과 함께 장고(django)를 개발하기 위해서는 환경이 일치해야 합니다. \n특히 python2와 python3는 서로 문법이 다르기 때문에(이에 대해서도 포스팅해야 겠네요) 개발 환경을 맞추는 것은 반드시 해야하는 작업입니다.\n\n```\nbrew install pyenv\n```\n\n우선, pyenv를 설치합니다. pyenv는 로컬 환경에 여러 버전의 파이썬 버전을 설치 할 수 있도록 해줍니다. \n기본적으로 설치되어 있는 파이썬 버전이 서로 다른 경우 개발에 제약이 생길 수 있기 때문에 파이썬 버전 의존성을 제거해주기 위해 반드시 pyenv를 설치해 줍니다.\n\n이제 실제 개발에 사용할 파이썬 버전을 설치해줍니다.\n\n```\npyenv install 3.4.3  (python 3.4.3 버전 설치)\npyenv install --list  (설치 가능한 python 버전 list 보기)\n```\n\n파이썬 버전을 설치하고 나면 versions 명령어로 새 버전의 파이썬에 제대로 설치 되었나 확인해봅니다.\n\n```\npyenv versions\n   * system\n     3.4.3    (새로 설치한 python)\n\npyenv shell 3.4.3    (3.4.3 버전 설정)\npyenv versions\n     system\n   * 3.4.3\n```\n\n위 화면처럼 나오면 정상입니다.\nsystem이란 현재 시스템에(Mac OS에는 파이썬 2.7 버전이 기본적으로 설치되어 있습니다) 설치된 파이썬을 뜻합니다.\n그리고 3.4.3이 새롭게 설치된 파이썬 버전이겠지요.\n별표는 현재 설정된 파이썬 버전을 뜻합니다. (현재는 system 버전이 설정되어 있네요)\n그리고 아래 shell 명령어를 입력한다음 다시 versions 명령어를 입력하면 설정된 버전이 바뀐 것을 볼 수 있습니다.\n\n좀 더 편한 작업을 위해 한가지 패키지를 더 설치해 줍니다.\n\n```\nbrew install pyenv-virtualenv\n```\n\npyenv-virtualenv는 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있도록 해주는 패키지입니다.\n예를들어 파이썬 3.4.3을 사용하는 django 프로젝트를 진행하는 동시에 다른 python 프로젝트를 진행하게 되었습니다.\n이때 파이썬 버전을 동일하게 3.4.3을 사용하게되면, django에서만 사용하는 모듈을 다른 프로젝트에서도 불필요하게 설치되어 있게 됩니다.\n이렇듯 잠재적인 문제를 야기하는 파이썬 모듈 의존성을 제거하기 위해 pyenv-virtualenv 패키지를 설치해줍니다.\n아래와 같은 명령어를 통해서 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있게 됩니다.\n\n```\npyenv virtualenv <버전> <가상환경 이름>\npyenv virtualenv 3.4.3 py343\npyenv versions\n     system\n   * 3.4.3\n     py343\n```\n\nvirtualenv라는 명령어가 추가되었습니다(그 외 activate 등 몇가지 추가). \n첫번째 파라미터는 사용하는 버전을 뜻하고 두번째 파라미터는 가상환경의 이름을 뜻합니다.\n다시 versions 명령어를 실행해보면, py343이라는 새로운 가상환경이 만들어진것을 확인할 수 있습니다.\n\n만들어진 가상환경을 사용할때 pyenv의 명령어인 shell을 사용해도 무방합니다만, 좀더 명시적으로 가상환경을 알 수 있도록 하기 위해서는 pyenv-virtualenv 패키지에서 제공하는 activate 명령어를 사용합니다.\n\n```\npyenv activate py343\n(py343) User-Macbook-Pro:~ user$\n\npyenv versions\n     system\n     3.4.3\n   * py343\n```\n\nactivate 명령어를 수행하게 되면, 쉘 커서 앞에 (py343)이라는 파이썬 가상환경 이름이 붙었네요.\nversions 명령어를 수행해보면, py343 환경에 별표가 되어 있는걸 확인할 수 있습니다.\n이제부터는 마음껏 모듈을 설치한 후에 다른 프로젝트를 진행할 일이 생기면, 다른 가상환경을 만들어서(예를들면 django343 등) 사용하시면 되겠습니다. \n\n가상환경에서 빠져나올때는 deactivate 명령어를 사용하면 됩니다.\n\n```\npyenv deactivate\n```\n","slug":"django-virtual-env-setting-for-mac","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv870032wxt4d1usdfqb","content":"<p>가장 먼저 써야할 글을 이제서야 작성하네요.<br>여러 개발자들과 함께 장고(django)를 개발하기 위해서는 환경이 일치해야 합니다.<br>특히 python2와 python3는 서로 문법이 다르기 때문에(이에 대해서도 포스팅해야 겠네요) 개발 환경을 맞추는 것은 반드시 해야하는 작업입니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>pyenv</div></pre></td></tr></table></figure><p>우선, pyenv를 설치합니다. pyenv는 로컬 환경에 여러 버전의 파이썬 버전을 설치 할 수 있도록 해줍니다.<br>기본적으로 설치되어 있는 파이썬 버전이 서로 다른 경우 개발에 제약이 생길 수 있기 때문에 파이썬 버전 의존성을 제거해주기 위해 반드시 pyenv를 설치해 줍니다.</p><p>이제 실제 개발에 사용할 파이썬 버전을 설치해줍니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install <span class=\"number\">3.4</span><span class=\"number\">.3</span>  (python <span class=\"number\">3.4</span><span class=\"number\">.3</span> 버전 설치)</div><div class=\"line\">pyenv install --<span class=\"type\">list</span>  (설치 가능한 python 버전 <span class=\"type\">list</span> 보기)</div></pre></td></tr></table></figure><p>파이썬 버전을 설치하고 나면 versions 명령어로 새 버전의 파이썬에 제대로 설치 되었나 확인해봅니다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">   * <span class=\"selector-tag\">system</span></div><div class=\"line\">     3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span>    (새로 설치한 <span class=\"selector-tag\">python</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">shell</span> 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span>    (3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span> 버전 설정)</div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">     <span class=\"selector-tag\">system</span></div><div class=\"line\">   * 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span></div></pre></td></tr></table></figure><p>위 화면처럼 나오면 정상입니다.<br>system이란 현재 시스템에(Mac OS에는 파이썬 2.7 버전이 기본적으로 설치되어 있습니다) 설치된 파이썬을 뜻합니다.<br>그리고 3.4.3이 새롭게 설치된 파이썬 버전이겠지요.<br>별표는 현재 설정된 파이썬 버전을 뜻합니다. (현재는 system 버전이 설정되어 있네요)<br>그리고 아래 shell 명령어를 입력한다음 다시 versions 명령어를 입력하면 설정된 버전이 바뀐 것을 볼 수 있습니다.</p><p>좀 더 편한 작업을 위해 한가지 패키지를 더 설치해 줍니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>pyenv-virtualenv</div></pre></td></tr></table></figure><p>pyenv-virtualenv는 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있도록 해주는 패키지입니다.<br>예를들어 파이썬 3.4.3을 사용하는 django 프로젝트를 진행하는 동시에 다른 python 프로젝트를 진행하게 되었습니다.<br>이때 파이썬 버전을 동일하게 3.4.3을 사용하게되면, django에서만 사용하는 모듈을 다른 프로젝트에서도 불필요하게 설치되어 있게 됩니다.<br>이렇듯 잠재적인 문제를 야기하는 파이썬 모듈 의존성을 제거하기 위해 pyenv-virtualenv 패키지를 설치해줍니다.<br>아래와 같은 명령어를 통해서 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있게 됩니다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">virtualenv</span> &lt;버전&gt; &lt;가상환경 이름&gt;</div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">virtualenv</span> 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span> <span class=\"selector-tag\">py343</span></div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">     <span class=\"selector-tag\">system</span></div><div class=\"line\">   * 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span></div><div class=\"line\">     <span class=\"selector-tag\">py343</span></div></pre></td></tr></table></figure><p>virtualenv라는 명령어가 추가되었습니다(그 외 activate 등 몇가지 추가).<br>첫번째 파라미터는 사용하는 버전을 뜻하고 두번째 파라미터는 가상환경의 이름을 뜻합니다.<br>다시 versions 명령어를 실행해보면, py343이라는 새로운 가상환경이 만들어진것을 확인할 수 있습니다.</p><p>만들어진 가상환경을 사용할때 pyenv의 명령어인 shell을 사용해도 무방합니다만, 좀더 명시적으로 가상환경을 알 수 있도록 하기 위해서는 pyenv-virtualenv 패키지에서 제공하는 activate 명령어를 사용합니다.</p><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv activate py343</div><div class=\"line\">(py343) <span class=\"keyword\">User</span>-Macbook-Pro:~ <span class=\"keyword\">user</span>$</div><div class=\"line\"></div><div class=\"line\">pyenv versions</div><div class=\"line\">     system</div><div class=\"line\">     <span class=\"number\">3.4</span>.<span class=\"number\">3</span></div><div class=\"line\">   * py343</div></pre></td></tr></table></figure><p>activate 명령어를 수행하게 되면, 쉘 커서 앞에 (py343)이라는 파이썬 가상환경 이름이 붙었네요.<br>versions 명령어를 수행해보면, py343 환경에 별표가 되어 있는걸 확인할 수 있습니다.<br>이제부터는 마음껏 모듈을 설치한 후에 다른 프로젝트를 진행할 일이 생기면, 다른 가상환경을 만들어서(예를들면 django343 등) 사용하시면 되겠습니다.</p><p>가상환경에서 빠져나올때는 deactivate 명령어를 사용하면 됩니다.</p><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pyenv deactivate</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>가장 먼저 써야할 글을 이제서야 작성하네요.<br>여러 개발자들과 함께 장고(django)를 개발하기 위해서는 환경이 일치해야 합니다.<br>특히 python2와 python3는 서로 문법이 다르기 때문에(이에 대해서도 포스팅해야 겠네요) 개발 환경을 맞추는 것은 반드시 해야하는 작업입니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>pyenv</div></pre></td></tr></table></figure><p>우선, pyenv를 설치합니다. pyenv는 로컬 환경에 여러 버전의 파이썬 버전을 설치 할 수 있도록 해줍니다.<br>기본적으로 설치되어 있는 파이썬 버전이 서로 다른 경우 개발에 제약이 생길 수 있기 때문에 파이썬 버전 의존성을 제거해주기 위해 반드시 pyenv를 설치해 줍니다.</p><p>이제 실제 개발에 사용할 파이썬 버전을 설치해줍니다.</p><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install <span class=\"number\">3.4</span><span class=\"number\">.3</span>  (python <span class=\"number\">3.4</span><span class=\"number\">.3</span> 버전 설치)</div><div class=\"line\">pyenv install --<span class=\"type\">list</span>  (설치 가능한 python 버전 <span class=\"type\">list</span> 보기)</div></pre></td></tr></table></figure><p>파이썬 버전을 설치하고 나면 versions 명령어로 새 버전의 파이썬에 제대로 설치 되었나 확인해봅니다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">   * <span class=\"selector-tag\">system</span></div><div class=\"line\">     3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span>    (새로 설치한 <span class=\"selector-tag\">python</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">shell</span> 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span>    (3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span> 버전 설정)</div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">     <span class=\"selector-tag\">system</span></div><div class=\"line\">   * 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span></div></pre></td></tr></table></figure><p>위 화면처럼 나오면 정상입니다.<br>system이란 현재 시스템에(Mac OS에는 파이썬 2.7 버전이 기본적으로 설치되어 있습니다) 설치된 파이썬을 뜻합니다.<br>그리고 3.4.3이 새롭게 설치된 파이썬 버전이겠지요.<br>별표는 현재 설정된 파이썬 버전을 뜻합니다. (현재는 system 버전이 설정되어 있네요)<br>그리고 아래 shell 명령어를 입력한다음 다시 versions 명령어를 입력하면 설정된 버전이 바뀐 것을 볼 수 있습니다.</p><p>좀 더 편한 작업을 위해 한가지 패키지를 더 설치해 줍니다.</p><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>pyenv-virtualenv</div></pre></td></tr></table></figure><p>pyenv-virtualenv는 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있도록 해주는 패키지입니다.<br>예를들어 파이썬 3.4.3을 사용하는 django 프로젝트를 진행하는 동시에 다른 python 프로젝트를 진행하게 되었습니다.<br>이때 파이썬 버전을 동일하게 3.4.3을 사용하게되면, django에서만 사용하는 모듈을 다른 프로젝트에서도 불필요하게 설치되어 있게 됩니다.<br>이렇듯 잠재적인 문제를 야기하는 파이썬 모듈 의존성을 제거하기 위해 pyenv-virtualenv 패키지를 설치해줍니다.<br>아래와 같은 명령어를 통해서 하나의 파이썬 버전에 여러개의 가상환경을 설정할 수 있게 됩니다.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">virtualenv</span> &lt;버전&gt; &lt;가상환경 이름&gt;</div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">virtualenv</span> 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span> <span class=\"selector-tag\">py343</span></div><div class=\"line\"><span class=\"selector-tag\">pyenv</span> <span class=\"selector-tag\">versions</span></div><div class=\"line\">     <span class=\"selector-tag\">system</span></div><div class=\"line\">   * 3<span class=\"selector-class\">.4</span><span class=\"selector-class\">.3</span></div><div class=\"line\">     <span class=\"selector-tag\">py343</span></div></pre></td></tr></table></figure><p>virtualenv라는 명령어가 추가되었습니다(그 외 activate 등 몇가지 추가).<br>첫번째 파라미터는 사용하는 버전을 뜻하고 두번째 파라미터는 가상환경의 이름을 뜻합니다.<br>다시 versions 명령어를 실행해보면, py343이라는 새로운 가상환경이 만들어진것을 확인할 수 있습니다.</p><p>만들어진 가상환경을 사용할때 pyenv의 명령어인 shell을 사용해도 무방합니다만, 좀더 명시적으로 가상환경을 알 수 있도록 하기 위해서는 pyenv-virtualenv 패키지에서 제공하는 activate 명령어를 사용합니다.</p><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv activate py343</div><div class=\"line\">(py343) <span class=\"keyword\">User</span>-Macbook-Pro:~ <span class=\"keyword\">user</span>$</div><div class=\"line\"></div><div class=\"line\">pyenv versions</div><div class=\"line\">     system</div><div class=\"line\">     <span class=\"number\">3.4</span>.<span class=\"number\">3</span></div><div class=\"line\">   * py343</div></pre></td></tr></table></figure><p>activate 명령어를 수행하게 되면, 쉘 커서 앞에 (py343)이라는 파이썬 가상환경 이름이 붙었네요.<br>versions 명령어를 수행해보면, py343 환경에 별표가 되어 있는걸 확인할 수 있습니다.<br>이제부터는 마음껏 모듈을 설치한 후에 다른 프로젝트를 진행할 일이 생기면, 다른 가상환경을 만들어서(예를들면 django343 등) 사용하시면 되겠습니다.</p><p>가상환경에서 빠져나올때는 deactivate 명령어를 사용하면 됩니다.</p><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pyenv deactivate</span></div></pre></td></tr></table></figure>"},{"title":"[javascript] 클로저(closure)에 대해서 알아보자","date":"2017-04-11T15:20:04.000Z","_content":"자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.\n\n> ~~closer (가까운, 닫힌)~~ ==> **closure (폐쇄)**\n\n멍청하게도 처음에는 클로저를 \"closer\"라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 \"어떤 것을 닫는다\" 정도로 느끼고 있었죠. 당시의 \"닫는다\"는 의미를 지금에 와서 생각해보면 \"변수의 범주(스코프)를 닫는다\" 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠. \n\n구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.\n\n> 외부함수의 맥락(context)에 접근 가능한 내부함수\n> 좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위\n\n이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.\n\n```\nfunction outFunc(name) {\n\tvar outVar = \"my name is \";\n\tfunction innerFunc() {\n\t\treturn outVar + name;\n\t}\n\treturn innerFunc;\n}\n\nvar result = outFunc(\"bono\");\nconsole.log(\"result: \" + result());\n\n// result: my name is bono\n```\n\n내부함수 `innerFunc()`에서 `outFunc()` 함수의 인자와 지역변수에 접근이 가능합니다. `outFunc()`의 return 값(var result에 할당)은 `innerFunc()`라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다. \n\n다른 예제를 살펴보겠습니다.\n\n```\nvar out = \"out value\";\n\nfunction outFunc() {\n\tvar inner = \"in value\";\n\n\tfunction inFunc(inParam) {\n\t\tconsole.log(\"out: \" + out);\n\t\tconsole.log(\"inner: \" + inner);\n\t\tconsole.log(\"inParam: \" + inParam);\n\t}\n\n\treturn inFunc;\n}\n\nvar param = \"this is param\";\nvar outResult = outFunc();\noutResult(param);\n\n// out: out value\n// inner: in value\n// inParam: this is param\n\n```\n\n이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 `전역스코프`, 그다음은 `outFunc()` 함수 내 스코프, 마지막으로 `inFunc()` 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다. \n\noutResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠. \n\n클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 `메모리에 저장되어 있던 클로저`에서 각각의 변수를 가져올수 있게 되는겁니다.\n\n클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.\n\n### 결론\n\n> 클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.\n> 클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.\n","source":"_posts/javascript-closure.md","raw":"---\ntitle: \"[javascript] 클로저(closure)에 대해서 알아보자\"\ndate: 2017-04-12 00:20:04\ntags:\n- javascript\n- closure\n---\n자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.\n\n> ~~closer (가까운, 닫힌)~~ ==> **closure (폐쇄)**\n\n멍청하게도 처음에는 클로저를 \"closer\"라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 \"어떤 것을 닫는다\" 정도로 느끼고 있었죠. 당시의 \"닫는다\"는 의미를 지금에 와서 생각해보면 \"변수의 범주(스코프)를 닫는다\" 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠. \n\n구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.\n\n> 외부함수의 맥락(context)에 접근 가능한 내부함수\n> 좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위\n\n이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.\n\n```\nfunction outFunc(name) {\n\tvar outVar = \"my name is \";\n\tfunction innerFunc() {\n\t\treturn outVar + name;\n\t}\n\treturn innerFunc;\n}\n\nvar result = outFunc(\"bono\");\nconsole.log(\"result: \" + result());\n\n// result: my name is bono\n```\n\n내부함수 `innerFunc()`에서 `outFunc()` 함수의 인자와 지역변수에 접근이 가능합니다. `outFunc()`의 return 값(var result에 할당)은 `innerFunc()`라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다. \n\n다른 예제를 살펴보겠습니다.\n\n```\nvar out = \"out value\";\n\nfunction outFunc() {\n\tvar inner = \"in value\";\n\n\tfunction inFunc(inParam) {\n\t\tconsole.log(\"out: \" + out);\n\t\tconsole.log(\"inner: \" + inner);\n\t\tconsole.log(\"inParam: \" + inParam);\n\t}\n\n\treturn inFunc;\n}\n\nvar param = \"this is param\";\nvar outResult = outFunc();\noutResult(param);\n\n// out: out value\n// inner: in value\n// inParam: this is param\n\n```\n\n이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 `전역스코프`, 그다음은 `outFunc()` 함수 내 스코프, 마지막으로 `inFunc()` 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다. \n\noutResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠. \n\n클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 `메모리에 저장되어 있던 클로저`에서 각각의 변수를 가져올수 있게 되는겁니다.\n\n클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.\n\n### 결론\n\n> 클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.\n> 클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.\n","slug":"javascript-closure","published":1,"updated":"2017-04-12T01:47:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv880033wxt4ep6rbvxx","content":"<p>자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.</p><blockquote><p><del>closer (가까운, 닫힌)</del> ==&gt; <strong>closure (폐쇄)</strong></p></blockquote><p>멍청하게도 처음에는 클로저를 “closer”라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 “어떤 것을 닫는다” 정도로 느끼고 있었죠. 당시의 “닫는다”는 의미를 지금에 와서 생각해보면 “변수의 범주(스코프)를 닫는다” 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠.</p><p>구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.</p><blockquote><p>외부함수의 맥락(context)에 접근 가능한 내부함수<br>좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위</p></blockquote><p>이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFunc</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> outVar = <span class=\"string\">\"my name is \"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> outVar + name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> innerFunc;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = outFunc(<span class=\"string\">\"bono\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"result: \"</span> + result());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: my name is bono</span></div></pre></td></tr></table></figure><p>내부함수 <code>innerFunc()</code>에서 <code>outFunc()</code> 함수의 인자와 지역변수에 접근이 가능합니다. <code>outFunc()</code>의 return 값(var result에 할당)은 <code>innerFunc()</code>라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다.</p><p>다른 예제를 살펴보겠습니다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> out = <span class=\"string\">\"out value\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> inner = <span class=\"string\">\"in value\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inFunc</span>(<span class=\"params\">inParam</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"out: \"</span> + out);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner: \"</span> + inner);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"inParam: \"</span> + inParam);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> inFunc;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"string\">\"this is param\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> outResult = outFunc();</div><div class=\"line\">outResult(param);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// out: out value</span></div><div class=\"line\"><span class=\"comment\">// inner: in value</span></div><div class=\"line\"><span class=\"comment\">// inParam: this is param</span></div></pre></td></tr></table></figure><p>이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 <code>전역스코프</code>, 그다음은 <code>outFunc()</code> 함수 내 스코프, 마지막으로 <code>inFunc()</code> 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다.</p><p>outResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠.</p><p>클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 <code>메모리에 저장되어 있던 클로저</code>에서 각각의 변수를 가져올수 있게 되는겁니다.</p><p>클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><blockquote><p>클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.<br>클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.</p></blockquote>","excerpt":"","more":"<p>자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.</p><blockquote><p><del>closer (가까운, 닫힌)</del> ==&gt; <strong>closure (폐쇄)</strong></p></blockquote><p>멍청하게도 처음에는 클로저를 “closer”라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 “어떤 것을 닫는다” 정도로 느끼고 있었죠. 당시의 “닫는다”는 의미를 지금에 와서 생각해보면 “변수의 범주(스코프)를 닫는다” 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠.</p><p>구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.</p><blockquote><p>외부함수의 맥락(context)에 접근 가능한 내부함수<br>좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위</p></blockquote><p>이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFunc</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> outVar = <span class=\"string\">\"my name is \"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> outVar + name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> innerFunc;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = outFunc(<span class=\"string\">\"bono\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"result: \"</span> + result());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result: my name is bono</span></div></pre></td></tr></table></figure><p>내부함수 <code>innerFunc()</code>에서 <code>outFunc()</code> 함수의 인자와 지역변수에 접근이 가능합니다. <code>outFunc()</code>의 return 값(var result에 할당)은 <code>innerFunc()</code>라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다.</p><p>다른 예제를 살펴보겠습니다.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> out = <span class=\"string\">\"out value\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> inner = <span class=\"string\">\"in value\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inFunc</span>(<span class=\"params\">inParam</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"out: \"</span> + out);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner: \"</span> + inner);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"inParam: \"</span> + inParam);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> inFunc;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"string\">\"this is param\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> outResult = outFunc();</div><div class=\"line\">outResult(param);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// out: out value</span></div><div class=\"line\"><span class=\"comment\">// inner: in value</span></div><div class=\"line\"><span class=\"comment\">// inParam: this is param</span></div></pre></td></tr></table></figure><p>이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 <code>전역스코프</code>, 그다음은 <code>outFunc()</code> 함수 내 스코프, 마지막으로 <code>inFunc()</code> 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다.</p><p>outResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠.</p><p>클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 <code>메모리에 저장되어 있던 클로저</code>에서 각각의 변수를 가져올수 있게 되는겁니다.</p><p>클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.</p><h3 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h3><blockquote><p>클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.<br>클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.</p></blockquote>"},{"title":"[python] set에 관한 두가지 사실","date":"2016-02-27T16:47:45.000Z","_content":"중복이 제거된 자료구조를 만들어야 할 일이 있어 set을 쓰게 되었는데요.\nset으로 만들어진 자료를 바탕으로 루프를 돌며 set안의 item들을 처리하는 작업이었습니다.\nitem이 너무 많아지게 되면, 메모리 등의 성능 이슈가 발생할 것을 대비하여 20만개씩 잘라서 분절해야 했는데요.\n이 때 첫번째 문제가 발생했습니다. python에서 set은 분절 할 수 없다는 것입니다.\n리스트의 경우에는 아래와 같이 분절이 가능합니다만, set은 리스트 처럼 분절이 불가합니다.\n\n```\ntemp_list = ['a, 'b', 'c', 'd', 'e', 'f']\ntemp_list[:3]      \n\n# ['a, 'b', 'c'] 출력\n```\n\n```\ntemp_set = {'a, 'b', 'c', 'd', 'e', 'f'}\ntemp_set[:3]\n\n# 아래의 에러 발생\n# Traceback (most recent call last):\n# File \"<stdin>\", line 1, in <module>\n# TypeError: 'set' object is not subscriptable\n```\n\n루프를 돌면서 처리할 수도 있겠지만, 그것보다는 왜 set이 분절이 안될까라는 고민에 빠져 도대체 set은 어떻게 만들어진건가 궁금해지더라구요.\n구글링을 하다 파이썬 공식 문서에(2.7 버전, 파이썬 3보다 설명이 괜찮더라구요) set은 아래와 같은 내용을 찾았습니다.\n\n> The sets module provides classes for constructing and manipulating unordered collections of unique elements. Common uses include membership testing, removing duplicates from a sequence, and computing standard math operations on sets such as intersection, union, difference, and symmetric difference. \n> \n> Like other collections, sets support x in set, len(set), and for x in set. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.\n> \n> ......\n> \n> The set classes are implemented using dictionaries. Accordingly, the requirements for set elements are the same as those for dictionary keys; namely, that the element defines both __eq__() and __hash__(). As a result, sets cannot contain mutable elements such as lists or dictionaries\n\n\n대략적인 내용을 살펴보면(발번역 및 의역), \n\n\n> set은 순서가 없는 중복이 불가능한 collection 자료형이다. 주로 item 테스트, 중복제거 등에 사용되고 교집합, 합집합, 차집합 등을 수학적인 계산이 가능하다. 다른 collection 자료형 처럼 item 검사, 길이, 루프가 가능하다. set은 삽입된 item의 위치를 저장하지 않기 때문에 item 간의 순서가 없다. 따라서 indexing이 불가능하고, 자르기가 안되고, 그외의 sequential한 작업이 불가하다. set은 dictionary를 구현한 클래스인데, dictionary의 key가 set의 item이 된다. 그렇기 때문에 set은 dictionary나 list처럼 중복되는 요소를 담을 수 없다.\n\n정도가 되겠네요. 위의 번역을 토대로 set이 분절이 안되는 이유는 item을 저장할때 순서값을 저장하지 않기 때문이라 할 수 있겠네요. \n순서가 없으니 어디서부터 어디까지라는 것을 정할 수 없을 것이고, 그렇기 때문에 분절이 불가능하다 할 수 있겠습니다.    \n\n\n그리고 두 번째 문제가 있었는데, set의 루핑 속도에 대한 것이었습니다.\n파이썬에서 set역시 list와 같이 iterable한 자료구조이긴 하지만, list에 비해서 iteration 성능은 떨어지는 것으로 익히 알려져 있습니다.\n대신 hash 기반으로 만들어지기 때문에 검색 속도는 list에 비해 훨씬 뛰어나죠.\n\n우선 진짜 set이 list에 비해 iteration 성능이 떨어지는지 확인해 보았습니다.\n\n```\nfrom timeit import timeit\n\ndef iter(iterable):\n    for i in iterable:\n        pass\n\ntimeit(\"iter(iterable)\", number=1000, setup=\"from __main__ import iter; iterable=set(range(1000000))\")\n# 결과 : 14.660961047000455 (단위: 초)\n\ntimeit(\"iter(iterable)\", number=1000, setup=\"from __main__ import iter; iterable=list(range(1000000))\")\n# 결과 : 11.929272602999845 (단위: 초)\n```\n\n1,000,000(백만, 0~999,999) 까지의 숫자를 담은 set을 1,000번 반복한 결과 14.66초 정도가 걸렸습니다.\n반면에 같은 조건으로 list를 1,000번 반복한 결과 11.93초 정도가 걸렸네요.\n대략 3초 정도가 차이납니다.\n사실 1,000,000을 1,000번 반복하여 총 1,000,000,000(10억)번 루프를 돌아야만 3초 정도(14-11)가 차이가 난것이지,\n현업에서 사용하는 정도의 크기로 비교해보면 그렇게 큰 차이가 나지는 않는것 같네요.\n속도차이가 크게 나지 않기 때문에 특별한 이유가 없다면 set으로 루프를 돌려도 무방할 것 같습니다.\n\n글을 쓰고 나니 알맹이는 없고 횡설수설한 느낌입니다.\n어찌되었든 위의 두가지(set은 slice를 못하는 것, list보다 iteration 성능이 떨어지는것) 사실로 set에 대한 궁금증이 완전히 사라진 것은 아닙니다. \nset이라는 자료구조가 머리속에 그림으로 그려져서 더하고 삭제하거나 탐색할때, 또는 set을 list로 바꿀 때와 같은 경우를 한번에 떠올릴 수 있으면 참 좋겠습니다만, 아직까지는 더 노력이 필요한 것 같습니다. \n너무 많은 내용을 한번에 다루면 포스팅하는 저나 읽는 사람들 모두 피곤할테니 일단은 여기서 글을 마무리 하는게 좋을것 같네요.\n","source":"_posts/python-about-set.md","raw":"---\ntitle: \"[python] set에 관한 두가지 사실\"\ndate: 2016-02-28 01:47:45\ntags:\n- python\n- set\n---\n중복이 제거된 자료구조를 만들어야 할 일이 있어 set을 쓰게 되었는데요.\nset으로 만들어진 자료를 바탕으로 루프를 돌며 set안의 item들을 처리하는 작업이었습니다.\nitem이 너무 많아지게 되면, 메모리 등의 성능 이슈가 발생할 것을 대비하여 20만개씩 잘라서 분절해야 했는데요.\n이 때 첫번째 문제가 발생했습니다. python에서 set은 분절 할 수 없다는 것입니다.\n리스트의 경우에는 아래와 같이 분절이 가능합니다만, set은 리스트 처럼 분절이 불가합니다.\n\n```\ntemp_list = ['a, 'b', 'c', 'd', 'e', 'f']\ntemp_list[:3]      \n\n# ['a, 'b', 'c'] 출력\n```\n\n```\ntemp_set = {'a, 'b', 'c', 'd', 'e', 'f'}\ntemp_set[:3]\n\n# 아래의 에러 발생\n# Traceback (most recent call last):\n# File \"<stdin>\", line 1, in <module>\n# TypeError: 'set' object is not subscriptable\n```\n\n루프를 돌면서 처리할 수도 있겠지만, 그것보다는 왜 set이 분절이 안될까라는 고민에 빠져 도대체 set은 어떻게 만들어진건가 궁금해지더라구요.\n구글링을 하다 파이썬 공식 문서에(2.7 버전, 파이썬 3보다 설명이 괜찮더라구요) set은 아래와 같은 내용을 찾았습니다.\n\n> The sets module provides classes for constructing and manipulating unordered collections of unique elements. Common uses include membership testing, removing duplicates from a sequence, and computing standard math operations on sets such as intersection, union, difference, and symmetric difference. \n> \n> Like other collections, sets support x in set, len(set), and for x in set. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.\n> \n> ......\n> \n> The set classes are implemented using dictionaries. Accordingly, the requirements for set elements are the same as those for dictionary keys; namely, that the element defines both __eq__() and __hash__(). As a result, sets cannot contain mutable elements such as lists or dictionaries\n\n\n대략적인 내용을 살펴보면(발번역 및 의역), \n\n\n> set은 순서가 없는 중복이 불가능한 collection 자료형이다. 주로 item 테스트, 중복제거 등에 사용되고 교집합, 합집합, 차집합 등을 수학적인 계산이 가능하다. 다른 collection 자료형 처럼 item 검사, 길이, 루프가 가능하다. set은 삽입된 item의 위치를 저장하지 않기 때문에 item 간의 순서가 없다. 따라서 indexing이 불가능하고, 자르기가 안되고, 그외의 sequential한 작업이 불가하다. set은 dictionary를 구현한 클래스인데, dictionary의 key가 set의 item이 된다. 그렇기 때문에 set은 dictionary나 list처럼 중복되는 요소를 담을 수 없다.\n\n정도가 되겠네요. 위의 번역을 토대로 set이 분절이 안되는 이유는 item을 저장할때 순서값을 저장하지 않기 때문이라 할 수 있겠네요. \n순서가 없으니 어디서부터 어디까지라는 것을 정할 수 없을 것이고, 그렇기 때문에 분절이 불가능하다 할 수 있겠습니다.    \n\n\n그리고 두 번째 문제가 있었는데, set의 루핑 속도에 대한 것이었습니다.\n파이썬에서 set역시 list와 같이 iterable한 자료구조이긴 하지만, list에 비해서 iteration 성능은 떨어지는 것으로 익히 알려져 있습니다.\n대신 hash 기반으로 만들어지기 때문에 검색 속도는 list에 비해 훨씬 뛰어나죠.\n\n우선 진짜 set이 list에 비해 iteration 성능이 떨어지는지 확인해 보았습니다.\n\n```\nfrom timeit import timeit\n\ndef iter(iterable):\n    for i in iterable:\n        pass\n\ntimeit(\"iter(iterable)\", number=1000, setup=\"from __main__ import iter; iterable=set(range(1000000))\")\n# 결과 : 14.660961047000455 (단위: 초)\n\ntimeit(\"iter(iterable)\", number=1000, setup=\"from __main__ import iter; iterable=list(range(1000000))\")\n# 결과 : 11.929272602999845 (단위: 초)\n```\n\n1,000,000(백만, 0~999,999) 까지의 숫자를 담은 set을 1,000번 반복한 결과 14.66초 정도가 걸렸습니다.\n반면에 같은 조건으로 list를 1,000번 반복한 결과 11.93초 정도가 걸렸네요.\n대략 3초 정도가 차이납니다.\n사실 1,000,000을 1,000번 반복하여 총 1,000,000,000(10억)번 루프를 돌아야만 3초 정도(14-11)가 차이가 난것이지,\n현업에서 사용하는 정도의 크기로 비교해보면 그렇게 큰 차이가 나지는 않는것 같네요.\n속도차이가 크게 나지 않기 때문에 특별한 이유가 없다면 set으로 루프를 돌려도 무방할 것 같습니다.\n\n글을 쓰고 나니 알맹이는 없고 횡설수설한 느낌입니다.\n어찌되었든 위의 두가지(set은 slice를 못하는 것, list보다 iteration 성능이 떨어지는것) 사실로 set에 대한 궁금증이 완전히 사라진 것은 아닙니다. \nset이라는 자료구조가 머리속에 그림으로 그려져서 더하고 삭제하거나 탐색할때, 또는 set을 list로 바꿀 때와 같은 경우를 한번에 떠올릴 수 있으면 참 좋겠습니다만, 아직까지는 더 노력이 필요한 것 같습니다. \n너무 많은 내용을 한번에 다루면 포스팅하는 저나 읽는 사람들 모두 피곤할테니 일단은 여기서 글을 마무리 하는게 좋을것 같네요.\n","slug":"python-about-set","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv890034wxt4ubvqjqva","content":"<p>중복이 제거된 자료구조를 만들어야 할 일이 있어 set을 쓰게 되었는데요.<br>set으로 만들어진 자료를 바탕으로 루프를 돌며 set안의 item들을 처리하는 작업이었습니다.<br>item이 너무 많아지게 되면, 메모리 등의 성능 이슈가 발생할 것을 대비하여 20만개씩 잘라서 분절해야 했는데요.<br>이 때 첫번째 문제가 발생했습니다. python에서 set은 분절 할 수 없다는 것입니다.<br>리스트의 경우에는 아래와 같이 분절이 가능합니다만, set은 리스트 처럼 분절이 불가합니다.</p><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">temp_list</span> = [<span class=\"string\">'a, '</span>b<span class=\"string\">', '</span>c<span class=\"string\">', '</span>d<span class=\"string\">', '</span>e<span class=\"string\">', '</span>f<span class=\"string\">']</span></div><div class=\"line\">temp_list[:3]      </div><div class=\"line\"></div><div class=\"line\"># ['a, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>] 출력</div></pre></td></tr></table></figure><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp_set = &#123;<span class=\"symbol\">'a</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>&#125;</div><div class=\"line\">temp_set[:<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"># 아래의 에러 발생</div><div class=\"line\"># Traceback (most recent call last):</div><div class=\"line\"># File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\"># TypeError: <span class=\"symbol\">'set</span>' object <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> subscriptable</div></pre></td></tr></table></figure><p>루프를 돌면서 처리할 수도 있겠지만, 그것보다는 왜 set이 분절이 안될까라는 고민에 빠져 도대체 set은 어떻게 만들어진건가 궁금해지더라구요.<br>구글링을 하다 파이썬 공식 문서에(2.7 버전, 파이썬 3보다 설명이 괜찮더라구요) set은 아래와 같은 내용을 찾았습니다.</p><blockquote><p>The sets module provides classes for constructing and manipulating unordered collections of unique elements. Common uses include membership testing, removing duplicates from a sequence, and computing standard math operations on sets such as intersection, union, difference, and symmetric difference.</p><p>Like other collections, sets support x in set, len(set), and for x in set. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.</p><p>……</p><p>The set classes are implemented using dictionaries. Accordingly, the requirements for set elements are the same as those for dictionary keys; namely, that the element defines both <strong>eq</strong>() and <strong>hash</strong>(). As a result, sets cannot contain mutable elements such as lists or dictionaries</p></blockquote><p>대략적인 내용을 살펴보면(발번역 및 의역),</p><blockquote><p>set은 순서가 없는 중복이 불가능한 collection 자료형이다. 주로 item 테스트, 중복제거 등에 사용되고 교집합, 합집합, 차집합 등을 수학적인 계산이 가능하다. 다른 collection 자료형 처럼 item 검사, 길이, 루프가 가능하다. set은 삽입된 item의 위치를 저장하지 않기 때문에 item 간의 순서가 없다. 따라서 indexing이 불가능하고, 자르기가 안되고, 그외의 sequential한 작업이 불가하다. set은 dictionary를 구현한 클래스인데, dictionary의 key가 set의 item이 된다. 그렇기 때문에 set은 dictionary나 list처럼 중복되는 요소를 담을 수 없다.</p></blockquote><p>정도가 되겠네요. 위의 번역을 토대로 set이 분절이 안되는 이유는 item을 저장할때 순서값을 저장하지 않기 때문이라 할 수 있겠네요.<br>순서가 없으니 어디서부터 어디까지라는 것을 정할 수 없을 것이고, 그렇기 때문에 분절이 불가능하다 할 수 있겠습니다.</p><p>그리고 두 번째 문제가 있었는데, set의 루핑 속도에 대한 것이었습니다.<br>파이썬에서 set역시 list와 같이 iterable한 자료구조이긴 하지만, list에 비해서 iteration 성능은 떨어지는 것으로 익히 알려져 있습니다.<br>대신 hash 기반으로 만들어지기 때문에 검색 속도는 list에 비해 훨씬 뛰어나죠.</p><p>우선 진짜 set이 list에 비해 iteration 성능이 떨어지는지 확인해 보았습니다.</p><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from timeit <span class=\"built_in\">import</span> timeit</div><div class=\"line\"></div><div class=\"line\">def iter(iterable):</div><div class=\"line\">    for i <span class=\"keyword\">in</span> iterable:</div><div class=\"line\">        pass</div><div class=\"line\"></div><div class=\"line\">timeit(<span class=\"string\">\"iter(iterable)\"</span>, <span class=\"attr\">number=1000,</span> <span class=\"attr\">setup=\"from</span> __main__ <span class=\"built_in\">import</span> iter; <span class=\"attr\">iterable=set(range(1000000))\")</span></div><div class=\"line\"><span class=\"comment\"># 결과 : 14.660961047000455 (단위: 초)</span></div><div class=\"line\"></div><div class=\"line\">timeit(<span class=\"string\">\"iter(iterable)\"</span>, <span class=\"attr\">number=1000,</span> <span class=\"attr\">setup=\"from</span> __main__ <span class=\"built_in\">import</span> iter; <span class=\"attr\">iterable=list(range(1000000))\")</span></div><div class=\"line\"><span class=\"comment\"># 결과 : 11.929272602999845 (단위: 초)</span></div></pre></td></tr></table></figure><p>1,000,000(백만, 0~999,999) 까지의 숫자를 담은 set을 1,000번 반복한 결과 14.66초 정도가 걸렸습니다.<br>반면에 같은 조건으로 list를 1,000번 반복한 결과 11.93초 정도가 걸렸네요.<br>대략 3초 정도가 차이납니다.<br>사실 1,000,000을 1,000번 반복하여 총 1,000,000,000(10억)번 루프를 돌아야만 3초 정도(14-11)가 차이가 난것이지,<br>현업에서 사용하는 정도의 크기로 비교해보면 그렇게 큰 차이가 나지는 않는것 같네요.<br>속도차이가 크게 나지 않기 때문에 특별한 이유가 없다면 set으로 루프를 돌려도 무방할 것 같습니다.</p><p>글을 쓰고 나니 알맹이는 없고 횡설수설한 느낌입니다.<br>어찌되었든 위의 두가지(set은 slice를 못하는 것, list보다 iteration 성능이 떨어지는것) 사실로 set에 대한 궁금증이 완전히 사라진 것은 아닙니다.<br>set이라는 자료구조가 머리속에 그림으로 그려져서 더하고 삭제하거나 탐색할때, 또는 set을 list로 바꿀 때와 같은 경우를 한번에 떠올릴 수 있으면 참 좋겠습니다만, 아직까지는 더 노력이 필요한 것 같습니다.<br>너무 많은 내용을 한번에 다루면 포스팅하는 저나 읽는 사람들 모두 피곤할테니 일단은 여기서 글을 마무리 하는게 좋을것 같네요.</p>","excerpt":"","more":"<p>중복이 제거된 자료구조를 만들어야 할 일이 있어 set을 쓰게 되었는데요.<br>set으로 만들어진 자료를 바탕으로 루프를 돌며 set안의 item들을 처리하는 작업이었습니다.<br>item이 너무 많아지게 되면, 메모리 등의 성능 이슈가 발생할 것을 대비하여 20만개씩 잘라서 분절해야 했는데요.<br>이 때 첫번째 문제가 발생했습니다. python에서 set은 분절 할 수 없다는 것입니다.<br>리스트의 경우에는 아래와 같이 분절이 가능합니다만, set은 리스트 처럼 분절이 불가합니다.</p><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">temp_list</span> = [<span class=\"string\">'a, '</span>b<span class=\"string\">', '</span>c<span class=\"string\">', '</span>d<span class=\"string\">', '</span>e<span class=\"string\">', '</span>f<span class=\"string\">']</span></div><div class=\"line\">temp_list[:3]      </div><div class=\"line\"></div><div class=\"line\"># ['a, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>] 출력</div></pre></td></tr></table></figure><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp_set = &#123;<span class=\"symbol\">'a</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>&#125;</div><div class=\"line\">temp_set[:<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"># 아래의 에러 발생</div><div class=\"line\"># Traceback (most recent call last):</div><div class=\"line\"># File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\"># TypeError: <span class=\"symbol\">'set</span>' object <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> subscriptable</div></pre></td></tr></table></figure><p>루프를 돌면서 처리할 수도 있겠지만, 그것보다는 왜 set이 분절이 안될까라는 고민에 빠져 도대체 set은 어떻게 만들어진건가 궁금해지더라구요.<br>구글링을 하다 파이썬 공식 문서에(2.7 버전, 파이썬 3보다 설명이 괜찮더라구요) set은 아래와 같은 내용을 찾았습니다.</p><blockquote><p>The sets module provides classes for constructing and manipulating unordered collections of unique elements. Common uses include membership testing, removing duplicates from a sequence, and computing standard math operations on sets such as intersection, union, difference, and symmetric difference.</p><p>Like other collections, sets support x in set, len(set), and for x in set. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.</p><p>……</p><p>The set classes are implemented using dictionaries. Accordingly, the requirements for set elements are the same as those for dictionary keys; namely, that the element defines both <strong>eq</strong>() and <strong>hash</strong>(). As a result, sets cannot contain mutable elements such as lists or dictionaries</p></blockquote><p>대략적인 내용을 살펴보면(발번역 및 의역),</p><blockquote><p>set은 순서가 없는 중복이 불가능한 collection 자료형이다. 주로 item 테스트, 중복제거 등에 사용되고 교집합, 합집합, 차집합 등을 수학적인 계산이 가능하다. 다른 collection 자료형 처럼 item 검사, 길이, 루프가 가능하다. set은 삽입된 item의 위치를 저장하지 않기 때문에 item 간의 순서가 없다. 따라서 indexing이 불가능하고, 자르기가 안되고, 그외의 sequential한 작업이 불가하다. set은 dictionary를 구현한 클래스인데, dictionary의 key가 set의 item이 된다. 그렇기 때문에 set은 dictionary나 list처럼 중복되는 요소를 담을 수 없다.</p></blockquote><p>정도가 되겠네요. 위의 번역을 토대로 set이 분절이 안되는 이유는 item을 저장할때 순서값을 저장하지 않기 때문이라 할 수 있겠네요.<br>순서가 없으니 어디서부터 어디까지라는 것을 정할 수 없을 것이고, 그렇기 때문에 분절이 불가능하다 할 수 있겠습니다.</p><p>그리고 두 번째 문제가 있었는데, set의 루핑 속도에 대한 것이었습니다.<br>파이썬에서 set역시 list와 같이 iterable한 자료구조이긴 하지만, list에 비해서 iteration 성능은 떨어지는 것으로 익히 알려져 있습니다.<br>대신 hash 기반으로 만들어지기 때문에 검색 속도는 list에 비해 훨씬 뛰어나죠.</p><p>우선 진짜 set이 list에 비해 iteration 성능이 떨어지는지 확인해 보았습니다.</p><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from timeit <span class=\"built_in\">import</span> timeit</div><div class=\"line\"></div><div class=\"line\">def iter(iterable):</div><div class=\"line\">    for i <span class=\"keyword\">in</span> iterable:</div><div class=\"line\">        pass</div><div class=\"line\"></div><div class=\"line\">timeit(<span class=\"string\">\"iter(iterable)\"</span>, <span class=\"attr\">number=1000,</span> <span class=\"attr\">setup=\"from</span> __main__ <span class=\"built_in\">import</span> iter; <span class=\"attr\">iterable=set(range(1000000))\")</span></div><div class=\"line\"><span class=\"comment\"># 결과 : 14.660961047000455 (단위: 초)</span></div><div class=\"line\"></div><div class=\"line\">timeit(<span class=\"string\">\"iter(iterable)\"</span>, <span class=\"attr\">number=1000,</span> <span class=\"attr\">setup=\"from</span> __main__ <span class=\"built_in\">import</span> iter; <span class=\"attr\">iterable=list(range(1000000))\")</span></div><div class=\"line\"><span class=\"comment\"># 결과 : 11.929272602999845 (단위: 초)</span></div></pre></td></tr></table></figure><p>1,000,000(백만, 0~999,999) 까지의 숫자를 담은 set을 1,000번 반복한 결과 14.66초 정도가 걸렸습니다.<br>반면에 같은 조건으로 list를 1,000번 반복한 결과 11.93초 정도가 걸렸네요.<br>대략 3초 정도가 차이납니다.<br>사실 1,000,000을 1,000번 반복하여 총 1,000,000,000(10억)번 루프를 돌아야만 3초 정도(14-11)가 차이가 난것이지,<br>현업에서 사용하는 정도의 크기로 비교해보면 그렇게 큰 차이가 나지는 않는것 같네요.<br>속도차이가 크게 나지 않기 때문에 특별한 이유가 없다면 set으로 루프를 돌려도 무방할 것 같습니다.</p><p>글을 쓰고 나니 알맹이는 없고 횡설수설한 느낌입니다.<br>어찌되었든 위의 두가지(set은 slice를 못하는 것, list보다 iteration 성능이 떨어지는것) 사실로 set에 대한 궁금증이 완전히 사라진 것은 아닙니다.<br>set이라는 자료구조가 머리속에 그림으로 그려져서 더하고 삭제하거나 탐색할때, 또는 set을 list로 바꿀 때와 같은 경우를 한번에 떠올릴 수 있으면 참 좋겠습니다만, 아직까지는 더 노력이 필요한 것 같습니다.<br>너무 많은 내용을 한번에 다루면 포스팅하는 저나 읽는 사람들 모두 피곤할테니 일단은 여기서 글을 마무리 하는게 좋을것 같네요.</p>"},{"title":"[python] 코루틴(co-routine), 서브루틴(sub-routine)과 비교","date":"2016-01-25T13:32:26.000Z","_content":"코루틴의 개념을 살펴보기 전에 우선, 상반되는(반드시 상반된다고는 할 수 없지만..) 서브루틴에 대해서 한번 짚고 넘어가 보겠습니다. \n참고로 서브루틴의 상반되는 개념은 코루틴이 아닌 메인루틴(main-routine, 그냥 루틴이라고도 함)이라 할 수 있습니다.\n\n### 서브루틴\n\n서브루틴은 반복되는 특정 기능을 모아 별도로 묶어 놓아 이름을 붙여 놓은 것으로 메인루틴을 보조하는 역할을 합니다. 보통 언어에서는 함수나 메소드 등으로 불리며 사용됩니다. 어떤 특정 기능을 모아놓고 이름을 붙였다는 것으로 매크로와 비슷하지만 매크로의 경우 컴파일시에(C언어에서와 같이) 매크로를 호출하는 부분을 모두 매크로 본문으로 대체해 버리므로 메모리 사용이 비효율적입니다. 반면에 서브루틴은 별도의 메모리에 해당 기능을 모아 놓고 있어, 서브루틴이 호출될 때마다 저장된 메모리로 이동했다가 return을 통해 원래 호출자의 위치로 돌아오게 됩니다. 호출할 때마다 매번 같은 위치로 이동하기 때문에 여러번 사용될 수 있으므로 매크로에 비해서 훨씬 효율적이라 할 수 있겠지요.\n\n### 코루틴\n\n코루틴도 서브루틴처럼 기능들을 별도의 공간에 모아 놓고 있다는 점에서는 동일합니다. 차이점이라 할 수 있는 것은, 서브루틴의 경우에는 메인루틴에서 특정 서브루틴의 공간으로 이동한 후에 리턴에 의해 호출자로 돌아와 다시 프로세스를 진행하는데 반해 코루틴의 경우에는 루틴을 진행하는 중간에 멈추어서 특정 위치로 돌아갔다가 다시 원래 위치로 돌아와 나머지 루틴을 수행할 수 있습니다. 또 한가지 차이점은 서브루틴은 진입점과 반환점이 단 하나밖에 없어 메인루틴에 종속적이지만, 코루틴은 진입지점이 여러개이기 때문에 메인루틴에 종속적이지 않아 대등하게 데이터를 주고 받을 수 있다는 특징이 있습니다. 코루틴은 주로 동시성을 필요로 하는 UNITY 등의 게임프로그래밍에서 많이 사용하는 개념이라고 합니다.\n\n파이썬에도 코루틴이 있습니다.\n코루틴의 특징과 흐름을 살펴보면 다음과 같습니다.\n\n> 1. 파이썬에는 yield문이라는 특수한 구문이 있습니다. return 처럼 동작하지만, 사실은 입력으로 동작합니다.(메인루틴에 종속적이 아니라 대등한 상태이기 때문에)\n> 2. next(coroutine)은 coroutine 함수의 첫번째 yield까지 호출한다음 대기합니다. 두번째 next(coroutine)을 호출하면, 첫번째 yield 다음의 나머지 부분을 수행하고 다시 돌아와 그 다음 yield까지 호출합니다. iteration이 가능한곳까지 next 함수가 수행된 뒤에는 StopIteration 에러가 발생하게 됩니다.\n> 3. 만약 yield문이 특정 변수에 할당된다면, 만들어진 코루틴 객체에서 coroutine.send(value)를 호출해 주어야 합니다. 첫번째 coroutine 지점(yield)에 멈춰있는 상태에서 변수에 할당 되어야 하는데 아무런 값도 들어오지 않는다면 에러가 발생하게 됩니다. 즉, yield를 통해서 메인루틴과 서브루틴간에 서로 값이 이동하면서 특정 로직을 수행하게 되는 것입니다.\n\n그럼 예를 살펴보도록 하겠습니다.\n\n첫번째 예제는 yield 값만 리턴하는 경우입니다. 코루틴 객체를 생성한 후 next() 함수를 통해서 첫번째 yield문에 도달합니다. yield문을 통해 메인루틴에 값을 전달한 후 코루틴 함수는 대기합니다. 다음 next()함수가 호출되면, 멈춰져 있는 yield 부분 다음의 로직을 수행한 다음 한바퀴 돌아 yield 부분에서 또다시 멈추게 됩니다. 아래의 예제에서는 next()를 무한정 호출할 수 있지만, 특정한 조건을 지정해주면 정해진 만큼만 next()를 호출할 수 있습니다. 더이상 호출할 수 없는 코루틴 함수를 next()로 호출하면 예외가 발생하게 됩니다.\n\n```\ndef test1(i):\n    print('start test1 coroutine')\n    while True:\n        yield i\n        i += 1\n\na = test1(5)\nnext(a)    # start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.\nnext(a)    # 멈춰진 yield i 부분 다음줄의 5 += 1(i=6)을 수행한후 다음 6을 출력하고 yield i에서 멈춘다.\nnext(a)    # 7을 출력하고 yield i에서 멈춘다.\nnext(a)\n```\n\n두번째 예제는 코루틴과 메인루틴이 서로 통신하는 형태입니다. 위의 test1()과 다른점은 yield 구문을 특정 변수에 할당합니다. 이렇게 되면 처음 next()를 호출한 뒤 send(value) 함수를 호출하면 전달된 파라미터가 value에 할당됩니다. 즉, b = test2(5), next(b)를 수행한 뒤 b.send(3)을 호출하면 8이 출력된다는 말이죠. 그 다음은 next()함수와 마찬가지로 그 다음 yield에 가서 멈춰 있게 됩니다.\n위의 예제와 다른 점은 위 같은 경우에는 코루틴에서 메인루틴으로 일방적으로 값을 전달해줬다면, 아래 예제에서는 메인루틴과 서브루틴이 서로 값을 주고 받는 형태를 이루고 있습니다. 양방향 통신이 가능해진 것이죠. 하지만 실시간으로 서로 주고 받는 형태는 아니므로 반이중 통신이라 할 수 있겠습니다.\n\n```\ndef test2(i):\n    print('start test2 coroutine')\n    while True:\n        value = yield i \n        i += value\n\nb = test2(5)\nnext(b)    # start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.\nb.send(3)    # yield를 통해 3을 전달하여 value가 3이 된다. 이후 i += value 줄을 거쳐 i=8이되고 한바퀴 돌아 8을출력, yield에서 멈춘다. \nb.send(5)    # 5를 더해 i는 8이되고 8을 출력한다.\n```\n\n아직 저도 코루틴을 실제 프로젝트에서 많이 다뤄보지는 못했기에 활용법에 대해서 잘은 모릅니다. 검색을 통해 찾아 보았던 것은 수많은 파이썬 비동기 모듈에서 대부분 코루틴을 다루고 있다는 것입니다. 양 방향으로 통신이 가능하다는 것은 여러 함수를 동시에 호출하면서 서로간에 통신도 가능하다는 말이니 적절한 사용처가 아닐까 생각합니다. 또 생각해 볼 수 있는 것은 정해진 순서가 아닌 사용자의 입력에 따라서 동작이 바뀌는 기계학습 분야에도 많이 활용될 것 같다는 느낌이 드는군요. ","source":"_posts/python-co-routine-vs-sub-routine.md","raw":"---\ntitle: \"[python] 코루틴(co-routine), 서브루틴(sub-routine)과 비교\"\ndate: 2016-01-25 22:32:26\ntags:\n- python\n- co-routine\n---\n코루틴의 개념을 살펴보기 전에 우선, 상반되는(반드시 상반된다고는 할 수 없지만..) 서브루틴에 대해서 한번 짚고 넘어가 보겠습니다. \n참고로 서브루틴의 상반되는 개념은 코루틴이 아닌 메인루틴(main-routine, 그냥 루틴이라고도 함)이라 할 수 있습니다.\n\n### 서브루틴\n\n서브루틴은 반복되는 특정 기능을 모아 별도로 묶어 놓아 이름을 붙여 놓은 것으로 메인루틴을 보조하는 역할을 합니다. 보통 언어에서는 함수나 메소드 등으로 불리며 사용됩니다. 어떤 특정 기능을 모아놓고 이름을 붙였다는 것으로 매크로와 비슷하지만 매크로의 경우 컴파일시에(C언어에서와 같이) 매크로를 호출하는 부분을 모두 매크로 본문으로 대체해 버리므로 메모리 사용이 비효율적입니다. 반면에 서브루틴은 별도의 메모리에 해당 기능을 모아 놓고 있어, 서브루틴이 호출될 때마다 저장된 메모리로 이동했다가 return을 통해 원래 호출자의 위치로 돌아오게 됩니다. 호출할 때마다 매번 같은 위치로 이동하기 때문에 여러번 사용될 수 있으므로 매크로에 비해서 훨씬 효율적이라 할 수 있겠지요.\n\n### 코루틴\n\n코루틴도 서브루틴처럼 기능들을 별도의 공간에 모아 놓고 있다는 점에서는 동일합니다. 차이점이라 할 수 있는 것은, 서브루틴의 경우에는 메인루틴에서 특정 서브루틴의 공간으로 이동한 후에 리턴에 의해 호출자로 돌아와 다시 프로세스를 진행하는데 반해 코루틴의 경우에는 루틴을 진행하는 중간에 멈추어서 특정 위치로 돌아갔다가 다시 원래 위치로 돌아와 나머지 루틴을 수행할 수 있습니다. 또 한가지 차이점은 서브루틴은 진입점과 반환점이 단 하나밖에 없어 메인루틴에 종속적이지만, 코루틴은 진입지점이 여러개이기 때문에 메인루틴에 종속적이지 않아 대등하게 데이터를 주고 받을 수 있다는 특징이 있습니다. 코루틴은 주로 동시성을 필요로 하는 UNITY 등의 게임프로그래밍에서 많이 사용하는 개념이라고 합니다.\n\n파이썬에도 코루틴이 있습니다.\n코루틴의 특징과 흐름을 살펴보면 다음과 같습니다.\n\n> 1. 파이썬에는 yield문이라는 특수한 구문이 있습니다. return 처럼 동작하지만, 사실은 입력으로 동작합니다.(메인루틴에 종속적이 아니라 대등한 상태이기 때문에)\n> 2. next(coroutine)은 coroutine 함수의 첫번째 yield까지 호출한다음 대기합니다. 두번째 next(coroutine)을 호출하면, 첫번째 yield 다음의 나머지 부분을 수행하고 다시 돌아와 그 다음 yield까지 호출합니다. iteration이 가능한곳까지 next 함수가 수행된 뒤에는 StopIteration 에러가 발생하게 됩니다.\n> 3. 만약 yield문이 특정 변수에 할당된다면, 만들어진 코루틴 객체에서 coroutine.send(value)를 호출해 주어야 합니다. 첫번째 coroutine 지점(yield)에 멈춰있는 상태에서 변수에 할당 되어야 하는데 아무런 값도 들어오지 않는다면 에러가 발생하게 됩니다. 즉, yield를 통해서 메인루틴과 서브루틴간에 서로 값이 이동하면서 특정 로직을 수행하게 되는 것입니다.\n\n그럼 예를 살펴보도록 하겠습니다.\n\n첫번째 예제는 yield 값만 리턴하는 경우입니다. 코루틴 객체를 생성한 후 next() 함수를 통해서 첫번째 yield문에 도달합니다. yield문을 통해 메인루틴에 값을 전달한 후 코루틴 함수는 대기합니다. 다음 next()함수가 호출되면, 멈춰져 있는 yield 부분 다음의 로직을 수행한 다음 한바퀴 돌아 yield 부분에서 또다시 멈추게 됩니다. 아래의 예제에서는 next()를 무한정 호출할 수 있지만, 특정한 조건을 지정해주면 정해진 만큼만 next()를 호출할 수 있습니다. 더이상 호출할 수 없는 코루틴 함수를 next()로 호출하면 예외가 발생하게 됩니다.\n\n```\ndef test1(i):\n    print('start test1 coroutine')\n    while True:\n        yield i\n        i += 1\n\na = test1(5)\nnext(a)    # start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.\nnext(a)    # 멈춰진 yield i 부분 다음줄의 5 += 1(i=6)을 수행한후 다음 6을 출력하고 yield i에서 멈춘다.\nnext(a)    # 7을 출력하고 yield i에서 멈춘다.\nnext(a)\n```\n\n두번째 예제는 코루틴과 메인루틴이 서로 통신하는 형태입니다. 위의 test1()과 다른점은 yield 구문을 특정 변수에 할당합니다. 이렇게 되면 처음 next()를 호출한 뒤 send(value) 함수를 호출하면 전달된 파라미터가 value에 할당됩니다. 즉, b = test2(5), next(b)를 수행한 뒤 b.send(3)을 호출하면 8이 출력된다는 말이죠. 그 다음은 next()함수와 마찬가지로 그 다음 yield에 가서 멈춰 있게 됩니다.\n위의 예제와 다른 점은 위 같은 경우에는 코루틴에서 메인루틴으로 일방적으로 값을 전달해줬다면, 아래 예제에서는 메인루틴과 서브루틴이 서로 값을 주고 받는 형태를 이루고 있습니다. 양방향 통신이 가능해진 것이죠. 하지만 실시간으로 서로 주고 받는 형태는 아니므로 반이중 통신이라 할 수 있겠습니다.\n\n```\ndef test2(i):\n    print('start test2 coroutine')\n    while True:\n        value = yield i \n        i += value\n\nb = test2(5)\nnext(b)    # start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.\nb.send(3)    # yield를 통해 3을 전달하여 value가 3이 된다. 이후 i += value 줄을 거쳐 i=8이되고 한바퀴 돌아 8을출력, yield에서 멈춘다. \nb.send(5)    # 5를 더해 i는 8이되고 8을 출력한다.\n```\n\n아직 저도 코루틴을 실제 프로젝트에서 많이 다뤄보지는 못했기에 활용법에 대해서 잘은 모릅니다. 검색을 통해 찾아 보았던 것은 수많은 파이썬 비동기 모듈에서 대부분 코루틴을 다루고 있다는 것입니다. 양 방향으로 통신이 가능하다는 것은 여러 함수를 동시에 호출하면서 서로간에 통신도 가능하다는 말이니 적절한 사용처가 아닐까 생각합니다. 또 생각해 볼 수 있는 것은 정해진 순서가 아닌 사용자의 입력에 따라서 동작이 바뀌는 기계학습 분야에도 많이 활용될 것 같다는 느낌이 드는군요. ","slug":"python-co-routine-vs-sub-routine","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebv8b0036wxt4562tqq42","content":"<p>코루틴의 개념을 살펴보기 전에 우선, 상반되는(반드시 상반된다고는 할 수 없지만..) 서브루틴에 대해서 한번 짚고 넘어가 보겠습니다.<br>참고로 서브루틴의 상반되는 개념은 코루틴이 아닌 메인루틴(main-routine, 그냥 루틴이라고도 함)이라 할 수 있습니다.</p><h3 id=\"서브루틴\"><a href=\"#서브루틴\" class=\"headerlink\" title=\"서브루틴\"></a>서브루틴</h3><p>서브루틴은 반복되는 특정 기능을 모아 별도로 묶어 놓아 이름을 붙여 놓은 것으로 메인루틴을 보조하는 역할을 합니다. 보통 언어에서는 함수나 메소드 등으로 불리며 사용됩니다. 어떤 특정 기능을 모아놓고 이름을 붙였다는 것으로 매크로와 비슷하지만 매크로의 경우 컴파일시에(C언어에서와 같이) 매크로를 호출하는 부분을 모두 매크로 본문으로 대체해 버리므로 메모리 사용이 비효율적입니다. 반면에 서브루틴은 별도의 메모리에 해당 기능을 모아 놓고 있어, 서브루틴이 호출될 때마다 저장된 메모리로 이동했다가 return을 통해 원래 호출자의 위치로 돌아오게 됩니다. 호출할 때마다 매번 같은 위치로 이동하기 때문에 여러번 사용될 수 있으므로 매크로에 비해서 훨씬 효율적이라 할 수 있겠지요.</p><h3 id=\"코루틴\"><a href=\"#코루틴\" class=\"headerlink\" title=\"코루틴\"></a>코루틴</h3><p>코루틴도 서브루틴처럼 기능들을 별도의 공간에 모아 놓고 있다는 점에서는 동일합니다. 차이점이라 할 수 있는 것은, 서브루틴의 경우에는 메인루틴에서 특정 서브루틴의 공간으로 이동한 후에 리턴에 의해 호출자로 돌아와 다시 프로세스를 진행하는데 반해 코루틴의 경우에는 루틴을 진행하는 중간에 멈추어서 특정 위치로 돌아갔다가 다시 원래 위치로 돌아와 나머지 루틴을 수행할 수 있습니다. 또 한가지 차이점은 서브루틴은 진입점과 반환점이 단 하나밖에 없어 메인루틴에 종속적이지만, 코루틴은 진입지점이 여러개이기 때문에 메인루틴에 종속적이지 않아 대등하게 데이터를 주고 받을 수 있다는 특징이 있습니다. 코루틴은 주로 동시성을 필요로 하는 UNITY 등의 게임프로그래밍에서 많이 사용하는 개념이라고 합니다.</p><p>파이썬에도 코루틴이 있습니다.<br>코루틴의 특징과 흐름을 살펴보면 다음과 같습니다.</p><blockquote><ol><li>파이썬에는 yield문이라는 특수한 구문이 있습니다. return 처럼 동작하지만, 사실은 입력으로 동작합니다.(메인루틴에 종속적이 아니라 대등한 상태이기 때문에)</li><li>next(coroutine)은 coroutine 함수의 첫번째 yield까지 호출한다음 대기합니다. 두번째 next(coroutine)을 호출하면, 첫번째 yield 다음의 나머지 부분을 수행하고 다시 돌아와 그 다음 yield까지 호출합니다. iteration이 가능한곳까지 next 함수가 수행된 뒤에는 StopIteration 에러가 발생하게 됩니다.</li><li>만약 yield문이 특정 변수에 할당된다면, 만들어진 코루틴 객체에서 coroutine.send(value)를 호출해 주어야 합니다. 첫번째 coroutine 지점(yield)에 멈춰있는 상태에서 변수에 할당 되어야 하는데 아무런 값도 들어오지 않는다면 에러가 발생하게 됩니다. 즉, yield를 통해서 메인루틴과 서브루틴간에 서로 값이 이동하면서 특정 로직을 수행하게 되는 것입니다.</li></ol></blockquote><p>그럼 예를 살펴보도록 하겠습니다.</p><p>첫번째 예제는 yield 값만 리턴하는 경우입니다. 코루틴 객체를 생성한 후 next() 함수를 통해서 첫번째 yield문에 도달합니다. yield문을 통해 메인루틴에 값을 전달한 후 코루틴 함수는 대기합니다. 다음 next()함수가 호출되면, 멈춰져 있는 yield 부분 다음의 로직을 수행한 다음 한바퀴 돌아 yield 부분에서 또다시 멈추게 됩니다. 아래의 예제에서는 next()를 무한정 호출할 수 있지만, 특정한 조건을 지정해주면 정해진 만큼만 next()를 호출할 수 있습니다. 더이상 호출할 수 없는 코루틴 함수를 next()로 호출하면 예외가 발생하게 됩니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">(i)</span></span>:</div><div class=\"line\">    print(<span class=\"string\">'start test1 coroutine'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"symbol\">True:</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> i</div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">a = test1(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># 멈춰진 yield i 부분 다음줄의 5 += 1(i=6)을 수행한후 다음 6을 출력하고 yield i에서 멈춘다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># 7을 출력하고 yield i에서 멈춘다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)</div></pre></td></tr></table></figure><p>두번째 예제는 코루틴과 메인루틴이 서로 통신하는 형태입니다. 위의 test1()과 다른점은 yield 구문을 특정 변수에 할당합니다. 이렇게 되면 처음 next()를 호출한 뒤 send(value) 함수를 호출하면 전달된 파라미터가 value에 할당됩니다. 즉, b = test2(5), next(b)를 수행한 뒤 b.send(3)을 호출하면 8이 출력된다는 말이죠. 그 다음은 next()함수와 마찬가지로 그 다음 yield에 가서 멈춰 있게 됩니다.<br>위의 예제와 다른 점은 위 같은 경우에는 코루틴에서 메인루틴으로 일방적으로 값을 전달해줬다면, 아래 예제에서는 메인루틴과 서브루틴이 서로 값을 주고 받는 형태를 이루고 있습니다. 양방향 통신이 가능해진 것이죠. 하지만 실시간으로 서로 주고 받는 형태는 아니므로 반이중 통신이라 할 수 있겠습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">(i)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'start test2 coroutine'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        value = <span class=\"keyword\">yield</span> i </div><div class=\"line\">        i += value</div><div class=\"line\"></div><div class=\"line\">b = test2(<span class=\"number\">5</span>)</div><div class=\"line\">next(b)    <span class=\"comment\"># start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.</span></div><div class=\"line\">b.send(<span class=\"number\">3</span>)    <span class=\"comment\"># yield를 통해 3을 전달하여 value가 3이 된다. 이후 i += value 줄을 거쳐 i=8이되고 한바퀴 돌아 8을출력, yield에서 멈춘다. </span></div><div class=\"line\">b.send(<span class=\"number\">5</span>)    <span class=\"comment\"># 5를 더해 i는 8이되고 8을 출력한다.</span></div></pre></td></tr></table></figure><p>아직 저도 코루틴을 실제 프로젝트에서 많이 다뤄보지는 못했기에 활용법에 대해서 잘은 모릅니다. 검색을 통해 찾아 보았던 것은 수많은 파이썬 비동기 모듈에서 대부분 코루틴을 다루고 있다는 것입니다. 양 방향으로 통신이 가능하다는 것은 여러 함수를 동시에 호출하면서 서로간에 통신도 가능하다는 말이니 적절한 사용처가 아닐까 생각합니다. 또 생각해 볼 수 있는 것은 정해진 순서가 아닌 사용자의 입력에 따라서 동작이 바뀌는 기계학습 분야에도 많이 활용될 것 같다는 느낌이 드는군요.</p>","excerpt":"","more":"<p>코루틴의 개념을 살펴보기 전에 우선, 상반되는(반드시 상반된다고는 할 수 없지만..) 서브루틴에 대해서 한번 짚고 넘어가 보겠습니다.<br>참고로 서브루틴의 상반되는 개념은 코루틴이 아닌 메인루틴(main-routine, 그냥 루틴이라고도 함)이라 할 수 있습니다.</p><h3 id=\"서브루틴\"><a href=\"#서브루틴\" class=\"headerlink\" title=\"서브루틴\"></a>서브루틴</h3><p>서브루틴은 반복되는 특정 기능을 모아 별도로 묶어 놓아 이름을 붙여 놓은 것으로 메인루틴을 보조하는 역할을 합니다. 보통 언어에서는 함수나 메소드 등으로 불리며 사용됩니다. 어떤 특정 기능을 모아놓고 이름을 붙였다는 것으로 매크로와 비슷하지만 매크로의 경우 컴파일시에(C언어에서와 같이) 매크로를 호출하는 부분을 모두 매크로 본문으로 대체해 버리므로 메모리 사용이 비효율적입니다. 반면에 서브루틴은 별도의 메모리에 해당 기능을 모아 놓고 있어, 서브루틴이 호출될 때마다 저장된 메모리로 이동했다가 return을 통해 원래 호출자의 위치로 돌아오게 됩니다. 호출할 때마다 매번 같은 위치로 이동하기 때문에 여러번 사용될 수 있으므로 매크로에 비해서 훨씬 효율적이라 할 수 있겠지요.</p><h3 id=\"코루틴\"><a href=\"#코루틴\" class=\"headerlink\" title=\"코루틴\"></a>코루틴</h3><p>코루틴도 서브루틴처럼 기능들을 별도의 공간에 모아 놓고 있다는 점에서는 동일합니다. 차이점이라 할 수 있는 것은, 서브루틴의 경우에는 메인루틴에서 특정 서브루틴의 공간으로 이동한 후에 리턴에 의해 호출자로 돌아와 다시 프로세스를 진행하는데 반해 코루틴의 경우에는 루틴을 진행하는 중간에 멈추어서 특정 위치로 돌아갔다가 다시 원래 위치로 돌아와 나머지 루틴을 수행할 수 있습니다. 또 한가지 차이점은 서브루틴은 진입점과 반환점이 단 하나밖에 없어 메인루틴에 종속적이지만, 코루틴은 진입지점이 여러개이기 때문에 메인루틴에 종속적이지 않아 대등하게 데이터를 주고 받을 수 있다는 특징이 있습니다. 코루틴은 주로 동시성을 필요로 하는 UNITY 등의 게임프로그래밍에서 많이 사용하는 개념이라고 합니다.</p><p>파이썬에도 코루틴이 있습니다.<br>코루틴의 특징과 흐름을 살펴보면 다음과 같습니다.</p><blockquote><ol><li>파이썬에는 yield문이라는 특수한 구문이 있습니다. return 처럼 동작하지만, 사실은 입력으로 동작합니다.(메인루틴에 종속적이 아니라 대등한 상태이기 때문에)</li><li>next(coroutine)은 coroutine 함수의 첫번째 yield까지 호출한다음 대기합니다. 두번째 next(coroutine)을 호출하면, 첫번째 yield 다음의 나머지 부분을 수행하고 다시 돌아와 그 다음 yield까지 호출합니다. iteration이 가능한곳까지 next 함수가 수행된 뒤에는 StopIteration 에러가 발생하게 됩니다.</li><li>만약 yield문이 특정 변수에 할당된다면, 만들어진 코루틴 객체에서 coroutine.send(value)를 호출해 주어야 합니다. 첫번째 coroutine 지점(yield)에 멈춰있는 상태에서 변수에 할당 되어야 하는데 아무런 값도 들어오지 않는다면 에러가 발생하게 됩니다. 즉, yield를 통해서 메인루틴과 서브루틴간에 서로 값이 이동하면서 특정 로직을 수행하게 되는 것입니다.</li></ol></blockquote><p>그럼 예를 살펴보도록 하겠습니다.</p><p>첫번째 예제는 yield 값만 리턴하는 경우입니다. 코루틴 객체를 생성한 후 next() 함수를 통해서 첫번째 yield문에 도달합니다. yield문을 통해 메인루틴에 값을 전달한 후 코루틴 함수는 대기합니다. 다음 next()함수가 호출되면, 멈춰져 있는 yield 부분 다음의 로직을 수행한 다음 한바퀴 돌아 yield 부분에서 또다시 멈추게 됩니다. 아래의 예제에서는 next()를 무한정 호출할 수 있지만, 특정한 조건을 지정해주면 정해진 만큼만 next()를 호출할 수 있습니다. 더이상 호출할 수 없는 코루틴 함수를 next()로 호출하면 예외가 발생하게 됩니다.</p><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">(i)</span></span>:</div><div class=\"line\">    print(<span class=\"string\">'start test1 coroutine'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"symbol\">True:</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> i</div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">a = test1(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># 멈춰진 yield i 부분 다음줄의 5 += 1(i=6)을 수행한후 다음 6을 출력하고 yield i에서 멈춘다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)    <span class=\"comment\"># 7을 출력하고 yield i에서 멈춘다.</span></div><div class=\"line\"><span class=\"keyword\">next</span>(a)</div></pre></td></tr></table></figure><p>두번째 예제는 코루틴과 메인루틴이 서로 통신하는 형태입니다. 위의 test1()과 다른점은 yield 구문을 특정 변수에 할당합니다. 이렇게 되면 처음 next()를 호출한 뒤 send(value) 함수를 호출하면 전달된 파라미터가 value에 할당됩니다. 즉, b = test2(5), next(b)를 수행한 뒤 b.send(3)을 호출하면 8이 출력된다는 말이죠. 그 다음은 next()함수와 마찬가지로 그 다음 yield에 가서 멈춰 있게 됩니다.<br>위의 예제와 다른 점은 위 같은 경우에는 코루틴에서 메인루틴으로 일방적으로 값을 전달해줬다면, 아래 예제에서는 메인루틴과 서브루틴이 서로 값을 주고 받는 형태를 이루고 있습니다. 양방향 통신이 가능해진 것이죠. 하지만 실시간으로 서로 주고 받는 형태는 아니므로 반이중 통신이라 할 수 있겠습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">(i)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'start test2 coroutine'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        value = <span class=\"keyword\">yield</span> i </div><div class=\"line\">        i += value</div><div class=\"line\"></div><div class=\"line\">b = test2(<span class=\"number\">5</span>)</div><div class=\"line\">next(b)    <span class=\"comment\"># start test1 coroutine 출력 후 5출력, yield i 부분에서 멈춰있다.</span></div><div class=\"line\">b.send(<span class=\"number\">3</span>)    <span class=\"comment\"># yield를 통해 3을 전달하여 value가 3이 된다. 이후 i += value 줄을 거쳐 i=8이되고 한바퀴 돌아 8을출력, yield에서 멈춘다. </span></div><div class=\"line\">b.send(<span class=\"number\">5</span>)    <span class=\"comment\"># 5를 더해 i는 8이되고 8을 출력한다.</span></div></pre></td></tr></table></figure><p>아직 저도 코루틴을 실제 프로젝트에서 많이 다뤄보지는 못했기에 활용법에 대해서 잘은 모릅니다. 검색을 통해 찾아 보았던 것은 수많은 파이썬 비동기 모듈에서 대부분 코루틴을 다루고 있다는 것입니다. 양 방향으로 통신이 가능하다는 것은 여러 함수를 동시에 호출하면서 서로간에 통신도 가능하다는 말이니 적절한 사용처가 아닐까 생각합니다. 또 생각해 볼 수 있는 것은 정해진 순서가 아닌 사용자의 입력에 따라서 동작이 바뀌는 기계학습 분야에도 많이 활용될 것 같다는 느낌이 드는군요.</p>"},{"title":"[python] 클래스 이름을 사용한 동적 모듈 import","date":"2016-02-23T15:56:51.000Z","_content":"파이썬에서 모듈을 import 할때, 보통 파일 최상단(but, 메서드 내에서 지역적으로 import 가능)에 정의해서 쓰곤 합니다.\n그런데 최근에 작업하면서 여러 클래스를 하나의 메서드에서 처리하면 좋겠다는 부분이 생겼지요.\n그래서 생각한 끝에 클래스 이름만으로 동적으로 import하는 방법이 있지 않을까하는 궁금증이 생겼습니다.\n\n> 아마도, 파이썬이라면 가능하다. 아마 누군가 똑같은 고민을 했을 것이다\n\n라는 생각이 들어 한번 찾아 보았습니다.\n\n검색결과, 역시나,,,, 파이썬,,,,\n동일한 조건의 답을 찾는데 꽤 시간이 걸렸지만 결국에는 딱 맞는 방법을 찾아냈습니다.\n현재 조건을 바탕으로 동적으로 import 하는 방법은 아래와 같습니다.\n\n\n### 조건\n\n> 파일 A, B가 있고 c라는 클래스의 이름으로 B에서 import 해야함\n> 파일 A에서 B의 함수를 호출함, 이때 파라미터로 c 클래스의 이름을 전달\n> 파일 A에는 c 클래스를 import 하고 있음\n\n\n### file A\n\n```\nfrom package.temp import TempClass\nfrom package import b\n\ndef a_function():\n    module_name = TempClass.__module__       # 클래스가 정의된 모듈의 이름(패스)을 불러온다. \n    class_name = TempClass.__name__           # 클래스 이름을 string으로 가져온다. \n    b_function(module_name, class_name)\n```\n\n\n### file B\n\n```\nimport importlib          # 모듈을 import 할 수 있는 모듈\n\ndef b_function(module_name, class_name):\n    mod = importlib.import_module(module_name)          # 모듈을 import하고 모듈을 리턴\n    class = getattr(mod, class_name)          # 모듈과 클래스 이름으로 클래스 정보를 가져온다.\n``` \n\n정리해보면,\n우선 file A에서 클래스를 import 합니다. 그리고 특수 기능을 가진 private method인 __module__과 __name__을 이용하여 각각 클래스가 정의된 모듈의 이름과 클래스 이름을 text로 가져옵니다. 두 개의 값을 b_function의 파라미터로 전달한 뒤, file B에서 두 파라미터를 이용하여 importlib 모듈을 통해 import한뒤 클래스 정보를 가져오게 됩니다.","source":"_posts/python-import-by-class-name.md","raw":"---\ntitle: \"[python] 클래스 이름을 사용한 동적 모듈 import\"\ndate: 2016-02-24 00:56:51\ntags:\n- python\n- module\n---\n파이썬에서 모듈을 import 할때, 보통 파일 최상단(but, 메서드 내에서 지역적으로 import 가능)에 정의해서 쓰곤 합니다.\n그런데 최근에 작업하면서 여러 클래스를 하나의 메서드에서 처리하면 좋겠다는 부분이 생겼지요.\n그래서 생각한 끝에 클래스 이름만으로 동적으로 import하는 방법이 있지 않을까하는 궁금증이 생겼습니다.\n\n> 아마도, 파이썬이라면 가능하다. 아마 누군가 똑같은 고민을 했을 것이다\n\n라는 생각이 들어 한번 찾아 보았습니다.\n\n검색결과, 역시나,,,, 파이썬,,,,\n동일한 조건의 답을 찾는데 꽤 시간이 걸렸지만 결국에는 딱 맞는 방법을 찾아냈습니다.\n현재 조건을 바탕으로 동적으로 import 하는 방법은 아래와 같습니다.\n\n\n### 조건\n\n> 파일 A, B가 있고 c라는 클래스의 이름으로 B에서 import 해야함\n> 파일 A에서 B의 함수를 호출함, 이때 파라미터로 c 클래스의 이름을 전달\n> 파일 A에는 c 클래스를 import 하고 있음\n\n\n### file A\n\n```\nfrom package.temp import TempClass\nfrom package import b\n\ndef a_function():\n    module_name = TempClass.__module__       # 클래스가 정의된 모듈의 이름(패스)을 불러온다. \n    class_name = TempClass.__name__           # 클래스 이름을 string으로 가져온다. \n    b_function(module_name, class_name)\n```\n\n\n### file B\n\n```\nimport importlib          # 모듈을 import 할 수 있는 모듈\n\ndef b_function(module_name, class_name):\n    mod = importlib.import_module(module_name)          # 모듈을 import하고 모듈을 리턴\n    class = getattr(mod, class_name)          # 모듈과 클래스 이름으로 클래스 정보를 가져온다.\n``` \n\n정리해보면,\n우선 file A에서 클래스를 import 합니다. 그리고 특수 기능을 가진 private method인 __module__과 __name__을 이용하여 각각 클래스가 정의된 모듈의 이름과 클래스 이름을 text로 가져옵니다. 두 개의 값을 b_function의 파라미터로 전달한 뒤, file B에서 두 파라미터를 이용하여 importlib 모듈을 통해 import한뒤 클래스 정보를 가져오게 됩니다.","slug":"python-import-by-class-name","published":1,"updated":"2017-04-06T01:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1eebvcq00ajwxt4kjhaklqf","content":"<p>파이썬에서 모듈을 import 할때, 보통 파일 최상단(but, 메서드 내에서 지역적으로 import 가능)에 정의해서 쓰곤 합니다.<br>그런데 최근에 작업하면서 여러 클래스를 하나의 메서드에서 처리하면 좋겠다는 부분이 생겼지요.<br>그래서 생각한 끝에 클래스 이름만으로 동적으로 import하는 방법이 있지 않을까하는 궁금증이 생겼습니다.</p><blockquote><p>아마도, 파이썬이라면 가능하다. 아마 누군가 똑같은 고민을 했을 것이다</p></blockquote><p>라는 생각이 들어 한번 찾아 보았습니다.</p><p>검색결과, 역시나,,,, 파이썬,,,,<br>동일한 조건의 답을 찾는데 꽤 시간이 걸렸지만 결국에는 딱 맞는 방법을 찾아냈습니다.<br>현재 조건을 바탕으로 동적으로 import 하는 방법은 아래와 같습니다.</p><h3 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h3><blockquote><p>파일 A, B가 있고 c라는 클래스의 이름으로 B에서 import 해야함<br>파일 A에서 B의 함수를 호출함, 이때 파라미터로 c 클래스의 이름을 전달<br>파일 A에는 c 클래스를 import 하고 있음</p></blockquote><h3 id=\"file-A\"><a href=\"#file-A\" class=\"headerlink\" title=\"file A\"></a>file A</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> package.temp <span class=\"keyword\">import</span> TempClass</div><div class=\"line\"><span class=\"keyword\">from</span> package <span class=\"keyword\">import</span> b</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a_function</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    module_name = TempClass.__module__       <span class=\"comment\"># 클래스가 정의된 모듈의 이름(패스)을 불러온다. </span></div><div class=\"line\">    class_name = TempClass.__name__           <span class=\"comment\"># 클래스 이름을 string으로 가져온다. </span></div><div class=\"line\">    b_function(module_name, class_name)</div></pre></td></tr></table></figure><h3 id=\"file-B\"><a href=\"#file-B\" class=\"headerlink\" title=\"file B\"></a>file B</h3><pre><code>import importlib          # 모듈을 import 할 수 있는 모듈\n\ndef b_function(module_name, class_name):\n    mod = importlib.import_module(module_name)          # 모듈을 import하고 모듈을 리턴\n    class = getattr(mod, class_name)          # 모듈과 클래스 이름으로 클래스 정보를 가져온다.\n</code></pre><p>정리해보면,<br>우선 file A에서 클래스를 import 합니다. 그리고 특수 기능을 가진 private method인 <strong>module</strong>과 <strong>name</strong>을 이용하여 각각 클래스가 정의된 모듈의 이름과 클래스 이름을 text로 가져옵니다. 두 개의 값을 b_function의 파라미터로 전달한 뒤, file B에서 두 파라미터를 이용하여 importlib 모듈을 통해 import한뒤 클래스 정보를 가져오게 됩니다.</p>","excerpt":"","more":"<p>파이썬에서 모듈을 import 할때, 보통 파일 최상단(but, 메서드 내에서 지역적으로 import 가능)에 정의해서 쓰곤 합니다.<br>그런데 최근에 작업하면서 여러 클래스를 하나의 메서드에서 처리하면 좋겠다는 부분이 생겼지요.<br>그래서 생각한 끝에 클래스 이름만으로 동적으로 import하는 방법이 있지 않을까하는 궁금증이 생겼습니다.</p><blockquote><p>아마도, 파이썬이라면 가능하다. 아마 누군가 똑같은 고민을 했을 것이다</p></blockquote><p>라는 생각이 들어 한번 찾아 보았습니다.</p><p>검색결과, 역시나,,,, 파이썬,,,,<br>동일한 조건의 답을 찾는데 꽤 시간이 걸렸지만 결국에는 딱 맞는 방법을 찾아냈습니다.<br>현재 조건을 바탕으로 동적으로 import 하는 방법은 아래와 같습니다.</p><h3 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h3><blockquote><p>파일 A, B가 있고 c라는 클래스의 이름으로 B에서 import 해야함<br>파일 A에서 B의 함수를 호출함, 이때 파라미터로 c 클래스의 이름을 전달<br>파일 A에는 c 클래스를 import 하고 있음</p></blockquote><h3 id=\"file-A\"><a href=\"#file-A\" class=\"headerlink\" title=\"file A\"></a>file A</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> package.temp <span class=\"keyword\">import</span> TempClass</div><div class=\"line\"><span class=\"keyword\">from</span> package <span class=\"keyword\">import</span> b</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a_function</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    module_name = TempClass.__module__       <span class=\"comment\"># 클래스가 정의된 모듈의 이름(패스)을 불러온다. </span></div><div class=\"line\">    class_name = TempClass.__name__           <span class=\"comment\"># 클래스 이름을 string으로 가져온다. </span></div><div class=\"line\">    b_function(module_name, class_name)</div></pre></td></tr></table></figure><h3 id=\"file-B\"><a href=\"#file-B\" class=\"headerlink\" title=\"file B\"></a>file B</h3><pre><code>import importlib          # 모듈을 import 할 수 있는 모듈\n\ndef b_function(module_name, class_name):\n    mod = importlib.import_module(module_name)          # 모듈을 import하고 모듈을 리턴\n    class = getattr(mod, class_name)          # 모듈과 클래스 이름으로 클래스 정보를 가져온다.\n</code></pre><p>정리해보면,<br>우선 file A에서 클래스를 import 합니다. 그리고 특수 기능을 가진 private method인 <strong>module</strong>과 <strong>name</strong>을 이용하여 각각 클래스가 정의된 모듈의 이름과 클래스 이름을 text로 가져옵니다. 두 개의 값을 b_function의 파라미터로 전달한 뒤, file B에서 두 파라미터를 이용하여 importlib 모듈을 통해 import한뒤 클래스 정보를 가져오게 됩니다.</p>"}],"PostAsset":[{"_id":"source/_posts/django-unit-test-without-testdb/1.jpg","slug":"1.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/2.jpg","slug":"2.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/3.jpg","slug":"3.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/4.jpg","slug":"4.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/5.jpg","slug":"5.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/6.jpg","slug":"6.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-unit-test-without-testdb/7.jpg","slug":"7.jpg","post":"cj1eebv82002vwxt4ycjkr65t","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-01.jpg","slug":"django-setting-01.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-02.jpg","slug":"django-setting-02.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-03.jpg","slug":"django-setting-03.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-04.jpg","slug":"django-setting-04.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-05.jpg","slug":"django-setting-05.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-06.jpg","slug":"django-setting-06.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-07.jpg","slug":"django-setting-07.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-08.jpg","slug":"django-setting-08.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-09.jpg","slug":"django-setting-09.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0},{"_id":"source/_posts/django-setting-for-pycharm-community/django-setting-10.jpg","slug":"django-setting-10.jpg","post":"cj1eebv7z002rwxt4opqnkh04","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj1eebv600006wxt4f3ufr221","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6b000bwxt4b1bi91qv"},{"post_id":"cj1eebv5j0001wxt4ziprhoof","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6e000fwxt4zqcfkrfu"},{"post_id":"cj1eebv630007wxt4bseqol73","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6f000hwxt4pl2cryn4"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6h000lwxt4o95lmosw"},{"post_id":"cj1eebv5x0005wxt4hriykkv0","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6j000owxt4wj6xnrsd"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6m000swxt4ooha57lt"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6o000wwxt43vw1g0fg"},{"post_id":"cj1eebv69000awxt4omukklcy","category_id":"cj1eebv6g000jwxt40uo8ah8y","_id":"cj1eebv6q000zwxt4c1iul09u"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6t0012wxt49nbjeo5l"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6u0014wxt4dmumwje8"},{"post_id":"cj1eebv6b000cwxt4ukuvql2z","category_id":"cj1eebv6g000jwxt40uo8ah8y","_id":"cj1eebv6x0017wxt4widz3yjb"},{"post_id":"cj1eebv6o000xwxt454r5pexb","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv6z0019wxt4m17iyn01"},{"post_id":"cj1eebv6r0010wxt40r1vi2zj","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv71001cwxt4ox3v24z9"},{"post_id":"cj1eebv6e000gwxt4d5tm9rsw","category_id":"cj1eebv6g000jwxt40uo8ah8y","_id":"cj1eebv72001ewxt4nhub9sbx"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv74001gwxt45ntf34kk"},{"post_id":"cj1eebv6v0015wxt4nvj5qcxg","category_id":"cj1eebv5t0003wxt4r8jkccr4","_id":"cj1eebv77001lwxt4bcecfcrp"},{"post_id":"cj1eebv7a001owxt48sg5cuqo","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7g001xwxt4zmjhez2g"},{"post_id":"cj1eebv72001fwxt46t7rv5t3","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7i0021wxt46bjh203j"},{"post_id":"cj1eebv7c001rwxt409rbdlrl","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7l0025wxt4qqh7bs0l"},{"post_id":"cj1eebv7e001uwxt487usakgb","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7m0027wxt47gh04tef"},{"post_id":"cj1eebv74001iwxt47o0835vw","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7o0029wxt428tmmp4j"},{"post_id":"cj1eebv7g001ywxt4195t4rph","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7p002cwxt4r0ybexzi"},{"post_id":"cj1eebv7j0022wxt4866h3l7w","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7s002ewxt42geyesyn"},{"post_id":"cj1eebv78001mwxt458ofss9n","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7t002hwxt40ce1qz8a"},{"post_id":"cj1eebv7l0026wxt4ouitx8xj","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7v002jwxt4h63xlxm9"},{"post_id":"cj1eebv7m0028wxt44799l0fi","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7x002nwxt4r21zgphv"},{"post_id":"cj1eebv7o002bwxt4trut7i4s","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv7z002qwxt4ecdydi62"},{"post_id":"cj1eebv7q002dwxt4un7dkex1","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv81002uwxt4kqgc06jn"},{"post_id":"cj1eebv7s002fwxt4c4ngmjx0","category_id":"cj1eebv76001kwxt4joe3cjrb","_id":"cj1eebv84002xwxt4b7l0c09s"},{"post_id":"cj1eebv7u002iwxt4pqixrulo","category_id":"cj1eebv7x002mwxt49091agmz","_id":"cj1eebv860030wxt4zby8gkt2"}],"PostTag":[{"post_id":"cj1eebv5j0001wxt4ziprhoof","tag_id":"cj1eebv5x0004wxt45iefymm8","_id":"cj1eebv6j000nwxt4kbkqdmh9"},{"post_id":"cj1eebv5j0001wxt4ziprhoof","tag_id":"cj1eebv670009wxt4l724bkdz","_id":"cj1eebv6l000rwxt46ibd118y"},{"post_id":"cj1eebv5j0001wxt4ziprhoof","tag_id":"cj1eebv6d000ewxt4a8kziov7","_id":"cj1eebv6o000vwxt4dn91bln4"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","tag_id":"cj1eebv6h000kwxt4rcxl72bu","_id":"cj1eebv76001jwxt4y61mzfs7"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","tag_id":"cj1eebv6m000twxt43omq0lyp","_id":"cj1eebv79001nwxt4zefpuse0"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","tag_id":"cj1eebv6s0011wxt475lytuig","_id":"cj1eebv7b001qwxt4ccxvp4z3"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","tag_id":"cj1eebv6x0016wxt4j5n3v2yv","_id":"cj1eebv7e001twxt4bouy115e"},{"post_id":"cj1eebv5o0002wxt4xu1oxxga","tag_id":"cj1eebv71001bwxt4xg6c6q6a","_id":"cj1eebv7g001wwxt426ha1b9o"},{"post_id":"cj1eebv5x0005wxt4hriykkv0","tag_id":"cj1eebv74001hwxt4jw2uqrj0","_id":"cj1eebv7i0020wxt4se5g12g1"},{"post_id":"cj1eebv5x0005wxt4hriykkv0","tag_id":"cj1eebv7b001pwxt4qoo37658","_id":"cj1eebv7k0024wxt45mth1vwg"},{"post_id":"cj1eebv600006wxt4f3ufr221","tag_id":"cj1eebv7g001vwxt4d1t4f2dp","_id":"cj1eebv7z002pwxt45t3nbpox"},{"post_id":"cj1eebv600006wxt4f3ufr221","tag_id":"cj1eebv7k0023wxt49hyksylw","_id":"cj1eebv81002swxt43j63ecq8"},{"post_id":"cj1eebv600006wxt4f3ufr221","tag_id":"cj1eebv7o002awxt40l7f6n05","_id":"cj1eebv83002wwxt4iq4m3qvs"},{"post_id":"cj1eebv600006wxt4f3ufr221","tag_id":"cj1eebv7t002gwxt4ioq8okxm","_id":"cj1eebv85002zwxt4du4dxhyd"},{"post_id":"cj1eebv69000awxt4omukklcy","tag_id":"cj1eebv7w002lwxt44zgcf66k","_id":"cj1eebv8e0039wxt45oq5osi2"},{"post_id":"cj1eebv69000awxt4omukklcy","tag_id":"cj1eebv81002twxt4nyp32v3j","_id":"cj1eebv8e003awxt4v3c5ihmx"},{"post_id":"cj1eebv69000awxt4omukklcy","tag_id":"cj1eebv860031wxt4erul0jad","_id":"cj1eebv8e003cwxt4yjfbezrp"},{"post_id":"cj1eebv69000awxt4omukklcy","tag_id":"cj1eebv8a0035wxt4j4fws6mt","_id":"cj1eebv8e003dwxt4dq800mcl"},{"post_id":"cj1eebv69000awxt4omukklcy","tag_id":"cj1eebv8d0037wxt4ht89sn64","_id":"cj1eebv8e003fwxt4o65xl36t"},{"post_id":"cj1eebv6b000cwxt4ukuvql2z","tag_id":"cj1eebv8d0038wxt4pycj4x1z","_id":"cj1eebv8f003hwxt4x9j8g40c"},{"post_id":"cj1eebv6b000cwxt4ukuvql2z","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv8f003iwxt43cah2r8l"},{"post_id":"cj1eebv6b000cwxt4ukuvql2z","tag_id":"cj1eebv8e003ewxt4juqebi6t","_id":"cj1eebv8f003kwxt4ne8y16x1"},{"post_id":"cj1eebv6e000gwxt4d5tm9rsw","tag_id":"cj1eebv8f003gwxt4j8b5vuhs","_id":"cj1eebv8g003nwxt41jlquwwy"},{"post_id":"cj1eebv6e000gwxt4d5tm9rsw","tag_id":"cj1eebv8f003jwxt4svlcoa1g","_id":"cj1eebv8h003owxt4ievfqs5p"},{"post_id":"cj1eebv6e000gwxt4d5tm9rsw","tag_id":"cj1eebv8f003lwxt4hkd5vikj","_id":"cj1eebv8j003qwxt4yusz0din"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8f003mwxt4op85v7i8","_id":"cj1eebv8s003zwxt4czmrp5ak"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8j003pwxt4jsoi5gio","_id":"cj1eebv8s0040wxt4157xkfu7"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8k003rwxt42g6c81hd","_id":"cj1eebv8s0042wxt4kf7jmkll"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8n003swxt4lblmbwgt","_id":"cj1eebv8s0043wxt4g2kjqmzh"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv8t0045wxt4hdqt1vdr"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8q003uwxt4sptp5we7","_id":"cj1eebv8t0046wxt42tbz63yi"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8q003vwxt4x4q8gwwt","_id":"cj1eebv8t0048wxt4zsx5ee9n"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8q003wwxt4xpkr5wtc","_id":"cj1eebv8u0049wxt4utc8zlih"},{"post_id":"cj1eebv6f000iwxt4r7kczegi","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv8u004bwxt4exyeoyyj"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8r003ywxt4wm0widxz","_id":"cj1eebv8y004hwxt4ezr7basb"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8s0041wxt4v3tzi4nz","_id":"cj1eebv8y004iwxt4bx53camp"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv8z004kwxt4fvu9q8xd"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8t0047wxt43lbnrea2","_id":"cj1eebv8z004lwxt46r0dg0dc"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8u004awxt4dqtuc7gb","_id":"cj1eebv90004nwxt4sc9zbvoa"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8v004cwxt4domvhi0r","_id":"cj1eebv90004owxt4qvraqvml"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv90004qwxt4ynavctdw"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8w004ewxt4ibam4pwn","_id":"cj1eebv90004rwxt4xgzwr41v"},{"post_id":"cj1eebv6i000mwxt444ajp9x4","tag_id":"cj1eebv8x004fwxt42sb0y5s2","_id":"cj1eebv90004twxt4z73mby84"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","tag_id":"cj1eebv8x004gwxt4lm5bgoj7","_id":"cj1eebv91004vwxt4wd1hulo7"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv91004wwxt4vkptb5f2"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","tag_id":"cj1eebv8z004mwxt4cjrh992t","_id":"cj1eebv92004ywxt4qhjx35zf"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","tag_id":"cj1eebv90004pwxt4bmatmdg8","_id":"cj1eebv92004zwxt4ps1pgl2s"},{"post_id":"cj1eebv6j000pwxt4wbsjv6pd","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv920051wxt4w18ygkph"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv8s0041wxt4v3tzi4nz","_id":"cj1eebv96005bwxt4dgud40rv"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv97005cwxt4nqkzgj06"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv920050wxt4t5z69yt5","_id":"cj1eebv97005ewxt47g8f7yrt"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv920052wxt4vj8v79u3","_id":"cj1eebv97005fwxt4w42emxhn"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv930053wxt4l2xad06c","_id":"cj1eebv98005hwxt4eerzgp1t"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv930054wxt4s5e100js","_id":"cj1eebv98005iwxt4c46nkdf2"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv930055wxt40s6gv6df","_id":"cj1eebv99005kwxt4zsagi713"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv930056wxt42pbdpfwi","_id":"cj1eebv99005lwxt4u1wupynb"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv9a005nwxt42haoz5ud"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv8w004ewxt4ibam4pwn","_id":"cj1eebv9a005owxt4wvvjrf3x"},{"post_id":"cj1eebv6m000uwxt4bedd6asx","tag_id":"cj1eebv8x004fwxt42sb0y5s2","_id":"cj1eebv9b005qwxt4et4klxcg"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv8s0041wxt4v3tzi4nz","_id":"cj1eebv9f005vwxt4bc9repcu"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv97005dwxt4dkkbw2oe","_id":"cj1eebv9f005wwxt4nib9pljh"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv9f005ywxt41j6f6by3"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv930053wxt4l2xad06c","_id":"cj1eebv9f005zwxt452ylb2dq"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv930055wxt40s6gv6df","_id":"cj1eebv9g0061wxt4i36nmrbe"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv930056wxt42pbdpfwi","_id":"cj1eebv9h0062wxt43mttkvs2"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv9h0064wxt454pz8btf"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv8w004ewxt4ibam4pwn","_id":"cj1eebv9h0065wxt4lddt4pzm"},{"post_id":"cj1eebv6o000xwxt454r5pexb","tag_id":"cj1eebv8x004fwxt42sb0y5s2","_id":"cj1eebv9i0067wxt4egsn8apr"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv8s0041wxt4v3tzi4nz","_id":"cj1eebv9n006ewxt4g0wd1nt0"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv9f005xwxt4fgqac7w1","_id":"cj1eebv9n006fwxt4fe2f8904"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv8e003bwxt44uzd69w0","_id":"cj1eebv9o006hwxt4r6frr78p"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv9h0063wxt42rqftvre","_id":"cj1eebv9o006iwxt4phafj5xl"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv930053wxt4l2xad06c","_id":"cj1eebv9o006kwxt42mgfov4w"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv930055wxt40s6gv6df","_id":"cj1eebv9p006lwxt43dtm9dkl"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv9i0069wxt49fcpwp0t","_id":"cj1eebv9p006nwxt4q7yyfxyu"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv930056wxt42pbdpfwi","_id":"cj1eebv9q006owxt4pa3z79cz"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv8r003xwxt4y3ca17h9","_id":"cj1eebv9q006qwxt45a1s1hpb"},{"post_id":"cj1eebv6t0013wxt4igpi9z1d","tag_id":"cj1eebv8w004ewxt4ibam4pwn","_id":"cj1eebv9r006rwxt4vmh2l6oy"},{"post_id":"cj1eebv6x0018wxt410l95ji8","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebv9r006swxt4229iomkl"},{"post_id":"cj1eebv6x0018wxt410l95ji8","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebv9s006uwxt4t00za6qf"},{"post_id":"cj1eebv6x0018wxt410l95ji8","tag_id":"cj1eebv9o006jwxt4v87i7c4n","_id":"cj1eebv9s006vwxt4795lpe6z"},{"post_id":"cj1eebv70001awxt4v7yw4m2j","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebv9s006xwxt4hvsv5wrb"},{"post_id":"cj1eebv70001awxt4v7yw4m2j","tag_id":"cj1eebv9q006pwxt4u09e6nfw","_id":"cj1eebv9t006ywxt41xkb6shc"},{"post_id":"cj1eebv71001dwxt4yjo5tfg0","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebv9v0071wxt4px8lupsa"},{"post_id":"cj1eebv71001dwxt4yjo5tfg0","tag_id":"cj1eebv9s006wwxt4nfo20wa3","_id":"cj1eebv9v0072wxt42iycutbf"},{"post_id":"cj1eebv71001dwxt4yjo5tfg0","tag_id":"cj1eebv9t006zwxt4y9fivw26","_id":"cj1eebv9v0074wxt4nnrqaig8"},{"post_id":"cj1eebv72001fwxt46t7rv5t3","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebv9w0076wxt4zaatca5y"},{"post_id":"cj1eebv72001fwxt46t7rv5t3","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebv9w0077wxt4wml3d7y1"},{"post_id":"cj1eebv74001iwxt47o0835vw","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebv9y007awxt4mcam538w"},{"post_id":"cj1eebv74001iwxt47o0835vw","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebv9y007bwxt4jkjqn1ez"},{"post_id":"cj1eebv78001mwxt458ofss9n","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebv9z007ewxt4y6j4gan4"},{"post_id":"cj1eebv78001mwxt458ofss9n","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebv9z007fwxt4o5b1kr2q"},{"post_id":"cj1eebv7a001owxt48sg5cuqo","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebva1007iwxt47elqy77s"},{"post_id":"cj1eebv7a001owxt48sg5cuqo","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebva1007jwxt467n6alho"},{"post_id":"cj1eebv7c001rwxt409rbdlrl","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebva2007mwxt434o7cyru"},{"post_id":"cj1eebv7c001rwxt409rbdlrl","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebva3007nwxt4k78itauq"},{"post_id":"cj1eebv7e001uwxt487usakgb","tag_id":"cj1eebv9t0070wxt4qiltrnn6","_id":"cj1eebva6007qwxt4thnbys00"},{"post_id":"cj1eebv7e001uwxt487usakgb","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebva7007rwxt4koheq7wa"},{"post_id":"cj1eebv7g001ywxt4195t4rph","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebvaa007vwxt4yi2ixfqe"},{"post_id":"cj1eebv7g001ywxt4195t4rph","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvaa007wwxt4qdygwu72"},{"post_id":"cj1eebv7g001ywxt4195t4rph","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvab007ywxt44n9h0osy"},{"post_id":"cj1eebv7j0022wxt4866h3l7w","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebvad0081wxt4b7gsn0tp"},{"post_id":"cj1eebv7j0022wxt4866h3l7w","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvad0082wxt421o61ikn"},{"post_id":"cj1eebv7j0022wxt4866h3l7w","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvae0084wxt4tujdhzyf"},{"post_id":"cj1eebv7l0026wxt4ouitx8xj","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebvag0087wxt43v52hcw5"},{"post_id":"cj1eebv7l0026wxt4ouitx8xj","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvah0088wxt4av6qodz6"},{"post_id":"cj1eebv7l0026wxt4ouitx8xj","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvai008awxt4yd1ir1hu"},{"post_id":"cj1eebv7m0028wxt44799l0fi","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebval008dwxt4eexdewem"},{"post_id":"cj1eebv7m0028wxt44799l0fi","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebval008ewxt494wplmou"},{"post_id":"cj1eebv7m0028wxt44799l0fi","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvam008gwxt42zoqr4tn"},{"post_id":"cj1eebv7o002bwxt4trut7i4s","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebvao008jwxt4wnaasenp"},{"post_id":"cj1eebv7o002bwxt4trut7i4s","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvao008kwxt47w4ho4xq"},{"post_id":"cj1eebv7o002bwxt4trut7i4s","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvap008mwxt412ksgv3j"},{"post_id":"cj1eebv7q002dwxt4un7dkex1","tag_id":"cj1eebva5007pwxt4f7b24s5x","_id":"cj1eebvaq008pwxt4b4cspak5"},{"post_id":"cj1eebv7q002dwxt4un7dkex1","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvaq008qwxt4zro3lbjd"},{"post_id":"cj1eebv7q002dwxt4un7dkex1","tag_id":"cj1eebv9v0073wxt4ml3uv3mx","_id":"cj1eebvar008swxt4swby1nvp"},{"post_id":"cj1eebv7s002fwxt4c4ngmjx0","tag_id":"cj1eebvap008owxt4vo4y0lzq","_id":"cj1eebvas008vwxt431cq91gf"},{"post_id":"cj1eebv7s002fwxt4c4ngmjx0","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvas008wwxt4o0orhem6"},{"post_id":"cj1eebv7s002fwxt4c4ngmjx0","tag_id":"cj1eebvar008twxt4l3h5hu2a","_id":"cj1eebvas008ywxt4u8jypvsg"},{"post_id":"cj1eebv7u002iwxt4pqixrulo","tag_id":"cj1eebvar008uwxt4vg52rle3","_id":"cj1eebvau0090wxt4hmw3zfl3"},{"post_id":"cj1eebv7u002iwxt4pqixrulo","tag_id":"cj1eebvas008xwxt4hkcioioe","_id":"cj1eebvau0091wxt4ru4xc344"},{"post_id":"cj1eebv7v002kwxt47vapab2h","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvb00097wxt44a82uxbd"},{"post_id":"cj1eebv7v002kwxt47vapab2h","tag_id":"cj1eebvau0092wxt47g8c0i7y","_id":"cj1eebvb00098wxt48ljlrgkm"},{"post_id":"cj1eebv7v002kwxt47vapab2h","tag_id":"cj1eebvaw0093wxt40hgraicu","_id":"cj1eebvb1009awxt4u9kxiw40"},{"post_id":"cj1eebv7v002kwxt47vapab2h","tag_id":"cj1eebvax0094wxt4sksp7fl8","_id":"cj1eebvb1009bwxt4hwqo9iot"},{"post_id":"cj1eebv7v002kwxt47vapab2h","tag_id":"cj1eebvaz0095wxt4bo16wfsz","_id":"cj1eebvb2009dwxt4ud8j6po0"},{"post_id":"cj1eebv7x002owxt4fzlcl9xe","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebvb3009fwxt4z8ebqau8"},{"post_id":"cj1eebv7x002owxt4fzlcl9xe","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvb3009gwxt4f74a4fgd"},{"post_id":"cj1eebv7x002owxt4fzlcl9xe","tag_id":"cj1eebvb1009cwxt43g24cyg2","_id":"cj1eebvb3009iwxt48hssxf09"},{"post_id":"cj1eebv7z002rwxt4opqnkh04","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvb8009lwxt42ar4aq4p"},{"post_id":"cj1eebv7z002rwxt4opqnkh04","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebvb8009mwxt4o4m9gwb8"},{"post_id":"cj1eebv7z002rwxt4opqnkh04","tag_id":"cj1eebvb4009jwxt48q9sngww","_id":"cj1eebvb9009owxt4g536gaij"},{"post_id":"cj1eebv82002vwxt4ycjkr65t","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebvbb009rwxt4kkprsrtx"},{"post_id":"cj1eebv82002vwxt4ycjkr65t","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvbb009swxt4vqcn2iei"},{"post_id":"cj1eebv82002vwxt4ycjkr65t","tag_id":"cj1eebvb9009pwxt4vz8ospuk","_id":"cj1eebvbc009uwxt4q266ymmj"},{"post_id":"cj1eebv85002ywxt4ood0o2o4","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebvbd009xwxt4gk2xnhpb"},{"post_id":"cj1eebv85002ywxt4ood0o2o4","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvbe009ywxt4lqyqc3mu"},{"post_id":"cj1eebv85002ywxt4ood0o2o4","tag_id":"cj1eebvbc009vwxt4hyobdixt","_id":"cj1eebvbf00a0wxt4ml7g44yr"},{"post_id":"cj1eebv870032wxt4d1usdfqb","tag_id":"cj1eebv9n006gwxt40uxrc2b6","_id":"cj1eebvbh00a4wxt4mia2qhri"},{"post_id":"cj1eebv870032wxt4d1usdfqb","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvbi00a5wxt403g68ba6"},{"post_id":"cj1eebv870032wxt4d1usdfqb","tag_id":"cj1eebvbf00a1wxt4hg119i9z","_id":"cj1eebvbi00a7wxt4jxo7kpkc"},{"post_id":"cj1eebv870032wxt4d1usdfqb","tag_id":"cj1eebvbf00a2wxt4e8jv9jqj","_id":"cj1eebvbi00a8wxt41lcz0dcb"},{"post_id":"cj1eebv880033wxt4ep6rbvxx","tag_id":"cj1eebva7007swxt4ryv08aom","_id":"cj1eebvbj00aawxt40k7oxu4z"},{"post_id":"cj1eebv880033wxt4ep6rbvxx","tag_id":"cj1eebvbi00a6wxt48kla145j","_id":"cj1eebvbj00abwxt4t6nme8ij"},{"post_id":"cj1eebv890034wxt4ubvqjqva","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvbk00aewxt4s4qrtcbe"},{"post_id":"cj1eebv890034wxt4ubvqjqva","tag_id":"cj1eebvbj00acwxt4zn2ufko5","_id":"cj1eebvbk00afwxt42ddx98rl"},{"post_id":"cj1eebv8b0036wxt4562tqq42","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvbl00ahwxt43i7iwllp"},{"post_id":"cj1eebv8b0036wxt4562tqq42","tag_id":"cj1eebvbk00agwxt4um1s55ch","_id":"cj1eebvbl00aiwxt42mgdwhde"},{"post_id":"cj1eebvcq00ajwxt4kjhaklqf","tag_id":"cj1eebv9l006dwxt48yqwissx","_id":"cj1eebvdc00aowxt45d8kq2xl"},{"post_id":"cj1eebvcq00ajwxt4kjhaklqf","tag_id":"cj1eebvd500amwxt4wzl82uiy","_id":"cj1eebvdd00apwxt45la19fnv"}],"Tag":[{"name":"이어령","_id":"cj1eebv5x0004wxt45iefymm8"},{"name":"젊음","_id":"cj1eebv670009wxt4l724bkdz"},{"name":"젊음의 탄생","_id":"cj1eebv6d000ewxt4a8kziov7"},{"name":"등산","_id":"cj1eebv6h000kwxt4rcxl72bu"},{"name":"비로봉","_id":"cj1eebv6m000twxt43omq0lyp"},{"name":"산","_id":"cj1eebv6s0011wxt475lytuig"},{"name":"원주","_id":"cj1eebv6x0016wxt4j5n3v2yv"},{"name":"치악산","_id":"cj1eebv71001bwxt4xg6c6q6a"},{"name":"걸음","_id":"cj1eebv74001hwxt4jw2uqrj0"},{"name":"도보","_id":"cj1eebv7b001pwxt4qoo37658"},{"name":"관계","_id":"cj1eebv7g001vwxt4d1t4f2dp"},{"name":"대화","_id":"cj1eebv7k0023wxt49hyksylw"},{"name":"문자","_id":"cj1eebv7o002awxt40l7f6n05"},{"name":"의사소통","_id":"cj1eebv7t002gwxt4ioq8okxm"},{"name":"기억","_id":"cj1eebv7w002lwxt44zgcf66k"},{"name":"도보여행","_id":"cj1eebv81002twxt4nyp32v3j"},{"name":"여행","_id":"cj1eebv860031wxt4erul0jad"},{"name":"추억","_id":"cj1eebv8a0035wxt4j4fws6mt"},{"name":"형상화","_id":"cj1eebv8d0037wxt4ht89sn64"},{"name":"architecture","_id":"cj1eebv8d0038wxt4pycj4x1z"},{"name":"건축","_id":"cj1eebv8e003bwxt44uzd69w0"},{"name":"설계","_id":"cj1eebv8e003ewxt4juqebi6t"},{"name":"박원순","_id":"cj1eebv8f003gwxt4j8b5vuhs"},{"name":"사회적 기업","_id":"cj1eebv8f003jwxt4svlcoa1g"},{"name":"올리버","_id":"cj1eebv8f003lwxt4hkd5vikj"},{"name":"arcitecture","_id":"cj1eebv8f003mwxt4op85v7i8"},{"name":"programmer","_id":"cj1eebv8j003pwxt4jsoi5gio"},{"name":"개발","_id":"cj1eebv8k003rwxt42g6c81hd"},{"name":"건설","_id":"cj1eebv8n003swxt4lblmbwgt"},{"name":"대학","_id":"cj1eebv8q003uwxt4sptp5we7"},{"name":"미래","_id":"cj1eebv8q003vwxt4x4q8gwwt"},{"name":"직업","_id":"cj1eebv8q003wwxt4xpkr5wtc"},{"name":"프로그래머","_id":"cj1eebv8r003xwxt4y3ca17h9"},{"name":"HTML","_id":"cj1eebv8r003ywxt4wm0widxz"},{"name":"IT","_id":"cj1eebv8s0041wxt4v3tzi4nz"},{"name":"블로그","_id":"cj1eebv8t0047wxt43lbnrea2"},{"name":"워드프레스","_id":"cj1eebv8u004awxt4dqtuc7gb"},{"name":"티스토리","_id":"cj1eebv8v004cwxt4domvhi0r"},{"name":"프로그래밍","_id":"cj1eebv8w004ewxt4ibam4pwn"},{"name":"학원","_id":"cj1eebv8x004fwxt42sb0y5s2"},{"name":"개발자","_id":"cj1eebv8x004gwxt4lm5bgoj7"},{"name":"사업","_id":"cj1eebv8z004mwxt4cjrh992t"},{"name":"사회적기업","_id":"cj1eebv90004pwxt4bmatmdg8"},{"name":"계좌제","_id":"cj1eebv920050wxt4t5z69yt5"},{"name":"내일배움카드제","_id":"cj1eebv920052wxt4vj8v79u3"},{"name":"모바일","_id":"cj1eebv930053wxt4l2xad06c"},{"name":"아이폰","_id":"cj1eebv930054wxt4s5e100js"},{"name":"안드로이드","_id":"cj1eebv930055wxt40s6gv6df"},{"name":"자바","_id":"cj1eebv930056wxt42pbdpfwi"},{"name":"강의","_id":"cj1eebv97005dwxt4dkkbw2oe"},{"name":"T아카데미","_id":"cj1eebv9f005xwxt4fgqac7w1"},{"name":"면접","_id":"cj1eebv9h0063wxt42rqftvre"},{"name":"에코노베이션","_id":"cj1eebv9i0069wxt49fcpwp0t"},{"name":"python","_id":"cj1eebv9l006dwxt48yqwissx"},{"name":"django","_id":"cj1eebv9n006gwxt40uxrc2b6"},{"name":"transaction","_id":"cj1eebv9o006jwxt4v87i7c4n"},{"name":"deep copy","_id":"cj1eebv9q006pwxt4u09e6nfw"},{"name":"conditional ternary operator","_id":"cj1eebv9s006wwxt4nfo20wa3"},{"name":"3항 연산자","_id":"cj1eebv9t006zwxt4y9fivw26"},{"name":"scala","_id":"cj1eebv9t0070wxt4qiltrnn6"},{"name":"coursera","_id":"cj1eebv9v0073wxt4ml3uv3mx"},{"name":"angularjs","_id":"cj1eebva5007pwxt4f7b24s5x"},{"name":"javascript","_id":"cj1eebva7007swxt4ryv08aom"},{"name":"ionic","_id":"cj1eebvap008owxt4vo4y0lzq"},{"name":"모바일앱","_id":"cj1eebvar008twxt4l3h5hu2a"},{"name":"SublimeText","_id":"cj1eebvar008uwxt4vg52rle3"},{"name":"tool","_id":"cj1eebvas008xwxt4hkcioioe"},{"name":"ES6","_id":"cj1eebvau0092wxt47g8c0i7y"},{"name":"var","_id":"cj1eebvaw0093wxt40hgraicu"},{"name":"const","_id":"cj1eebvax0094wxt4sksp7fl8"},{"name":"let","_id":"cj1eebvaz0095wxt4bo16wfsz"},{"name":"mixin","_id":"cj1eebvb1009cwxt43g24cyg2"},{"name":"pycharm","_id":"cj1eebvb4009jwxt48q9sngww"},{"name":"unit test","_id":"cj1eebvb9009pwxt4vz8ospuk"},{"name":"templatetags","_id":"cj1eebvbc009vwxt4hyobdixt"},{"name":"pyenv","_id":"cj1eebvbf00a1wxt4hg119i9z"},{"name":"virtualenv","_id":"cj1eebvbf00a2wxt4e8jv9jqj"},{"name":"closure","_id":"cj1eebvbi00a6wxt48kla145j"},{"name":"set","_id":"cj1eebvbj00acwxt4zn2ufko5"},{"name":"co-routine","_id":"cj1eebvbk00agwxt4um1s55ch"},{"name":"module","_id":"cj1eebvd500amwxt4wzl82uiy"}]}}